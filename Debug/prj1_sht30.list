
prj1_sht30.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08008ea8  08008ea8  00018ea8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092e4  080092e4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080092e4  080092e4  000192e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092ec  080092ec  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092ec  080092ec  000192ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092f0  080092f0  000192f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080092f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  200001e0  080094d4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  080094d4  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000179fe  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eca  00000000  00000000  00037c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  0003aad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001340  00000000  00000000  0003bf50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028e15  00000000  00000000  0003d290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018902  00000000  00000000  000660a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f785a  00000000  00000000  0007e9a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00176201  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006708  00000000  00000000  00176254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e90 	.word	0x08008e90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08008e90 	.word	0x08008e90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb2:	f000 ff62 	bl	8001d7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb6:	f000 f83b 	bl	8000f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eba:	f000 f9b1 	bl	8001220 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ebe:	f000 f989 	bl	80011d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ec2:	f000 f957 	bl	8001174 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ec6:	f000 f885 	bl	8000fd4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000eca:	f000 f8c3 	bl	8001054 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000ece:	f000 f901 	bl	80010d4 <MX_TIM2_Init>
//  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  bool pressed = false;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	73fb      	strb	r3, [r7, #15]
  int16_t probe_ret;
  uint16_t status_reg;
  HAL_TIM_Base_Start_IT(&htim2);
 8000ed6:	4813      	ldr	r0, [pc, #76]	; (8000f24 <main+0x78>)
 8000ed8:	f003 fdbc 	bl	8004a54 <HAL_TIM_Base_Start_IT>
  while (1)
  {
	  pressed = button_press_action();
 8000edc:	f000 f9fa 	bl	80012d4 <button_press_action>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	73fb      	strb	r3, [r7, #15]
	  if (pressed){
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0f8      	beq.n	8000edc <main+0x30>
		 HAL_Delay(100);
 8000eea:	2064      	movs	r0, #100	; 0x64
 8000eec:	f000 ffba 	bl	8001e64 <HAL_Delay>
		 //probe_ret = sht3x_get_status(&hi2c1, SHT3X_I2C_ADDR_DFLT, &status_reg );
//		 printf("probe_ret %04X, %04X\n", probe_ret, status_reg);
		 probe_ret = sht3x_measure(&hi2c1, SHT3X_I2C_ADDR_DFLT << 1);
 8000ef0:	2188      	movs	r1, #136	; 0x88
 8000ef2:	480d      	ldr	r0, [pc, #52]	; (8000f28 <main+0x7c>)
 8000ef4:	f000 feb8 	bl	8001c68 <sht3x_measure>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	81bb      	strh	r3, [r7, #12]
		 HAL_Delay(100);
 8000efc:	2064      	movs	r0, #100	; 0x64
 8000efe:	f000 ffb1 	bl	8001e64 <HAL_Delay>
		 int32_t temp, umidade;
		 probe_ret = sht3x_read(&hi2c1, SHT3X_I2C_ADDR_DFLT << 1, &temp, &umidade );
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	f107 0208 	add.w	r2, r7, #8
 8000f08:	2188      	movs	r1, #136	; 0x88
 8000f0a:	4807      	ldr	r0, [pc, #28]	; (8000f28 <main+0x7c>)
 8000f0c:	f000 fec0 	bl	8001c90 <sht3x_read>
 8000f10:	4603      	mov	r3, r0
 8000f12:	81bb      	strh	r3, [r7, #12]
	     printf("probe_ret %04X, %d, %d\n", probe_ret, temp, umidade);
 8000f14:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000f18:	68ba      	ldr	r2, [r7, #8]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4803      	ldr	r0, [pc, #12]	; (8000f2c <main+0x80>)
 8000f1e:	f005 fef3 	bl	8006d08 <iprintf>
	  pressed = button_press_action();
 8000f22:	e7db      	b.n	8000edc <main+0x30>
 8000f24:	200002a4 	.word	0x200002a4
 8000f28:	200001fc 	.word	0x200001fc
 8000f2c:	08008ea8 	.word	0x08008ea8

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b096      	sub	sp, #88	; 0x58
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	2244      	movs	r2, #68	; 0x44
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f005 fa70 	bl	8006424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	463b      	mov	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f52:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f56:	f002 fa13 	bl	8003380 <HAL_PWREx_ControlVoltageScaling>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f60:	f000 f9dc 	bl	800131c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f64:	2302      	movs	r3, #2
 8000f66:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f6c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f6e:	2310      	movs	r3, #16
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f72:	2302      	movs	r3, #2
 8000f74:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f76:	2302      	movs	r3, #2
 8000f78:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000f7e:	2308      	movs	r3, #8
 8000f80:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f82:	2307      	movs	r3, #7
 8000f84:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f86:	2302      	movs	r3, #2
 8000f88:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8000f8a:	2308      	movs	r3, #8
 8000f8c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 fa4a 	bl	800342c <HAL_RCC_OscConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000f9e:	f000 f9bd 	bl	800131c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa2:	230f      	movs	r3, #15
 8000fa4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f002 fe12 	bl	8003be4 <HAL_RCC_ClockConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fc6:	f000 f9a9 	bl	800131c <Error_Handler>
  }
}
 8000fca:	bf00      	nop
 8000fcc:	3758      	adds	r7, #88	; 0x58
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <MX_I2C1_Init+0x74>)
 8000fda:	4a1c      	ldr	r2, [pc, #112]	; (800104c <MX_I2C1_Init+0x78>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010131D;
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <MX_I2C1_Init+0x74>)
 8000fe0:	4a1b      	ldr	r2, [pc, #108]	; (8001050 <MX_I2C1_Init+0x7c>)
 8000fe2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	; (8001048 <MX_I2C1_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <MX_I2C1_Init+0x74>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <MX_I2C1_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_I2C1_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <MX_I2C1_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_I2C1_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_I2C1_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800100e:	480e      	ldr	r0, [pc, #56]	; (8001048 <MX_I2C1_Init+0x74>)
 8001010:	f001 fc1e 	bl	8002850 <HAL_I2C_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800101a:	f000 f97f 	bl	800131c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800101e:	2100      	movs	r1, #0
 8001020:	4809      	ldr	r0, [pc, #36]	; (8001048 <MX_I2C1_Init+0x74>)
 8001022:	f002 f907 	bl	8003234 <HAL_I2CEx_ConfigAnalogFilter>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800102c:	f000 f976 	bl	800131c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 2) != HAL_OK)
 8001030:	2102      	movs	r1, #2
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_I2C1_Init+0x74>)
 8001034:	f002 f949 	bl	80032ca <HAL_I2CEx_ConfigDigitalFilter>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800103e:	f000 f96d 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200001fc 	.word	0x200001fc
 800104c:	40005400 	.word	0x40005400
 8001050:	2010131d 	.word	0x2010131d

08001054 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001058:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <MX_I2C2_Init+0x74>)
 800105a:	4a1c      	ldr	r2, [pc, #112]	; (80010cc <MX_I2C2_Init+0x78>)
 800105c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800105e:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <MX_I2C2_Init+0x74>)
 8001060:	4a1b      	ldr	r2, [pc, #108]	; (80010d0 <MX_I2C2_Init+0x7c>)
 8001062:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <MX_I2C2_Init+0x74>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_I2C2_Init+0x74>)
 800106c:	2201      	movs	r2, #1
 800106e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <MX_I2C2_Init+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_I2C2_Init+0x74>)
 8001078:	2200      	movs	r2, #0
 800107a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_I2C2_Init+0x74>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_I2C2_Init+0x74>)
 8001084:	2200      	movs	r2, #0
 8001086:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_I2C2_Init+0x74>)
 800108a:	2200      	movs	r2, #0
 800108c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800108e:	480e      	ldr	r0, [pc, #56]	; (80010c8 <MX_I2C2_Init+0x74>)
 8001090:	f001 fbde 	bl	8002850 <HAL_I2C_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800109a:	f000 f93f 	bl	800131c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800109e:	2100      	movs	r1, #0
 80010a0:	4809      	ldr	r0, [pc, #36]	; (80010c8 <MX_I2C2_Init+0x74>)
 80010a2:	f002 f8c7 	bl	8003234 <HAL_I2CEx_ConfigAnalogFilter>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80010ac:	f000 f936 	bl	800131c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80010b0:	2100      	movs	r1, #0
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_I2C2_Init+0x74>)
 80010b4:	f002 f909 	bl	80032ca <HAL_I2CEx_ConfigDigitalFilter>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80010be:	f000 f92d 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000250 	.word	0x20000250
 80010cc:	40005800 	.word	0x40005800
 80010d0:	00303d5b 	.word	0x00303d5b

080010d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010da:	f107 0310 	add.w	r3, r7, #16
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <MX_TIM2_Init+0x9c>)
 80010f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80010fa:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <MX_TIM2_Init+0x9c>)
 80010fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001100:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001102:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <MX_TIM2_Init+0x9c>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 8001108:	4b19      	ldr	r3, [pc, #100]	; (8001170 <MX_TIM2_Init+0x9c>)
 800110a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800110e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <MX_TIM2_Init+0x9c>)
 8001112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001116:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <MX_TIM2_Init+0x9c>)
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800111e:	4814      	ldr	r0, [pc, #80]	; (8001170 <MX_TIM2_Init+0x9c>)
 8001120:	f003 fc40 	bl	80049a4 <HAL_TIM_Base_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800112a:	f000 f8f7 	bl	800131c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800112e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001132:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	4619      	mov	r1, r3
 800113a:	480d      	ldr	r0, [pc, #52]	; (8001170 <MX_TIM2_Init+0x9c>)
 800113c:	f003 fe19 	bl	8004d72 <HAL_TIM_ConfigClockSource>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001146:	f000 f8e9 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	4619      	mov	r1, r3
 8001156:	4806      	ldr	r0, [pc, #24]	; (8001170 <MX_TIM2_Init+0x9c>)
 8001158:	f004 f830 	bl	80051bc <HAL_TIMEx_MasterConfigSynchronization>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001162:	f000 f8db 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	3720      	adds	r7, #32
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200002a4 	.word	0x200002a4

08001174 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <MX_USART2_UART_Init+0x58>)
 800117a:	4a15      	ldr	r2, [pc, #84]	; (80011d0 <MX_USART2_UART_Init+0x5c>)
 800117c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800117e:	4b13      	ldr	r3, [pc, #76]	; (80011cc <MX_USART2_UART_Init+0x58>)
 8001180:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001184:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_USART2_UART_Init+0x58>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <MX_USART2_UART_Init+0x58>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_USART2_UART_Init+0x58>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_USART2_UART_Init+0x58>)
 800119a:	220c      	movs	r2, #12
 800119c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <MX_USART2_UART_Init+0x58>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_USART2_UART_Init+0x58>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011aa:	4b08      	ldr	r3, [pc, #32]	; (80011cc <MX_USART2_UART_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_USART2_UART_Init+0x58>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <MX_USART2_UART_Init+0x58>)
 80011b8:	f004 f8a6 	bl	8005308 <HAL_UART_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011c2:	f000 f8ab 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200002f0 	.word	0x200002f0
 80011d0:	40004400 	.word	0x40004400

080011d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <MX_DMA_Init+0x48>)
 80011dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011de:	4a0f      	ldr	r2, [pc, #60]	; (800121c <MX_DMA_Init+0x48>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6493      	str	r3, [r2, #72]	; 0x48
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <MX_DMA_Init+0x48>)
 80011e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	2010      	movs	r0, #16
 80011f8:	f000 ff33 	bl	8002062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80011fc:	2010      	movs	r0, #16
 80011fe:	f000 ff4c 	bl	800209a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	2011      	movs	r0, #17
 8001208:	f000 ff2b 	bl	8002062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800120c:	2011      	movs	r0, #17
 800120e:	f000 ff44 	bl	800209a <HAL_NVIC_EnableIRQ>

}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000

08001220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001236:	4b25      	ldr	r3, [pc, #148]	; (80012cc <MX_GPIO_Init+0xac>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	4a24      	ldr	r2, [pc, #144]	; (80012cc <MX_GPIO_Init+0xac>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001242:	4b22      	ldr	r3, [pc, #136]	; (80012cc <MX_GPIO_Init+0xac>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <MX_GPIO_Init+0xac>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4a1e      	ldr	r2, [pc, #120]	; (80012cc <MX_GPIO_Init+0xac>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <MX_GPIO_Init+0xac>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <MX_GPIO_Init+0xac>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	4a18      	ldr	r2, [pc, #96]	; (80012cc <MX_GPIO_Init+0xac>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <MX_GPIO_Init+0xac>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2120      	movs	r1, #32
 8001282:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001286:	f001 facb 	bl	8002820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800128a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800128e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4619      	mov	r1, r3
 800129e:	480c      	ldr	r0, [pc, #48]	; (80012d0 <MX_GPIO_Init+0xb0>)
 80012a0:	f001 f8fc 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 80012a4:	2320      	movs	r3, #32
 80012a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	4619      	mov	r1, r3
 80012ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012be:	f001 f8ed 	bl	800249c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012c2:	bf00      	nop
 80012c4:	3720      	adds	r7, #32
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000
 80012d0:	48000800 	.word	0x48000800

080012d4 <button_press_action>:

/* USER CODE BEGIN 4 */
bool button_press_action(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
	bool press = false;
 80012da:	2300      	movs	r3, #0
 80012dc:	71fb      	strb	r3, [r7, #7]

	  if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port,USER_BUTTON_Pin) == GPIO_PIN_SET){
 80012de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e2:	4808      	ldr	r0, [pc, #32]	; (8001304 <button_press_action+0x30>)
 80012e4:	f001 fa84 	bl	80027f0 <HAL_GPIO_ReadPin>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d102      	bne.n	80012f4 <button_press_action+0x20>
	     //HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
	     press = false;
 80012ee:	2300      	movs	r3, #0
 80012f0:	71fb      	strb	r3, [r7, #7]
 80012f2:	e001      	b.n	80012f8 <button_press_action+0x24>
	  }
	  else{
		 //HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
		 press = true;
 80012f4:	2301      	movs	r3, #1
 80012f6:	71fb      	strb	r3, [r7, #7]
	  }

	  return press;
 80012f8:	79fb      	ldrb	r3, [r7, #7]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	48000800 	.word	0x48000800

08001308 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
   // HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001320:	b672      	cpsid	i
}
 8001322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001324:	e7fe      	b.n	8001324 <Error_Handler+0x8>
	...

08001328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_MspInit+0x50>)
 8001330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001332:	4a11      	ldr	r2, [pc, #68]	; (8001378 <HAL_MspInit+0x50>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6613      	str	r3, [r2, #96]	; 0x60
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_MspInit+0x50>)
 800133c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <HAL_MspInit+0x50>)
 8001348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134a:	4a0b      	ldr	r2, [pc, #44]	; (8001378 <HAL_MspInit+0x50>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001350:	6593      	str	r3, [r2, #88]	; 0x58
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_MspInit+0x50>)
 8001354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	2005      	movs	r0, #5
 8001364:	f000 fe7d 	bl	8002062 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001368:	2005      	movs	r0, #5
 800136a:	f000 fe96 	bl	800209a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40021000 	.word	0x40021000

0800137c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b0ae      	sub	sp, #184	; 0xb8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	2288      	movs	r2, #136	; 0x88
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f005 f841 	bl	8006424 <memset>
  if(hi2c->Instance==I2C1)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a48      	ldr	r2, [pc, #288]	; (80014c8 <HAL_I2C_MspInit+0x14c>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d148      	bne.n	800143e <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013ac:	2340      	movs	r3, #64	; 0x40
 80013ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 fe37 	bl	800402c <HAL_RCCEx_PeriphCLKConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80013c4:	f7ff ffaa 	bl	800131c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c8:	4b40      	ldr	r3, [pc, #256]	; (80014cc <HAL_I2C_MspInit+0x150>)
 80013ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013cc:	4a3f      	ldr	r2, [pc, #252]	; (80014cc <HAL_I2C_MspInit+0x150>)
 80013ce:	f043 0302 	orr.w	r3, r3, #2
 80013d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d4:	4b3d      	ldr	r3, [pc, #244]	; (80014cc <HAL_I2C_MspInit+0x150>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	61bb      	str	r3, [r7, #24]
 80013de:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e8:	2312      	movs	r3, #18
 80013ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013fa:	2304      	movs	r3, #4
 80013fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001400:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001404:	4619      	mov	r1, r3
 8001406:	4832      	ldr	r0, [pc, #200]	; (80014d0 <HAL_I2C_MspInit+0x154>)
 8001408:	f001 f848 	bl	800249c <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 800140c:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <HAL_I2C_MspInit+0x158>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	4a30      	ldr	r2, [pc, #192]	; (80014d4 <HAL_I2C_MspInit+0x158>)
 8001412:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001416:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8001418:	4b2e      	ldr	r3, [pc, #184]	; (80014d4 <HAL_I2C_MspInit+0x158>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	4a2d      	ldr	r2, [pc, #180]	; (80014d4 <HAL_I2C_MspInit+0x158>)
 800141e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001422:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001424:	4b29      	ldr	r3, [pc, #164]	; (80014cc <HAL_I2C_MspInit+0x150>)
 8001426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001428:	4a28      	ldr	r2, [pc, #160]	; (80014cc <HAL_I2C_MspInit+0x150>)
 800142a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800142e:	6593      	str	r3, [r2, #88]	; 0x58
 8001430:	4b26      	ldr	r3, [pc, #152]	; (80014cc <HAL_I2C_MspInit+0x150>)
 8001432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800143c:	e040      	b.n	80014c0 <HAL_I2C_MspInit+0x144>
  else if(hi2c->Instance==I2C2)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a25      	ldr	r2, [pc, #148]	; (80014d8 <HAL_I2C_MspInit+0x15c>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d13b      	bne.n	80014c0 <HAL_I2C_MspInit+0x144>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800144c:	2300      	movs	r3, #0
 800144e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	4618      	mov	r0, r3
 8001456:	f002 fde9 	bl	800402c <HAL_RCCEx_PeriphCLKConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_I2C_MspInit+0xe8>
      Error_Handler();
 8001460:	f7ff ff5c 	bl	800131c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001464:	4b19      	ldr	r3, [pc, #100]	; (80014cc <HAL_I2C_MspInit+0x150>)
 8001466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001468:	4a18      	ldr	r2, [pc, #96]	; (80014cc <HAL_I2C_MspInit+0x150>)
 800146a:	f043 0302 	orr.w	r3, r3, #2
 800146e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001470:	4b16      	ldr	r3, [pc, #88]	; (80014cc <HAL_I2C_MspInit+0x150>)
 8001472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800147c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001480:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001484:	2312      	movs	r3, #18
 8001486:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001496:	2304      	movs	r3, #4
 8001498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014a0:	4619      	mov	r1, r3
 80014a2:	480b      	ldr	r0, [pc, #44]	; (80014d0 <HAL_I2C_MspInit+0x154>)
 80014a4:	f000 fffa 	bl	800249c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <HAL_I2C_MspInit+0x150>)
 80014aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ac:	4a07      	ldr	r2, [pc, #28]	; (80014cc <HAL_I2C_MspInit+0x150>)
 80014ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014b2:	6593      	str	r3, [r2, #88]	; 0x58
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <HAL_I2C_MspInit+0x150>)
 80014b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
}
 80014c0:	bf00      	nop
 80014c2:	37b8      	adds	r7, #184	; 0xb8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40005400 	.word	0x40005400
 80014cc:	40021000 	.word	0x40021000
 80014d0:	48000400 	.word	0x48000400
 80014d4:	40010000 	.word	0x40010000
 80014d8:	40005800 	.word	0x40005800

080014dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014ec:	d113      	bne.n	8001516 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <HAL_TIM_Base_MspInit+0x44>)
 80014f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f2:	4a0b      	ldr	r2, [pc, #44]	; (8001520 <HAL_TIM_Base_MspInit+0x44>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6593      	str	r3, [r2, #88]	; 0x58
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_TIM_Base_MspInit+0x44>)
 80014fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	201c      	movs	r0, #28
 800150c:	f000 fda9 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001510:	201c      	movs	r0, #28
 8001512:	f000 fdc2 	bl	800209a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000

08001524 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b0ac      	sub	sp, #176	; 0xb0
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	2288      	movs	r2, #136	; 0x88
 8001542:	2100      	movs	r1, #0
 8001544:	4618      	mov	r0, r3
 8001546:	f004 ff6d 	bl	8006424 <memset>
  if(huart->Instance==USART2)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a4f      	ldr	r2, [pc, #316]	; (800168c <HAL_UART_MspInit+0x168>)
 8001550:	4293      	cmp	r3, r2
 8001552:	f040 8096 	bne.w	8001682 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001556:	2302      	movs	r3, #2
 8001558:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800155a:	2300      	movs	r3, #0
 800155c:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	4618      	mov	r0, r3
 8001564:	f002 fd62 	bl	800402c <HAL_RCCEx_PeriphCLKConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800156e:	f7ff fed5 	bl	800131c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001572:	4b47      	ldr	r3, [pc, #284]	; (8001690 <HAL_UART_MspInit+0x16c>)
 8001574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001576:	4a46      	ldr	r2, [pc, #280]	; (8001690 <HAL_UART_MspInit+0x16c>)
 8001578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157c:	6593      	str	r3, [r2, #88]	; 0x58
 800157e:	4b44      	ldr	r3, [pc, #272]	; (8001690 <HAL_UART_MspInit+0x16c>)
 8001580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	4b41      	ldr	r3, [pc, #260]	; (8001690 <HAL_UART_MspInit+0x16c>)
 800158c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158e:	4a40      	ldr	r2, [pc, #256]	; (8001690 <HAL_UART_MspInit+0x16c>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001596:	4b3e      	ldr	r3, [pc, #248]	; (8001690 <HAL_UART_MspInit+0x16c>)
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015a2:	230c      	movs	r3, #12
 80015a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b4:	2303      	movs	r3, #3
 80015b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ba:	2307      	movs	r3, #7
 80015bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015c4:	4619      	mov	r1, r3
 80015c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ca:	f000 ff67 	bl	800249c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80015ce:	4b31      	ldr	r3, [pc, #196]	; (8001694 <HAL_UART_MspInit+0x170>)
 80015d0:	4a31      	ldr	r2, [pc, #196]	; (8001698 <HAL_UART_MspInit+0x174>)
 80015d2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80015d4:	4b2f      	ldr	r3, [pc, #188]	; (8001694 <HAL_UART_MspInit+0x170>)
 80015d6:	2202      	movs	r2, #2
 80015d8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015da:	4b2e      	ldr	r3, [pc, #184]	; (8001694 <HAL_UART_MspInit+0x170>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e0:	4b2c      	ldr	r3, [pc, #176]	; (8001694 <HAL_UART_MspInit+0x170>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015e6:	4b2b      	ldr	r3, [pc, #172]	; (8001694 <HAL_UART_MspInit+0x170>)
 80015e8:	2280      	movs	r2, #128	; 0x80
 80015ea:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ec:	4b29      	ldr	r3, [pc, #164]	; (8001694 <HAL_UART_MspInit+0x170>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015f2:	4b28      	ldr	r3, [pc, #160]	; (8001694 <HAL_UART_MspInit+0x170>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80015f8:	4b26      	ldr	r3, [pc, #152]	; (8001694 <HAL_UART_MspInit+0x170>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015fe:	4b25      	ldr	r3, [pc, #148]	; (8001694 <HAL_UART_MspInit+0x170>)
 8001600:	2200      	movs	r2, #0
 8001602:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001604:	4823      	ldr	r0, [pc, #140]	; (8001694 <HAL_UART_MspInit+0x170>)
 8001606:	f000 fd63 	bl	80020d0 <HAL_DMA_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8001610:	f7ff fe84 	bl	800131c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a1f      	ldr	r2, [pc, #124]	; (8001694 <HAL_UART_MspInit+0x170>)
 8001618:	671a      	str	r2, [r3, #112]	; 0x70
 800161a:	4a1e      	ldr	r2, [pc, #120]	; (8001694 <HAL_UART_MspInit+0x170>)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001620:	4b1e      	ldr	r3, [pc, #120]	; (800169c <HAL_UART_MspInit+0x178>)
 8001622:	4a1f      	ldr	r2, [pc, #124]	; (80016a0 <HAL_UART_MspInit+0x17c>)
 8001624:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001626:	4b1d      	ldr	r3, [pc, #116]	; (800169c <HAL_UART_MspInit+0x178>)
 8001628:	2202      	movs	r2, #2
 800162a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <HAL_UART_MspInit+0x178>)
 800162e:	2210      	movs	r2, #16
 8001630:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001632:	4b1a      	ldr	r3, [pc, #104]	; (800169c <HAL_UART_MspInit+0x178>)
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001638:	4b18      	ldr	r3, [pc, #96]	; (800169c <HAL_UART_MspInit+0x178>)
 800163a:	2280      	movs	r2, #128	; 0x80
 800163c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <HAL_UART_MspInit+0x178>)
 8001640:	2200      	movs	r2, #0
 8001642:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_UART_MspInit+0x178>)
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_UART_MspInit+0x178>)
 800164c:	2200      	movs	r2, #0
 800164e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_UART_MspInit+0x178>)
 8001652:	2200      	movs	r2, #0
 8001654:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001656:	4811      	ldr	r0, [pc, #68]	; (800169c <HAL_UART_MspInit+0x178>)
 8001658:	f000 fd3a 	bl	80020d0 <HAL_DMA_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8001662:	f7ff fe5b 	bl	800131c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a0c      	ldr	r2, [pc, #48]	; (800169c <HAL_UART_MspInit+0x178>)
 800166a:	66da      	str	r2, [r3, #108]	; 0x6c
 800166c:	4a0b      	ldr	r2, [pc, #44]	; (800169c <HAL_UART_MspInit+0x178>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	2026      	movs	r0, #38	; 0x26
 8001678:	f000 fcf3 	bl	8002062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800167c:	2026      	movs	r0, #38	; 0x26
 800167e:	f000 fd0c 	bl	800209a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001682:	bf00      	nop
 8001684:	37b0      	adds	r7, #176	; 0xb0
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40004400 	.word	0x40004400
 8001690:	40021000 	.word	0x40021000
 8001694:	20000374 	.word	0x20000374
 8001698:	4002006c 	.word	0x4002006c
 800169c:	200003bc 	.word	0x200003bc
 80016a0:	40020080 	.word	0x40020080

080016a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <NMI_Handler+0x4>

080016aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <HardFault_Handler+0x4>

080016b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <MemManage_Handler+0x4>

080016b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f0:	f000 fb98 	bl	8001e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <DMA1_Channel6_IRQHandler+0x10>)
 800170e:	f000 fe16 	bl	800233e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000374 	.word	0x20000374

0800171c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <DMA1_Channel7_IRQHandler+0x10>)
 8001722:	f000 fe0c 	bl	800233e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200003bc 	.word	0x200003bc

08001730 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <TIM2_IRQHandler+0x10>)
 8001736:	f003 f9fd 	bl	8004b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200002a4 	.word	0x200002a4

08001744 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <USART2_IRQHandler+0x10>)
 800174a:	f003 fe2b 	bl	80053a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200002f0 	.word	0x200002f0

08001758 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return 1;
 800175c:	2301      	movs	r3, #1
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <_kill>:

int _kill(int pid, int sig)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001772:	f004 fe2d 	bl	80063d0 <__errno>
 8001776:	4603      	mov	r3, r0
 8001778:	2216      	movs	r2, #22
 800177a:	601a      	str	r2, [r3, #0]
  return -1;
 800177c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_exit>:

void _exit (int status)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001790:	f04f 31ff 	mov.w	r1, #4294967295
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff ffe7 	bl	8001768 <_kill>
  while (1) {}    /* Make sure we hang here */
 800179a:	e7fe      	b.n	800179a <_exit+0x12>

0800179c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	e00a      	b.n	80017c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ae:	f3af 8000 	nop.w
 80017b2:	4601      	mov	r1, r0
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	60ba      	str	r2, [r7, #8]
 80017ba:	b2ca      	uxtb	r2, r1
 80017bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	3301      	adds	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	dbf0      	blt.n	80017ae <_read+0x12>
  }

  return len;
 80017cc:	687b      	ldr	r3, [r7, #4]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	60f8      	str	r0, [r7, #12]
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	e009      	b.n	80017fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	60ba      	str	r2, [r7, #8]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	3301      	adds	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	429a      	cmp	r2, r3
 8001802:	dbf1      	blt.n	80017e8 <_write+0x12>
  }
  return len;
 8001804:	687b      	ldr	r3, [r7, #4]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <_close>:

int _close(int file)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001836:	605a      	str	r2, [r3, #4]
  return 0;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <_isatty>:

int _isatty(int file)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001880:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <_sbrk+0x5c>)
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <_sbrk+0x60>)
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <_sbrk+0x64>)
 8001896:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <_sbrk+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d207      	bcs.n	80018b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a8:	f004 fd92 	bl	80063d0 <__errno>
 80018ac:	4603      	mov	r3, r0
 80018ae:	220c      	movs	r2, #12
 80018b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	e009      	b.n	80018cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <_sbrk+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <_sbrk+0x64>)
 80018c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20018000 	.word	0x20018000
 80018d8:	00000400 	.word	0x00000400
 80018dc:	20000404 	.word	0x20000404
 80018e0:	20000420 	.word	0x20000420

080018e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <SystemInit+0x20>)
 80018ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ee:	4a05      	ldr	r2, [pc, #20]	; (8001904 <SystemInit+0x20>)
 80018f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
HAL_StatusTypeDef sensirion_i2c_read(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t* data, uint16_t count) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af02      	add	r7, sp, #8
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	461a      	mov	r2, r3
 8001914:	460b      	mov	r3, r1
 8001916:	72fb      	strb	r3, [r7, #11]
 8001918:	4613      	mov	r3, r2
 800191a:	813b      	strh	r3, [r7, #8]
    // IMPLEMENT
	HAL_StatusTypeDef i2c_status_return;

	i2c_status_return = HAL_I2C_Master_Receive(hi2c, address, data, count, DEFAULT_I2C_TIMEOUT);
 800191c:	7afb      	ldrb	r3, [r7, #11]
 800191e:	b299      	uxth	r1, r3
 8001920:	893b      	ldrh	r3, [r7, #8]
 8001922:	f242 7210 	movw	r2, #10000	; 0x2710
 8001926:	9200      	str	r2, [sp, #0]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f001 f914 	bl	8002b58 <HAL_I2C_Master_Receive>
 8001930:	4603      	mov	r3, r0
 8001932:	75fb      	strb	r3, [r7, #23]
    return i2c_status_return;
 8001934:	7dfb      	ldrb	r3, [r7, #23]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
HAL_StatusTypeDef sensirion_i2c_write(I2C_HandleTypeDef *hi2c, uint8_t address, const uint8_t* data,
                           uint16_t count) {
 800193e:	b580      	push	{r7, lr}
 8001940:	b088      	sub	sp, #32
 8001942:	af02      	add	r7, sp, #8
 8001944:	60f8      	str	r0, [r7, #12]
 8001946:	607a      	str	r2, [r7, #4]
 8001948:	461a      	mov	r2, r3
 800194a:	460b      	mov	r3, r1
 800194c:	72fb      	strb	r3, [r7, #11]
 800194e:	4613      	mov	r3, r2
 8001950:	813b      	strh	r3, [r7, #8]
    // IMPLEMENT
	HAL_StatusTypeDef i2c_status_return;

		/* Start measure  */
	i2c_status_return = HAL_I2C_Master_Transmit(hi2c, address, data, count, DEFAULT_I2C_TIMEOUT);
 8001952:	7afb      	ldrb	r3, [r7, #11]
 8001954:	b299      	uxth	r1, r3
 8001956:	893b      	ldrh	r3, [r7, #8]
 8001958:	f242 7210 	movw	r2, #10000	; 0x2710
 800195c:	9200      	str	r2, [sp, #0]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f001 f805 	bl	8002970 <HAL_I2C_Master_Transmit>
 8001966:	4603      	mov	r3, r0
 8001968:	75fb      	strb	r3, [r7, #23]
    return i2c_status_return;
 800196a:	7dfb      	ldrb	r3, [r7, #23]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <sensirion_common_generate_crc>:

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
    return tmp.float32;
}

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8001980:	23ff      	movs	r3, #255	; 0xff
 8001982:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001984:	2300      	movs	r3, #0
 8001986:	81fb      	strh	r3, [r7, #14]
 8001988:	e021      	b.n	80019ce <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 800198a:	89fb      	ldrh	r3, [r7, #14]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	4413      	add	r3, r2
 8001990:	781a      	ldrb	r2, [r3, #0]
 8001992:	7b7b      	ldrb	r3, [r7, #13]
 8001994:	4053      	eors	r3, r2
 8001996:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001998:	2308      	movs	r3, #8
 800199a:	733b      	strb	r3, [r7, #12]
 800199c:	e011      	b.n	80019c2 <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 800199e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	da07      	bge.n	80019b6 <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 80019a6:	7b7b      	ldrb	r3, [r7, #13]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	b25b      	sxtb	r3, r3
 80019ac:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	737b      	strb	r3, [r7, #13]
 80019b4:	e002      	b.n	80019bc <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 80019b6:	7b7b      	ldrb	r3, [r7, #13]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80019bc:	7b3b      	ldrb	r3, [r7, #12]
 80019be:	3b01      	subs	r3, #1
 80019c0:	733b      	strb	r3, [r7, #12]
 80019c2:	7b3b      	ldrb	r3, [r7, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1ea      	bne.n	800199e <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80019c8:	89fb      	ldrh	r3, [r7, #14]
 80019ca:	3301      	adds	r3, #1
 80019cc:	81fb      	strh	r3, [r7, #14]
 80019ce:	89fa      	ldrh	r2, [r7, #14]
 80019d0:	887b      	ldrh	r3, [r7, #2]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d3d9      	bcc.n	800198a <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 80019d6:	7b7b      	ldrb	r3, [r7, #13]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	807b      	strh	r3, [r7, #2]
 80019f0:	4613      	mov	r3, r2
 80019f2:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 80019f4:	887b      	ldrh	r3, [r7, #2]
 80019f6:	4619      	mov	r1, r3
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ffbb 	bl	8001974 <sensirion_common_generate_crc>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	787b      	ldrb	r3, [r7, #1]
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d002      	beq.n	8001a0e <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 8001a08:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0c:	e000      	b.n	8001a10 <sensirion_common_check_crc+0x2c>
    return NO_ERROR;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <sensirion_fill_cmd_send_buf>:
    const uint8_t data = 0x06;
    return sensirion_i2c_write(hi2c, 0, &data, (uint16_t)sizeof(data));
}

uint16_t sensirion_fill_cmd_send_buf(uint8_t* buf, uint16_t cmd,
                                     const uint16_t* args, uint8_t num_args) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	461a      	mov	r2, r3
 8001a24:	460b      	mov	r3, r1
 8001a26:	817b      	strh	r3, [r7, #10]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	727b      	strb	r3, [r7, #9]
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	82bb      	strh	r3, [r7, #20]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 8001a30:	897b      	ldrh	r3, [r7, #10]
 8001a32:	0a1b      	lsrs	r3, r3, #8
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	8abb      	ldrh	r3, [r7, #20]
 8001a38:	1c59      	adds	r1, r3, #1
 8001a3a:	82b9      	strh	r1, [r7, #20]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	440b      	add	r3, r1
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 8001a46:	8abb      	ldrh	r3, [r7, #20]
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	82ba      	strh	r2, [r7, #20]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4413      	add	r3, r2
 8001a52:	897a      	ldrh	r2, [r7, #10]
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_args; ++i) {
 8001a58:	2300      	movs	r3, #0
 8001a5a:	75fb      	strb	r3, [r7, #23]
 8001a5c:	e030      	b.n	8001ac0 <sensirion_fill_cmd_send_buf+0xa8>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
 8001a5e:	7dfb      	ldrb	r3, [r7, #23]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	0a1b      	lsrs	r3, r3, #8
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	8abb      	ldrh	r3, [r7, #20]
 8001a6e:	1c59      	adds	r1, r3, #1
 8001a70:	82b9      	strh	r1, [r7, #20]
 8001a72:	4619      	mov	r1, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	440b      	add	r3, r1
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	701a      	strb	r2, [r3, #0]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	4413      	add	r3, r2
 8001a84:	881a      	ldrh	r2, [r3, #0]
 8001a86:	8abb      	ldrh	r3, [r7, #20]
 8001a88:	1c59      	adds	r1, r3, #1
 8001a8a:	82b9      	strh	r1, [r7, #20]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	440b      	add	r3, r1
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	701a      	strb	r2, [r3, #0]

        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
 8001a96:	8abb      	ldrh	r3, [r7, #20]
 8001a98:	3b02      	subs	r3, #2
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	2102      	movs	r1, #2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff67 	bl	8001974 <sensirion_common_generate_crc>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	74fb      	strb	r3, [r7, #19]
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
 8001aaa:	8abb      	ldrh	r3, [r7, #20]
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	82ba      	strh	r2, [r7, #20]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	7cfa      	ldrb	r2, [r7, #19]
 8001ab8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_args; ++i) {
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
 8001abc:	3301      	adds	r3, #1
 8001abe:	75fb      	strb	r3, [r7, #23]
 8001ac0:	7dfa      	ldrb	r2, [r7, #23]
 8001ac2:	7a7b      	ldrb	r3, [r7, #9]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d3ca      	bcc.n	8001a5e <sensirion_fill_cmd_send_buf+0x46>
    }
    return idx;
 8001ac8:	8abb      	ldrh	r3, [r7, #20]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b098      	sub	sp, #96	; 0x60
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	461a      	mov	r2, r3
 8001ade:	460b      	mov	r3, r1
 8001ae0:	72fb      	strb	r3, [r7, #11]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	813b      	strh	r3, [r7, #8]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 8001ae6:	893b      	ldrh	r3, [r7, #8]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	0052      	lsls	r2, r2, #1
 8001aec:	4413      	add	r3, r2
 8001aee:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 8001af2:	f107 0310 	add.w	r3, r7, #16
 8001af6:	657b      	str	r3, [r7, #84]	; 0x54

    ret = sensirion_i2c_read(hi2c, address, buf8, size);
 8001af8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001afc:	7af9      	ldrb	r1, [r7, #11]
 8001afe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f7ff ff01 	bl	8001908 <sensirion_i2c_read>
 8001b06:	4603      	mov	r3, r0
 8001b08:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    if (ret != NO_ERROR)
 8001b0c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <sensirion_i2c_read_words_as_bytes+0x48>
        return ret;
 8001b14:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001b18:	e047      	b.n	8001baa <sensirion_i2c_read_words_as_bytes+0xd8>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001b20:	2300      	movs	r3, #0
 8001b22:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8001b26:	e039      	b.n	8001b9c <sensirion_i2c_read_words_as_bytes+0xca>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8001b28:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001b2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b2e:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 8001b30:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001b34:	3302      	adds	r3, #2
 8001b36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b38:	4413      	add	r3, r2
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	2102      	movs	r1, #2
 8001b40:	f7ff ff50 	bl	80019e4 <sensirion_common_check_crc>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        if (ret != NO_ERROR)
 8001b4a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d002      	beq.n	8001b58 <sensirion_i2c_read_words_as_bytes+0x86>
            return ret;
 8001b52:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001b56:	e028      	b.n	8001baa <sensirion_i2c_read_words_as_bytes+0xd8>

        data[j++] = buf8[i];
 8001b58:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001b5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b5e:	441a      	add	r2, r3
 8001b60:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001b64:	1c59      	adds	r1, r3, #1
 8001b66:	f8a7 105c 	strh.w	r1, [r7, #92]	; 0x5c
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	440b      	add	r3, r1
 8001b70:	7812      	ldrb	r2, [r2, #0]
 8001b72:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 8001b74:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001b78:	3301      	adds	r3, #1
 8001b7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b7c:	441a      	add	r2, r3
 8001b7e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001b82:	1c59      	adds	r1, r3, #1
 8001b84:	f8a7 105c 	strh.w	r1, [r7, #92]	; 0x5c
 8001b88:	4619      	mov	r1, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	440b      	add	r3, r1
 8001b8e:	7812      	ldrb	r2, [r2, #0]
 8001b90:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001b92:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001b96:	3303      	adds	r3, #3
 8001b98:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001b9c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001ba0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d3bf      	bcc.n	8001b28 <sensirion_i2c_read_words_as_bytes+0x56>
    }

    return NO_ERROR;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3760      	adds	r7, #96	; 0x60
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(I2C_HandleTypeDef *hi2c, uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b086      	sub	sp, #24
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	72fb      	strb	r3, [r7, #11]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	813b      	strh	r3, [r7, #8]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(hi2c, address, (uint8_t*)data_words,
 8001bc6:	893b      	ldrh	r3, [r7, #8]
 8001bc8:	7af9      	ldrb	r1, [r7, #11]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f7ff ff80 	bl	8001ad2 <sensirion_i2c_read_words_as_bytes>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	82bb      	strh	r3, [r7, #20]
                                            num_words);
    if (ret != NO_ERROR)
 8001bd6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <sensirion_i2c_read_words+0x32>
        return ret;
 8001bde:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001be2:	e020      	b.n	8001c26 <sensirion_i2c_read_words+0x74>

    for (i = 0; i < num_words; ++i) {
 8001be4:	2300      	movs	r3, #0
 8001be6:	75fb      	strb	r3, [r7, #23]
 8001be8:	e017      	b.n	8001c1a <sensirion_i2c_read_words+0x68>
        word_bytes = (uint8_t*)&data_words[i];
 8001bea:	7dfb      	ldrb	r3, [r7, #23]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	021b      	lsls	r3, r3, #8
 8001bfa:	b21a      	sxth	r2, r3
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	4313      	orrs	r3, r2
 8001c06:	b219      	sxth	r1, r3
 8001c08:	7dfb      	ldrb	r3, [r7, #23]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	4413      	add	r3, r2
 8001c10:	b28a      	uxth	r2, r1
 8001c12:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 8001c14:	7dfb      	ldrb	r3, [r7, #23]
 8001c16:	3301      	adds	r3, #1
 8001c18:	75fb      	strb	r3, [r7, #23]
 8001c1a:	7dfb      	ldrb	r3, [r7, #23]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	893a      	ldrh	r2, [r7, #8]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d8e2      	bhi.n	8001bea <sensirion_i2c_read_words+0x38>
    }

    return NO_ERROR;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(I2C_HandleTypeDef *hi2c, uint8_t address, uint16_t command) {
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	460b      	mov	r3, r1
 8001c38:	70fb      	strb	r3, [r7, #3]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
 8001c3e:	8839      	ldrh	r1, [r7, #0]
 8001c40:	f107 000c 	add.w	r0, r7, #12
 8001c44:	2300      	movs	r3, #0
 8001c46:	2200      	movs	r2, #0
 8001c48:	f7ff fee6 	bl	8001a18 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(hi2c, address, buf, SENSIRION_COMMAND_SIZE);
 8001c4c:	f107 020c 	add.w	r2, r7, #12
 8001c50:	78f9      	ldrb	r1, [r7, #3]
 8001c52:	2302      	movs	r3, #2
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff fe72 	bl	800193e <sensirion_i2c_write>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	b21b      	sxth	r3, r3
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <sht3x_measure>:
        ret = sht3x_read(hi2c, addr, temperature, humidity);
    }
    return ret;
}

int16_t sht3x_measure(I2C_HandleTypeDef *hi2c, sht3x_i2c_addr_t addr) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	70fb      	strb	r3, [r7, #3]
    return sensirion_i2c_write_cmd(hi2c, addr, sht3x_cmd_measure);
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <sht3x_measure+0x24>)
 8001c76:	881a      	ldrh	r2, [r3, #0]
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff ffd6 	bl	8001c2e <sensirion_i2c_write_cmd>
 8001c82:	4603      	mov	r3, r0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000004 	.word	0x20000004

08001c90 <sht3x_read>:

int16_t sht3x_read(I2C_HandleTypeDef *hi2c, sht3x_i2c_addr_t addr, int32_t* temperature,
                   int32_t* humidity) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	72fb      	strb	r3, [r7, #11]
    uint16_t words[2];
    int16_t ret =
        sensirion_i2c_read_words(hi2c, addr, words, SENSIRION_NUM_WORDS(words));
 8001ca0:	f107 0210 	add.w	r2, r7, #16
 8001ca4:	7af9      	ldrb	r1, [r7, #11]
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f7ff ff82 	bl	8001bb2 <sensirion_i2c_read_words>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	82fb      	strh	r3, [r7, #22]
    /**
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra: Temperature = 175 * S_T / 2^16 - 45
     * Relative Humidity = * 100 * S_RH / 2^16
     */
    tick_to_temperature(words[0], temperature);
 8001cb2:	8a3b      	ldrh	r3, [r7, #16]
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f80b 	bl	8001cd2 <tick_to_temperature>
    tick_to_humidity(words[1], humidity);
 8001cbc:	8a7b      	ldrh	r3, [r7, #18]
 8001cbe:	6839      	ldr	r1, [r7, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 f81d 	bl	8001d00 <tick_to_humidity>

    return ret;
 8001cc6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <tick_to_temperature>:
    tick_to_temperature(rawT, temperature);

    return ret;
}

void tick_to_temperature(uint16_t tick, int32_t* temperature) {
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	6039      	str	r1, [r7, #0]
 8001cdc:	80fb      	strh	r3, [r7, #6]
    *temperature = ((21875 * (int32_t)tick) >> 13) - 45000;
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	f245 5273 	movw	r2, #21875	; 0x5573
 8001ce4:	fb02 f303 	mul.w	r3, r2, r3
 8001ce8:	135b      	asrs	r3, r3, #13
 8001cea:	f5a3 432f 	sub.w	r3, r3, #44800	; 0xaf00
 8001cee:	3bc8      	subs	r3, #200	; 0xc8
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	6013      	str	r3, [r2, #0]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <tick_to_humidity>:

void tick_to_humidity(uint16_t tick, int32_t* humidity) {
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	80fb      	strh	r3, [r7, #6]
    *humidity = ((12500 * (int32_t)tick) >> 13);
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8001d12:	fb02 f303 	mul.w	r3, r2, r3
 8001d16:	135a      	asrs	r2, r3, #13
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	601a      	str	r2, [r3, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d2c:	f7ff fdda 	bl	80018e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d30:	480c      	ldr	r0, [pc, #48]	; (8001d64 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d32:	490d      	ldr	r1, [pc, #52]	; (8001d68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d34:	4a0d      	ldr	r2, [pc, #52]	; (8001d6c <LoopForever+0xe>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d38:	e002      	b.n	8001d40 <LoopCopyDataInit>

08001d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3e:	3304      	adds	r3, #4

08001d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d44:	d3f9      	bcc.n	8001d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d46:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d48:	4c0a      	ldr	r4, [pc, #40]	; (8001d74 <LoopForever+0x16>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d4c:	e001      	b.n	8001d52 <LoopFillZerobss>

08001d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d50:	3204      	adds	r2, #4

08001d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d54:	d3fb      	bcc.n	8001d4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d56:	f004 fb41 	bl	80063dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d5a:	f7ff f8a7 	bl	8000eac <main>

08001d5e <LoopForever>:

LoopForever:
    b LoopForever
 8001d5e:	e7fe      	b.n	8001d5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d60:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d68:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001d6c:	080092f4 	.word	0x080092f4
  ldr r2, =_sbss
 8001d70:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001d74:	2000041c 	.word	0x2000041c

08001d78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d78:	e7fe      	b.n	8001d78 <ADC1_2_IRQHandler>

08001d7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d84:	2003      	movs	r0, #3
 8001d86:	f000 f961 	bl	800204c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d8a:	200f      	movs	r0, #15
 8001d8c:	f000 f80e 	bl	8001dac <HAL_InitTick>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d002      	beq.n	8001d9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	71fb      	strb	r3, [r7, #7]
 8001d9a:	e001      	b.n	8001da0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d9c:	f7ff fac4 	bl	8001328 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001da0:	79fb      	ldrb	r3, [r7, #7]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001db8:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <HAL_InitTick+0x6c>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d023      	beq.n	8001e08 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001dc0:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <HAL_InitTick+0x70>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <HAL_InitTick+0x6c>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 f96d 	bl	80020b6 <HAL_SYSTICK_Config>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10f      	bne.n	8001e02 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b0f      	cmp	r3, #15
 8001de6:	d809      	bhi.n	8001dfc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de8:	2200      	movs	r2, #0
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	f04f 30ff 	mov.w	r0, #4294967295
 8001df0:	f000 f937 	bl	8002062 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001df4:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <HAL_InitTick+0x74>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	e007      	b.n	8001e0c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]
 8001e00:	e004      	b.n	8001e0c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
 8001e06:	e001      	b.n	8001e0c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	2000000c 	.word	0x2000000c
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	20000008 	.word	0x20000008

08001e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_IncTick+0x20>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_IncTick+0x24>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <HAL_IncTick+0x24>)
 8001e36:	6013      	str	r3, [r2, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	2000000c 	.word	0x2000000c
 8001e48:	20000408 	.word	0x20000408

08001e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <HAL_GetTick+0x14>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000408 	.word	0x20000408

08001e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e6c:	f7ff ffee 	bl	8001e4c <HAL_GetTick>
 8001e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7c:	d005      	beq.n	8001e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <HAL_Delay+0x44>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4413      	add	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e8a:	bf00      	nop
 8001e8c:	f7ff ffde 	bl	8001e4c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d8f7      	bhi.n	8001e8c <HAL_Delay+0x28>
  {
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	2000000c 	.word	0x2000000c

08001eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ede:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	60d3      	str	r3, [r2, #12]
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <__NVIC_GetPriorityGrouping+0x18>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	f003 0307 	and.w	r3, r3, #7
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	db0b      	blt.n	8001f3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	f003 021f 	and.w	r2, r3, #31
 8001f28:	4907      	ldr	r1, [pc, #28]	; (8001f48 <__NVIC_EnableIRQ+0x38>)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	2001      	movs	r0, #1
 8001f32:	fa00 f202 	lsl.w	r2, r0, r2
 8001f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000e100 	.word	0xe000e100

08001f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	6039      	str	r1, [r7, #0]
 8001f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	db0a      	blt.n	8001f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	490c      	ldr	r1, [pc, #48]	; (8001f98 <__NVIC_SetPriority+0x4c>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	0112      	lsls	r2, r2, #4
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	440b      	add	r3, r1
 8001f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f74:	e00a      	b.n	8001f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4908      	ldr	r1, [pc, #32]	; (8001f9c <__NVIC_SetPriority+0x50>)
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	3b04      	subs	r3, #4
 8001f84:	0112      	lsls	r2, r2, #4
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	440b      	add	r3, r1
 8001f8a:	761a      	strb	r2, [r3, #24]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000e100 	.word	0xe000e100
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f1c3 0307 	rsb	r3, r3, #7
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	bf28      	it	cs
 8001fbe:	2304      	movcs	r3, #4
 8001fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	2b06      	cmp	r3, #6
 8001fc8:	d902      	bls.n	8001fd0 <NVIC_EncodePriority+0x30>
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3b03      	subs	r3, #3
 8001fce:	e000      	b.n	8001fd2 <NVIC_EncodePriority+0x32>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff2:	43d9      	mvns	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	4313      	orrs	r3, r2
         );
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3724      	adds	r7, #36	; 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002018:	d301      	bcc.n	800201e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201a:	2301      	movs	r3, #1
 800201c:	e00f      	b.n	800203e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201e:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <SysTick_Config+0x40>)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002026:	210f      	movs	r1, #15
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
 800202c:	f7ff ff8e 	bl	8001f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <SysTick_Config+0x40>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <SysTick_Config+0x40>)
 8002038:	2207      	movs	r2, #7
 800203a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	e000e010 	.word	0xe000e010

0800204c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ff29 	bl	8001eac <__NVIC_SetPriorityGrouping>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b086      	sub	sp, #24
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002074:	f7ff ff3e 	bl	8001ef4 <__NVIC_GetPriorityGrouping>
 8002078:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68b9      	ldr	r1, [r7, #8]
 800207e:	6978      	ldr	r0, [r7, #20]
 8002080:	f7ff ff8e 	bl	8001fa0 <NVIC_EncodePriority>
 8002084:	4602      	mov	r2, r0
 8002086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff5d 	bl	8001f4c <__NVIC_SetPriority>
}
 8002092:	bf00      	nop
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff31 	bl	8001f10 <__NVIC_EnableIRQ>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff ffa2 	bl	8002008 <SysTick_Config>
 80020c4:	4603      	mov	r3, r0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e098      	b.n	8002214 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	4b4d      	ldr	r3, [pc, #308]	; (8002220 <HAL_DMA_Init+0x150>)
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d80f      	bhi.n	800210e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	4b4b      	ldr	r3, [pc, #300]	; (8002224 <HAL_DMA_Init+0x154>)
 80020f6:	4413      	add	r3, r2
 80020f8:	4a4b      	ldr	r2, [pc, #300]	; (8002228 <HAL_DMA_Init+0x158>)
 80020fa:	fba2 2303 	umull	r2, r3, r2, r3
 80020fe:	091b      	lsrs	r3, r3, #4
 8002100:	009a      	lsls	r2, r3, #2
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a48      	ldr	r2, [pc, #288]	; (800222c <HAL_DMA_Init+0x15c>)
 800210a:	641a      	str	r2, [r3, #64]	; 0x40
 800210c:	e00e      	b.n	800212c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	4b46      	ldr	r3, [pc, #280]	; (8002230 <HAL_DMA_Init+0x160>)
 8002116:	4413      	add	r3, r2
 8002118:	4a43      	ldr	r2, [pc, #268]	; (8002228 <HAL_DMA_Init+0x158>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	091b      	lsrs	r3, r3, #4
 8002120:	009a      	lsls	r2, r3, #2
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a42      	ldr	r2, [pc, #264]	; (8002234 <HAL_DMA_Init+0x164>)
 800212a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002146:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002150:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800215c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002168:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4313      	orrs	r3, r2
 8002174:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002186:	d039      	beq.n	80021fc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	4a27      	ldr	r2, [pc, #156]	; (800222c <HAL_DMA_Init+0x15c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d11a      	bne.n	80021c8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002192:	4b29      	ldr	r3, [pc, #164]	; (8002238 <HAL_DMA_Init+0x168>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	f003 031c 	and.w	r3, r3, #28
 800219e:	210f      	movs	r1, #15
 80021a0:	fa01 f303 	lsl.w	r3, r1, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	4924      	ldr	r1, [pc, #144]	; (8002238 <HAL_DMA_Init+0x168>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80021ac:	4b22      	ldr	r3, [pc, #136]	; (8002238 <HAL_DMA_Init+0x168>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6859      	ldr	r1, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b8:	f003 031c 	and.w	r3, r3, #28
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	491d      	ldr	r1, [pc, #116]	; (8002238 <HAL_DMA_Init+0x168>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	600b      	str	r3, [r1, #0]
 80021c6:	e019      	b.n	80021fc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80021c8:	4b1c      	ldr	r3, [pc, #112]	; (800223c <HAL_DMA_Init+0x16c>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d0:	f003 031c 	and.w	r3, r3, #28
 80021d4:	210f      	movs	r1, #15
 80021d6:	fa01 f303 	lsl.w	r3, r1, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	4917      	ldr	r1, [pc, #92]	; (800223c <HAL_DMA_Init+0x16c>)
 80021de:	4013      	ands	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80021e2:	4b16      	ldr	r3, [pc, #88]	; (800223c <HAL_DMA_Init+0x16c>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6859      	ldr	r1, [r3, #4]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	f003 031c 	and.w	r3, r3, #28
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	4911      	ldr	r1, [pc, #68]	; (800223c <HAL_DMA_Init+0x16c>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	40020407 	.word	0x40020407
 8002224:	bffdfff8 	.word	0xbffdfff8
 8002228:	cccccccd 	.word	0xcccccccd
 800222c:	40020000 	.word	0x40020000
 8002230:	bffdfbf8 	.word	0xbffdfbf8
 8002234:	40020400 	.word	0x40020400
 8002238:	400200a8 	.word	0x400200a8
 800223c:	400204a8 	.word	0x400204a8

08002240 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d008      	beq.n	800226a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2204      	movs	r2, #4
 800225c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e022      	b.n	80022b0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 020e 	bic.w	r2, r2, #14
 8002278:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0201 	bic.w	r2, r2, #1
 8002288:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	f003 021c 	and.w	r2, r3, #28
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	2101      	movs	r1, #1
 8002298:	fa01 f202 	lsl.w	r2, r1, r2
 800229c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d005      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2204      	movs	r2, #4
 80022d8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	73fb      	strb	r3, [r7, #15]
 80022de:	e029      	b.n	8002334 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 020e 	bic.w	r2, r2, #14
 80022ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0201 	bic.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002304:	f003 021c 	and.w	r2, r3, #28
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	2101      	movs	r1, #1
 800230e:	fa01 f202 	lsl.w	r2, r1, r2
 8002312:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	4798      	blx	r3
    }
  }
  return status;
 8002334:	7bfb      	ldrb	r3, [r7, #15]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	f003 031c 	and.w	r3, r3, #28
 800235e:	2204      	movs	r2, #4
 8002360:	409a      	lsls	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	4013      	ands	r3, r2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d026      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x7a>
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d021      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0320 	and.w	r3, r3, #32
 800237e:	2b00      	cmp	r3, #0
 8002380:	d107      	bne.n	8002392 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0204 	bic.w	r2, r2, #4
 8002390:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	f003 021c 	and.w	r2, r3, #28
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	2104      	movs	r1, #4
 80023a0:	fa01 f202 	lsl.w	r2, r1, r2
 80023a4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d071      	beq.n	8002492 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80023b6:	e06c      	b.n	8002492 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023bc:	f003 031c 	and.w	r3, r3, #28
 80023c0:	2202      	movs	r2, #2
 80023c2:	409a      	lsls	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d02e      	beq.n	800242a <HAL_DMA_IRQHandler+0xec>
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d029      	beq.n	800242a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0320 	and.w	r3, r3, #32
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10b      	bne.n	80023fc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 020a 	bic.w	r2, r2, #10
 80023f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002400:	f003 021c 	and.w	r2, r3, #28
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	2102      	movs	r1, #2
 800240a:	fa01 f202 	lsl.w	r2, r1, r2
 800240e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	2b00      	cmp	r3, #0
 800241e:	d038      	beq.n	8002492 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002428:	e033      	b.n	8002492 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	f003 031c 	and.w	r3, r3, #28
 8002432:	2208      	movs	r2, #8
 8002434:	409a      	lsls	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4013      	ands	r3, r2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d02a      	beq.n	8002494 <HAL_DMA_IRQHandler+0x156>
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d025      	beq.n	8002494 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 020e 	bic.w	r2, r2, #14
 8002456:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245c:	f003 021c 	and.w	r2, r3, #28
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	2101      	movs	r1, #1
 8002466:	fa01 f202 	lsl.w	r2, r1, r2
 800246a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002486:	2b00      	cmp	r3, #0
 8002488:	d004      	beq.n	8002494 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002492:	bf00      	nop
 8002494:	bf00      	nop
}
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024aa:	e17f      	b.n	80027ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	2101      	movs	r1, #1
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	fa01 f303 	lsl.w	r3, r1, r3
 80024b8:	4013      	ands	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 8171 	beq.w	80027a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d005      	beq.n	80024dc <HAL_GPIO_Init+0x40>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d130      	bne.n	800253e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	2203      	movs	r2, #3
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4013      	ands	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002512:	2201      	movs	r2, #1
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4013      	ands	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	091b      	lsrs	r3, r3, #4
 8002528:	f003 0201 	and.w	r2, r3, #1
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	2b03      	cmp	r3, #3
 8002548:	d118      	bne.n	800257c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002550:	2201      	movs	r2, #1
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	08db      	lsrs	r3, r3, #3
 8002566:	f003 0201 	and.w	r2, r3, #1
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b03      	cmp	r3, #3
 8002586:	d017      	beq.n	80025b8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	2203      	movs	r2, #3
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d123      	bne.n	800260c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	08da      	lsrs	r2, r3, #3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3208      	adds	r2, #8
 80025cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	220f      	movs	r2, #15
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4013      	ands	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	08da      	lsrs	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3208      	adds	r2, #8
 8002606:	6939      	ldr	r1, [r7, #16]
 8002608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4013      	ands	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0203 	and.w	r2, r3, #3
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80ac 	beq.w	80027a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264e:	4b5f      	ldr	r3, [pc, #380]	; (80027cc <HAL_GPIO_Init+0x330>)
 8002650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002652:	4a5e      	ldr	r2, [pc, #376]	; (80027cc <HAL_GPIO_Init+0x330>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	6613      	str	r3, [r2, #96]	; 0x60
 800265a:	4b5c      	ldr	r3, [pc, #368]	; (80027cc <HAL_GPIO_Init+0x330>)
 800265c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002666:	4a5a      	ldr	r2, [pc, #360]	; (80027d0 <HAL_GPIO_Init+0x334>)
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	3302      	adds	r3, #2
 800266e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002672:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	220f      	movs	r2, #15
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4013      	ands	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002690:	d025      	beq.n	80026de <HAL_GPIO_Init+0x242>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a4f      	ldr	r2, [pc, #316]	; (80027d4 <HAL_GPIO_Init+0x338>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d01f      	beq.n	80026da <HAL_GPIO_Init+0x23e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a4e      	ldr	r2, [pc, #312]	; (80027d8 <HAL_GPIO_Init+0x33c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d019      	beq.n	80026d6 <HAL_GPIO_Init+0x23a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a4d      	ldr	r2, [pc, #308]	; (80027dc <HAL_GPIO_Init+0x340>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d013      	beq.n	80026d2 <HAL_GPIO_Init+0x236>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a4c      	ldr	r2, [pc, #304]	; (80027e0 <HAL_GPIO_Init+0x344>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d00d      	beq.n	80026ce <HAL_GPIO_Init+0x232>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a4b      	ldr	r2, [pc, #300]	; (80027e4 <HAL_GPIO_Init+0x348>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d007      	beq.n	80026ca <HAL_GPIO_Init+0x22e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a4a      	ldr	r2, [pc, #296]	; (80027e8 <HAL_GPIO_Init+0x34c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d101      	bne.n	80026c6 <HAL_GPIO_Init+0x22a>
 80026c2:	2306      	movs	r3, #6
 80026c4:	e00c      	b.n	80026e0 <HAL_GPIO_Init+0x244>
 80026c6:	2307      	movs	r3, #7
 80026c8:	e00a      	b.n	80026e0 <HAL_GPIO_Init+0x244>
 80026ca:	2305      	movs	r3, #5
 80026cc:	e008      	b.n	80026e0 <HAL_GPIO_Init+0x244>
 80026ce:	2304      	movs	r3, #4
 80026d0:	e006      	b.n	80026e0 <HAL_GPIO_Init+0x244>
 80026d2:	2303      	movs	r3, #3
 80026d4:	e004      	b.n	80026e0 <HAL_GPIO_Init+0x244>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e002      	b.n	80026e0 <HAL_GPIO_Init+0x244>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <HAL_GPIO_Init+0x244>
 80026de:	2300      	movs	r3, #0
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	f002 0203 	and.w	r2, r2, #3
 80026e6:	0092      	lsls	r2, r2, #2
 80026e8:	4093      	lsls	r3, r2
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026f0:	4937      	ldr	r1, [pc, #220]	; (80027d0 <HAL_GPIO_Init+0x334>)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	089b      	lsrs	r3, r3, #2
 80026f6:	3302      	adds	r3, #2
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026fe:	4b3b      	ldr	r3, [pc, #236]	; (80027ec <HAL_GPIO_Init+0x350>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	43db      	mvns	r3, r3
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4013      	ands	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002722:	4a32      	ldr	r2, [pc, #200]	; (80027ec <HAL_GPIO_Init+0x350>)
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002728:	4b30      	ldr	r3, [pc, #192]	; (80027ec <HAL_GPIO_Init+0x350>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	43db      	mvns	r3, r3
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4013      	ands	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800274c:	4a27      	ldr	r2, [pc, #156]	; (80027ec <HAL_GPIO_Init+0x350>)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002752:	4b26      	ldr	r3, [pc, #152]	; (80027ec <HAL_GPIO_Init+0x350>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	43db      	mvns	r3, r3
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002776:	4a1d      	ldr	r2, [pc, #116]	; (80027ec <HAL_GPIO_Init+0x350>)
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800277c:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <HAL_GPIO_Init+0x350>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	43db      	mvns	r3, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4013      	ands	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027a0:	4a12      	ldr	r2, [pc, #72]	; (80027ec <HAL_GPIO_Init+0x350>)
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	3301      	adds	r3, #1
 80027aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	fa22 f303 	lsr.w	r3, r2, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f47f ae78 	bne.w	80024ac <HAL_GPIO_Init+0x10>
  }
}
 80027bc:	bf00      	nop
 80027be:	bf00      	nop
 80027c0:	371c      	adds	r7, #28
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40010000 	.word	0x40010000
 80027d4:	48000400 	.word	0x48000400
 80027d8:	48000800 	.word	0x48000800
 80027dc:	48000c00 	.word	0x48000c00
 80027e0:	48001000 	.word	0x48001000
 80027e4:	48001400 	.word	0x48001400
 80027e8:	48001800 	.word	0x48001800
 80027ec:	40010400 	.word	0x40010400

080027f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	887b      	ldrh	r3, [r7, #2]
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
 800280c:	e001      	b.n	8002812 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800280e:	2300      	movs	r3, #0
 8002810:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002812:	7bfb      	ldrb	r3, [r7, #15]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	807b      	strh	r3, [r7, #2]
 800282c:	4613      	mov	r3, r2
 800282e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002830:	787b      	ldrb	r3, [r7, #1]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002836:	887a      	ldrh	r2, [r7, #2]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800283c:	e002      	b.n	8002844 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800283e:	887a      	ldrh	r2, [r7, #2]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e081      	b.n	8002966 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7fe fd80 	bl	800137c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2224      	movs	r2, #36	; 0x24
 8002880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0201 	bic.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d107      	bne.n	80028ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	e006      	b.n	80028d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d104      	bne.n	80028ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800290c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69d9      	ldr	r1, [r3, #28]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1a      	ldr	r2, [r3, #32]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0201 	orr.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2220      	movs	r2, #32
 8002952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af02      	add	r7, sp, #8
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	461a      	mov	r2, r3
 800297c:	460b      	mov	r3, r1
 800297e:	817b      	strh	r3, [r7, #10]
 8002980:	4613      	mov	r3, r2
 8002982:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b20      	cmp	r3, #32
 800298e:	f040 80da 	bne.w	8002b46 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_I2C_Master_Transmit+0x30>
 800299c:	2302      	movs	r3, #2
 800299e:	e0d3      	b.n	8002b48 <HAL_I2C_Master_Transmit+0x1d8>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029a8:	f7ff fa50 	bl	8001e4c <HAL_GetTick>
 80029ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	2319      	movs	r3, #25
 80029b4:	2201      	movs	r2, #1
 80029b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f9e6 	bl	8002d8c <I2C_WaitOnFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e0be      	b.n	8002b48 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2221      	movs	r2, #33	; 0x21
 80029ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2210      	movs	r2, #16
 80029d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	893a      	ldrh	r2, [r7, #8]
 80029ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	2bff      	cmp	r3, #255	; 0xff
 80029fa:	d90e      	bls.n	8002a1a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	22ff      	movs	r2, #255	; 0xff
 8002a00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	8979      	ldrh	r1, [r7, #10]
 8002a0a:	4b51      	ldr	r3, [pc, #324]	; (8002b50 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 fbdc 	bl	80031d0 <I2C_TransferConfig>
 8002a18:	e06c      	b.n	8002af4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	8979      	ldrh	r1, [r7, #10]
 8002a2c:	4b48      	ldr	r3, [pc, #288]	; (8002b50 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fbcb 	bl	80031d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002a3a:	e05b      	b.n	8002af4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	6a39      	ldr	r1, [r7, #32]
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 f9e3 	bl	8002e0c <I2C_WaitOnTXISFlagUntilTimeout>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e07b      	b.n	8002b48 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	781a      	ldrb	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d034      	beq.n	8002af4 <HAL_I2C_Master_Transmit+0x184>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d130      	bne.n	8002af4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2180      	movs	r1, #128	; 0x80
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 f975 	bl	8002d8c <I2C_WaitOnFlagUntilTimeout>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e04d      	b.n	8002b48 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2bff      	cmp	r3, #255	; 0xff
 8002ab4:	d90e      	bls.n	8002ad4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	22ff      	movs	r2, #255	; 0xff
 8002aba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	8979      	ldrh	r1, [r7, #10]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 fb7f 	bl	80031d0 <I2C_TransferConfig>
 8002ad2:	e00f      	b.n	8002af4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	8979      	ldrh	r1, [r7, #10]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 fb6e 	bl	80031d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d19e      	bne.n	8002a3c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	6a39      	ldr	r1, [r7, #32]
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f9c2 	bl	8002e8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e01a      	b.n	8002b48 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2220      	movs	r2, #32
 8002b18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6859      	ldr	r1, [r3, #4]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_I2C_Master_Transmit+0x1e4>)
 8002b26:	400b      	ands	r3, r1
 8002b28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	e000      	b.n	8002b48 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002b46:	2302      	movs	r3, #2
  }
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	80002000 	.word	0x80002000
 8002b54:	fe00e800 	.word	0xfe00e800

08002b58 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	607a      	str	r2, [r7, #4]
 8002b62:	461a      	mov	r2, r3
 8002b64:	460b      	mov	r3, r1
 8002b66:	817b      	strh	r3, [r7, #10]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b20      	cmp	r3, #32
 8002b76:	f040 80db 	bne.w	8002d30 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <HAL_I2C_Master_Receive+0x30>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e0d4      	b.n	8002d32 <HAL_I2C_Master_Receive+0x1da>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b90:	f7ff f95c 	bl	8001e4c <HAL_GetTick>
 8002b94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	2319      	movs	r3, #25
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 f8f2 	bl	8002d8c <I2C_WaitOnFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e0bf      	b.n	8002d32 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2222      	movs	r2, #34	; 0x22
 8002bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2210      	movs	r2, #16
 8002bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	893a      	ldrh	r2, [r7, #8]
 8002bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2bff      	cmp	r3, #255	; 0xff
 8002be2:	d90e      	bls.n	8002c02 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	22ff      	movs	r2, #255	; 0xff
 8002be8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	8979      	ldrh	r1, [r7, #10]
 8002bf2:	4b52      	ldr	r3, [pc, #328]	; (8002d3c <HAL_I2C_Master_Receive+0x1e4>)
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 fae8 	bl	80031d0 <I2C_TransferConfig>
 8002c00:	e06d      	b.n	8002cde <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	8979      	ldrh	r1, [r7, #10]
 8002c14:	4b49      	ldr	r3, [pc, #292]	; (8002d3c <HAL_I2C_Master_Receive+0x1e4>)
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 fad7 	bl	80031d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002c22:	e05c      	b.n	8002cde <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	6a39      	ldr	r1, [r7, #32]
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 f96b 	bl	8002f04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e07c      	b.n	8002d32 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d034      	beq.n	8002cde <HAL_I2C_Master_Receive+0x186>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d130      	bne.n	8002cde <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	2200      	movs	r2, #0
 8002c84:	2180      	movs	r1, #128	; 0x80
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 f880 	bl	8002d8c <I2C_WaitOnFlagUntilTimeout>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e04d      	b.n	8002d32 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2bff      	cmp	r3, #255	; 0xff
 8002c9e:	d90e      	bls.n	8002cbe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	22ff      	movs	r2, #255	; 0xff
 8002ca4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	8979      	ldrh	r1, [r7, #10]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 fa8a 	bl	80031d0 <I2C_TransferConfig>
 8002cbc:	e00f      	b.n	8002cde <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	8979      	ldrh	r1, [r7, #10]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 fa79 	bl	80031d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d19d      	bne.n	8002c24 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	6a39      	ldr	r1, [r7, #32]
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f8cd 	bl	8002e8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e01a      	b.n	8002d32 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2220      	movs	r2, #32
 8002d02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6859      	ldr	r1, [r3, #4]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <HAL_I2C_Master_Receive+0x1e8>)
 8002d10:	400b      	ands	r3, r1
 8002d12:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e000      	b.n	8002d32 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002d30:	2302      	movs	r3, #2
  }
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	80002400 	.word	0x80002400
 8002d40:	fe00e800 	.word	0xfe00e800

08002d44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d103      	bne.n	8002d62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d007      	beq.n	8002d80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	619a      	str	r2, [r3, #24]
  }
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	603b      	str	r3, [r7, #0]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d9c:	e022      	b.n	8002de4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da4:	d01e      	beq.n	8002de4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da6:	f7ff f851 	bl	8001e4c <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d302      	bcc.n	8002dbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d113      	bne.n	8002de4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc0:	f043 0220 	orr.w	r2, r3, #32
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e00f      	b.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	4013      	ands	r3, r2
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	bf0c      	ite	eq
 8002df4:	2301      	moveq	r3, #1
 8002df6:	2300      	movne	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d0cd      	beq.n	8002d9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e18:	e02c      	b.n	8002e74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	68b9      	ldr	r1, [r7, #8]
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f8ea 	bl	8002ff8 <I2C_IsErrorOccurred>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e02a      	b.n	8002e84 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e34:	d01e      	beq.n	8002e74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e36:	f7ff f809 	bl	8001e4c <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d302      	bcc.n	8002e4c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d113      	bne.n	8002e74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e50:	f043 0220 	orr.w	r2, r3, #32
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e007      	b.n	8002e84 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d1cb      	bne.n	8002e1a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e98:	e028      	b.n	8002eec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f8aa 	bl	8002ff8 <I2C_IsErrorOccurred>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e026      	b.n	8002efc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eae:	f7fe ffcd 	bl	8001e4c <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d302      	bcc.n	8002ec4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d113      	bne.n	8002eec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec8:	f043 0220 	orr.w	r2, r3, #32
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e007      	b.n	8002efc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b20      	cmp	r3, #32
 8002ef8:	d1cf      	bne.n	8002e9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f10:	e064      	b.n	8002fdc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f86e 	bl	8002ff8 <I2C_IsErrorOccurred>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e062      	b.n	8002fec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	f003 0320 	and.w	r3, r3, #32
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d138      	bne.n	8002fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d105      	bne.n	8002f4e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	e04e      	b.n	8002fec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b10      	cmp	r3, #16
 8002f5a:	d107      	bne.n	8002f6c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2210      	movs	r2, #16
 8002f62:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2204      	movs	r2, #4
 8002f68:	645a      	str	r2, [r3, #68]	; 0x44
 8002f6a:	e002      	b.n	8002f72 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2220      	movs	r2, #32
 8002f78:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	4b1b      	ldr	r3, [pc, #108]	; (8002ff4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002f86:	400b      	ands	r3, r1
 8002f88:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e022      	b.n	8002fec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa6:	f7fe ff51 	bl	8001e4c <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d302      	bcc.n	8002fbc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10f      	bne.n	8002fdc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc0:	f043 0220 	orr.w	r2, r3, #32
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e007      	b.n	8002fec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d193      	bne.n	8002f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	fe00e800 	.word	0xfe00e800

08002ff8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08a      	sub	sp, #40	; 0x28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b00      	cmp	r3, #0
 8003022:	d075      	beq.n	8003110 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2210      	movs	r2, #16
 800302a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800302c:	e056      	b.n	80030dc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003034:	d052      	beq.n	80030dc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003036:	f7fe ff09 	bl	8001e4c <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	429a      	cmp	r2, r3
 8003044:	d302      	bcc.n	800304c <I2C_IsErrorOccurred+0x54>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d147      	bne.n	80030dc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003056:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800305e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800306a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800306e:	d12e      	bne.n	80030ce <I2C_IsErrorOccurred+0xd6>
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003076:	d02a      	beq.n	80030ce <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003078:	7cfb      	ldrb	r3, [r7, #19]
 800307a:	2b20      	cmp	r3, #32
 800307c:	d027      	beq.n	80030ce <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800308c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800308e:	f7fe fedd 	bl	8001e4c <HAL_GetTick>
 8003092:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003094:	e01b      	b.n	80030ce <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003096:	f7fe fed9 	bl	8001e4c <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b19      	cmp	r3, #25
 80030a2:	d914      	bls.n	80030ce <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a8:	f043 0220 	orr.w	r2, r3, #32
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b20      	cmp	r3, #32
 80030da:	d1dc      	bne.n	8003096 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	f003 0320 	and.w	r3, r3, #32
 80030e6:	2b20      	cmp	r3, #32
 80030e8:	d003      	beq.n	80030f2 <I2C_IsErrorOccurred+0xfa>
 80030ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d09d      	beq.n	800302e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80030f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d103      	bne.n	8003102 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2220      	movs	r2, #32
 8003100:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	f043 0304 	orr.w	r3, r3, #4
 8003108:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003132:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00b      	beq.n	800315c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	f043 0308 	orr.w	r3, r3, #8
 800314a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003154:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	f043 0302 	orr.w	r3, r3, #2
 800316c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003176:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800317e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003182:	2b00      	cmp	r3, #0
 8003184:	d01c      	beq.n	80031c0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f7ff fddc 	bl	8002d44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6859      	ldr	r1, [r3, #4]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	4b0d      	ldr	r3, [pc, #52]	; (80031cc <I2C_IsErrorOccurred+0x1d4>)
 8003198:	400b      	ands	r3, r1
 800319a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80031c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3728      	adds	r7, #40	; 0x28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	fe00e800 	.word	0xfe00e800

080031d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	607b      	str	r3, [r7, #4]
 80031da:	460b      	mov	r3, r1
 80031dc:	817b      	strh	r3, [r7, #10]
 80031de:	4613      	mov	r3, r2
 80031e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031e2:	897b      	ldrh	r3, [r7, #10]
 80031e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031e8:	7a7b      	ldrb	r3, [r7, #9]
 80031ea:	041b      	lsls	r3, r3, #16
 80031ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	0d5b      	lsrs	r3, r3, #21
 800320a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800320e:	4b08      	ldr	r3, [pc, #32]	; (8003230 <I2C_TransferConfig+0x60>)
 8003210:	430b      	orrs	r3, r1
 8003212:	43db      	mvns	r3, r3
 8003214:	ea02 0103 	and.w	r1, r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	430a      	orrs	r2, r1
 8003220:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003222:	bf00      	nop
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	03ff63ff 	.word	0x03ff63ff

08003234 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b20      	cmp	r3, #32
 8003248:	d138      	bne.n	80032bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003254:	2302      	movs	r3, #2
 8003256:	e032      	b.n	80032be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2224      	movs	r2, #36	; 0x24
 8003264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0201 	bic.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003286:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6819      	ldr	r1, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0201 	orr.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	e000      	b.n	80032be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032bc:	2302      	movs	r3, #2
  }
}
 80032be:	4618      	mov	r0, r3
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b085      	sub	sp, #20
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b20      	cmp	r3, #32
 80032de:	d139      	bne.n	8003354 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e033      	b.n	8003356 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2224      	movs	r2, #36	; 0x24
 80032fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0201 	bic.w	r2, r2, #1
 800330c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800331c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	021b      	lsls	r3, r3, #8
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4313      	orrs	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	e000      	b.n	8003356 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003354:	2302      	movs	r3, #2
  }
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003368:	4b04      	ldr	r3, [pc, #16]	; (800337c <HAL_PWREx_GetVoltageRange+0x18>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003370:	4618      	mov	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40007000 	.word	0x40007000

08003380 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800338e:	d130      	bne.n	80033f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003390:	4b23      	ldr	r3, [pc, #140]	; (8003420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800339c:	d038      	beq.n	8003410 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800339e:	4b20      	ldr	r3, [pc, #128]	; (8003420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033a6:	4a1e      	ldr	r2, [pc, #120]	; (8003420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033ae:	4b1d      	ldr	r3, [pc, #116]	; (8003424 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2232      	movs	r2, #50	; 0x32
 80033b4:	fb02 f303 	mul.w	r3, r2, r3
 80033b8:	4a1b      	ldr	r2, [pc, #108]	; (8003428 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033ba:	fba2 2303 	umull	r2, r3, r2, r3
 80033be:	0c9b      	lsrs	r3, r3, #18
 80033c0:	3301      	adds	r3, #1
 80033c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033c4:	e002      	b.n	80033cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	3b01      	subs	r3, #1
 80033ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033cc:	4b14      	ldr	r3, [pc, #80]	; (8003420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d8:	d102      	bne.n	80033e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1f2      	bne.n	80033c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033e0:	4b0f      	ldr	r3, [pc, #60]	; (8003420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ec:	d110      	bne.n	8003410 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e00f      	b.n	8003412 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80033f2:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fe:	d007      	beq.n	8003410 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003400:	4b07      	ldr	r3, [pc, #28]	; (8003420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003408:	4a05      	ldr	r2, [pc, #20]	; (8003420 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800340a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800340e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40007000 	.word	0x40007000
 8003424:	20000000 	.word	0x20000000
 8003428:	431bde83 	.word	0x431bde83

0800342c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e3ca      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800343e:	4b97      	ldr	r3, [pc, #604]	; (800369c <HAL_RCC_OscConfig+0x270>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 030c 	and.w	r3, r3, #12
 8003446:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003448:	4b94      	ldr	r3, [pc, #592]	; (800369c <HAL_RCC_OscConfig+0x270>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0310 	and.w	r3, r3, #16
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 80e4 	beq.w	8003628 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d007      	beq.n	8003476 <HAL_RCC_OscConfig+0x4a>
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	2b0c      	cmp	r3, #12
 800346a:	f040 808b 	bne.w	8003584 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2b01      	cmp	r3, #1
 8003472:	f040 8087 	bne.w	8003584 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003476:	4b89      	ldr	r3, [pc, #548]	; (800369c <HAL_RCC_OscConfig+0x270>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d005      	beq.n	800348e <HAL_RCC_OscConfig+0x62>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e3a2      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1a      	ldr	r2, [r3, #32]
 8003492:	4b82      	ldr	r3, [pc, #520]	; (800369c <HAL_RCC_OscConfig+0x270>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d004      	beq.n	80034a8 <HAL_RCC_OscConfig+0x7c>
 800349e:	4b7f      	ldr	r3, [pc, #508]	; (800369c <HAL_RCC_OscConfig+0x270>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034a6:	e005      	b.n	80034b4 <HAL_RCC_OscConfig+0x88>
 80034a8:	4b7c      	ldr	r3, [pc, #496]	; (800369c <HAL_RCC_OscConfig+0x270>)
 80034aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ae:	091b      	lsrs	r3, r3, #4
 80034b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d223      	bcs.n	8003500 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fd55 	bl	8003f6c <RCC_SetFlashLatencyFromMSIRange>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e383      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034cc:	4b73      	ldr	r3, [pc, #460]	; (800369c <HAL_RCC_OscConfig+0x270>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a72      	ldr	r2, [pc, #456]	; (800369c <HAL_RCC_OscConfig+0x270>)
 80034d2:	f043 0308 	orr.w	r3, r3, #8
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	4b70      	ldr	r3, [pc, #448]	; (800369c <HAL_RCC_OscConfig+0x270>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	496d      	ldr	r1, [pc, #436]	; (800369c <HAL_RCC_OscConfig+0x270>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034ea:	4b6c      	ldr	r3, [pc, #432]	; (800369c <HAL_RCC_OscConfig+0x270>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	021b      	lsls	r3, r3, #8
 80034f8:	4968      	ldr	r1, [pc, #416]	; (800369c <HAL_RCC_OscConfig+0x270>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	604b      	str	r3, [r1, #4]
 80034fe:	e025      	b.n	800354c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003500:	4b66      	ldr	r3, [pc, #408]	; (800369c <HAL_RCC_OscConfig+0x270>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a65      	ldr	r2, [pc, #404]	; (800369c <HAL_RCC_OscConfig+0x270>)
 8003506:	f043 0308 	orr.w	r3, r3, #8
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	4b63      	ldr	r3, [pc, #396]	; (800369c <HAL_RCC_OscConfig+0x270>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	4960      	ldr	r1, [pc, #384]	; (800369c <HAL_RCC_OscConfig+0x270>)
 800351a:	4313      	orrs	r3, r2
 800351c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800351e:	4b5f      	ldr	r3, [pc, #380]	; (800369c <HAL_RCC_OscConfig+0x270>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	021b      	lsls	r3, r3, #8
 800352c:	495b      	ldr	r1, [pc, #364]	; (800369c <HAL_RCC_OscConfig+0x270>)
 800352e:	4313      	orrs	r3, r2
 8003530:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d109      	bne.n	800354c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	4618      	mov	r0, r3
 800353e:	f000 fd15 	bl	8003f6c <RCC_SetFlashLatencyFromMSIRange>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e343      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800354c:	f000 fc4a 	bl	8003de4 <HAL_RCC_GetSysClockFreq>
 8003550:	4602      	mov	r2, r0
 8003552:	4b52      	ldr	r3, [pc, #328]	; (800369c <HAL_RCC_OscConfig+0x270>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	091b      	lsrs	r3, r3, #4
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	4950      	ldr	r1, [pc, #320]	; (80036a0 <HAL_RCC_OscConfig+0x274>)
 800355e:	5ccb      	ldrb	r3, [r1, r3]
 8003560:	f003 031f 	and.w	r3, r3, #31
 8003564:	fa22 f303 	lsr.w	r3, r2, r3
 8003568:	4a4e      	ldr	r2, [pc, #312]	; (80036a4 <HAL_RCC_OscConfig+0x278>)
 800356a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800356c:	4b4e      	ldr	r3, [pc, #312]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f7fe fc1b 	bl	8001dac <HAL_InitTick>
 8003576:	4603      	mov	r3, r0
 8003578:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800357a:	7bfb      	ldrb	r3, [r7, #15]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d052      	beq.n	8003626 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	e327      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d032      	beq.n	80035f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800358c:	4b43      	ldr	r3, [pc, #268]	; (800369c <HAL_RCC_OscConfig+0x270>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a42      	ldr	r2, [pc, #264]	; (800369c <HAL_RCC_OscConfig+0x270>)
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003598:	f7fe fc58 	bl	8001e4c <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035a0:	f7fe fc54 	bl	8001e4c <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e310      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035b2:	4b3a      	ldr	r3, [pc, #232]	; (800369c <HAL_RCC_OscConfig+0x270>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f0      	beq.n	80035a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035be:	4b37      	ldr	r3, [pc, #220]	; (800369c <HAL_RCC_OscConfig+0x270>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a36      	ldr	r2, [pc, #216]	; (800369c <HAL_RCC_OscConfig+0x270>)
 80035c4:	f043 0308 	orr.w	r3, r3, #8
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	4b34      	ldr	r3, [pc, #208]	; (800369c <HAL_RCC_OscConfig+0x270>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	4931      	ldr	r1, [pc, #196]	; (800369c <HAL_RCC_OscConfig+0x270>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035dc:	4b2f      	ldr	r3, [pc, #188]	; (800369c <HAL_RCC_OscConfig+0x270>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	021b      	lsls	r3, r3, #8
 80035ea:	492c      	ldr	r1, [pc, #176]	; (800369c <HAL_RCC_OscConfig+0x270>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]
 80035f0:	e01a      	b.n	8003628 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035f2:	4b2a      	ldr	r3, [pc, #168]	; (800369c <HAL_RCC_OscConfig+0x270>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a29      	ldr	r2, [pc, #164]	; (800369c <HAL_RCC_OscConfig+0x270>)
 80035f8:	f023 0301 	bic.w	r3, r3, #1
 80035fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035fe:	f7fe fc25 	bl	8001e4c <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003606:	f7fe fc21 	bl	8001e4c <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e2dd      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003618:	4b20      	ldr	r3, [pc, #128]	; (800369c <HAL_RCC_OscConfig+0x270>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f0      	bne.n	8003606 <HAL_RCC_OscConfig+0x1da>
 8003624:	e000      	b.n	8003628 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003626:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	d074      	beq.n	800371e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	2b08      	cmp	r3, #8
 8003638:	d005      	beq.n	8003646 <HAL_RCC_OscConfig+0x21a>
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	2b0c      	cmp	r3, #12
 800363e:	d10e      	bne.n	800365e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	2b03      	cmp	r3, #3
 8003644:	d10b      	bne.n	800365e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003646:	4b15      	ldr	r3, [pc, #84]	; (800369c <HAL_RCC_OscConfig+0x270>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d064      	beq.n	800371c <HAL_RCC_OscConfig+0x2f0>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d160      	bne.n	800371c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e2ba      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003666:	d106      	bne.n	8003676 <HAL_RCC_OscConfig+0x24a>
 8003668:	4b0c      	ldr	r3, [pc, #48]	; (800369c <HAL_RCC_OscConfig+0x270>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a0b      	ldr	r2, [pc, #44]	; (800369c <HAL_RCC_OscConfig+0x270>)
 800366e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	e026      	b.n	80036c4 <HAL_RCC_OscConfig+0x298>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800367e:	d115      	bne.n	80036ac <HAL_RCC_OscConfig+0x280>
 8003680:	4b06      	ldr	r3, [pc, #24]	; (800369c <HAL_RCC_OscConfig+0x270>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a05      	ldr	r2, [pc, #20]	; (800369c <HAL_RCC_OscConfig+0x270>)
 8003686:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	4b03      	ldr	r3, [pc, #12]	; (800369c <HAL_RCC_OscConfig+0x270>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a02      	ldr	r2, [pc, #8]	; (800369c <HAL_RCC_OscConfig+0x270>)
 8003692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	e014      	b.n	80036c4 <HAL_RCC_OscConfig+0x298>
 800369a:	bf00      	nop
 800369c:	40021000 	.word	0x40021000
 80036a0:	08008ec0 	.word	0x08008ec0
 80036a4:	20000000 	.word	0x20000000
 80036a8:	20000008 	.word	0x20000008
 80036ac:	4ba0      	ldr	r3, [pc, #640]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a9f      	ldr	r2, [pc, #636]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 80036b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	4b9d      	ldr	r3, [pc, #628]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a9c      	ldr	r2, [pc, #624]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 80036be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d013      	beq.n	80036f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fe fbbe 	bl	8001e4c <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d4:	f7fe fbba 	bl	8001e4c <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b64      	cmp	r3, #100	; 0x64
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e276      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036e6:	4b92      	ldr	r3, [pc, #584]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x2a8>
 80036f2:	e014      	b.n	800371e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f4:	f7fe fbaa 	bl	8001e4c <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036fc:	f7fe fba6 	bl	8001e4c <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b64      	cmp	r3, #100	; 0x64
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e262      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800370e:	4b88      	ldr	r3, [pc, #544]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f0      	bne.n	80036fc <HAL_RCC_OscConfig+0x2d0>
 800371a:	e000      	b.n	800371e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800371c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d060      	beq.n	80037ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	2b04      	cmp	r3, #4
 800372e:	d005      	beq.n	800373c <HAL_RCC_OscConfig+0x310>
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	2b0c      	cmp	r3, #12
 8003734:	d119      	bne.n	800376a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d116      	bne.n	800376a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800373c:	4b7c      	ldr	r3, [pc, #496]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <HAL_RCC_OscConfig+0x328>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e23f      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003754:	4b76      	ldr	r3, [pc, #472]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	061b      	lsls	r3, r3, #24
 8003762:	4973      	ldr	r1, [pc, #460]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 8003764:	4313      	orrs	r3, r2
 8003766:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003768:	e040      	b.n	80037ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d023      	beq.n	80037ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003772:	4b6f      	ldr	r3, [pc, #444]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a6e      	ldr	r2, [pc, #440]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 8003778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800377c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377e:	f7fe fb65 	bl	8001e4c <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003786:	f7fe fb61 	bl	8001e4c <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e21d      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003798:	4b65      	ldr	r3, [pc, #404]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0f0      	beq.n	8003786 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a4:	4b62      	ldr	r3, [pc, #392]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	061b      	lsls	r3, r3, #24
 80037b2:	495f      	ldr	r1, [pc, #380]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	604b      	str	r3, [r1, #4]
 80037b8:	e018      	b.n	80037ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ba:	4b5d      	ldr	r3, [pc, #372]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a5c      	ldr	r2, [pc, #368]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 80037c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c6:	f7fe fb41 	bl	8001e4c <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ce:	f7fe fb3d 	bl	8001e4c <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e1f9      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037e0:	4b53      	ldr	r3, [pc, #332]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1f0      	bne.n	80037ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d03c      	beq.n	8003872 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d01c      	beq.n	800383a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003800:	4b4b      	ldr	r3, [pc, #300]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 8003802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003806:	4a4a      	ldr	r2, [pc, #296]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003810:	f7fe fb1c 	bl	8001e4c <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003818:	f7fe fb18 	bl	8001e4c <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e1d4      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800382a:	4b41      	ldr	r3, [pc, #260]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 800382c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0ef      	beq.n	8003818 <HAL_RCC_OscConfig+0x3ec>
 8003838:	e01b      	b.n	8003872 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800383a:	4b3d      	ldr	r3, [pc, #244]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 800383c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003840:	4a3b      	ldr	r2, [pc, #236]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 8003842:	f023 0301 	bic.w	r3, r3, #1
 8003846:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384a:	f7fe faff 	bl	8001e4c <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003852:	f7fe fafb 	bl	8001e4c <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e1b7      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003864:	4b32      	ldr	r3, [pc, #200]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 8003866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1ef      	bne.n	8003852 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0304 	and.w	r3, r3, #4
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 80a6 	beq.w	80039cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003880:	2300      	movs	r3, #0
 8003882:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003884:	4b2a      	ldr	r3, [pc, #168]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 8003886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10d      	bne.n	80038ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003890:	4b27      	ldr	r3, [pc, #156]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 8003892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003894:	4a26      	ldr	r2, [pc, #152]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 8003896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800389a:	6593      	str	r3, [r2, #88]	; 0x58
 800389c:	4b24      	ldr	r3, [pc, #144]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 800389e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038a8:	2301      	movs	r3, #1
 80038aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ac:	4b21      	ldr	r3, [pc, #132]	; (8003934 <HAL_RCC_OscConfig+0x508>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d118      	bne.n	80038ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038b8:	4b1e      	ldr	r3, [pc, #120]	; (8003934 <HAL_RCC_OscConfig+0x508>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a1d      	ldr	r2, [pc, #116]	; (8003934 <HAL_RCC_OscConfig+0x508>)
 80038be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038c4:	f7fe fac2 	bl	8001e4c <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038cc:	f7fe fabe 	bl	8001e4c <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e17a      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038de:	4b15      	ldr	r3, [pc, #84]	; (8003934 <HAL_RCC_OscConfig+0x508>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d108      	bne.n	8003904 <HAL_RCC_OscConfig+0x4d8>
 80038f2:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 80038f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f8:	4a0d      	ldr	r2, [pc, #52]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003902:	e029      	b.n	8003958 <HAL_RCC_OscConfig+0x52c>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2b05      	cmp	r3, #5
 800390a:	d115      	bne.n	8003938 <HAL_RCC_OscConfig+0x50c>
 800390c:	4b08      	ldr	r3, [pc, #32]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 800390e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003912:	4a07      	ldr	r2, [pc, #28]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 8003914:	f043 0304 	orr.w	r3, r3, #4
 8003918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800391c:	4b04      	ldr	r3, [pc, #16]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 800391e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003922:	4a03      	ldr	r2, [pc, #12]	; (8003930 <HAL_RCC_OscConfig+0x504>)
 8003924:	f043 0301 	orr.w	r3, r3, #1
 8003928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800392c:	e014      	b.n	8003958 <HAL_RCC_OscConfig+0x52c>
 800392e:	bf00      	nop
 8003930:	40021000 	.word	0x40021000
 8003934:	40007000 	.word	0x40007000
 8003938:	4b9c      	ldr	r3, [pc, #624]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393e:	4a9b      	ldr	r2, [pc, #620]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 8003940:	f023 0301 	bic.w	r3, r3, #1
 8003944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003948:	4b98      	ldr	r3, [pc, #608]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394e:	4a97      	ldr	r2, [pc, #604]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 8003950:	f023 0304 	bic.w	r3, r3, #4
 8003954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d016      	beq.n	800398e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003960:	f7fe fa74 	bl	8001e4c <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003966:	e00a      	b.n	800397e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003968:	f7fe fa70 	bl	8001e4c <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	f241 3288 	movw	r2, #5000	; 0x1388
 8003976:	4293      	cmp	r3, r2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e12a      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800397e:	4b8b      	ldr	r3, [pc, #556]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 8003980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0ed      	beq.n	8003968 <HAL_RCC_OscConfig+0x53c>
 800398c:	e015      	b.n	80039ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398e:	f7fe fa5d 	bl	8001e4c <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003994:	e00a      	b.n	80039ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003996:	f7fe fa59 	bl	8001e4c <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e113      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039ac:	4b7f      	ldr	r3, [pc, #508]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 80039ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1ed      	bne.n	8003996 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039ba:	7ffb      	ldrb	r3, [r7, #31]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d105      	bne.n	80039cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c0:	4b7a      	ldr	r3, [pc, #488]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 80039c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c4:	4a79      	ldr	r2, [pc, #484]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 80039c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 80fe 	beq.w	8003bd2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	2b02      	cmp	r3, #2
 80039dc:	f040 80d0 	bne.w	8003b80 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80039e0:	4b72      	ldr	r3, [pc, #456]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f003 0203 	and.w	r2, r3, #3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d130      	bne.n	8003a56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fe:	3b01      	subs	r3, #1
 8003a00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d127      	bne.n	8003a56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a10:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d11f      	bne.n	8003a56 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a20:	2a07      	cmp	r2, #7
 8003a22:	bf14      	ite	ne
 8003a24:	2201      	movne	r2, #1
 8003a26:	2200      	moveq	r2, #0
 8003a28:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d113      	bne.n	8003a56 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a38:	085b      	lsrs	r3, r3, #1
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d109      	bne.n	8003a56 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4c:	085b      	lsrs	r3, r3, #1
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d06e      	beq.n	8003b34 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	2b0c      	cmp	r3, #12
 8003a5a:	d069      	beq.n	8003b30 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a5c:	4b53      	ldr	r3, [pc, #332]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d105      	bne.n	8003a74 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a68:	4b50      	ldr	r3, [pc, #320]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0ad      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a78:	4b4c      	ldr	r3, [pc, #304]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a4b      	ldr	r2, [pc, #300]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 8003a7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a82:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a84:	f7fe f9e2 	bl	8001e4c <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8c:	f7fe f9de 	bl	8001e4c <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e09a      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a9e:	4b43      	ldr	r3, [pc, #268]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aaa:	4b40      	ldr	r3, [pc, #256]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	4b40      	ldr	r3, [pc, #256]	; (8003bb0 <HAL_RCC_OscConfig+0x784>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003aba:	3a01      	subs	r2, #1
 8003abc:	0112      	lsls	r2, r2, #4
 8003abe:	4311      	orrs	r1, r2
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ac4:	0212      	lsls	r2, r2, #8
 8003ac6:	4311      	orrs	r1, r2
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003acc:	0852      	lsrs	r2, r2, #1
 8003ace:	3a01      	subs	r2, #1
 8003ad0:	0552      	lsls	r2, r2, #21
 8003ad2:	4311      	orrs	r1, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ad8:	0852      	lsrs	r2, r2, #1
 8003ada:	3a01      	subs	r2, #1
 8003adc:	0652      	lsls	r2, r2, #25
 8003ade:	4311      	orrs	r1, r2
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ae4:	0912      	lsrs	r2, r2, #4
 8003ae6:	0452      	lsls	r2, r2, #17
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	4930      	ldr	r1, [pc, #192]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003af0:	4b2e      	ldr	r3, [pc, #184]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a2d      	ldr	r2, [pc, #180]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 8003af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003afa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003afc:	4b2b      	ldr	r3, [pc, #172]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4a2a      	ldr	r2, [pc, #168]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 8003b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b08:	f7fe f9a0 	bl	8001e4c <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b10:	f7fe f99c 	bl	8001e4c <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e058      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b22:	4b22      	ldr	r3, [pc, #136]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b2e:	e050      	b.n	8003bd2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e04f      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b34:	4b1d      	ldr	r3, [pc, #116]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d148      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b40:	4b1a      	ldr	r3, [pc, #104]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a19      	ldr	r2, [pc, #100]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 8003b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b4c:	4b17      	ldr	r3, [pc, #92]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4a16      	ldr	r2, [pc, #88]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 8003b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b58:	f7fe f978 	bl	8001e4c <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b60:	f7fe f974 	bl	8001e4c <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e030      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b72:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0x734>
 8003b7e:	e028      	b.n	8003bd2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	2b0c      	cmp	r3, #12
 8003b84:	d023      	beq.n	8003bce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b86:	4b09      	ldr	r3, [pc, #36]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a08      	ldr	r2, [pc, #32]	; (8003bac <HAL_RCC_OscConfig+0x780>)
 8003b8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b92:	f7fe f95b 	bl	8001e4c <HAL_GetTick>
 8003b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b98:	e00c      	b.n	8003bb4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b9a:	f7fe f957 	bl	8001e4c <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d905      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e013      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bb4:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <HAL_RCC_OscConfig+0x7b0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1ec      	bne.n	8003b9a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003bc0:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <HAL_RCC_OscConfig+0x7b0>)
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	4905      	ldr	r1, [pc, #20]	; (8003bdc <HAL_RCC_OscConfig+0x7b0>)
 8003bc6:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <HAL_RCC_OscConfig+0x7b4>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	60cb      	str	r3, [r1, #12]
 8003bcc:	e001      	b.n	8003bd2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3720      	adds	r7, #32
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	feeefffc 	.word	0xfeeefffc

08003be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e0e7      	b.n	8003dc8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bf8:	4b75      	ldr	r3, [pc, #468]	; (8003dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d910      	bls.n	8003c28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c06:	4b72      	ldr	r3, [pc, #456]	; (8003dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f023 0207 	bic.w	r2, r3, #7
 8003c0e:	4970      	ldr	r1, [pc, #448]	; (8003dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c16:	4b6e      	ldr	r3, [pc, #440]	; (8003dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0cf      	b.n	8003dc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d010      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	4b66      	ldr	r3, [pc, #408]	; (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d908      	bls.n	8003c56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c44:	4b63      	ldr	r3, [pc, #396]	; (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	4960      	ldr	r1, [pc, #384]	; (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d04c      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b03      	cmp	r3, #3
 8003c68:	d107      	bne.n	8003c7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c6a:	4b5a      	ldr	r3, [pc, #360]	; (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d121      	bne.n	8003cba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e0a6      	b.n	8003dc8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d107      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c82:	4b54      	ldr	r3, [pc, #336]	; (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d115      	bne.n	8003cba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e09a      	b.n	8003dc8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d107      	bne.n	8003caa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c9a:	4b4e      	ldr	r3, [pc, #312]	; (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d109      	bne.n	8003cba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e08e      	b.n	8003dc8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003caa:	4b4a      	ldr	r3, [pc, #296]	; (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e086      	b.n	8003dc8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cba:	4b46      	ldr	r3, [pc, #280]	; (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f023 0203 	bic.w	r2, r3, #3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	4943      	ldr	r1, [pc, #268]	; (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ccc:	f7fe f8be 	bl	8001e4c <HAL_GetTick>
 8003cd0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd2:	e00a      	b.n	8003cea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd4:	f7fe f8ba 	bl	8001e4c <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e06e      	b.n	8003dc8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cea:	4b3a      	ldr	r3, [pc, #232]	; (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 020c 	and.w	r2, r3, #12
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d1eb      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d010      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	4b31      	ldr	r3, [pc, #196]	; (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d208      	bcs.n	8003d2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d18:	4b2e      	ldr	r3, [pc, #184]	; (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	492b      	ldr	r1, [pc, #172]	; (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d2a:	4b29      	ldr	r3, [pc, #164]	; (8003dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d210      	bcs.n	8003d5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d38:	4b25      	ldr	r3, [pc, #148]	; (8003dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f023 0207 	bic.w	r2, r3, #7
 8003d40:	4923      	ldr	r1, [pc, #140]	; (8003dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d48:	4b21      	ldr	r3, [pc, #132]	; (8003dd0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d001      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e036      	b.n	8003dc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d66:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	4918      	ldr	r1, [pc, #96]	; (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d009      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d84:	4b13      	ldr	r3, [pc, #76]	; (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	4910      	ldr	r1, [pc, #64]	; (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d98:	f000 f824 	bl	8003de4 <HAL_RCC_GetSysClockFreq>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	4b0d      	ldr	r3, [pc, #52]	; (8003dd4 <HAL_RCC_ClockConfig+0x1f0>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	091b      	lsrs	r3, r3, #4
 8003da4:	f003 030f 	and.w	r3, r3, #15
 8003da8:	490b      	ldr	r1, [pc, #44]	; (8003dd8 <HAL_RCC_ClockConfig+0x1f4>)
 8003daa:	5ccb      	ldrb	r3, [r1, r3]
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	fa22 f303 	lsr.w	r3, r2, r3
 8003db4:	4a09      	ldr	r2, [pc, #36]	; (8003ddc <HAL_RCC_ClockConfig+0x1f8>)
 8003db6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003db8:	4b09      	ldr	r3, [pc, #36]	; (8003de0 <HAL_RCC_ClockConfig+0x1fc>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fd fff5 	bl	8001dac <HAL_InitTick>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003dc6:	7afb      	ldrb	r3, [r7, #11]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40022000 	.word	0x40022000
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	08008ec0 	.word	0x08008ec0
 8003ddc:	20000000 	.word	0x20000000
 8003de0:	20000008 	.word	0x20000008

08003de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b089      	sub	sp, #36	; 0x24
 8003de8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	61fb      	str	r3, [r7, #28]
 8003dee:	2300      	movs	r3, #0
 8003df0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003df2:	4b3e      	ldr	r3, [pc, #248]	; (8003eec <HAL_RCC_GetSysClockFreq+0x108>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 030c 	and.w	r3, r3, #12
 8003dfa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dfc:	4b3b      	ldr	r3, [pc, #236]	; (8003eec <HAL_RCC_GetSysClockFreq+0x108>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0303 	and.w	r3, r3, #3
 8003e04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d005      	beq.n	8003e18 <HAL_RCC_GetSysClockFreq+0x34>
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	2b0c      	cmp	r3, #12
 8003e10:	d121      	bne.n	8003e56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d11e      	bne.n	8003e56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e18:	4b34      	ldr	r3, [pc, #208]	; (8003eec <HAL_RCC_GetSysClockFreq+0x108>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d107      	bne.n	8003e34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e24:	4b31      	ldr	r3, [pc, #196]	; (8003eec <HAL_RCC_GetSysClockFreq+0x108>)
 8003e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e2a:	0a1b      	lsrs	r3, r3, #8
 8003e2c:	f003 030f 	and.w	r3, r3, #15
 8003e30:	61fb      	str	r3, [r7, #28]
 8003e32:	e005      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e34:	4b2d      	ldr	r3, [pc, #180]	; (8003eec <HAL_RCC_GetSysClockFreq+0x108>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e40:	4a2b      	ldr	r2, [pc, #172]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10d      	bne.n	8003e6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e54:	e00a      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d102      	bne.n	8003e62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e5c:	4b25      	ldr	r3, [pc, #148]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e5e:	61bb      	str	r3, [r7, #24]
 8003e60:	e004      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d101      	bne.n	8003e6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e68:	4b23      	ldr	r3, [pc, #140]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	2b0c      	cmp	r3, #12
 8003e70:	d134      	bne.n	8003edc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e72:	4b1e      	ldr	r3, [pc, #120]	; (8003eec <HAL_RCC_GetSysClockFreq+0x108>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d003      	beq.n	8003e8a <HAL_RCC_GetSysClockFreq+0xa6>
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b03      	cmp	r3, #3
 8003e86:	d003      	beq.n	8003e90 <HAL_RCC_GetSysClockFreq+0xac>
 8003e88:	e005      	b.n	8003e96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e8a:	4b1a      	ldr	r3, [pc, #104]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e8c:	617b      	str	r3, [r7, #20]
      break;
 8003e8e:	e005      	b.n	8003e9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e90:	4b19      	ldr	r3, [pc, #100]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e92:	617b      	str	r3, [r7, #20]
      break;
 8003e94:	e002      	b.n	8003e9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	617b      	str	r3, [r7, #20]
      break;
 8003e9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e9c:	4b13      	ldr	r3, [pc, #76]	; (8003eec <HAL_RCC_GetSysClockFreq+0x108>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	091b      	lsrs	r3, r3, #4
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003eaa:	4b10      	ldr	r3, [pc, #64]	; (8003eec <HAL_RCC_GetSysClockFreq+0x108>)
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	0a1b      	lsrs	r3, r3, #8
 8003eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	fb03 f202 	mul.w	r2, r3, r2
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ec2:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	0e5b      	lsrs	r3, r3, #25
 8003ec8:	f003 0303 	and.w	r3, r3, #3
 8003ecc:	3301      	adds	r3, #1
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003edc:	69bb      	ldr	r3, [r7, #24]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3724      	adds	r7, #36	; 0x24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	08008ed8 	.word	0x08008ed8
 8003ef4:	00f42400 	.word	0x00f42400
 8003ef8:	007a1200 	.word	0x007a1200

08003efc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f00:	4b03      	ldr	r3, [pc, #12]	; (8003f10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f02:	681b      	ldr	r3, [r3, #0]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	20000000 	.word	0x20000000

08003f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f18:	f7ff fff0 	bl	8003efc <HAL_RCC_GetHCLKFreq>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	0a1b      	lsrs	r3, r3, #8
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	4904      	ldr	r1, [pc, #16]	; (8003f3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f2a:	5ccb      	ldrb	r3, [r1, r3]
 8003f2c:	f003 031f 	and.w	r3, r3, #31
 8003f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	08008ed0 	.word	0x08008ed0

08003f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f44:	f7ff ffda 	bl	8003efc <HAL_RCC_GetHCLKFreq>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	0adb      	lsrs	r3, r3, #11
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	4904      	ldr	r1, [pc, #16]	; (8003f68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f56:	5ccb      	ldrb	r3, [r1, r3]
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40021000 	.word	0x40021000
 8003f68:	08008ed0 	.word	0x08008ed0

08003f6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f74:	2300      	movs	r3, #0
 8003f76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f78:	4b2a      	ldr	r3, [pc, #168]	; (8004024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f84:	f7ff f9ee 	bl	8003364 <HAL_PWREx_GetVoltageRange>
 8003f88:	6178      	str	r0, [r7, #20]
 8003f8a:	e014      	b.n	8003fb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f8c:	4b25      	ldr	r3, [pc, #148]	; (8004024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f90:	4a24      	ldr	r2, [pc, #144]	; (8004024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f96:	6593      	str	r3, [r2, #88]	; 0x58
 8003f98:	4b22      	ldr	r3, [pc, #136]	; (8004024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fa4:	f7ff f9de 	bl	8003364 <HAL_PWREx_GetVoltageRange>
 8003fa8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003faa:	4b1e      	ldr	r3, [pc, #120]	; (8004024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fae:	4a1d      	ldr	r2, [pc, #116]	; (8004024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fbc:	d10b      	bne.n	8003fd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b80      	cmp	r3, #128	; 0x80
 8003fc2:	d919      	bls.n	8003ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2ba0      	cmp	r3, #160	; 0xa0
 8003fc8:	d902      	bls.n	8003fd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fca:	2302      	movs	r3, #2
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	e013      	b.n	8003ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	e010      	b.n	8003ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b80      	cmp	r3, #128	; 0x80
 8003fda:	d902      	bls.n	8003fe2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003fdc:	2303      	movs	r3, #3
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	e00a      	b.n	8003ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b80      	cmp	r3, #128	; 0x80
 8003fe6:	d102      	bne.n	8003fee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fe8:	2302      	movs	r3, #2
 8003fea:	613b      	str	r3, [r7, #16]
 8003fec:	e004      	b.n	8003ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b70      	cmp	r3, #112	; 0x70
 8003ff2:	d101      	bne.n	8003ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f023 0207 	bic.w	r2, r3, #7
 8004000:	4909      	ldr	r1, [pc, #36]	; (8004028 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004008:	4b07      	ldr	r3, [pc, #28]	; (8004028 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	429a      	cmp	r2, r3
 8004014:	d001      	beq.n	800401a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40021000 	.word	0x40021000
 8004028:	40022000 	.word	0x40022000

0800402c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004034:	2300      	movs	r3, #0
 8004036:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004038:	2300      	movs	r3, #0
 800403a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004044:	2b00      	cmp	r3, #0
 8004046:	d041      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800404c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004050:	d02a      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004052:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004056:	d824      	bhi.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004058:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800405c:	d008      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800405e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004062:	d81e      	bhi.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00a      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004068:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800406c:	d010      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800406e:	e018      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004070:	4b86      	ldr	r3, [pc, #536]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	4a85      	ldr	r2, [pc, #532]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800407a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800407c:	e015      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3304      	adds	r3, #4
 8004082:	2100      	movs	r1, #0
 8004084:	4618      	mov	r0, r3
 8004086:	f000 fabb 	bl	8004600 <RCCEx_PLLSAI1_Config>
 800408a:	4603      	mov	r3, r0
 800408c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800408e:	e00c      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3320      	adds	r3, #32
 8004094:	2100      	movs	r1, #0
 8004096:	4618      	mov	r0, r3
 8004098:	f000 fba6 	bl	80047e8 <RCCEx_PLLSAI2_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040a0:	e003      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	74fb      	strb	r3, [r7, #19]
      break;
 80040a6:	e000      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80040a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040aa:	7cfb      	ldrb	r3, [r7, #19]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10b      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040b0:	4b76      	ldr	r3, [pc, #472]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040be:	4973      	ldr	r1, [pc, #460]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040c6:	e001      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c8:	7cfb      	ldrb	r3, [r7, #19]
 80040ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d041      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040e0:	d02a      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80040e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040e6:	d824      	bhi.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040ec:	d008      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80040ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040f2:	d81e      	bhi.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00a      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80040f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040fc:	d010      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040fe:	e018      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004100:	4b62      	ldr	r3, [pc, #392]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	4a61      	ldr	r2, [pc, #388]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800410a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800410c:	e015      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3304      	adds	r3, #4
 8004112:	2100      	movs	r1, #0
 8004114:	4618      	mov	r0, r3
 8004116:	f000 fa73 	bl	8004600 <RCCEx_PLLSAI1_Config>
 800411a:	4603      	mov	r3, r0
 800411c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800411e:	e00c      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3320      	adds	r3, #32
 8004124:	2100      	movs	r1, #0
 8004126:	4618      	mov	r0, r3
 8004128:	f000 fb5e 	bl	80047e8 <RCCEx_PLLSAI2_Config>
 800412c:	4603      	mov	r3, r0
 800412e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004130:	e003      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	74fb      	strb	r3, [r7, #19]
      break;
 8004136:	e000      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004138:	bf00      	nop
    }

    if(ret == HAL_OK)
 800413a:	7cfb      	ldrb	r3, [r7, #19]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10b      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004140:	4b52      	ldr	r3, [pc, #328]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004146:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800414e:	494f      	ldr	r1, [pc, #316]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004156:	e001      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004158:	7cfb      	ldrb	r3, [r7, #19]
 800415a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 80a0 	beq.w	80042aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800416a:	2300      	movs	r3, #0
 800416c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800416e:	4b47      	ldr	r3, [pc, #284]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800417e:	2300      	movs	r3, #0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00d      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004184:	4b41      	ldr	r3, [pc, #260]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004188:	4a40      	ldr	r2, [pc, #256]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800418a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800418e:	6593      	str	r3, [r2, #88]	; 0x58
 8004190:	4b3e      	ldr	r3, [pc, #248]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800419c:	2301      	movs	r3, #1
 800419e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041a0:	4b3b      	ldr	r3, [pc, #236]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a3a      	ldr	r2, [pc, #232]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041ac:	f7fd fe4e 	bl	8001e4c <HAL_GetTick>
 80041b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041b2:	e009      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b4:	f7fd fe4a 	bl	8001e4c <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d902      	bls.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	74fb      	strb	r3, [r7, #19]
        break;
 80041c6:	e005      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041c8:	4b31      	ldr	r3, [pc, #196]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0ef      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80041d4:	7cfb      	ldrb	r3, [r7, #19]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d15c      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041da:	4b2c      	ldr	r3, [pc, #176]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01f      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d019      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041f8:	4b24      	ldr	r3, [pc, #144]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004202:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004204:	4b21      	ldr	r3, [pc, #132]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420a:	4a20      	ldr	r2, [pc, #128]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800420c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004214:	4b1d      	ldr	r3, [pc, #116]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421a:	4a1c      	ldr	r2, [pc, #112]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800421c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004224:	4a19      	ldr	r2, [pc, #100]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d016      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004236:	f7fd fe09 	bl	8001e4c <HAL_GetTick>
 800423a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800423c:	e00b      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800423e:	f7fd fe05 	bl	8001e4c <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	f241 3288 	movw	r2, #5000	; 0x1388
 800424c:	4293      	cmp	r3, r2
 800424e:	d902      	bls.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	74fb      	strb	r3, [r7, #19]
            break;
 8004254:	e006      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004256:	4b0d      	ldr	r3, [pc, #52]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0ec      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004264:	7cfb      	ldrb	r3, [r7, #19]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10c      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800426a:	4b08      	ldr	r3, [pc, #32]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004270:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800427a:	4904      	ldr	r1, [pc, #16]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004282:	e009      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004284:	7cfb      	ldrb	r3, [r7, #19]
 8004286:	74bb      	strb	r3, [r7, #18]
 8004288:	e006      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800428a:	bf00      	nop
 800428c:	40021000 	.word	0x40021000
 8004290:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004294:	7cfb      	ldrb	r3, [r7, #19]
 8004296:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004298:	7c7b      	ldrb	r3, [r7, #17]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d105      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800429e:	4b9e      	ldr	r3, [pc, #632]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a2:	4a9d      	ldr	r2, [pc, #628]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042b6:	4b98      	ldr	r3, [pc, #608]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042bc:	f023 0203 	bic.w	r2, r3, #3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	4994      	ldr	r1, [pc, #592]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00a      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042d8:	4b8f      	ldr	r3, [pc, #572]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042de:	f023 020c 	bic.w	r2, r3, #12
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e6:	498c      	ldr	r1, [pc, #560]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042fa:	4b87      	ldr	r3, [pc, #540]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004300:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	4983      	ldr	r1, [pc, #524]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800431c:	4b7e      	ldr	r3, [pc, #504]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004322:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432a:	497b      	ldr	r1, [pc, #492]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0310 	and.w	r3, r3, #16
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800433e:	4b76      	ldr	r3, [pc, #472]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004344:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800434c:	4972      	ldr	r1, [pc, #456]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004360:	4b6d      	ldr	r3, [pc, #436]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004366:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800436e:	496a      	ldr	r1, [pc, #424]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004382:	4b65      	ldr	r3, [pc, #404]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004388:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004390:	4961      	ldr	r1, [pc, #388]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043a4:	4b5c      	ldr	r3, [pc, #368]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b2:	4959      	ldr	r1, [pc, #356]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043c6:	4b54      	ldr	r3, [pc, #336]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d4:	4950      	ldr	r1, [pc, #320]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043e8:	4b4b      	ldr	r3, [pc, #300]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f6:	4948      	ldr	r1, [pc, #288]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800440a:	4b43      	ldr	r3, [pc, #268]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004410:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004418:	493f      	ldr	r1, [pc, #252]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d028      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800442c:	4b3a      	ldr	r3, [pc, #232]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004432:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800443a:	4937      	ldr	r1, [pc, #220]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004446:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800444a:	d106      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800444c:	4b32      	ldr	r3, [pc, #200]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	4a31      	ldr	r2, [pc, #196]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004456:	60d3      	str	r3, [r2, #12]
 8004458:	e011      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800445e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004462:	d10c      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3304      	adds	r3, #4
 8004468:	2101      	movs	r1, #1
 800446a:	4618      	mov	r0, r3
 800446c:	f000 f8c8 	bl	8004600 <RCCEx_PLLSAI1_Config>
 8004470:	4603      	mov	r3, r0
 8004472:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004474:	7cfb      	ldrb	r3, [r7, #19]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800447a:	7cfb      	ldrb	r3, [r7, #19]
 800447c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d028      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800448a:	4b23      	ldr	r3, [pc, #140]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004490:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004498:	491f      	ldr	r1, [pc, #124]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044a8:	d106      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044aa:	4b1b      	ldr	r3, [pc, #108]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	4a1a      	ldr	r2, [pc, #104]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044b4:	60d3      	str	r3, [r2, #12]
 80044b6:	e011      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044c0:	d10c      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3304      	adds	r3, #4
 80044c6:	2101      	movs	r1, #1
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 f899 	bl	8004600 <RCCEx_PLLSAI1_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044d2:	7cfb      	ldrb	r3, [r7, #19]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80044d8:	7cfb      	ldrb	r3, [r7, #19]
 80044da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d02b      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f6:	4908      	ldr	r1, [pc, #32]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004502:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004506:	d109      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004508:	4b03      	ldr	r3, [pc, #12]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	4a02      	ldr	r2, [pc, #8]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004512:	60d3      	str	r3, [r2, #12]
 8004514:	e014      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004516:	bf00      	nop
 8004518:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004520:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004524:	d10c      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3304      	adds	r3, #4
 800452a:	2101      	movs	r1, #1
 800452c:	4618      	mov	r0, r3
 800452e:	f000 f867 	bl	8004600 <RCCEx_PLLSAI1_Config>
 8004532:	4603      	mov	r3, r0
 8004534:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004536:	7cfb      	ldrb	r3, [r7, #19]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800453c:	7cfb      	ldrb	r3, [r7, #19]
 800453e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d02f      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800454c:	4b2b      	ldr	r3, [pc, #172]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004552:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800455a:	4928      	ldr	r1, [pc, #160]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004566:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800456a:	d10d      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3304      	adds	r3, #4
 8004570:	2102      	movs	r1, #2
 8004572:	4618      	mov	r0, r3
 8004574:	f000 f844 	bl	8004600 <RCCEx_PLLSAI1_Config>
 8004578:	4603      	mov	r3, r0
 800457a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800457c:	7cfb      	ldrb	r3, [r7, #19]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d014      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004582:	7cfb      	ldrb	r3, [r7, #19]
 8004584:	74bb      	strb	r3, [r7, #18]
 8004586:	e011      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800458c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004590:	d10c      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3320      	adds	r3, #32
 8004596:	2102      	movs	r1, #2
 8004598:	4618      	mov	r0, r3
 800459a:	f000 f925 	bl	80047e8 <RCCEx_PLLSAI2_Config>
 800459e:	4603      	mov	r3, r0
 80045a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045a2:	7cfb      	ldrb	r3, [r7, #19]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80045a8:	7cfb      	ldrb	r3, [r7, #19]
 80045aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045b8:	4b10      	ldr	r3, [pc, #64]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045c6:	490d      	ldr	r1, [pc, #52]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00b      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045da:	4b08      	ldr	r3, [pc, #32]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ea:	4904      	ldr	r1, [pc, #16]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80045f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40021000 	.word	0x40021000

08004600 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800460e:	4b75      	ldr	r3, [pc, #468]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d018      	beq.n	800464c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800461a:	4b72      	ldr	r3, [pc, #456]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f003 0203 	and.w	r2, r3, #3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d10d      	bne.n	8004646 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
       ||
 800462e:	2b00      	cmp	r3, #0
 8004630:	d009      	beq.n	8004646 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004632:	4b6c      	ldr	r3, [pc, #432]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	091b      	lsrs	r3, r3, #4
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
       ||
 8004642:	429a      	cmp	r2, r3
 8004644:	d047      	beq.n	80046d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	73fb      	strb	r3, [r7, #15]
 800464a:	e044      	b.n	80046d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b03      	cmp	r3, #3
 8004652:	d018      	beq.n	8004686 <RCCEx_PLLSAI1_Config+0x86>
 8004654:	2b03      	cmp	r3, #3
 8004656:	d825      	bhi.n	80046a4 <RCCEx_PLLSAI1_Config+0xa4>
 8004658:	2b01      	cmp	r3, #1
 800465a:	d002      	beq.n	8004662 <RCCEx_PLLSAI1_Config+0x62>
 800465c:	2b02      	cmp	r3, #2
 800465e:	d009      	beq.n	8004674 <RCCEx_PLLSAI1_Config+0x74>
 8004660:	e020      	b.n	80046a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004662:	4b60      	ldr	r3, [pc, #384]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d11d      	bne.n	80046aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004672:	e01a      	b.n	80046aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004674:	4b5b      	ldr	r3, [pc, #364]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800467c:	2b00      	cmp	r3, #0
 800467e:	d116      	bne.n	80046ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004684:	e013      	b.n	80046ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004686:	4b57      	ldr	r3, [pc, #348]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10f      	bne.n	80046b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004692:	4b54      	ldr	r3, [pc, #336]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d109      	bne.n	80046b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046a2:	e006      	b.n	80046b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	73fb      	strb	r3, [r7, #15]
      break;
 80046a8:	e004      	b.n	80046b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046aa:	bf00      	nop
 80046ac:	e002      	b.n	80046b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046ae:	bf00      	nop
 80046b0:	e000      	b.n	80046b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10d      	bne.n	80046d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046ba:	4b4a      	ldr	r3, [pc, #296]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6819      	ldr	r1, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	430b      	orrs	r3, r1
 80046d0:	4944      	ldr	r1, [pc, #272]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d17d      	bne.n	80047d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046dc:	4b41      	ldr	r3, [pc, #260]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a40      	ldr	r2, [pc, #256]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046e8:	f7fd fbb0 	bl	8001e4c <HAL_GetTick>
 80046ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046ee:	e009      	b.n	8004704 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046f0:	f7fd fbac 	bl	8001e4c <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d902      	bls.n	8004704 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	73fb      	strb	r3, [r7, #15]
        break;
 8004702:	e005      	b.n	8004710 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004704:	4b37      	ldr	r3, [pc, #220]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1ef      	bne.n	80046f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004710:	7bfb      	ldrb	r3, [r7, #15]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d160      	bne.n	80047d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d111      	bne.n	8004740 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800471c:	4b31      	ldr	r3, [pc, #196]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6892      	ldr	r2, [r2, #8]
 800472c:	0211      	lsls	r1, r2, #8
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	68d2      	ldr	r2, [r2, #12]
 8004732:	0912      	lsrs	r2, r2, #4
 8004734:	0452      	lsls	r2, r2, #17
 8004736:	430a      	orrs	r2, r1
 8004738:	492a      	ldr	r1, [pc, #168]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800473a:	4313      	orrs	r3, r2
 800473c:	610b      	str	r3, [r1, #16]
 800473e:	e027      	b.n	8004790 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d112      	bne.n	800476c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004746:	4b27      	ldr	r3, [pc, #156]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800474e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6892      	ldr	r2, [r2, #8]
 8004756:	0211      	lsls	r1, r2, #8
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6912      	ldr	r2, [r2, #16]
 800475c:	0852      	lsrs	r2, r2, #1
 800475e:	3a01      	subs	r2, #1
 8004760:	0552      	lsls	r2, r2, #21
 8004762:	430a      	orrs	r2, r1
 8004764:	491f      	ldr	r1, [pc, #124]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004766:	4313      	orrs	r3, r2
 8004768:	610b      	str	r3, [r1, #16]
 800476a:	e011      	b.n	8004790 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800476c:	4b1d      	ldr	r3, [pc, #116]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004774:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6892      	ldr	r2, [r2, #8]
 800477c:	0211      	lsls	r1, r2, #8
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6952      	ldr	r2, [r2, #20]
 8004782:	0852      	lsrs	r2, r2, #1
 8004784:	3a01      	subs	r2, #1
 8004786:	0652      	lsls	r2, r2, #25
 8004788:	430a      	orrs	r2, r1
 800478a:	4916      	ldr	r1, [pc, #88]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800478c:	4313      	orrs	r3, r2
 800478e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004790:	4b14      	ldr	r3, [pc, #80]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a13      	ldr	r2, [pc, #76]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004796:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800479a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479c:	f7fd fb56 	bl	8001e4c <HAL_GetTick>
 80047a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047a2:	e009      	b.n	80047b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047a4:	f7fd fb52 	bl	8001e4c <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d902      	bls.n	80047b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	73fb      	strb	r3, [r7, #15]
          break;
 80047b6:	e005      	b.n	80047c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047b8:	4b0a      	ldr	r3, [pc, #40]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0ef      	beq.n	80047a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047ca:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047cc:	691a      	ldr	r2, [r3, #16]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	4904      	ldr	r1, [pc, #16]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40021000 	.word	0x40021000

080047e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047f6:	4b6a      	ldr	r3, [pc, #424]	; (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d018      	beq.n	8004834 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004802:	4b67      	ldr	r3, [pc, #412]	; (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f003 0203 	and.w	r2, r3, #3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d10d      	bne.n	800482e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
       ||
 8004816:	2b00      	cmp	r3, #0
 8004818:	d009      	beq.n	800482e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800481a:	4b61      	ldr	r3, [pc, #388]	; (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	091b      	lsrs	r3, r3, #4
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
       ||
 800482a:	429a      	cmp	r2, r3
 800482c:	d047      	beq.n	80048be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	73fb      	strb	r3, [r7, #15]
 8004832:	e044      	b.n	80048be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b03      	cmp	r3, #3
 800483a:	d018      	beq.n	800486e <RCCEx_PLLSAI2_Config+0x86>
 800483c:	2b03      	cmp	r3, #3
 800483e:	d825      	bhi.n	800488c <RCCEx_PLLSAI2_Config+0xa4>
 8004840:	2b01      	cmp	r3, #1
 8004842:	d002      	beq.n	800484a <RCCEx_PLLSAI2_Config+0x62>
 8004844:	2b02      	cmp	r3, #2
 8004846:	d009      	beq.n	800485c <RCCEx_PLLSAI2_Config+0x74>
 8004848:	e020      	b.n	800488c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800484a:	4b55      	ldr	r3, [pc, #340]	; (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d11d      	bne.n	8004892 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800485a:	e01a      	b.n	8004892 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800485c:	4b50      	ldr	r3, [pc, #320]	; (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004864:	2b00      	cmp	r3, #0
 8004866:	d116      	bne.n	8004896 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800486c:	e013      	b.n	8004896 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800486e:	4b4c      	ldr	r3, [pc, #304]	; (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10f      	bne.n	800489a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800487a:	4b49      	ldr	r3, [pc, #292]	; (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d109      	bne.n	800489a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800488a:	e006      	b.n	800489a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	73fb      	strb	r3, [r7, #15]
      break;
 8004890:	e004      	b.n	800489c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004892:	bf00      	nop
 8004894:	e002      	b.n	800489c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004896:	bf00      	nop
 8004898:	e000      	b.n	800489c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800489a:	bf00      	nop
    }

    if(status == HAL_OK)
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10d      	bne.n	80048be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048a2:	4b3f      	ldr	r3, [pc, #252]	; (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6819      	ldr	r1, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	430b      	orrs	r3, r1
 80048b8:	4939      	ldr	r1, [pc, #228]	; (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048be:	7bfb      	ldrb	r3, [r7, #15]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d167      	bne.n	8004994 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80048c4:	4b36      	ldr	r3, [pc, #216]	; (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a35      	ldr	r2, [pc, #212]	; (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048d0:	f7fd fabc 	bl	8001e4c <HAL_GetTick>
 80048d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048d6:	e009      	b.n	80048ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048d8:	f7fd fab8 	bl	8001e4c <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d902      	bls.n	80048ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	73fb      	strb	r3, [r7, #15]
        break;
 80048ea:	e005      	b.n	80048f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048ec:	4b2c      	ldr	r3, [pc, #176]	; (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1ef      	bne.n	80048d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d14a      	bne.n	8004994 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d111      	bne.n	8004928 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004904:	4b26      	ldr	r3, [pc, #152]	; (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800490c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6892      	ldr	r2, [r2, #8]
 8004914:	0211      	lsls	r1, r2, #8
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	68d2      	ldr	r2, [r2, #12]
 800491a:	0912      	lsrs	r2, r2, #4
 800491c:	0452      	lsls	r2, r2, #17
 800491e:	430a      	orrs	r2, r1
 8004920:	491f      	ldr	r1, [pc, #124]	; (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004922:	4313      	orrs	r3, r2
 8004924:	614b      	str	r3, [r1, #20]
 8004926:	e011      	b.n	800494c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004928:	4b1d      	ldr	r3, [pc, #116]	; (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004930:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6892      	ldr	r2, [r2, #8]
 8004938:	0211      	lsls	r1, r2, #8
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6912      	ldr	r2, [r2, #16]
 800493e:	0852      	lsrs	r2, r2, #1
 8004940:	3a01      	subs	r2, #1
 8004942:	0652      	lsls	r2, r2, #25
 8004944:	430a      	orrs	r2, r1
 8004946:	4916      	ldr	r1, [pc, #88]	; (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004948:	4313      	orrs	r3, r2
 800494a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800494c:	4b14      	ldr	r3, [pc, #80]	; (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a13      	ldr	r2, [pc, #76]	; (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004956:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004958:	f7fd fa78 	bl	8001e4c <HAL_GetTick>
 800495c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800495e:	e009      	b.n	8004974 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004960:	f7fd fa74 	bl	8001e4c <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d902      	bls.n	8004974 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	73fb      	strb	r3, [r7, #15]
          break;
 8004972:	e005      	b.n	8004980 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004974:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0ef      	beq.n	8004960 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004986:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004988:	695a      	ldr	r2, [r3, #20]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	4904      	ldr	r1, [pc, #16]	; (80049a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004990:	4313      	orrs	r3, r2
 8004992:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004994:	7bfb      	ldrb	r3, [r7, #15]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	40021000 	.word	0x40021000

080049a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e049      	b.n	8004a4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d106      	bne.n	80049d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7fc fd86 	bl	80014dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3304      	adds	r3, #4
 80049e0:	4619      	mov	r1, r3
 80049e2:	4610      	mov	r0, r2
 80049e4:	f000 fab6 	bl	8004f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d001      	beq.n	8004a6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e04f      	b.n	8004b0c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0201 	orr.w	r2, r2, #1
 8004a82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a23      	ldr	r2, [pc, #140]	; (8004b18 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d01d      	beq.n	8004aca <HAL_TIM_Base_Start_IT+0x76>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a96:	d018      	beq.n	8004aca <HAL_TIM_Base_Start_IT+0x76>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a1f      	ldr	r2, [pc, #124]	; (8004b1c <HAL_TIM_Base_Start_IT+0xc8>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d013      	beq.n	8004aca <HAL_TIM_Base_Start_IT+0x76>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a1e      	ldr	r2, [pc, #120]	; (8004b20 <HAL_TIM_Base_Start_IT+0xcc>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00e      	beq.n	8004aca <HAL_TIM_Base_Start_IT+0x76>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a1c      	ldr	r2, [pc, #112]	; (8004b24 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d009      	beq.n	8004aca <HAL_TIM_Base_Start_IT+0x76>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a1b      	ldr	r2, [pc, #108]	; (8004b28 <HAL_TIM_Base_Start_IT+0xd4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d004      	beq.n	8004aca <HAL_TIM_Base_Start_IT+0x76>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a19      	ldr	r2, [pc, #100]	; (8004b2c <HAL_TIM_Base_Start_IT+0xd8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d115      	bne.n	8004af6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	4b17      	ldr	r3, [pc, #92]	; (8004b30 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2b06      	cmp	r3, #6
 8004ada:	d015      	beq.n	8004b08 <HAL_TIM_Base_Start_IT+0xb4>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae2:	d011      	beq.n	8004b08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0201 	orr.w	r2, r2, #1
 8004af2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af4:	e008      	b.n	8004b08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f042 0201 	orr.w	r2, r2, #1
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	e000      	b.n	8004b0a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	40012c00 	.word	0x40012c00
 8004b1c:	40000400 	.word	0x40000400
 8004b20:	40000800 	.word	0x40000800
 8004b24:	40000c00 	.word	0x40000c00
 8004b28:	40013400 	.word	0x40013400
 8004b2c:	40014000 	.word	0x40014000
 8004b30:	00010007 	.word	0x00010007

08004b34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d122      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d11b      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0202 	mvn.w	r2, #2
 8004b60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f9ce 	bl	8004f18 <HAL_TIM_IC_CaptureCallback>
 8004b7c:	e005      	b.n	8004b8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f9c0 	bl	8004f04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f9d1 	bl	8004f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0304 	and.w	r3, r3, #4
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d122      	bne.n	8004be4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d11b      	bne.n	8004be4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0204 	mvn.w	r2, #4
 8004bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f9a4 	bl	8004f18 <HAL_TIM_IC_CaptureCallback>
 8004bd0:	e005      	b.n	8004bde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f996 	bl	8004f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f9a7 	bl	8004f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d122      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d11b      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0208 	mvn.w	r2, #8
 8004c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2204      	movs	r2, #4
 8004c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f97a 	bl	8004f18 <HAL_TIM_IC_CaptureCallback>
 8004c24:	e005      	b.n	8004c32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f96c 	bl	8004f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f97d 	bl	8004f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f003 0310 	and.w	r3, r3, #16
 8004c42:	2b10      	cmp	r3, #16
 8004c44:	d122      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f003 0310 	and.w	r3, r3, #16
 8004c50:	2b10      	cmp	r3, #16
 8004c52:	d11b      	bne.n	8004c8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f06f 0210 	mvn.w	r2, #16
 8004c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2208      	movs	r2, #8
 8004c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f950 	bl	8004f18 <HAL_TIM_IC_CaptureCallback>
 8004c78:	e005      	b.n	8004c86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f942 	bl	8004f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f953 	bl	8004f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d10e      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d107      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0201 	mvn.w	r2, #1
 8004cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7fc fb28 	bl	8001308 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc2:	2b80      	cmp	r3, #128	; 0x80
 8004cc4:	d10e      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd0:	2b80      	cmp	r3, #128	; 0x80
 8004cd2:	d107      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fafe 	bl	80052e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf2:	d10e      	bne.n	8004d12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfe:	2b80      	cmp	r3, #128	; 0x80
 8004d00:	d107      	bne.n	8004d12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 faf1 	bl	80052f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1c:	2b40      	cmp	r3, #64	; 0x40
 8004d1e:	d10e      	bne.n	8004d3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2a:	2b40      	cmp	r3, #64	; 0x40
 8004d2c:	d107      	bne.n	8004d3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f901 	bl	8004f40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f003 0320 	and.w	r3, r3, #32
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	d10e      	bne.n	8004d6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b20      	cmp	r3, #32
 8004d58:	d107      	bne.n	8004d6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f06f 0220 	mvn.w	r2, #32
 8004d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 fab1 	bl	80052cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d6a:	bf00      	nop
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <HAL_TIM_ConfigClockSource+0x1c>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e0b6      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x18a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2202      	movs	r2, #2
 8004d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004db0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004db8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dca:	d03e      	beq.n	8004e4a <HAL_TIM_ConfigClockSource+0xd8>
 8004dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd0:	f200 8087 	bhi.w	8004ee2 <HAL_TIM_ConfigClockSource+0x170>
 8004dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd8:	f000 8086 	beq.w	8004ee8 <HAL_TIM_ConfigClockSource+0x176>
 8004ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de0:	d87f      	bhi.n	8004ee2 <HAL_TIM_ConfigClockSource+0x170>
 8004de2:	2b70      	cmp	r3, #112	; 0x70
 8004de4:	d01a      	beq.n	8004e1c <HAL_TIM_ConfigClockSource+0xaa>
 8004de6:	2b70      	cmp	r3, #112	; 0x70
 8004de8:	d87b      	bhi.n	8004ee2 <HAL_TIM_ConfigClockSource+0x170>
 8004dea:	2b60      	cmp	r3, #96	; 0x60
 8004dec:	d050      	beq.n	8004e90 <HAL_TIM_ConfigClockSource+0x11e>
 8004dee:	2b60      	cmp	r3, #96	; 0x60
 8004df0:	d877      	bhi.n	8004ee2 <HAL_TIM_ConfigClockSource+0x170>
 8004df2:	2b50      	cmp	r3, #80	; 0x50
 8004df4:	d03c      	beq.n	8004e70 <HAL_TIM_ConfigClockSource+0xfe>
 8004df6:	2b50      	cmp	r3, #80	; 0x50
 8004df8:	d873      	bhi.n	8004ee2 <HAL_TIM_ConfigClockSource+0x170>
 8004dfa:	2b40      	cmp	r3, #64	; 0x40
 8004dfc:	d058      	beq.n	8004eb0 <HAL_TIM_ConfigClockSource+0x13e>
 8004dfe:	2b40      	cmp	r3, #64	; 0x40
 8004e00:	d86f      	bhi.n	8004ee2 <HAL_TIM_ConfigClockSource+0x170>
 8004e02:	2b30      	cmp	r3, #48	; 0x30
 8004e04:	d064      	beq.n	8004ed0 <HAL_TIM_ConfigClockSource+0x15e>
 8004e06:	2b30      	cmp	r3, #48	; 0x30
 8004e08:	d86b      	bhi.n	8004ee2 <HAL_TIM_ConfigClockSource+0x170>
 8004e0a:	2b20      	cmp	r3, #32
 8004e0c:	d060      	beq.n	8004ed0 <HAL_TIM_ConfigClockSource+0x15e>
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	d867      	bhi.n	8004ee2 <HAL_TIM_ConfigClockSource+0x170>
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d05c      	beq.n	8004ed0 <HAL_TIM_ConfigClockSource+0x15e>
 8004e16:	2b10      	cmp	r3, #16
 8004e18:	d05a      	beq.n	8004ed0 <HAL_TIM_ConfigClockSource+0x15e>
 8004e1a:	e062      	b.n	8004ee2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6818      	ldr	r0, [r3, #0]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	6899      	ldr	r1, [r3, #8]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f000 f9a6 	bl	800517c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e3e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	609a      	str	r2, [r3, #8]
      break;
 8004e48:	e04f      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6818      	ldr	r0, [r3, #0]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	6899      	ldr	r1, [r3, #8]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f000 f98f 	bl	800517c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e6c:	609a      	str	r2, [r3, #8]
      break;
 8004e6e:	e03c      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6818      	ldr	r0, [r3, #0]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	6859      	ldr	r1, [r3, #4]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	f000 f903 	bl	8005088 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2150      	movs	r1, #80	; 0x50
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 f95c 	bl	8005146 <TIM_ITRx_SetConfig>
      break;
 8004e8e:	e02c      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6818      	ldr	r0, [r3, #0]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	6859      	ldr	r1, [r3, #4]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	f000 f922 	bl	80050e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2160      	movs	r1, #96	; 0x60
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 f94c 	bl	8005146 <TIM_ITRx_SetConfig>
      break;
 8004eae:	e01c      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6818      	ldr	r0, [r3, #0]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	6859      	ldr	r1, [r3, #4]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	f000 f8e3 	bl	8005088 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2140      	movs	r1, #64	; 0x40
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 f93c 	bl	8005146 <TIM_ITRx_SetConfig>
      break;
 8004ece:	e00c      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4610      	mov	r0, r2
 8004edc:	f000 f933 	bl	8005146 <TIM_ITRx_SetConfig>
      break;
 8004ee0:	e003      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ee6:	e000      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004ee8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a40      	ldr	r2, [pc, #256]	; (8005068 <TIM_Base_SetConfig+0x114>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d013      	beq.n	8004f94 <TIM_Base_SetConfig+0x40>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f72:	d00f      	beq.n	8004f94 <TIM_Base_SetConfig+0x40>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a3d      	ldr	r2, [pc, #244]	; (800506c <TIM_Base_SetConfig+0x118>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00b      	beq.n	8004f94 <TIM_Base_SetConfig+0x40>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a3c      	ldr	r2, [pc, #240]	; (8005070 <TIM_Base_SetConfig+0x11c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d007      	beq.n	8004f94 <TIM_Base_SetConfig+0x40>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a3b      	ldr	r2, [pc, #236]	; (8005074 <TIM_Base_SetConfig+0x120>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d003      	beq.n	8004f94 <TIM_Base_SetConfig+0x40>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a3a      	ldr	r2, [pc, #232]	; (8005078 <TIM_Base_SetConfig+0x124>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d108      	bne.n	8004fa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a2f      	ldr	r2, [pc, #188]	; (8005068 <TIM_Base_SetConfig+0x114>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d01f      	beq.n	8004fee <TIM_Base_SetConfig+0x9a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb4:	d01b      	beq.n	8004fee <TIM_Base_SetConfig+0x9a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a2c      	ldr	r2, [pc, #176]	; (800506c <TIM_Base_SetConfig+0x118>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d017      	beq.n	8004fee <TIM_Base_SetConfig+0x9a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a2b      	ldr	r2, [pc, #172]	; (8005070 <TIM_Base_SetConfig+0x11c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d013      	beq.n	8004fee <TIM_Base_SetConfig+0x9a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a2a      	ldr	r2, [pc, #168]	; (8005074 <TIM_Base_SetConfig+0x120>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00f      	beq.n	8004fee <TIM_Base_SetConfig+0x9a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a29      	ldr	r2, [pc, #164]	; (8005078 <TIM_Base_SetConfig+0x124>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00b      	beq.n	8004fee <TIM_Base_SetConfig+0x9a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a28      	ldr	r2, [pc, #160]	; (800507c <TIM_Base_SetConfig+0x128>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d007      	beq.n	8004fee <TIM_Base_SetConfig+0x9a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a27      	ldr	r2, [pc, #156]	; (8005080 <TIM_Base_SetConfig+0x12c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d003      	beq.n	8004fee <TIM_Base_SetConfig+0x9a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a26      	ldr	r2, [pc, #152]	; (8005084 <TIM_Base_SetConfig+0x130>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d108      	bne.n	8005000 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a10      	ldr	r2, [pc, #64]	; (8005068 <TIM_Base_SetConfig+0x114>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d00f      	beq.n	800504c <TIM_Base_SetConfig+0xf8>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a12      	ldr	r2, [pc, #72]	; (8005078 <TIM_Base_SetConfig+0x124>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d00b      	beq.n	800504c <TIM_Base_SetConfig+0xf8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a11      	ldr	r2, [pc, #68]	; (800507c <TIM_Base_SetConfig+0x128>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d007      	beq.n	800504c <TIM_Base_SetConfig+0xf8>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a10      	ldr	r2, [pc, #64]	; (8005080 <TIM_Base_SetConfig+0x12c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d003      	beq.n	800504c <TIM_Base_SetConfig+0xf8>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a0f      	ldr	r2, [pc, #60]	; (8005084 <TIM_Base_SetConfig+0x130>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d103      	bne.n	8005054 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	691a      	ldr	r2, [r3, #16]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	615a      	str	r2, [r3, #20]
}
 800505a:	bf00      	nop
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40012c00 	.word	0x40012c00
 800506c:	40000400 	.word	0x40000400
 8005070:	40000800 	.word	0x40000800
 8005074:	40000c00 	.word	0x40000c00
 8005078:	40013400 	.word	0x40013400
 800507c:	40014000 	.word	0x40014000
 8005080:	40014400 	.word	0x40014400
 8005084:	40014800 	.word	0x40014800

08005088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	f023 0201 	bic.w	r2, r3, #1
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f023 030a 	bic.w	r3, r3, #10
 80050c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	621a      	str	r2, [r3, #32]
}
 80050da:	bf00      	nop
 80050dc:	371c      	adds	r7, #28
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b087      	sub	sp, #28
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	f023 0210 	bic.w	r2, r3, #16
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005110:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	031b      	lsls	r3, r3, #12
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	4313      	orrs	r3, r2
 800511a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005122:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	4313      	orrs	r3, r2
 800512c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	621a      	str	r2, [r3, #32]
}
 800513a:	bf00      	nop
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005146:	b480      	push	{r7}
 8005148:	b085      	sub	sp, #20
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800515c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4313      	orrs	r3, r2
 8005164:	f043 0307 	orr.w	r3, r3, #7
 8005168:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	609a      	str	r2, [r3, #8]
}
 8005170:	bf00      	nop
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
 8005188:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005196:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	021a      	lsls	r2, r3, #8
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	431a      	orrs	r2, r3
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	609a      	str	r2, [r3, #8]
}
 80051b0:	bf00      	nop
 80051b2:	371c      	adds	r7, #28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e068      	b.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a2e      	ldr	r2, [pc, #184]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d004      	beq.n	8005208 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a2d      	ldr	r2, [pc, #180]	; (80052b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d108      	bne.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800520e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005220:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	4313      	orrs	r3, r2
 800522a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a1e      	ldr	r2, [pc, #120]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d01d      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005246:	d018      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a1b      	ldr	r2, [pc, #108]	; (80052bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d013      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a1a      	ldr	r2, [pc, #104]	; (80052c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d00e      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a18      	ldr	r2, [pc, #96]	; (80052c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d009      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a13      	ldr	r2, [pc, #76]	; (80052b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d004      	beq.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a14      	ldr	r2, [pc, #80]	; (80052c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d10c      	bne.n	8005294 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005280:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	4313      	orrs	r3, r2
 800528a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	40012c00 	.word	0x40012c00
 80052b8:	40013400 	.word	0x40013400
 80052bc:	40000400 	.word	0x40000400
 80052c0:	40000800 	.word	0x40000800
 80052c4:	40000c00 	.word	0x40000c00
 80052c8:	40014000 	.word	0x40014000

080052cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e040      	b.n	800539c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fc f8fa 	bl	8001524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2224      	movs	r2, #36	; 0x24
 8005334:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0201 	bic.w	r2, r2, #1
 8005344:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fb2e 	bl	80059a8 <UART_SetConfig>
 800534c:	4603      	mov	r3, r0
 800534e:	2b01      	cmp	r3, #1
 8005350:	d101      	bne.n	8005356 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e022      	b.n	800539c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	2b00      	cmp	r3, #0
 800535c:	d002      	beq.n	8005364 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fdda 	bl	8005f18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005372:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689a      	ldr	r2, [r3, #8]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005382:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 0201 	orr.w	r2, r2, #1
 8005392:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 fe61 	bl	800605c <UART_CheckIdleState>
 800539a:	4603      	mov	r3, r0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b0ba      	sub	sp, #232	; 0xe8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80053ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80053ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80053d2:	4013      	ands	r3, r2
 80053d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80053d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d115      	bne.n	800540c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80053e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e4:	f003 0320 	and.w	r3, r3, #32
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00f      	beq.n	800540c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80053ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d009      	beq.n	800540c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 82a6 	beq.w	800594e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	4798      	blx	r3
      }
      return;
 800540a:	e2a0      	b.n	800594e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800540c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 8117 	beq.w	8005644 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d106      	bne.n	8005430 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005422:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005426:	4b85      	ldr	r3, [pc, #532]	; (800563c <HAL_UART_IRQHandler+0x298>)
 8005428:	4013      	ands	r3, r2
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 810a 	beq.w	8005644 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b00      	cmp	r3, #0
 800543a:	d011      	beq.n	8005460 <HAL_UART_IRQHandler+0xbc>
 800543c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00b      	beq.n	8005460 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2201      	movs	r2, #1
 800544e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005456:	f043 0201 	orr.w	r2, r3, #1
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d011      	beq.n	8005490 <HAL_UART_IRQHandler+0xec>
 800546c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00b      	beq.n	8005490 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2202      	movs	r2, #2
 800547e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005486:	f043 0204 	orr.w	r2, r3, #4
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	d011      	beq.n	80054c0 <HAL_UART_IRQHandler+0x11c>
 800549c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00b      	beq.n	80054c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2204      	movs	r2, #4
 80054ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054b6:	f043 0202 	orr.w	r2, r3, #2
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80054c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c4:	f003 0308 	and.w	r3, r3, #8
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d017      	beq.n	80054fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054d0:	f003 0320 	and.w	r3, r3, #32
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d105      	bne.n	80054e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80054d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00b      	beq.n	80054fc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2208      	movs	r2, #8
 80054ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054f2:	f043 0208 	orr.w	r2, r3, #8
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005504:	2b00      	cmp	r3, #0
 8005506:	d012      	beq.n	800552e <HAL_UART_IRQHandler+0x18a>
 8005508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800550c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00c      	beq.n	800552e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800551c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005524:	f043 0220 	orr.w	r2, r3, #32
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 820c 	beq.w	8005952 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800553a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00d      	beq.n	8005562 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b00      	cmp	r3, #0
 8005550:	d007      	beq.n	8005562 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005568:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005576:	2b40      	cmp	r3, #64	; 0x40
 8005578:	d005      	beq.n	8005586 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800557a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800557e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005582:	2b00      	cmp	r3, #0
 8005584:	d04f      	beq.n	8005626 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fe75 	bl	8006276 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005596:	2b40      	cmp	r3, #64	; 0x40
 8005598:	d141      	bne.n	800561e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3308      	adds	r3, #8
 80055a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055a8:	e853 3f00 	ldrex	r3, [r3]
 80055ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80055b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3308      	adds	r3, #8
 80055c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80055c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80055ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80055d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80055d6:	e841 2300 	strex	r3, r2, [r1]
 80055da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80055de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1d9      	bne.n	800559a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d013      	beq.n	8005616 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f2:	4a13      	ldr	r2, [pc, #76]	; (8005640 <HAL_UART_IRQHandler+0x29c>)
 80055f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fc fe5e 	bl	80022bc <HAL_DMA_Abort_IT>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d017      	beq.n	8005636 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005610:	4610      	mov	r0, r2
 8005612:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005614:	e00f      	b.n	8005636 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f9b0 	bl	800597c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800561c:	e00b      	b.n	8005636 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f9ac 	bl	800597c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005624:	e007      	b.n	8005636 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f9a8 	bl	800597c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005634:	e18d      	b.n	8005952 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005636:	bf00      	nop
    return;
 8005638:	e18b      	b.n	8005952 <HAL_UART_IRQHandler+0x5ae>
 800563a:	bf00      	nop
 800563c:	04000120 	.word	0x04000120
 8005640:	0800633d 	.word	0x0800633d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005648:	2b01      	cmp	r3, #1
 800564a:	f040 8146 	bne.w	80058da <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800564e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005652:	f003 0310 	and.w	r3, r3, #16
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 813f 	beq.w	80058da <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800565c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005660:	f003 0310 	and.w	r3, r3, #16
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 8138 	beq.w	80058da <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2210      	movs	r2, #16
 8005670:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567c:	2b40      	cmp	r3, #64	; 0x40
 800567e:	f040 80b4 	bne.w	80057ea <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800568e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 815f 	beq.w	8005956 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800569e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056a2:	429a      	cmp	r2, r3
 80056a4:	f080 8157 	bcs.w	8005956 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0320 	and.w	r3, r3, #32
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f040 8085 	bne.w	80057ce <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056d0:	e853 3f00 	ldrex	r3, [r3]
 80056d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80056d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	461a      	mov	r2, r3
 80056ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80056ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80056f2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80056fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80056fe:	e841 2300 	strex	r3, r2, [r1]
 8005702:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005706:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1da      	bne.n	80056c4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3308      	adds	r3, #8
 8005714:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005718:	e853 3f00 	ldrex	r3, [r3]
 800571c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800571e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005720:	f023 0301 	bic.w	r3, r3, #1
 8005724:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3308      	adds	r3, #8
 800572e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005732:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005736:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005738:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800573a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800573e:	e841 2300 	strex	r3, r2, [r1]
 8005742:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1e1      	bne.n	800570e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3308      	adds	r3, #8
 8005750:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005752:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005754:	e853 3f00 	ldrex	r3, [r3]
 8005758:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800575a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800575c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005760:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3308      	adds	r3, #8
 800576a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800576e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005770:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005772:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005774:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005776:	e841 2300 	strex	r3, r2, [r1]
 800577a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800577c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1e3      	bne.n	800574a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2220      	movs	r2, #32
 8005786:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005796:	e853 3f00 	ldrex	r3, [r3]
 800579a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800579c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800579e:	f023 0310 	bic.w	r3, r3, #16
 80057a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	461a      	mov	r2, r3
 80057ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80057b2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057b8:	e841 2300 	strex	r3, r2, [r1]
 80057bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1e4      	bne.n	800578e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fc fd39 	bl	8002240 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057da:	b29b      	uxth	r3, r3
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	b29b      	uxth	r3, r3
 80057e0:	4619      	mov	r1, r3
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f8d4 	bl	8005990 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057e8:	e0b5      	b.n	8005956 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005804:	b29b      	uxth	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 80a7 	beq.w	800595a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800580c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 80a2 	beq.w	800595a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581e:	e853 3f00 	ldrex	r3, [r3]
 8005822:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005826:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800582a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005838:	647b      	str	r3, [r7, #68]	; 0x44
 800583a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800583e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005840:	e841 2300 	strex	r3, r2, [r1]
 8005844:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1e4      	bne.n	8005816 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3308      	adds	r3, #8
 8005852:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	e853 3f00 	ldrex	r3, [r3]
 800585a:	623b      	str	r3, [r7, #32]
   return(result);
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	f023 0301 	bic.w	r3, r3, #1
 8005862:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3308      	adds	r3, #8
 800586c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005870:	633a      	str	r2, [r7, #48]	; 0x30
 8005872:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005874:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005878:	e841 2300 	strex	r3, r2, [r1]
 800587c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800587e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1e3      	bne.n	800584c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2220      	movs	r2, #32
 8005888:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	e853 3f00 	ldrex	r3, [r3]
 80058a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 0310 	bic.w	r3, r3, #16
 80058aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	461a      	mov	r2, r3
 80058b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058b8:	61fb      	str	r3, [r7, #28]
 80058ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058bc:	69b9      	ldr	r1, [r7, #24]
 80058be:	69fa      	ldr	r2, [r7, #28]
 80058c0:	e841 2300 	strex	r3, r2, [r1]
 80058c4:	617b      	str	r3, [r7, #20]
   return(result);
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1e4      	bne.n	8005896 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058d0:	4619      	mov	r1, r3
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f85c 	bl	8005990 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058d8:	e03f      	b.n	800595a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80058da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00e      	beq.n	8005904 <HAL_UART_IRQHandler+0x560>
 80058e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d008      	beq.n	8005904 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80058fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fd5d 	bl	80063bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005902:	e02d      	b.n	8005960 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00e      	beq.n	800592e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005918:	2b00      	cmp	r3, #0
 800591a:	d008      	beq.n	800592e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01c      	beq.n	800595e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	4798      	blx	r3
    }
    return;
 800592c:	e017      	b.n	800595e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800592e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005936:	2b00      	cmp	r3, #0
 8005938:	d012      	beq.n	8005960 <HAL_UART_IRQHandler+0x5bc>
 800593a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800593e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00c      	beq.n	8005960 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fd0e 	bl	8006368 <UART_EndTransmit_IT>
    return;
 800594c:	e008      	b.n	8005960 <HAL_UART_IRQHandler+0x5bc>
      return;
 800594e:	bf00      	nop
 8005950:	e006      	b.n	8005960 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005952:	bf00      	nop
 8005954:	e004      	b.n	8005960 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005956:	bf00      	nop
 8005958:	e002      	b.n	8005960 <HAL_UART_IRQHandler+0x5bc>
      return;
 800595a:	bf00      	nop
 800595c:	e000      	b.n	8005960 <HAL_UART_IRQHandler+0x5bc>
    return;
 800595e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005960:	37e8      	adds	r7, #232	; 0xe8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop

08005968 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	460b      	mov	r3, r1
 800599a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059ac:	b08a      	sub	sp, #40	; 0x28
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059b2:	2300      	movs	r3, #0
 80059b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	431a      	orrs	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	431a      	orrs	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	4ba4      	ldr	r3, [pc, #656]	; (8005c68 <UART_SetConfig+0x2c0>)
 80059d8:	4013      	ands	r3, r2
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	6812      	ldr	r2, [r2, #0]
 80059de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059e0:	430b      	orrs	r3, r1
 80059e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a99      	ldr	r2, [pc, #612]	; (8005c6c <UART_SetConfig+0x2c4>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d004      	beq.n	8005a14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a10:	4313      	orrs	r3, r2
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a24:	430a      	orrs	r2, r1
 8005a26:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a90      	ldr	r2, [pc, #576]	; (8005c70 <UART_SetConfig+0x2c8>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d126      	bne.n	8005a80 <UART_SetConfig+0xd8>
 8005a32:	4b90      	ldr	r3, [pc, #576]	; (8005c74 <UART_SetConfig+0x2cc>)
 8005a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a38:	f003 0303 	and.w	r3, r3, #3
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d81b      	bhi.n	8005a78 <UART_SetConfig+0xd0>
 8005a40:	a201      	add	r2, pc, #4	; (adr r2, 8005a48 <UART_SetConfig+0xa0>)
 8005a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a46:	bf00      	nop
 8005a48:	08005a59 	.word	0x08005a59
 8005a4c:	08005a69 	.word	0x08005a69
 8005a50:	08005a61 	.word	0x08005a61
 8005a54:	08005a71 	.word	0x08005a71
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a5e:	e116      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005a60:	2302      	movs	r3, #2
 8005a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a66:	e112      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005a68:	2304      	movs	r3, #4
 8005a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a6e:	e10e      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005a70:	2308      	movs	r3, #8
 8005a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a76:	e10a      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005a78:	2310      	movs	r3, #16
 8005a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a7e:	e106      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a7c      	ldr	r2, [pc, #496]	; (8005c78 <UART_SetConfig+0x2d0>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d138      	bne.n	8005afc <UART_SetConfig+0x154>
 8005a8a:	4b7a      	ldr	r3, [pc, #488]	; (8005c74 <UART_SetConfig+0x2cc>)
 8005a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a90:	f003 030c 	and.w	r3, r3, #12
 8005a94:	2b0c      	cmp	r3, #12
 8005a96:	d82d      	bhi.n	8005af4 <UART_SetConfig+0x14c>
 8005a98:	a201      	add	r2, pc, #4	; (adr r2, 8005aa0 <UART_SetConfig+0xf8>)
 8005a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9e:	bf00      	nop
 8005aa0:	08005ad5 	.word	0x08005ad5
 8005aa4:	08005af5 	.word	0x08005af5
 8005aa8:	08005af5 	.word	0x08005af5
 8005aac:	08005af5 	.word	0x08005af5
 8005ab0:	08005ae5 	.word	0x08005ae5
 8005ab4:	08005af5 	.word	0x08005af5
 8005ab8:	08005af5 	.word	0x08005af5
 8005abc:	08005af5 	.word	0x08005af5
 8005ac0:	08005add 	.word	0x08005add
 8005ac4:	08005af5 	.word	0x08005af5
 8005ac8:	08005af5 	.word	0x08005af5
 8005acc:	08005af5 	.word	0x08005af5
 8005ad0:	08005aed 	.word	0x08005aed
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ada:	e0d8      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005adc:	2302      	movs	r3, #2
 8005ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ae2:	e0d4      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005ae4:	2304      	movs	r3, #4
 8005ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aea:	e0d0      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005aec:	2308      	movs	r3, #8
 8005aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005af2:	e0cc      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005af4:	2310      	movs	r3, #16
 8005af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005afa:	e0c8      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a5e      	ldr	r2, [pc, #376]	; (8005c7c <UART_SetConfig+0x2d4>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d125      	bne.n	8005b52 <UART_SetConfig+0x1aa>
 8005b06:	4b5b      	ldr	r3, [pc, #364]	; (8005c74 <UART_SetConfig+0x2cc>)
 8005b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b10:	2b30      	cmp	r3, #48	; 0x30
 8005b12:	d016      	beq.n	8005b42 <UART_SetConfig+0x19a>
 8005b14:	2b30      	cmp	r3, #48	; 0x30
 8005b16:	d818      	bhi.n	8005b4a <UART_SetConfig+0x1a2>
 8005b18:	2b20      	cmp	r3, #32
 8005b1a:	d00a      	beq.n	8005b32 <UART_SetConfig+0x18a>
 8005b1c:	2b20      	cmp	r3, #32
 8005b1e:	d814      	bhi.n	8005b4a <UART_SetConfig+0x1a2>
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d002      	beq.n	8005b2a <UART_SetConfig+0x182>
 8005b24:	2b10      	cmp	r3, #16
 8005b26:	d008      	beq.n	8005b3a <UART_SetConfig+0x192>
 8005b28:	e00f      	b.n	8005b4a <UART_SetConfig+0x1a2>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b30:	e0ad      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005b32:	2302      	movs	r3, #2
 8005b34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b38:	e0a9      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005b3a:	2304      	movs	r3, #4
 8005b3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b40:	e0a5      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005b42:	2308      	movs	r3, #8
 8005b44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b48:	e0a1      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005b4a:	2310      	movs	r3, #16
 8005b4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b50:	e09d      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a4a      	ldr	r2, [pc, #296]	; (8005c80 <UART_SetConfig+0x2d8>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d125      	bne.n	8005ba8 <UART_SetConfig+0x200>
 8005b5c:	4b45      	ldr	r3, [pc, #276]	; (8005c74 <UART_SetConfig+0x2cc>)
 8005b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b66:	2bc0      	cmp	r3, #192	; 0xc0
 8005b68:	d016      	beq.n	8005b98 <UART_SetConfig+0x1f0>
 8005b6a:	2bc0      	cmp	r3, #192	; 0xc0
 8005b6c:	d818      	bhi.n	8005ba0 <UART_SetConfig+0x1f8>
 8005b6e:	2b80      	cmp	r3, #128	; 0x80
 8005b70:	d00a      	beq.n	8005b88 <UART_SetConfig+0x1e0>
 8005b72:	2b80      	cmp	r3, #128	; 0x80
 8005b74:	d814      	bhi.n	8005ba0 <UART_SetConfig+0x1f8>
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d002      	beq.n	8005b80 <UART_SetConfig+0x1d8>
 8005b7a:	2b40      	cmp	r3, #64	; 0x40
 8005b7c:	d008      	beq.n	8005b90 <UART_SetConfig+0x1e8>
 8005b7e:	e00f      	b.n	8005ba0 <UART_SetConfig+0x1f8>
 8005b80:	2300      	movs	r3, #0
 8005b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b86:	e082      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b8e:	e07e      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005b90:	2304      	movs	r3, #4
 8005b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b96:	e07a      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005b98:	2308      	movs	r3, #8
 8005b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b9e:	e076      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005ba0:	2310      	movs	r3, #16
 8005ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ba6:	e072      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a35      	ldr	r2, [pc, #212]	; (8005c84 <UART_SetConfig+0x2dc>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d12a      	bne.n	8005c08 <UART_SetConfig+0x260>
 8005bb2:	4b30      	ldr	r3, [pc, #192]	; (8005c74 <UART_SetConfig+0x2cc>)
 8005bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bc0:	d01a      	beq.n	8005bf8 <UART_SetConfig+0x250>
 8005bc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bc6:	d81b      	bhi.n	8005c00 <UART_SetConfig+0x258>
 8005bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bcc:	d00c      	beq.n	8005be8 <UART_SetConfig+0x240>
 8005bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bd2:	d815      	bhi.n	8005c00 <UART_SetConfig+0x258>
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d003      	beq.n	8005be0 <UART_SetConfig+0x238>
 8005bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bdc:	d008      	beq.n	8005bf0 <UART_SetConfig+0x248>
 8005bde:	e00f      	b.n	8005c00 <UART_SetConfig+0x258>
 8005be0:	2300      	movs	r3, #0
 8005be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005be6:	e052      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005be8:	2302      	movs	r3, #2
 8005bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bee:	e04e      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bf6:	e04a      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005bf8:	2308      	movs	r3, #8
 8005bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bfe:	e046      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005c00:	2310      	movs	r3, #16
 8005c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c06:	e042      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a17      	ldr	r2, [pc, #92]	; (8005c6c <UART_SetConfig+0x2c4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d13a      	bne.n	8005c88 <UART_SetConfig+0x2e0>
 8005c12:	4b18      	ldr	r3, [pc, #96]	; (8005c74 <UART_SetConfig+0x2cc>)
 8005c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c20:	d01a      	beq.n	8005c58 <UART_SetConfig+0x2b0>
 8005c22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c26:	d81b      	bhi.n	8005c60 <UART_SetConfig+0x2b8>
 8005c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c2c:	d00c      	beq.n	8005c48 <UART_SetConfig+0x2a0>
 8005c2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c32:	d815      	bhi.n	8005c60 <UART_SetConfig+0x2b8>
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d003      	beq.n	8005c40 <UART_SetConfig+0x298>
 8005c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c3c:	d008      	beq.n	8005c50 <UART_SetConfig+0x2a8>
 8005c3e:	e00f      	b.n	8005c60 <UART_SetConfig+0x2b8>
 8005c40:	2300      	movs	r3, #0
 8005c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c46:	e022      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c4e:	e01e      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005c50:	2304      	movs	r3, #4
 8005c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c56:	e01a      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005c58:	2308      	movs	r3, #8
 8005c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c5e:	e016      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005c60:	2310      	movs	r3, #16
 8005c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c66:	e012      	b.n	8005c8e <UART_SetConfig+0x2e6>
 8005c68:	efff69f3 	.word	0xefff69f3
 8005c6c:	40008000 	.word	0x40008000
 8005c70:	40013800 	.word	0x40013800
 8005c74:	40021000 	.word	0x40021000
 8005c78:	40004400 	.word	0x40004400
 8005c7c:	40004800 	.word	0x40004800
 8005c80:	40004c00 	.word	0x40004c00
 8005c84:	40005000 	.word	0x40005000
 8005c88:	2310      	movs	r3, #16
 8005c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a9f      	ldr	r2, [pc, #636]	; (8005f10 <UART_SetConfig+0x568>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d17a      	bne.n	8005d8e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d824      	bhi.n	8005cea <UART_SetConfig+0x342>
 8005ca0:	a201      	add	r2, pc, #4	; (adr r2, 8005ca8 <UART_SetConfig+0x300>)
 8005ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca6:	bf00      	nop
 8005ca8:	08005ccd 	.word	0x08005ccd
 8005cac:	08005ceb 	.word	0x08005ceb
 8005cb0:	08005cd5 	.word	0x08005cd5
 8005cb4:	08005ceb 	.word	0x08005ceb
 8005cb8:	08005cdb 	.word	0x08005cdb
 8005cbc:	08005ceb 	.word	0x08005ceb
 8005cc0:	08005ceb 	.word	0x08005ceb
 8005cc4:	08005ceb 	.word	0x08005ceb
 8005cc8:	08005ce3 	.word	0x08005ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ccc:	f7fe f922 	bl	8003f14 <HAL_RCC_GetPCLK1Freq>
 8005cd0:	61f8      	str	r0, [r7, #28]
        break;
 8005cd2:	e010      	b.n	8005cf6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cd4:	4b8f      	ldr	r3, [pc, #572]	; (8005f14 <UART_SetConfig+0x56c>)
 8005cd6:	61fb      	str	r3, [r7, #28]
        break;
 8005cd8:	e00d      	b.n	8005cf6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cda:	f7fe f883 	bl	8003de4 <HAL_RCC_GetSysClockFreq>
 8005cde:	61f8      	str	r0, [r7, #28]
        break;
 8005ce0:	e009      	b.n	8005cf6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ce6:	61fb      	str	r3, [r7, #28]
        break;
 8005ce8:	e005      	b.n	8005cf6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005cf4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 80fb 	beq.w	8005ef4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	4613      	mov	r3, r2
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	4413      	add	r3, r2
 8005d08:	69fa      	ldr	r2, [r7, #28]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d305      	bcc.n	8005d1a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d14:	69fa      	ldr	r2, [r7, #28]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d903      	bls.n	8005d22 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005d20:	e0e8      	b.n	8005ef4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	2200      	movs	r2, #0
 8005d26:	461c      	mov	r4, r3
 8005d28:	4615      	mov	r5, r2
 8005d2a:	f04f 0200 	mov.w	r2, #0
 8005d2e:	f04f 0300 	mov.w	r3, #0
 8005d32:	022b      	lsls	r3, r5, #8
 8005d34:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005d38:	0222      	lsls	r2, r4, #8
 8005d3a:	68f9      	ldr	r1, [r7, #12]
 8005d3c:	6849      	ldr	r1, [r1, #4]
 8005d3e:	0849      	lsrs	r1, r1, #1
 8005d40:	2000      	movs	r0, #0
 8005d42:	4688      	mov	r8, r1
 8005d44:	4681      	mov	r9, r0
 8005d46:	eb12 0a08 	adds.w	sl, r2, r8
 8005d4a:	eb43 0b09 	adc.w	fp, r3, r9
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	603b      	str	r3, [r7, #0]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d5c:	4650      	mov	r0, sl
 8005d5e:	4659      	mov	r1, fp
 8005d60:	f7fa ff22 	bl	8000ba8 <__aeabi_uldivmod>
 8005d64:	4602      	mov	r2, r0
 8005d66:	460b      	mov	r3, r1
 8005d68:	4613      	mov	r3, r2
 8005d6a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d72:	d308      	bcc.n	8005d86 <UART_SetConfig+0x3de>
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d7a:	d204      	bcs.n	8005d86 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	60da      	str	r2, [r3, #12]
 8005d84:	e0b6      	b.n	8005ef4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005d8c:	e0b2      	b.n	8005ef4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d96:	d15e      	bne.n	8005e56 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005d98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d828      	bhi.n	8005df2 <UART_SetConfig+0x44a>
 8005da0:	a201      	add	r2, pc, #4	; (adr r2, 8005da8 <UART_SetConfig+0x400>)
 8005da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da6:	bf00      	nop
 8005da8:	08005dcd 	.word	0x08005dcd
 8005dac:	08005dd5 	.word	0x08005dd5
 8005db0:	08005ddd 	.word	0x08005ddd
 8005db4:	08005df3 	.word	0x08005df3
 8005db8:	08005de3 	.word	0x08005de3
 8005dbc:	08005df3 	.word	0x08005df3
 8005dc0:	08005df3 	.word	0x08005df3
 8005dc4:	08005df3 	.word	0x08005df3
 8005dc8:	08005deb 	.word	0x08005deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dcc:	f7fe f8a2 	bl	8003f14 <HAL_RCC_GetPCLK1Freq>
 8005dd0:	61f8      	str	r0, [r7, #28]
        break;
 8005dd2:	e014      	b.n	8005dfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dd4:	f7fe f8b4 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
 8005dd8:	61f8      	str	r0, [r7, #28]
        break;
 8005dda:	e010      	b.n	8005dfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ddc:	4b4d      	ldr	r3, [pc, #308]	; (8005f14 <UART_SetConfig+0x56c>)
 8005dde:	61fb      	str	r3, [r7, #28]
        break;
 8005de0:	e00d      	b.n	8005dfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005de2:	f7fd ffff 	bl	8003de4 <HAL_RCC_GetSysClockFreq>
 8005de6:	61f8      	str	r0, [r7, #28]
        break;
 8005de8:	e009      	b.n	8005dfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dee:	61fb      	str	r3, [r7, #28]
        break;
 8005df0:	e005      	b.n	8005dfe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005dfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d077      	beq.n	8005ef4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	005a      	lsls	r2, r3, #1
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	085b      	lsrs	r3, r3, #1
 8005e0e:	441a      	add	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e18:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	2b0f      	cmp	r3, #15
 8005e1e:	d916      	bls.n	8005e4e <UART_SetConfig+0x4a6>
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e26:	d212      	bcs.n	8005e4e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	f023 030f 	bic.w	r3, r3, #15
 8005e30:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	085b      	lsrs	r3, r3, #1
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	f003 0307 	and.w	r3, r3, #7
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	8afb      	ldrh	r3, [r7, #22]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	8afa      	ldrh	r2, [r7, #22]
 8005e4a:	60da      	str	r2, [r3, #12]
 8005e4c:	e052      	b.n	8005ef4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005e54:	e04e      	b.n	8005ef4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e5a:	2b08      	cmp	r3, #8
 8005e5c:	d827      	bhi.n	8005eae <UART_SetConfig+0x506>
 8005e5e:	a201      	add	r2, pc, #4	; (adr r2, 8005e64 <UART_SetConfig+0x4bc>)
 8005e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e64:	08005e89 	.word	0x08005e89
 8005e68:	08005e91 	.word	0x08005e91
 8005e6c:	08005e99 	.word	0x08005e99
 8005e70:	08005eaf 	.word	0x08005eaf
 8005e74:	08005e9f 	.word	0x08005e9f
 8005e78:	08005eaf 	.word	0x08005eaf
 8005e7c:	08005eaf 	.word	0x08005eaf
 8005e80:	08005eaf 	.word	0x08005eaf
 8005e84:	08005ea7 	.word	0x08005ea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e88:	f7fe f844 	bl	8003f14 <HAL_RCC_GetPCLK1Freq>
 8005e8c:	61f8      	str	r0, [r7, #28]
        break;
 8005e8e:	e014      	b.n	8005eba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e90:	f7fe f856 	bl	8003f40 <HAL_RCC_GetPCLK2Freq>
 8005e94:	61f8      	str	r0, [r7, #28]
        break;
 8005e96:	e010      	b.n	8005eba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e98:	4b1e      	ldr	r3, [pc, #120]	; (8005f14 <UART_SetConfig+0x56c>)
 8005e9a:	61fb      	str	r3, [r7, #28]
        break;
 8005e9c:	e00d      	b.n	8005eba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e9e:	f7fd ffa1 	bl	8003de4 <HAL_RCC_GetSysClockFreq>
 8005ea2:	61f8      	str	r0, [r7, #28]
        break;
 8005ea4:	e009      	b.n	8005eba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eaa:	61fb      	str	r3, [r7, #28]
        break;
 8005eac:	e005      	b.n	8005eba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005eb8:	bf00      	nop
    }

    if (pclk != 0U)
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d019      	beq.n	8005ef4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	085a      	lsrs	r2, r3, #1
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	441a      	add	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	2b0f      	cmp	r3, #15
 8005ed8:	d909      	bls.n	8005eee <UART_SetConfig+0x546>
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ee0:	d205      	bcs.n	8005eee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	60da      	str	r2, [r3, #12]
 8005eec:	e002      	b.n	8005ef4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005f00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3728      	adds	r7, #40	; 0x28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f0e:	bf00      	nop
 8005f10:	40008000 	.word	0x40008000
 8005f14:	00f42400 	.word	0x00f42400

08005f18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	f003 0301 	and.w	r3, r3, #1
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00a      	beq.n	8005f42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	f003 0304 	and.w	r3, r3, #4
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00a      	beq.n	8005f86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	f003 0308 	and.w	r3, r3, #8
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00a      	beq.n	8005fa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fac:	f003 0310 	and.w	r3, r3, #16
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00a      	beq.n	8005fca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	f003 0320 	and.w	r3, r3, #32
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00a      	beq.n	8005fec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d01a      	beq.n	800602e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006016:	d10a      	bne.n	800602e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00a      	beq.n	8006050 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	430a      	orrs	r2, r1
 800604e:	605a      	str	r2, [r3, #4]
  }
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af02      	add	r7, sp, #8
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800606c:	f7fb feee 	bl	8001e4c <HAL_GetTick>
 8006070:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0308 	and.w	r3, r3, #8
 800607c:	2b08      	cmp	r3, #8
 800607e:	d10e      	bne.n	800609e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006080:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f82d 	bl	80060ee <UART_WaitOnFlagUntilTimeout>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e023      	b.n	80060e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0304 	and.w	r3, r3, #4
 80060a8:	2b04      	cmp	r3, #4
 80060aa:	d10e      	bne.n	80060ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f817 	bl	80060ee <UART_WaitOnFlagUntilTimeout>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e00d      	b.n	80060e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2220      	movs	r2, #32
 80060ce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2220      	movs	r2, #32
 80060d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b09c      	sub	sp, #112	; 0x70
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	60f8      	str	r0, [r7, #12]
 80060f6:	60b9      	str	r1, [r7, #8]
 80060f8:	603b      	str	r3, [r7, #0]
 80060fa:	4613      	mov	r3, r2
 80060fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060fe:	e0a5      	b.n	800624c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006106:	f000 80a1 	beq.w	800624c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800610a:	f7fb fe9f 	bl	8001e4c <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006116:	429a      	cmp	r2, r3
 8006118:	d302      	bcc.n	8006120 <UART_WaitOnFlagUntilTimeout+0x32>
 800611a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800611c:	2b00      	cmp	r3, #0
 800611e:	d13e      	bne.n	800619e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006128:	e853 3f00 	ldrex	r3, [r3]
 800612c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800612e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006130:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006134:	667b      	str	r3, [r7, #100]	; 0x64
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	461a      	mov	r2, r3
 800613c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800613e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006140:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006142:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006144:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006146:	e841 2300 	strex	r3, r2, [r1]
 800614a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800614c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1e6      	bne.n	8006120 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3308      	adds	r3, #8
 8006158:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800615c:	e853 3f00 	ldrex	r3, [r3]
 8006160:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006164:	f023 0301 	bic.w	r3, r3, #1
 8006168:	663b      	str	r3, [r7, #96]	; 0x60
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	3308      	adds	r3, #8
 8006170:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006172:	64ba      	str	r2, [r7, #72]	; 0x48
 8006174:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006178:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1e5      	bne.n	8006152 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2220      	movs	r2, #32
 800618a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2220      	movs	r2, #32
 8006190:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e067      	b.n	800626e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0304 	and.w	r3, r3, #4
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d04f      	beq.n	800624c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ba:	d147      	bne.n	800624c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061c4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ce:	e853 3f00 	ldrex	r3, [r3]
 80061d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	461a      	mov	r2, r3
 80061e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061e4:	637b      	str	r3, [r7, #52]	; 0x34
 80061e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061ec:	e841 2300 	strex	r3, r2, [r1]
 80061f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1e6      	bne.n	80061c6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3308      	adds	r3, #8
 80061fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	e853 3f00 	ldrex	r3, [r3]
 8006206:	613b      	str	r3, [r7, #16]
   return(result);
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	f023 0301 	bic.w	r3, r3, #1
 800620e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3308      	adds	r3, #8
 8006216:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006218:	623a      	str	r2, [r7, #32]
 800621a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621c:	69f9      	ldr	r1, [r7, #28]
 800621e:	6a3a      	ldr	r2, [r7, #32]
 8006220:	e841 2300 	strex	r3, r2, [r1]
 8006224:	61bb      	str	r3, [r7, #24]
   return(result);
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1e5      	bne.n	80061f8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2220      	movs	r2, #32
 8006230:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2220      	movs	r2, #32
 8006236:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2220      	movs	r2, #32
 800623c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e010      	b.n	800626e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	69da      	ldr	r2, [r3, #28]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	4013      	ands	r3, r2
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	429a      	cmp	r2, r3
 800625a:	bf0c      	ite	eq
 800625c:	2301      	moveq	r3, #1
 800625e:	2300      	movne	r3, #0
 8006260:	b2db      	uxtb	r3, r3
 8006262:	461a      	mov	r2, r3
 8006264:	79fb      	ldrb	r3, [r7, #7]
 8006266:	429a      	cmp	r2, r3
 8006268:	f43f af4a 	beq.w	8006100 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3770      	adds	r7, #112	; 0x70
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006276:	b480      	push	{r7}
 8006278:	b095      	sub	sp, #84	; 0x54
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006286:	e853 3f00 	ldrex	r3, [r3]
 800628a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	461a      	mov	r2, r3
 800629a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800629c:	643b      	str	r3, [r7, #64]	; 0x40
 800629e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062a4:	e841 2300 	strex	r3, r2, [r1]
 80062a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1e6      	bne.n	800627e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	3308      	adds	r3, #8
 80062b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	e853 3f00 	ldrex	r3, [r3]
 80062be:	61fb      	str	r3, [r7, #28]
   return(result);
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	f023 0301 	bic.w	r3, r3, #1
 80062c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3308      	adds	r3, #8
 80062ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062d8:	e841 2300 	strex	r3, r2, [r1]
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1e5      	bne.n	80062b0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d118      	bne.n	800631e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	e853 3f00 	ldrex	r3, [r3]
 80062f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	f023 0310 	bic.w	r3, r3, #16
 8006300:	647b      	str	r3, [r7, #68]	; 0x44
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800630a:	61bb      	str	r3, [r7, #24]
 800630c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	6979      	ldr	r1, [r7, #20]
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	e841 2300 	strex	r3, r2, [r1]
 8006316:	613b      	str	r3, [r7, #16]
   return(result);
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1e6      	bne.n	80062ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2220      	movs	r2, #32
 8006322:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006330:	bf00      	nop
 8006332:	3754      	adds	r7, #84	; 0x54
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006348:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f7ff fb0e 	bl	800597c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006360:	bf00      	nop
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b088      	sub	sp, #32
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	e853 3f00 	ldrex	r3, [r3]
 800637c:	60bb      	str	r3, [r7, #8]
   return(result);
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006384:	61fb      	str	r3, [r7, #28]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	61bb      	str	r3, [r7, #24]
 8006390:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	6979      	ldr	r1, [r7, #20]
 8006394:	69ba      	ldr	r2, [r7, #24]
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	613b      	str	r3, [r7, #16]
   return(result);
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e6      	bne.n	8006370 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2220      	movs	r2, #32
 80063a6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7ff fada 	bl	8005968 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063b4:	bf00      	nop
 80063b6:	3720      	adds	r7, #32
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <__errno>:
 80063d0:	4b01      	ldr	r3, [pc, #4]	; (80063d8 <__errno+0x8>)
 80063d2:	6818      	ldr	r0, [r3, #0]
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	20000010 	.word	0x20000010

080063dc <__libc_init_array>:
 80063dc:	b570      	push	{r4, r5, r6, lr}
 80063de:	4d0d      	ldr	r5, [pc, #52]	; (8006414 <__libc_init_array+0x38>)
 80063e0:	4c0d      	ldr	r4, [pc, #52]	; (8006418 <__libc_init_array+0x3c>)
 80063e2:	1b64      	subs	r4, r4, r5
 80063e4:	10a4      	asrs	r4, r4, #2
 80063e6:	2600      	movs	r6, #0
 80063e8:	42a6      	cmp	r6, r4
 80063ea:	d109      	bne.n	8006400 <__libc_init_array+0x24>
 80063ec:	4d0b      	ldr	r5, [pc, #44]	; (800641c <__libc_init_array+0x40>)
 80063ee:	4c0c      	ldr	r4, [pc, #48]	; (8006420 <__libc_init_array+0x44>)
 80063f0:	f002 fd4e 	bl	8008e90 <_init>
 80063f4:	1b64      	subs	r4, r4, r5
 80063f6:	10a4      	asrs	r4, r4, #2
 80063f8:	2600      	movs	r6, #0
 80063fa:	42a6      	cmp	r6, r4
 80063fc:	d105      	bne.n	800640a <__libc_init_array+0x2e>
 80063fe:	bd70      	pop	{r4, r5, r6, pc}
 8006400:	f855 3b04 	ldr.w	r3, [r5], #4
 8006404:	4798      	blx	r3
 8006406:	3601      	adds	r6, #1
 8006408:	e7ee      	b.n	80063e8 <__libc_init_array+0xc>
 800640a:	f855 3b04 	ldr.w	r3, [r5], #4
 800640e:	4798      	blx	r3
 8006410:	3601      	adds	r6, #1
 8006412:	e7f2      	b.n	80063fa <__libc_init_array+0x1e>
 8006414:	080092ec 	.word	0x080092ec
 8006418:	080092ec 	.word	0x080092ec
 800641c:	080092ec 	.word	0x080092ec
 8006420:	080092f0 	.word	0x080092f0

08006424 <memset>:
 8006424:	4402      	add	r2, r0
 8006426:	4603      	mov	r3, r0
 8006428:	4293      	cmp	r3, r2
 800642a:	d100      	bne.n	800642e <memset+0xa>
 800642c:	4770      	bx	lr
 800642e:	f803 1b01 	strb.w	r1, [r3], #1
 8006432:	e7f9      	b.n	8006428 <memset+0x4>

08006434 <__cvt>:
 8006434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006438:	ec55 4b10 	vmov	r4, r5, d0
 800643c:	2d00      	cmp	r5, #0
 800643e:	460e      	mov	r6, r1
 8006440:	4619      	mov	r1, r3
 8006442:	462b      	mov	r3, r5
 8006444:	bfbb      	ittet	lt
 8006446:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800644a:	461d      	movlt	r5, r3
 800644c:	2300      	movge	r3, #0
 800644e:	232d      	movlt	r3, #45	; 0x2d
 8006450:	700b      	strb	r3, [r1, #0]
 8006452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006454:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006458:	4691      	mov	r9, r2
 800645a:	f023 0820 	bic.w	r8, r3, #32
 800645e:	bfbc      	itt	lt
 8006460:	4622      	movlt	r2, r4
 8006462:	4614      	movlt	r4, r2
 8006464:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006468:	d005      	beq.n	8006476 <__cvt+0x42>
 800646a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800646e:	d100      	bne.n	8006472 <__cvt+0x3e>
 8006470:	3601      	adds	r6, #1
 8006472:	2102      	movs	r1, #2
 8006474:	e000      	b.n	8006478 <__cvt+0x44>
 8006476:	2103      	movs	r1, #3
 8006478:	ab03      	add	r3, sp, #12
 800647a:	9301      	str	r3, [sp, #4]
 800647c:	ab02      	add	r3, sp, #8
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	ec45 4b10 	vmov	d0, r4, r5
 8006484:	4653      	mov	r3, sl
 8006486:	4632      	mov	r2, r6
 8006488:	f000 fce2 	bl	8006e50 <_dtoa_r>
 800648c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006490:	4607      	mov	r7, r0
 8006492:	d102      	bne.n	800649a <__cvt+0x66>
 8006494:	f019 0f01 	tst.w	r9, #1
 8006498:	d022      	beq.n	80064e0 <__cvt+0xac>
 800649a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800649e:	eb07 0906 	add.w	r9, r7, r6
 80064a2:	d110      	bne.n	80064c6 <__cvt+0x92>
 80064a4:	783b      	ldrb	r3, [r7, #0]
 80064a6:	2b30      	cmp	r3, #48	; 0x30
 80064a8:	d10a      	bne.n	80064c0 <__cvt+0x8c>
 80064aa:	2200      	movs	r2, #0
 80064ac:	2300      	movs	r3, #0
 80064ae:	4620      	mov	r0, r4
 80064b0:	4629      	mov	r1, r5
 80064b2:	f7fa fb09 	bl	8000ac8 <__aeabi_dcmpeq>
 80064b6:	b918      	cbnz	r0, 80064c0 <__cvt+0x8c>
 80064b8:	f1c6 0601 	rsb	r6, r6, #1
 80064bc:	f8ca 6000 	str.w	r6, [sl]
 80064c0:	f8da 3000 	ldr.w	r3, [sl]
 80064c4:	4499      	add	r9, r3
 80064c6:	2200      	movs	r2, #0
 80064c8:	2300      	movs	r3, #0
 80064ca:	4620      	mov	r0, r4
 80064cc:	4629      	mov	r1, r5
 80064ce:	f7fa fafb 	bl	8000ac8 <__aeabi_dcmpeq>
 80064d2:	b108      	cbz	r0, 80064d8 <__cvt+0xa4>
 80064d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80064d8:	2230      	movs	r2, #48	; 0x30
 80064da:	9b03      	ldr	r3, [sp, #12]
 80064dc:	454b      	cmp	r3, r9
 80064de:	d307      	bcc.n	80064f0 <__cvt+0xbc>
 80064e0:	9b03      	ldr	r3, [sp, #12]
 80064e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064e4:	1bdb      	subs	r3, r3, r7
 80064e6:	4638      	mov	r0, r7
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	b004      	add	sp, #16
 80064ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064f0:	1c59      	adds	r1, r3, #1
 80064f2:	9103      	str	r1, [sp, #12]
 80064f4:	701a      	strb	r2, [r3, #0]
 80064f6:	e7f0      	b.n	80064da <__cvt+0xa6>

080064f8 <__exponent>:
 80064f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064fa:	4603      	mov	r3, r0
 80064fc:	2900      	cmp	r1, #0
 80064fe:	bfb8      	it	lt
 8006500:	4249      	neglt	r1, r1
 8006502:	f803 2b02 	strb.w	r2, [r3], #2
 8006506:	bfb4      	ite	lt
 8006508:	222d      	movlt	r2, #45	; 0x2d
 800650a:	222b      	movge	r2, #43	; 0x2b
 800650c:	2909      	cmp	r1, #9
 800650e:	7042      	strb	r2, [r0, #1]
 8006510:	dd2a      	ble.n	8006568 <__exponent+0x70>
 8006512:	f10d 0407 	add.w	r4, sp, #7
 8006516:	46a4      	mov	ip, r4
 8006518:	270a      	movs	r7, #10
 800651a:	46a6      	mov	lr, r4
 800651c:	460a      	mov	r2, r1
 800651e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006522:	fb07 1516 	mls	r5, r7, r6, r1
 8006526:	3530      	adds	r5, #48	; 0x30
 8006528:	2a63      	cmp	r2, #99	; 0x63
 800652a:	f104 34ff 	add.w	r4, r4, #4294967295
 800652e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006532:	4631      	mov	r1, r6
 8006534:	dcf1      	bgt.n	800651a <__exponent+0x22>
 8006536:	3130      	adds	r1, #48	; 0x30
 8006538:	f1ae 0502 	sub.w	r5, lr, #2
 800653c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006540:	1c44      	adds	r4, r0, #1
 8006542:	4629      	mov	r1, r5
 8006544:	4561      	cmp	r1, ip
 8006546:	d30a      	bcc.n	800655e <__exponent+0x66>
 8006548:	f10d 0209 	add.w	r2, sp, #9
 800654c:	eba2 020e 	sub.w	r2, r2, lr
 8006550:	4565      	cmp	r5, ip
 8006552:	bf88      	it	hi
 8006554:	2200      	movhi	r2, #0
 8006556:	4413      	add	r3, r2
 8006558:	1a18      	subs	r0, r3, r0
 800655a:	b003      	add	sp, #12
 800655c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800655e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006562:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006566:	e7ed      	b.n	8006544 <__exponent+0x4c>
 8006568:	2330      	movs	r3, #48	; 0x30
 800656a:	3130      	adds	r1, #48	; 0x30
 800656c:	7083      	strb	r3, [r0, #2]
 800656e:	70c1      	strb	r1, [r0, #3]
 8006570:	1d03      	adds	r3, r0, #4
 8006572:	e7f1      	b.n	8006558 <__exponent+0x60>

08006574 <_printf_float>:
 8006574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006578:	ed2d 8b02 	vpush	{d8}
 800657c:	b08d      	sub	sp, #52	; 0x34
 800657e:	460c      	mov	r4, r1
 8006580:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006584:	4616      	mov	r6, r2
 8006586:	461f      	mov	r7, r3
 8006588:	4605      	mov	r5, r0
 800658a:	f001 fb45 	bl	8007c18 <_localeconv_r>
 800658e:	f8d0 a000 	ldr.w	sl, [r0]
 8006592:	4650      	mov	r0, sl
 8006594:	f7f9 fe1c 	bl	80001d0 <strlen>
 8006598:	2300      	movs	r3, #0
 800659a:	930a      	str	r3, [sp, #40]	; 0x28
 800659c:	6823      	ldr	r3, [r4, #0]
 800659e:	9305      	str	r3, [sp, #20]
 80065a0:	f8d8 3000 	ldr.w	r3, [r8]
 80065a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80065a8:	3307      	adds	r3, #7
 80065aa:	f023 0307 	bic.w	r3, r3, #7
 80065ae:	f103 0208 	add.w	r2, r3, #8
 80065b2:	f8c8 2000 	str.w	r2, [r8]
 80065b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80065be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80065c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80065c6:	9307      	str	r3, [sp, #28]
 80065c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80065cc:	ee08 0a10 	vmov	s16, r0
 80065d0:	4b9f      	ldr	r3, [pc, #636]	; (8006850 <_printf_float+0x2dc>)
 80065d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065d6:	f04f 32ff 	mov.w	r2, #4294967295
 80065da:	f7fa faa7 	bl	8000b2c <__aeabi_dcmpun>
 80065de:	bb88      	cbnz	r0, 8006644 <_printf_float+0xd0>
 80065e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065e4:	4b9a      	ldr	r3, [pc, #616]	; (8006850 <_printf_float+0x2dc>)
 80065e6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ea:	f7fa fa81 	bl	8000af0 <__aeabi_dcmple>
 80065ee:	bb48      	cbnz	r0, 8006644 <_printf_float+0xd0>
 80065f0:	2200      	movs	r2, #0
 80065f2:	2300      	movs	r3, #0
 80065f4:	4640      	mov	r0, r8
 80065f6:	4649      	mov	r1, r9
 80065f8:	f7fa fa70 	bl	8000adc <__aeabi_dcmplt>
 80065fc:	b110      	cbz	r0, 8006604 <_printf_float+0x90>
 80065fe:	232d      	movs	r3, #45	; 0x2d
 8006600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006604:	4b93      	ldr	r3, [pc, #588]	; (8006854 <_printf_float+0x2e0>)
 8006606:	4894      	ldr	r0, [pc, #592]	; (8006858 <_printf_float+0x2e4>)
 8006608:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800660c:	bf94      	ite	ls
 800660e:	4698      	movls	r8, r3
 8006610:	4680      	movhi	r8, r0
 8006612:	2303      	movs	r3, #3
 8006614:	6123      	str	r3, [r4, #16]
 8006616:	9b05      	ldr	r3, [sp, #20]
 8006618:	f023 0204 	bic.w	r2, r3, #4
 800661c:	6022      	str	r2, [r4, #0]
 800661e:	f04f 0900 	mov.w	r9, #0
 8006622:	9700      	str	r7, [sp, #0]
 8006624:	4633      	mov	r3, r6
 8006626:	aa0b      	add	r2, sp, #44	; 0x2c
 8006628:	4621      	mov	r1, r4
 800662a:	4628      	mov	r0, r5
 800662c:	f000 f9d8 	bl	80069e0 <_printf_common>
 8006630:	3001      	adds	r0, #1
 8006632:	f040 8090 	bne.w	8006756 <_printf_float+0x1e2>
 8006636:	f04f 30ff 	mov.w	r0, #4294967295
 800663a:	b00d      	add	sp, #52	; 0x34
 800663c:	ecbd 8b02 	vpop	{d8}
 8006640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006644:	4642      	mov	r2, r8
 8006646:	464b      	mov	r3, r9
 8006648:	4640      	mov	r0, r8
 800664a:	4649      	mov	r1, r9
 800664c:	f7fa fa6e 	bl	8000b2c <__aeabi_dcmpun>
 8006650:	b140      	cbz	r0, 8006664 <_printf_float+0xf0>
 8006652:	464b      	mov	r3, r9
 8006654:	2b00      	cmp	r3, #0
 8006656:	bfbc      	itt	lt
 8006658:	232d      	movlt	r3, #45	; 0x2d
 800665a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800665e:	487f      	ldr	r0, [pc, #508]	; (800685c <_printf_float+0x2e8>)
 8006660:	4b7f      	ldr	r3, [pc, #508]	; (8006860 <_printf_float+0x2ec>)
 8006662:	e7d1      	b.n	8006608 <_printf_float+0x94>
 8006664:	6863      	ldr	r3, [r4, #4]
 8006666:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800666a:	9206      	str	r2, [sp, #24]
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	d13f      	bne.n	80066f0 <_printf_float+0x17c>
 8006670:	2306      	movs	r3, #6
 8006672:	6063      	str	r3, [r4, #4]
 8006674:	9b05      	ldr	r3, [sp, #20]
 8006676:	6861      	ldr	r1, [r4, #4]
 8006678:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800667c:	2300      	movs	r3, #0
 800667e:	9303      	str	r3, [sp, #12]
 8006680:	ab0a      	add	r3, sp, #40	; 0x28
 8006682:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006686:	ab09      	add	r3, sp, #36	; 0x24
 8006688:	ec49 8b10 	vmov	d0, r8, r9
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	6022      	str	r2, [r4, #0]
 8006690:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006694:	4628      	mov	r0, r5
 8006696:	f7ff fecd 	bl	8006434 <__cvt>
 800669a:	9b06      	ldr	r3, [sp, #24]
 800669c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800669e:	2b47      	cmp	r3, #71	; 0x47
 80066a0:	4680      	mov	r8, r0
 80066a2:	d108      	bne.n	80066b6 <_printf_float+0x142>
 80066a4:	1cc8      	adds	r0, r1, #3
 80066a6:	db02      	blt.n	80066ae <_printf_float+0x13a>
 80066a8:	6863      	ldr	r3, [r4, #4]
 80066aa:	4299      	cmp	r1, r3
 80066ac:	dd41      	ble.n	8006732 <_printf_float+0x1be>
 80066ae:	f1ab 0b02 	sub.w	fp, fp, #2
 80066b2:	fa5f fb8b 	uxtb.w	fp, fp
 80066b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066ba:	d820      	bhi.n	80066fe <_printf_float+0x18a>
 80066bc:	3901      	subs	r1, #1
 80066be:	465a      	mov	r2, fp
 80066c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80066c4:	9109      	str	r1, [sp, #36]	; 0x24
 80066c6:	f7ff ff17 	bl	80064f8 <__exponent>
 80066ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066cc:	1813      	adds	r3, r2, r0
 80066ce:	2a01      	cmp	r2, #1
 80066d0:	4681      	mov	r9, r0
 80066d2:	6123      	str	r3, [r4, #16]
 80066d4:	dc02      	bgt.n	80066dc <_printf_float+0x168>
 80066d6:	6822      	ldr	r2, [r4, #0]
 80066d8:	07d2      	lsls	r2, r2, #31
 80066da:	d501      	bpl.n	80066e0 <_printf_float+0x16c>
 80066dc:	3301      	adds	r3, #1
 80066de:	6123      	str	r3, [r4, #16]
 80066e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d09c      	beq.n	8006622 <_printf_float+0xae>
 80066e8:	232d      	movs	r3, #45	; 0x2d
 80066ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066ee:	e798      	b.n	8006622 <_printf_float+0xae>
 80066f0:	9a06      	ldr	r2, [sp, #24]
 80066f2:	2a47      	cmp	r2, #71	; 0x47
 80066f4:	d1be      	bne.n	8006674 <_printf_float+0x100>
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1bc      	bne.n	8006674 <_printf_float+0x100>
 80066fa:	2301      	movs	r3, #1
 80066fc:	e7b9      	b.n	8006672 <_printf_float+0xfe>
 80066fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006702:	d118      	bne.n	8006736 <_printf_float+0x1c2>
 8006704:	2900      	cmp	r1, #0
 8006706:	6863      	ldr	r3, [r4, #4]
 8006708:	dd0b      	ble.n	8006722 <_printf_float+0x1ae>
 800670a:	6121      	str	r1, [r4, #16]
 800670c:	b913      	cbnz	r3, 8006714 <_printf_float+0x1a0>
 800670e:	6822      	ldr	r2, [r4, #0]
 8006710:	07d0      	lsls	r0, r2, #31
 8006712:	d502      	bpl.n	800671a <_printf_float+0x1a6>
 8006714:	3301      	adds	r3, #1
 8006716:	440b      	add	r3, r1
 8006718:	6123      	str	r3, [r4, #16]
 800671a:	65a1      	str	r1, [r4, #88]	; 0x58
 800671c:	f04f 0900 	mov.w	r9, #0
 8006720:	e7de      	b.n	80066e0 <_printf_float+0x16c>
 8006722:	b913      	cbnz	r3, 800672a <_printf_float+0x1b6>
 8006724:	6822      	ldr	r2, [r4, #0]
 8006726:	07d2      	lsls	r2, r2, #31
 8006728:	d501      	bpl.n	800672e <_printf_float+0x1ba>
 800672a:	3302      	adds	r3, #2
 800672c:	e7f4      	b.n	8006718 <_printf_float+0x1a4>
 800672e:	2301      	movs	r3, #1
 8006730:	e7f2      	b.n	8006718 <_printf_float+0x1a4>
 8006732:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006738:	4299      	cmp	r1, r3
 800673a:	db05      	blt.n	8006748 <_printf_float+0x1d4>
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	6121      	str	r1, [r4, #16]
 8006740:	07d8      	lsls	r0, r3, #31
 8006742:	d5ea      	bpl.n	800671a <_printf_float+0x1a6>
 8006744:	1c4b      	adds	r3, r1, #1
 8006746:	e7e7      	b.n	8006718 <_printf_float+0x1a4>
 8006748:	2900      	cmp	r1, #0
 800674a:	bfd4      	ite	le
 800674c:	f1c1 0202 	rsble	r2, r1, #2
 8006750:	2201      	movgt	r2, #1
 8006752:	4413      	add	r3, r2
 8006754:	e7e0      	b.n	8006718 <_printf_float+0x1a4>
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	055a      	lsls	r2, r3, #21
 800675a:	d407      	bmi.n	800676c <_printf_float+0x1f8>
 800675c:	6923      	ldr	r3, [r4, #16]
 800675e:	4642      	mov	r2, r8
 8006760:	4631      	mov	r1, r6
 8006762:	4628      	mov	r0, r5
 8006764:	47b8      	blx	r7
 8006766:	3001      	adds	r0, #1
 8006768:	d12c      	bne.n	80067c4 <_printf_float+0x250>
 800676a:	e764      	b.n	8006636 <_printf_float+0xc2>
 800676c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006770:	f240 80e0 	bls.w	8006934 <_printf_float+0x3c0>
 8006774:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006778:	2200      	movs	r2, #0
 800677a:	2300      	movs	r3, #0
 800677c:	f7fa f9a4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006780:	2800      	cmp	r0, #0
 8006782:	d034      	beq.n	80067ee <_printf_float+0x27a>
 8006784:	4a37      	ldr	r2, [pc, #220]	; (8006864 <_printf_float+0x2f0>)
 8006786:	2301      	movs	r3, #1
 8006788:	4631      	mov	r1, r6
 800678a:	4628      	mov	r0, r5
 800678c:	47b8      	blx	r7
 800678e:	3001      	adds	r0, #1
 8006790:	f43f af51 	beq.w	8006636 <_printf_float+0xc2>
 8006794:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006798:	429a      	cmp	r2, r3
 800679a:	db02      	blt.n	80067a2 <_printf_float+0x22e>
 800679c:	6823      	ldr	r3, [r4, #0]
 800679e:	07d8      	lsls	r0, r3, #31
 80067a0:	d510      	bpl.n	80067c4 <_printf_float+0x250>
 80067a2:	ee18 3a10 	vmov	r3, s16
 80067a6:	4652      	mov	r2, sl
 80067a8:	4631      	mov	r1, r6
 80067aa:	4628      	mov	r0, r5
 80067ac:	47b8      	blx	r7
 80067ae:	3001      	adds	r0, #1
 80067b0:	f43f af41 	beq.w	8006636 <_printf_float+0xc2>
 80067b4:	f04f 0800 	mov.w	r8, #0
 80067b8:	f104 091a 	add.w	r9, r4, #26
 80067bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067be:	3b01      	subs	r3, #1
 80067c0:	4543      	cmp	r3, r8
 80067c2:	dc09      	bgt.n	80067d8 <_printf_float+0x264>
 80067c4:	6823      	ldr	r3, [r4, #0]
 80067c6:	079b      	lsls	r3, r3, #30
 80067c8:	f100 8105 	bmi.w	80069d6 <_printf_float+0x462>
 80067cc:	68e0      	ldr	r0, [r4, #12]
 80067ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067d0:	4298      	cmp	r0, r3
 80067d2:	bfb8      	it	lt
 80067d4:	4618      	movlt	r0, r3
 80067d6:	e730      	b.n	800663a <_printf_float+0xc6>
 80067d8:	2301      	movs	r3, #1
 80067da:	464a      	mov	r2, r9
 80067dc:	4631      	mov	r1, r6
 80067de:	4628      	mov	r0, r5
 80067e0:	47b8      	blx	r7
 80067e2:	3001      	adds	r0, #1
 80067e4:	f43f af27 	beq.w	8006636 <_printf_float+0xc2>
 80067e8:	f108 0801 	add.w	r8, r8, #1
 80067ec:	e7e6      	b.n	80067bc <_printf_float+0x248>
 80067ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	dc39      	bgt.n	8006868 <_printf_float+0x2f4>
 80067f4:	4a1b      	ldr	r2, [pc, #108]	; (8006864 <_printf_float+0x2f0>)
 80067f6:	2301      	movs	r3, #1
 80067f8:	4631      	mov	r1, r6
 80067fa:	4628      	mov	r0, r5
 80067fc:	47b8      	blx	r7
 80067fe:	3001      	adds	r0, #1
 8006800:	f43f af19 	beq.w	8006636 <_printf_float+0xc2>
 8006804:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006808:	4313      	orrs	r3, r2
 800680a:	d102      	bne.n	8006812 <_printf_float+0x29e>
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	07d9      	lsls	r1, r3, #31
 8006810:	d5d8      	bpl.n	80067c4 <_printf_float+0x250>
 8006812:	ee18 3a10 	vmov	r3, s16
 8006816:	4652      	mov	r2, sl
 8006818:	4631      	mov	r1, r6
 800681a:	4628      	mov	r0, r5
 800681c:	47b8      	blx	r7
 800681e:	3001      	adds	r0, #1
 8006820:	f43f af09 	beq.w	8006636 <_printf_float+0xc2>
 8006824:	f04f 0900 	mov.w	r9, #0
 8006828:	f104 0a1a 	add.w	sl, r4, #26
 800682c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800682e:	425b      	negs	r3, r3
 8006830:	454b      	cmp	r3, r9
 8006832:	dc01      	bgt.n	8006838 <_printf_float+0x2c4>
 8006834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006836:	e792      	b.n	800675e <_printf_float+0x1ea>
 8006838:	2301      	movs	r3, #1
 800683a:	4652      	mov	r2, sl
 800683c:	4631      	mov	r1, r6
 800683e:	4628      	mov	r0, r5
 8006840:	47b8      	blx	r7
 8006842:	3001      	adds	r0, #1
 8006844:	f43f aef7 	beq.w	8006636 <_printf_float+0xc2>
 8006848:	f109 0901 	add.w	r9, r9, #1
 800684c:	e7ee      	b.n	800682c <_printf_float+0x2b8>
 800684e:	bf00      	nop
 8006850:	7fefffff 	.word	0x7fefffff
 8006854:	08008f0c 	.word	0x08008f0c
 8006858:	08008f10 	.word	0x08008f10
 800685c:	08008f18 	.word	0x08008f18
 8006860:	08008f14 	.word	0x08008f14
 8006864:	08008f1c 	.word	0x08008f1c
 8006868:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800686a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800686c:	429a      	cmp	r2, r3
 800686e:	bfa8      	it	ge
 8006870:	461a      	movge	r2, r3
 8006872:	2a00      	cmp	r2, #0
 8006874:	4691      	mov	r9, r2
 8006876:	dc37      	bgt.n	80068e8 <_printf_float+0x374>
 8006878:	f04f 0b00 	mov.w	fp, #0
 800687c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006880:	f104 021a 	add.w	r2, r4, #26
 8006884:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006886:	9305      	str	r3, [sp, #20]
 8006888:	eba3 0309 	sub.w	r3, r3, r9
 800688c:	455b      	cmp	r3, fp
 800688e:	dc33      	bgt.n	80068f8 <_printf_float+0x384>
 8006890:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006894:	429a      	cmp	r2, r3
 8006896:	db3b      	blt.n	8006910 <_printf_float+0x39c>
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	07da      	lsls	r2, r3, #31
 800689c:	d438      	bmi.n	8006910 <_printf_float+0x39c>
 800689e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068a0:	9a05      	ldr	r2, [sp, #20]
 80068a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068a4:	1a9a      	subs	r2, r3, r2
 80068a6:	eba3 0901 	sub.w	r9, r3, r1
 80068aa:	4591      	cmp	r9, r2
 80068ac:	bfa8      	it	ge
 80068ae:	4691      	movge	r9, r2
 80068b0:	f1b9 0f00 	cmp.w	r9, #0
 80068b4:	dc35      	bgt.n	8006922 <_printf_float+0x3ae>
 80068b6:	f04f 0800 	mov.w	r8, #0
 80068ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068be:	f104 0a1a 	add.w	sl, r4, #26
 80068c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068c6:	1a9b      	subs	r3, r3, r2
 80068c8:	eba3 0309 	sub.w	r3, r3, r9
 80068cc:	4543      	cmp	r3, r8
 80068ce:	f77f af79 	ble.w	80067c4 <_printf_float+0x250>
 80068d2:	2301      	movs	r3, #1
 80068d4:	4652      	mov	r2, sl
 80068d6:	4631      	mov	r1, r6
 80068d8:	4628      	mov	r0, r5
 80068da:	47b8      	blx	r7
 80068dc:	3001      	adds	r0, #1
 80068de:	f43f aeaa 	beq.w	8006636 <_printf_float+0xc2>
 80068e2:	f108 0801 	add.w	r8, r8, #1
 80068e6:	e7ec      	b.n	80068c2 <_printf_float+0x34e>
 80068e8:	4613      	mov	r3, r2
 80068ea:	4631      	mov	r1, r6
 80068ec:	4642      	mov	r2, r8
 80068ee:	4628      	mov	r0, r5
 80068f0:	47b8      	blx	r7
 80068f2:	3001      	adds	r0, #1
 80068f4:	d1c0      	bne.n	8006878 <_printf_float+0x304>
 80068f6:	e69e      	b.n	8006636 <_printf_float+0xc2>
 80068f8:	2301      	movs	r3, #1
 80068fa:	4631      	mov	r1, r6
 80068fc:	4628      	mov	r0, r5
 80068fe:	9205      	str	r2, [sp, #20]
 8006900:	47b8      	blx	r7
 8006902:	3001      	adds	r0, #1
 8006904:	f43f ae97 	beq.w	8006636 <_printf_float+0xc2>
 8006908:	9a05      	ldr	r2, [sp, #20]
 800690a:	f10b 0b01 	add.w	fp, fp, #1
 800690e:	e7b9      	b.n	8006884 <_printf_float+0x310>
 8006910:	ee18 3a10 	vmov	r3, s16
 8006914:	4652      	mov	r2, sl
 8006916:	4631      	mov	r1, r6
 8006918:	4628      	mov	r0, r5
 800691a:	47b8      	blx	r7
 800691c:	3001      	adds	r0, #1
 800691e:	d1be      	bne.n	800689e <_printf_float+0x32a>
 8006920:	e689      	b.n	8006636 <_printf_float+0xc2>
 8006922:	9a05      	ldr	r2, [sp, #20]
 8006924:	464b      	mov	r3, r9
 8006926:	4442      	add	r2, r8
 8006928:	4631      	mov	r1, r6
 800692a:	4628      	mov	r0, r5
 800692c:	47b8      	blx	r7
 800692e:	3001      	adds	r0, #1
 8006930:	d1c1      	bne.n	80068b6 <_printf_float+0x342>
 8006932:	e680      	b.n	8006636 <_printf_float+0xc2>
 8006934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006936:	2a01      	cmp	r2, #1
 8006938:	dc01      	bgt.n	800693e <_printf_float+0x3ca>
 800693a:	07db      	lsls	r3, r3, #31
 800693c:	d538      	bpl.n	80069b0 <_printf_float+0x43c>
 800693e:	2301      	movs	r3, #1
 8006940:	4642      	mov	r2, r8
 8006942:	4631      	mov	r1, r6
 8006944:	4628      	mov	r0, r5
 8006946:	47b8      	blx	r7
 8006948:	3001      	adds	r0, #1
 800694a:	f43f ae74 	beq.w	8006636 <_printf_float+0xc2>
 800694e:	ee18 3a10 	vmov	r3, s16
 8006952:	4652      	mov	r2, sl
 8006954:	4631      	mov	r1, r6
 8006956:	4628      	mov	r0, r5
 8006958:	47b8      	blx	r7
 800695a:	3001      	adds	r0, #1
 800695c:	f43f ae6b 	beq.w	8006636 <_printf_float+0xc2>
 8006960:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006964:	2200      	movs	r2, #0
 8006966:	2300      	movs	r3, #0
 8006968:	f7fa f8ae 	bl	8000ac8 <__aeabi_dcmpeq>
 800696c:	b9d8      	cbnz	r0, 80069a6 <_printf_float+0x432>
 800696e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006970:	f108 0201 	add.w	r2, r8, #1
 8006974:	3b01      	subs	r3, #1
 8006976:	4631      	mov	r1, r6
 8006978:	4628      	mov	r0, r5
 800697a:	47b8      	blx	r7
 800697c:	3001      	adds	r0, #1
 800697e:	d10e      	bne.n	800699e <_printf_float+0x42a>
 8006980:	e659      	b.n	8006636 <_printf_float+0xc2>
 8006982:	2301      	movs	r3, #1
 8006984:	4652      	mov	r2, sl
 8006986:	4631      	mov	r1, r6
 8006988:	4628      	mov	r0, r5
 800698a:	47b8      	blx	r7
 800698c:	3001      	adds	r0, #1
 800698e:	f43f ae52 	beq.w	8006636 <_printf_float+0xc2>
 8006992:	f108 0801 	add.w	r8, r8, #1
 8006996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006998:	3b01      	subs	r3, #1
 800699a:	4543      	cmp	r3, r8
 800699c:	dcf1      	bgt.n	8006982 <_printf_float+0x40e>
 800699e:	464b      	mov	r3, r9
 80069a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80069a4:	e6dc      	b.n	8006760 <_printf_float+0x1ec>
 80069a6:	f04f 0800 	mov.w	r8, #0
 80069aa:	f104 0a1a 	add.w	sl, r4, #26
 80069ae:	e7f2      	b.n	8006996 <_printf_float+0x422>
 80069b0:	2301      	movs	r3, #1
 80069b2:	4642      	mov	r2, r8
 80069b4:	e7df      	b.n	8006976 <_printf_float+0x402>
 80069b6:	2301      	movs	r3, #1
 80069b8:	464a      	mov	r2, r9
 80069ba:	4631      	mov	r1, r6
 80069bc:	4628      	mov	r0, r5
 80069be:	47b8      	blx	r7
 80069c0:	3001      	adds	r0, #1
 80069c2:	f43f ae38 	beq.w	8006636 <_printf_float+0xc2>
 80069c6:	f108 0801 	add.w	r8, r8, #1
 80069ca:	68e3      	ldr	r3, [r4, #12]
 80069cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069ce:	1a5b      	subs	r3, r3, r1
 80069d0:	4543      	cmp	r3, r8
 80069d2:	dcf0      	bgt.n	80069b6 <_printf_float+0x442>
 80069d4:	e6fa      	b.n	80067cc <_printf_float+0x258>
 80069d6:	f04f 0800 	mov.w	r8, #0
 80069da:	f104 0919 	add.w	r9, r4, #25
 80069de:	e7f4      	b.n	80069ca <_printf_float+0x456>

080069e0 <_printf_common>:
 80069e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e4:	4616      	mov	r6, r2
 80069e6:	4699      	mov	r9, r3
 80069e8:	688a      	ldr	r2, [r1, #8]
 80069ea:	690b      	ldr	r3, [r1, #16]
 80069ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069f0:	4293      	cmp	r3, r2
 80069f2:	bfb8      	it	lt
 80069f4:	4613      	movlt	r3, r2
 80069f6:	6033      	str	r3, [r6, #0]
 80069f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069fc:	4607      	mov	r7, r0
 80069fe:	460c      	mov	r4, r1
 8006a00:	b10a      	cbz	r2, 8006a06 <_printf_common+0x26>
 8006a02:	3301      	adds	r3, #1
 8006a04:	6033      	str	r3, [r6, #0]
 8006a06:	6823      	ldr	r3, [r4, #0]
 8006a08:	0699      	lsls	r1, r3, #26
 8006a0a:	bf42      	ittt	mi
 8006a0c:	6833      	ldrmi	r3, [r6, #0]
 8006a0e:	3302      	addmi	r3, #2
 8006a10:	6033      	strmi	r3, [r6, #0]
 8006a12:	6825      	ldr	r5, [r4, #0]
 8006a14:	f015 0506 	ands.w	r5, r5, #6
 8006a18:	d106      	bne.n	8006a28 <_printf_common+0x48>
 8006a1a:	f104 0a19 	add.w	sl, r4, #25
 8006a1e:	68e3      	ldr	r3, [r4, #12]
 8006a20:	6832      	ldr	r2, [r6, #0]
 8006a22:	1a9b      	subs	r3, r3, r2
 8006a24:	42ab      	cmp	r3, r5
 8006a26:	dc26      	bgt.n	8006a76 <_printf_common+0x96>
 8006a28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a2c:	1e13      	subs	r3, r2, #0
 8006a2e:	6822      	ldr	r2, [r4, #0]
 8006a30:	bf18      	it	ne
 8006a32:	2301      	movne	r3, #1
 8006a34:	0692      	lsls	r2, r2, #26
 8006a36:	d42b      	bmi.n	8006a90 <_printf_common+0xb0>
 8006a38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a3c:	4649      	mov	r1, r9
 8006a3e:	4638      	mov	r0, r7
 8006a40:	47c0      	blx	r8
 8006a42:	3001      	adds	r0, #1
 8006a44:	d01e      	beq.n	8006a84 <_printf_common+0xa4>
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	68e5      	ldr	r5, [r4, #12]
 8006a4a:	6832      	ldr	r2, [r6, #0]
 8006a4c:	f003 0306 	and.w	r3, r3, #6
 8006a50:	2b04      	cmp	r3, #4
 8006a52:	bf08      	it	eq
 8006a54:	1aad      	subeq	r5, r5, r2
 8006a56:	68a3      	ldr	r3, [r4, #8]
 8006a58:	6922      	ldr	r2, [r4, #16]
 8006a5a:	bf0c      	ite	eq
 8006a5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a60:	2500      	movne	r5, #0
 8006a62:	4293      	cmp	r3, r2
 8006a64:	bfc4      	itt	gt
 8006a66:	1a9b      	subgt	r3, r3, r2
 8006a68:	18ed      	addgt	r5, r5, r3
 8006a6a:	2600      	movs	r6, #0
 8006a6c:	341a      	adds	r4, #26
 8006a6e:	42b5      	cmp	r5, r6
 8006a70:	d11a      	bne.n	8006aa8 <_printf_common+0xc8>
 8006a72:	2000      	movs	r0, #0
 8006a74:	e008      	b.n	8006a88 <_printf_common+0xa8>
 8006a76:	2301      	movs	r3, #1
 8006a78:	4652      	mov	r2, sl
 8006a7a:	4649      	mov	r1, r9
 8006a7c:	4638      	mov	r0, r7
 8006a7e:	47c0      	blx	r8
 8006a80:	3001      	adds	r0, #1
 8006a82:	d103      	bne.n	8006a8c <_printf_common+0xac>
 8006a84:	f04f 30ff 	mov.w	r0, #4294967295
 8006a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a8c:	3501      	adds	r5, #1
 8006a8e:	e7c6      	b.n	8006a1e <_printf_common+0x3e>
 8006a90:	18e1      	adds	r1, r4, r3
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	2030      	movs	r0, #48	; 0x30
 8006a96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a9a:	4422      	add	r2, r4
 8006a9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006aa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006aa4:	3302      	adds	r3, #2
 8006aa6:	e7c7      	b.n	8006a38 <_printf_common+0x58>
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	4622      	mov	r2, r4
 8006aac:	4649      	mov	r1, r9
 8006aae:	4638      	mov	r0, r7
 8006ab0:	47c0      	blx	r8
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	d0e6      	beq.n	8006a84 <_printf_common+0xa4>
 8006ab6:	3601      	adds	r6, #1
 8006ab8:	e7d9      	b.n	8006a6e <_printf_common+0x8e>
	...

08006abc <_printf_i>:
 8006abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac0:	7e0f      	ldrb	r7, [r1, #24]
 8006ac2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ac4:	2f78      	cmp	r7, #120	; 0x78
 8006ac6:	4691      	mov	r9, r2
 8006ac8:	4680      	mov	r8, r0
 8006aca:	460c      	mov	r4, r1
 8006acc:	469a      	mov	sl, r3
 8006ace:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ad2:	d807      	bhi.n	8006ae4 <_printf_i+0x28>
 8006ad4:	2f62      	cmp	r7, #98	; 0x62
 8006ad6:	d80a      	bhi.n	8006aee <_printf_i+0x32>
 8006ad8:	2f00      	cmp	r7, #0
 8006ada:	f000 80d8 	beq.w	8006c8e <_printf_i+0x1d2>
 8006ade:	2f58      	cmp	r7, #88	; 0x58
 8006ae0:	f000 80a3 	beq.w	8006c2a <_printf_i+0x16e>
 8006ae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ae8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006aec:	e03a      	b.n	8006b64 <_printf_i+0xa8>
 8006aee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006af2:	2b15      	cmp	r3, #21
 8006af4:	d8f6      	bhi.n	8006ae4 <_printf_i+0x28>
 8006af6:	a101      	add	r1, pc, #4	; (adr r1, 8006afc <_printf_i+0x40>)
 8006af8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006afc:	08006b55 	.word	0x08006b55
 8006b00:	08006b69 	.word	0x08006b69
 8006b04:	08006ae5 	.word	0x08006ae5
 8006b08:	08006ae5 	.word	0x08006ae5
 8006b0c:	08006ae5 	.word	0x08006ae5
 8006b10:	08006ae5 	.word	0x08006ae5
 8006b14:	08006b69 	.word	0x08006b69
 8006b18:	08006ae5 	.word	0x08006ae5
 8006b1c:	08006ae5 	.word	0x08006ae5
 8006b20:	08006ae5 	.word	0x08006ae5
 8006b24:	08006ae5 	.word	0x08006ae5
 8006b28:	08006c75 	.word	0x08006c75
 8006b2c:	08006b99 	.word	0x08006b99
 8006b30:	08006c57 	.word	0x08006c57
 8006b34:	08006ae5 	.word	0x08006ae5
 8006b38:	08006ae5 	.word	0x08006ae5
 8006b3c:	08006c97 	.word	0x08006c97
 8006b40:	08006ae5 	.word	0x08006ae5
 8006b44:	08006b99 	.word	0x08006b99
 8006b48:	08006ae5 	.word	0x08006ae5
 8006b4c:	08006ae5 	.word	0x08006ae5
 8006b50:	08006c5f 	.word	0x08006c5f
 8006b54:	682b      	ldr	r3, [r5, #0]
 8006b56:	1d1a      	adds	r2, r3, #4
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	602a      	str	r2, [r5, #0]
 8006b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b64:	2301      	movs	r3, #1
 8006b66:	e0a3      	b.n	8006cb0 <_printf_i+0x1f4>
 8006b68:	6820      	ldr	r0, [r4, #0]
 8006b6a:	6829      	ldr	r1, [r5, #0]
 8006b6c:	0606      	lsls	r6, r0, #24
 8006b6e:	f101 0304 	add.w	r3, r1, #4
 8006b72:	d50a      	bpl.n	8006b8a <_printf_i+0xce>
 8006b74:	680e      	ldr	r6, [r1, #0]
 8006b76:	602b      	str	r3, [r5, #0]
 8006b78:	2e00      	cmp	r6, #0
 8006b7a:	da03      	bge.n	8006b84 <_printf_i+0xc8>
 8006b7c:	232d      	movs	r3, #45	; 0x2d
 8006b7e:	4276      	negs	r6, r6
 8006b80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b84:	485e      	ldr	r0, [pc, #376]	; (8006d00 <_printf_i+0x244>)
 8006b86:	230a      	movs	r3, #10
 8006b88:	e019      	b.n	8006bbe <_printf_i+0x102>
 8006b8a:	680e      	ldr	r6, [r1, #0]
 8006b8c:	602b      	str	r3, [r5, #0]
 8006b8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b92:	bf18      	it	ne
 8006b94:	b236      	sxthne	r6, r6
 8006b96:	e7ef      	b.n	8006b78 <_printf_i+0xbc>
 8006b98:	682b      	ldr	r3, [r5, #0]
 8006b9a:	6820      	ldr	r0, [r4, #0]
 8006b9c:	1d19      	adds	r1, r3, #4
 8006b9e:	6029      	str	r1, [r5, #0]
 8006ba0:	0601      	lsls	r1, r0, #24
 8006ba2:	d501      	bpl.n	8006ba8 <_printf_i+0xec>
 8006ba4:	681e      	ldr	r6, [r3, #0]
 8006ba6:	e002      	b.n	8006bae <_printf_i+0xf2>
 8006ba8:	0646      	lsls	r6, r0, #25
 8006baa:	d5fb      	bpl.n	8006ba4 <_printf_i+0xe8>
 8006bac:	881e      	ldrh	r6, [r3, #0]
 8006bae:	4854      	ldr	r0, [pc, #336]	; (8006d00 <_printf_i+0x244>)
 8006bb0:	2f6f      	cmp	r7, #111	; 0x6f
 8006bb2:	bf0c      	ite	eq
 8006bb4:	2308      	moveq	r3, #8
 8006bb6:	230a      	movne	r3, #10
 8006bb8:	2100      	movs	r1, #0
 8006bba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bbe:	6865      	ldr	r5, [r4, #4]
 8006bc0:	60a5      	str	r5, [r4, #8]
 8006bc2:	2d00      	cmp	r5, #0
 8006bc4:	bfa2      	ittt	ge
 8006bc6:	6821      	ldrge	r1, [r4, #0]
 8006bc8:	f021 0104 	bicge.w	r1, r1, #4
 8006bcc:	6021      	strge	r1, [r4, #0]
 8006bce:	b90e      	cbnz	r6, 8006bd4 <_printf_i+0x118>
 8006bd0:	2d00      	cmp	r5, #0
 8006bd2:	d04d      	beq.n	8006c70 <_printf_i+0x1b4>
 8006bd4:	4615      	mov	r5, r2
 8006bd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8006bda:	fb03 6711 	mls	r7, r3, r1, r6
 8006bde:	5dc7      	ldrb	r7, [r0, r7]
 8006be0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006be4:	4637      	mov	r7, r6
 8006be6:	42bb      	cmp	r3, r7
 8006be8:	460e      	mov	r6, r1
 8006bea:	d9f4      	bls.n	8006bd6 <_printf_i+0x11a>
 8006bec:	2b08      	cmp	r3, #8
 8006bee:	d10b      	bne.n	8006c08 <_printf_i+0x14c>
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	07de      	lsls	r6, r3, #31
 8006bf4:	d508      	bpl.n	8006c08 <_printf_i+0x14c>
 8006bf6:	6923      	ldr	r3, [r4, #16]
 8006bf8:	6861      	ldr	r1, [r4, #4]
 8006bfa:	4299      	cmp	r1, r3
 8006bfc:	bfde      	ittt	le
 8006bfe:	2330      	movle	r3, #48	; 0x30
 8006c00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c08:	1b52      	subs	r2, r2, r5
 8006c0a:	6122      	str	r2, [r4, #16]
 8006c0c:	f8cd a000 	str.w	sl, [sp]
 8006c10:	464b      	mov	r3, r9
 8006c12:	aa03      	add	r2, sp, #12
 8006c14:	4621      	mov	r1, r4
 8006c16:	4640      	mov	r0, r8
 8006c18:	f7ff fee2 	bl	80069e0 <_printf_common>
 8006c1c:	3001      	adds	r0, #1
 8006c1e:	d14c      	bne.n	8006cba <_printf_i+0x1fe>
 8006c20:	f04f 30ff 	mov.w	r0, #4294967295
 8006c24:	b004      	add	sp, #16
 8006c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c2a:	4835      	ldr	r0, [pc, #212]	; (8006d00 <_printf_i+0x244>)
 8006c2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c30:	6829      	ldr	r1, [r5, #0]
 8006c32:	6823      	ldr	r3, [r4, #0]
 8006c34:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c38:	6029      	str	r1, [r5, #0]
 8006c3a:	061d      	lsls	r5, r3, #24
 8006c3c:	d514      	bpl.n	8006c68 <_printf_i+0x1ac>
 8006c3e:	07df      	lsls	r7, r3, #31
 8006c40:	bf44      	itt	mi
 8006c42:	f043 0320 	orrmi.w	r3, r3, #32
 8006c46:	6023      	strmi	r3, [r4, #0]
 8006c48:	b91e      	cbnz	r6, 8006c52 <_printf_i+0x196>
 8006c4a:	6823      	ldr	r3, [r4, #0]
 8006c4c:	f023 0320 	bic.w	r3, r3, #32
 8006c50:	6023      	str	r3, [r4, #0]
 8006c52:	2310      	movs	r3, #16
 8006c54:	e7b0      	b.n	8006bb8 <_printf_i+0xfc>
 8006c56:	6823      	ldr	r3, [r4, #0]
 8006c58:	f043 0320 	orr.w	r3, r3, #32
 8006c5c:	6023      	str	r3, [r4, #0]
 8006c5e:	2378      	movs	r3, #120	; 0x78
 8006c60:	4828      	ldr	r0, [pc, #160]	; (8006d04 <_printf_i+0x248>)
 8006c62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c66:	e7e3      	b.n	8006c30 <_printf_i+0x174>
 8006c68:	0659      	lsls	r1, r3, #25
 8006c6a:	bf48      	it	mi
 8006c6c:	b2b6      	uxthmi	r6, r6
 8006c6e:	e7e6      	b.n	8006c3e <_printf_i+0x182>
 8006c70:	4615      	mov	r5, r2
 8006c72:	e7bb      	b.n	8006bec <_printf_i+0x130>
 8006c74:	682b      	ldr	r3, [r5, #0]
 8006c76:	6826      	ldr	r6, [r4, #0]
 8006c78:	6961      	ldr	r1, [r4, #20]
 8006c7a:	1d18      	adds	r0, r3, #4
 8006c7c:	6028      	str	r0, [r5, #0]
 8006c7e:	0635      	lsls	r5, r6, #24
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	d501      	bpl.n	8006c88 <_printf_i+0x1cc>
 8006c84:	6019      	str	r1, [r3, #0]
 8006c86:	e002      	b.n	8006c8e <_printf_i+0x1d2>
 8006c88:	0670      	lsls	r0, r6, #25
 8006c8a:	d5fb      	bpl.n	8006c84 <_printf_i+0x1c8>
 8006c8c:	8019      	strh	r1, [r3, #0]
 8006c8e:	2300      	movs	r3, #0
 8006c90:	6123      	str	r3, [r4, #16]
 8006c92:	4615      	mov	r5, r2
 8006c94:	e7ba      	b.n	8006c0c <_printf_i+0x150>
 8006c96:	682b      	ldr	r3, [r5, #0]
 8006c98:	1d1a      	adds	r2, r3, #4
 8006c9a:	602a      	str	r2, [r5, #0]
 8006c9c:	681d      	ldr	r5, [r3, #0]
 8006c9e:	6862      	ldr	r2, [r4, #4]
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	f7f9 fa9c 	bl	80001e0 <memchr>
 8006ca8:	b108      	cbz	r0, 8006cae <_printf_i+0x1f2>
 8006caa:	1b40      	subs	r0, r0, r5
 8006cac:	6060      	str	r0, [r4, #4]
 8006cae:	6863      	ldr	r3, [r4, #4]
 8006cb0:	6123      	str	r3, [r4, #16]
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cb8:	e7a8      	b.n	8006c0c <_printf_i+0x150>
 8006cba:	6923      	ldr	r3, [r4, #16]
 8006cbc:	462a      	mov	r2, r5
 8006cbe:	4649      	mov	r1, r9
 8006cc0:	4640      	mov	r0, r8
 8006cc2:	47d0      	blx	sl
 8006cc4:	3001      	adds	r0, #1
 8006cc6:	d0ab      	beq.n	8006c20 <_printf_i+0x164>
 8006cc8:	6823      	ldr	r3, [r4, #0]
 8006cca:	079b      	lsls	r3, r3, #30
 8006ccc:	d413      	bmi.n	8006cf6 <_printf_i+0x23a>
 8006cce:	68e0      	ldr	r0, [r4, #12]
 8006cd0:	9b03      	ldr	r3, [sp, #12]
 8006cd2:	4298      	cmp	r0, r3
 8006cd4:	bfb8      	it	lt
 8006cd6:	4618      	movlt	r0, r3
 8006cd8:	e7a4      	b.n	8006c24 <_printf_i+0x168>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	4632      	mov	r2, r6
 8006cde:	4649      	mov	r1, r9
 8006ce0:	4640      	mov	r0, r8
 8006ce2:	47d0      	blx	sl
 8006ce4:	3001      	adds	r0, #1
 8006ce6:	d09b      	beq.n	8006c20 <_printf_i+0x164>
 8006ce8:	3501      	adds	r5, #1
 8006cea:	68e3      	ldr	r3, [r4, #12]
 8006cec:	9903      	ldr	r1, [sp, #12]
 8006cee:	1a5b      	subs	r3, r3, r1
 8006cf0:	42ab      	cmp	r3, r5
 8006cf2:	dcf2      	bgt.n	8006cda <_printf_i+0x21e>
 8006cf4:	e7eb      	b.n	8006cce <_printf_i+0x212>
 8006cf6:	2500      	movs	r5, #0
 8006cf8:	f104 0619 	add.w	r6, r4, #25
 8006cfc:	e7f5      	b.n	8006cea <_printf_i+0x22e>
 8006cfe:	bf00      	nop
 8006d00:	08008f1e 	.word	0x08008f1e
 8006d04:	08008f2f 	.word	0x08008f2f

08006d08 <iprintf>:
 8006d08:	b40f      	push	{r0, r1, r2, r3}
 8006d0a:	4b0a      	ldr	r3, [pc, #40]	; (8006d34 <iprintf+0x2c>)
 8006d0c:	b513      	push	{r0, r1, r4, lr}
 8006d0e:	681c      	ldr	r4, [r3, #0]
 8006d10:	b124      	cbz	r4, 8006d1c <iprintf+0x14>
 8006d12:	69a3      	ldr	r3, [r4, #24]
 8006d14:	b913      	cbnz	r3, 8006d1c <iprintf+0x14>
 8006d16:	4620      	mov	r0, r4
 8006d18:	f000 fee0 	bl	8007adc <__sinit>
 8006d1c:	ab05      	add	r3, sp, #20
 8006d1e:	9a04      	ldr	r2, [sp, #16]
 8006d20:	68a1      	ldr	r1, [r4, #8]
 8006d22:	9301      	str	r3, [sp, #4]
 8006d24:	4620      	mov	r0, r4
 8006d26:	f001 fc39 	bl	800859c <_vfiprintf_r>
 8006d2a:	b002      	add	sp, #8
 8006d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d30:	b004      	add	sp, #16
 8006d32:	4770      	bx	lr
 8006d34:	20000010 	.word	0x20000010

08006d38 <quorem>:
 8006d38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d3c:	6903      	ldr	r3, [r0, #16]
 8006d3e:	690c      	ldr	r4, [r1, #16]
 8006d40:	42a3      	cmp	r3, r4
 8006d42:	4607      	mov	r7, r0
 8006d44:	f2c0 8081 	blt.w	8006e4a <quorem+0x112>
 8006d48:	3c01      	subs	r4, #1
 8006d4a:	f101 0814 	add.w	r8, r1, #20
 8006d4e:	f100 0514 	add.w	r5, r0, #20
 8006d52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d56:	9301      	str	r3, [sp, #4]
 8006d58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d60:	3301      	adds	r3, #1
 8006d62:	429a      	cmp	r2, r3
 8006d64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006d68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d6c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d70:	d331      	bcc.n	8006dd6 <quorem+0x9e>
 8006d72:	f04f 0e00 	mov.w	lr, #0
 8006d76:	4640      	mov	r0, r8
 8006d78:	46ac      	mov	ip, r5
 8006d7a:	46f2      	mov	sl, lr
 8006d7c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006d80:	b293      	uxth	r3, r2
 8006d82:	fb06 e303 	mla	r3, r6, r3, lr
 8006d86:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	ebaa 0303 	sub.w	r3, sl, r3
 8006d90:	f8dc a000 	ldr.w	sl, [ip]
 8006d94:	0c12      	lsrs	r2, r2, #16
 8006d96:	fa13 f38a 	uxtah	r3, r3, sl
 8006d9a:	fb06 e202 	mla	r2, r6, r2, lr
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	9b00      	ldr	r3, [sp, #0]
 8006da2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006da6:	b292      	uxth	r2, r2
 8006da8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006dac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006db0:	f8bd 3000 	ldrh.w	r3, [sp]
 8006db4:	4581      	cmp	r9, r0
 8006db6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006dba:	f84c 3b04 	str.w	r3, [ip], #4
 8006dbe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006dc2:	d2db      	bcs.n	8006d7c <quorem+0x44>
 8006dc4:	f855 300b 	ldr.w	r3, [r5, fp]
 8006dc8:	b92b      	cbnz	r3, 8006dd6 <quorem+0x9e>
 8006dca:	9b01      	ldr	r3, [sp, #4]
 8006dcc:	3b04      	subs	r3, #4
 8006dce:	429d      	cmp	r5, r3
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	d32e      	bcc.n	8006e32 <quorem+0xfa>
 8006dd4:	613c      	str	r4, [r7, #16]
 8006dd6:	4638      	mov	r0, r7
 8006dd8:	f001 f9be 	bl	8008158 <__mcmp>
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	db24      	blt.n	8006e2a <quorem+0xf2>
 8006de0:	3601      	adds	r6, #1
 8006de2:	4628      	mov	r0, r5
 8006de4:	f04f 0c00 	mov.w	ip, #0
 8006de8:	f858 2b04 	ldr.w	r2, [r8], #4
 8006dec:	f8d0 e000 	ldr.w	lr, [r0]
 8006df0:	b293      	uxth	r3, r2
 8006df2:	ebac 0303 	sub.w	r3, ip, r3
 8006df6:	0c12      	lsrs	r2, r2, #16
 8006df8:	fa13 f38e 	uxtah	r3, r3, lr
 8006dfc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006e00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e0a:	45c1      	cmp	r9, r8
 8006e0c:	f840 3b04 	str.w	r3, [r0], #4
 8006e10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e14:	d2e8      	bcs.n	8006de8 <quorem+0xb0>
 8006e16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e1e:	b922      	cbnz	r2, 8006e2a <quorem+0xf2>
 8006e20:	3b04      	subs	r3, #4
 8006e22:	429d      	cmp	r5, r3
 8006e24:	461a      	mov	r2, r3
 8006e26:	d30a      	bcc.n	8006e3e <quorem+0x106>
 8006e28:	613c      	str	r4, [r7, #16]
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	b003      	add	sp, #12
 8006e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e32:	6812      	ldr	r2, [r2, #0]
 8006e34:	3b04      	subs	r3, #4
 8006e36:	2a00      	cmp	r2, #0
 8006e38:	d1cc      	bne.n	8006dd4 <quorem+0x9c>
 8006e3a:	3c01      	subs	r4, #1
 8006e3c:	e7c7      	b.n	8006dce <quorem+0x96>
 8006e3e:	6812      	ldr	r2, [r2, #0]
 8006e40:	3b04      	subs	r3, #4
 8006e42:	2a00      	cmp	r2, #0
 8006e44:	d1f0      	bne.n	8006e28 <quorem+0xf0>
 8006e46:	3c01      	subs	r4, #1
 8006e48:	e7eb      	b.n	8006e22 <quorem+0xea>
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	e7ee      	b.n	8006e2c <quorem+0xf4>
	...

08006e50 <_dtoa_r>:
 8006e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e54:	ed2d 8b04 	vpush	{d8-d9}
 8006e58:	ec57 6b10 	vmov	r6, r7, d0
 8006e5c:	b093      	sub	sp, #76	; 0x4c
 8006e5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006e60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006e64:	9106      	str	r1, [sp, #24]
 8006e66:	ee10 aa10 	vmov	sl, s0
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	9209      	str	r2, [sp, #36]	; 0x24
 8006e6e:	930c      	str	r3, [sp, #48]	; 0x30
 8006e70:	46bb      	mov	fp, r7
 8006e72:	b975      	cbnz	r5, 8006e92 <_dtoa_r+0x42>
 8006e74:	2010      	movs	r0, #16
 8006e76:	f000 fed7 	bl	8007c28 <malloc>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	6260      	str	r0, [r4, #36]	; 0x24
 8006e7e:	b920      	cbnz	r0, 8006e8a <_dtoa_r+0x3a>
 8006e80:	4ba7      	ldr	r3, [pc, #668]	; (8007120 <_dtoa_r+0x2d0>)
 8006e82:	21ea      	movs	r1, #234	; 0xea
 8006e84:	48a7      	ldr	r0, [pc, #668]	; (8007124 <_dtoa_r+0x2d4>)
 8006e86:	f001 fddf 	bl	8008a48 <__assert_func>
 8006e8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006e8e:	6005      	str	r5, [r0, #0]
 8006e90:	60c5      	str	r5, [r0, #12]
 8006e92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e94:	6819      	ldr	r1, [r3, #0]
 8006e96:	b151      	cbz	r1, 8006eae <_dtoa_r+0x5e>
 8006e98:	685a      	ldr	r2, [r3, #4]
 8006e9a:	604a      	str	r2, [r1, #4]
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	4093      	lsls	r3, r2
 8006ea0:	608b      	str	r3, [r1, #8]
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f000 ff16 	bl	8007cd4 <_Bfree>
 8006ea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006eaa:	2200      	movs	r2, #0
 8006eac:	601a      	str	r2, [r3, #0]
 8006eae:	1e3b      	subs	r3, r7, #0
 8006eb0:	bfaa      	itet	ge
 8006eb2:	2300      	movge	r3, #0
 8006eb4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006eb8:	f8c8 3000 	strge.w	r3, [r8]
 8006ebc:	4b9a      	ldr	r3, [pc, #616]	; (8007128 <_dtoa_r+0x2d8>)
 8006ebe:	bfbc      	itt	lt
 8006ec0:	2201      	movlt	r2, #1
 8006ec2:	f8c8 2000 	strlt.w	r2, [r8]
 8006ec6:	ea33 030b 	bics.w	r3, r3, fp
 8006eca:	d11b      	bne.n	8006f04 <_dtoa_r+0xb4>
 8006ecc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ece:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ed2:	6013      	str	r3, [r2, #0]
 8006ed4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ed8:	4333      	orrs	r3, r6
 8006eda:	f000 8592 	beq.w	8007a02 <_dtoa_r+0xbb2>
 8006ede:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ee0:	b963      	cbnz	r3, 8006efc <_dtoa_r+0xac>
 8006ee2:	4b92      	ldr	r3, [pc, #584]	; (800712c <_dtoa_r+0x2dc>)
 8006ee4:	e022      	b.n	8006f2c <_dtoa_r+0xdc>
 8006ee6:	4b92      	ldr	r3, [pc, #584]	; (8007130 <_dtoa_r+0x2e0>)
 8006ee8:	9301      	str	r3, [sp, #4]
 8006eea:	3308      	adds	r3, #8
 8006eec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006eee:	6013      	str	r3, [r2, #0]
 8006ef0:	9801      	ldr	r0, [sp, #4]
 8006ef2:	b013      	add	sp, #76	; 0x4c
 8006ef4:	ecbd 8b04 	vpop	{d8-d9}
 8006ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006efc:	4b8b      	ldr	r3, [pc, #556]	; (800712c <_dtoa_r+0x2dc>)
 8006efe:	9301      	str	r3, [sp, #4]
 8006f00:	3303      	adds	r3, #3
 8006f02:	e7f3      	b.n	8006eec <_dtoa_r+0x9c>
 8006f04:	2200      	movs	r2, #0
 8006f06:	2300      	movs	r3, #0
 8006f08:	4650      	mov	r0, sl
 8006f0a:	4659      	mov	r1, fp
 8006f0c:	f7f9 fddc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f10:	ec4b ab19 	vmov	d9, sl, fp
 8006f14:	4680      	mov	r8, r0
 8006f16:	b158      	cbz	r0, 8006f30 <_dtoa_r+0xe0>
 8006f18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	6013      	str	r3, [r2, #0]
 8006f1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 856b 	beq.w	80079fc <_dtoa_r+0xbac>
 8006f26:	4883      	ldr	r0, [pc, #524]	; (8007134 <_dtoa_r+0x2e4>)
 8006f28:	6018      	str	r0, [r3, #0]
 8006f2a:	1e43      	subs	r3, r0, #1
 8006f2c:	9301      	str	r3, [sp, #4]
 8006f2e:	e7df      	b.n	8006ef0 <_dtoa_r+0xa0>
 8006f30:	ec4b ab10 	vmov	d0, sl, fp
 8006f34:	aa10      	add	r2, sp, #64	; 0x40
 8006f36:	a911      	add	r1, sp, #68	; 0x44
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f001 f9b3 	bl	80082a4 <__d2b>
 8006f3e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006f42:	ee08 0a10 	vmov	s16, r0
 8006f46:	2d00      	cmp	r5, #0
 8006f48:	f000 8084 	beq.w	8007054 <_dtoa_r+0x204>
 8006f4c:	ee19 3a90 	vmov	r3, s19
 8006f50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f54:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006f58:	4656      	mov	r6, sl
 8006f5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006f5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006f62:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006f66:	4b74      	ldr	r3, [pc, #464]	; (8007138 <_dtoa_r+0x2e8>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	4639      	mov	r1, r7
 8006f6e:	f7f9 f98b 	bl	8000288 <__aeabi_dsub>
 8006f72:	a365      	add	r3, pc, #404	; (adr r3, 8007108 <_dtoa_r+0x2b8>)
 8006f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f78:	f7f9 fb3e 	bl	80005f8 <__aeabi_dmul>
 8006f7c:	a364      	add	r3, pc, #400	; (adr r3, 8007110 <_dtoa_r+0x2c0>)
 8006f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f82:	f7f9 f983 	bl	800028c <__adddf3>
 8006f86:	4606      	mov	r6, r0
 8006f88:	4628      	mov	r0, r5
 8006f8a:	460f      	mov	r7, r1
 8006f8c:	f7f9 faca 	bl	8000524 <__aeabi_i2d>
 8006f90:	a361      	add	r3, pc, #388	; (adr r3, 8007118 <_dtoa_r+0x2c8>)
 8006f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f96:	f7f9 fb2f 	bl	80005f8 <__aeabi_dmul>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	4639      	mov	r1, r7
 8006fa2:	f7f9 f973 	bl	800028c <__adddf3>
 8006fa6:	4606      	mov	r6, r0
 8006fa8:	460f      	mov	r7, r1
 8006faa:	f7f9 fdd5 	bl	8000b58 <__aeabi_d2iz>
 8006fae:	2200      	movs	r2, #0
 8006fb0:	9000      	str	r0, [sp, #0]
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	4639      	mov	r1, r7
 8006fb8:	f7f9 fd90 	bl	8000adc <__aeabi_dcmplt>
 8006fbc:	b150      	cbz	r0, 8006fd4 <_dtoa_r+0x184>
 8006fbe:	9800      	ldr	r0, [sp, #0]
 8006fc0:	f7f9 fab0 	bl	8000524 <__aeabi_i2d>
 8006fc4:	4632      	mov	r2, r6
 8006fc6:	463b      	mov	r3, r7
 8006fc8:	f7f9 fd7e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fcc:	b910      	cbnz	r0, 8006fd4 <_dtoa_r+0x184>
 8006fce:	9b00      	ldr	r3, [sp, #0]
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	9b00      	ldr	r3, [sp, #0]
 8006fd6:	2b16      	cmp	r3, #22
 8006fd8:	d85a      	bhi.n	8007090 <_dtoa_r+0x240>
 8006fda:	9a00      	ldr	r2, [sp, #0]
 8006fdc:	4b57      	ldr	r3, [pc, #348]	; (800713c <_dtoa_r+0x2ec>)
 8006fde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe6:	ec51 0b19 	vmov	r0, r1, d9
 8006fea:	f7f9 fd77 	bl	8000adc <__aeabi_dcmplt>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	d050      	beq.n	8007094 <_dtoa_r+0x244>
 8006ff2:	9b00      	ldr	r3, [sp, #0]
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ffc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ffe:	1b5d      	subs	r5, r3, r5
 8007000:	1e6b      	subs	r3, r5, #1
 8007002:	9305      	str	r3, [sp, #20]
 8007004:	bf45      	ittet	mi
 8007006:	f1c5 0301 	rsbmi	r3, r5, #1
 800700a:	9304      	strmi	r3, [sp, #16]
 800700c:	2300      	movpl	r3, #0
 800700e:	2300      	movmi	r3, #0
 8007010:	bf4c      	ite	mi
 8007012:	9305      	strmi	r3, [sp, #20]
 8007014:	9304      	strpl	r3, [sp, #16]
 8007016:	9b00      	ldr	r3, [sp, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	db3d      	blt.n	8007098 <_dtoa_r+0x248>
 800701c:	9b05      	ldr	r3, [sp, #20]
 800701e:	9a00      	ldr	r2, [sp, #0]
 8007020:	920a      	str	r2, [sp, #40]	; 0x28
 8007022:	4413      	add	r3, r2
 8007024:	9305      	str	r3, [sp, #20]
 8007026:	2300      	movs	r3, #0
 8007028:	9307      	str	r3, [sp, #28]
 800702a:	9b06      	ldr	r3, [sp, #24]
 800702c:	2b09      	cmp	r3, #9
 800702e:	f200 8089 	bhi.w	8007144 <_dtoa_r+0x2f4>
 8007032:	2b05      	cmp	r3, #5
 8007034:	bfc4      	itt	gt
 8007036:	3b04      	subgt	r3, #4
 8007038:	9306      	strgt	r3, [sp, #24]
 800703a:	9b06      	ldr	r3, [sp, #24]
 800703c:	f1a3 0302 	sub.w	r3, r3, #2
 8007040:	bfcc      	ite	gt
 8007042:	2500      	movgt	r5, #0
 8007044:	2501      	movle	r5, #1
 8007046:	2b03      	cmp	r3, #3
 8007048:	f200 8087 	bhi.w	800715a <_dtoa_r+0x30a>
 800704c:	e8df f003 	tbb	[pc, r3]
 8007050:	59383a2d 	.word	0x59383a2d
 8007054:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007058:	441d      	add	r5, r3
 800705a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800705e:	2b20      	cmp	r3, #32
 8007060:	bfc1      	itttt	gt
 8007062:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007066:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800706a:	fa0b f303 	lslgt.w	r3, fp, r3
 800706e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007072:	bfda      	itte	le
 8007074:	f1c3 0320 	rsble	r3, r3, #32
 8007078:	fa06 f003 	lslle.w	r0, r6, r3
 800707c:	4318      	orrgt	r0, r3
 800707e:	f7f9 fa41 	bl	8000504 <__aeabi_ui2d>
 8007082:	2301      	movs	r3, #1
 8007084:	4606      	mov	r6, r0
 8007086:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800708a:	3d01      	subs	r5, #1
 800708c:	930e      	str	r3, [sp, #56]	; 0x38
 800708e:	e76a      	b.n	8006f66 <_dtoa_r+0x116>
 8007090:	2301      	movs	r3, #1
 8007092:	e7b2      	b.n	8006ffa <_dtoa_r+0x1aa>
 8007094:	900b      	str	r0, [sp, #44]	; 0x2c
 8007096:	e7b1      	b.n	8006ffc <_dtoa_r+0x1ac>
 8007098:	9b04      	ldr	r3, [sp, #16]
 800709a:	9a00      	ldr	r2, [sp, #0]
 800709c:	1a9b      	subs	r3, r3, r2
 800709e:	9304      	str	r3, [sp, #16]
 80070a0:	4253      	negs	r3, r2
 80070a2:	9307      	str	r3, [sp, #28]
 80070a4:	2300      	movs	r3, #0
 80070a6:	930a      	str	r3, [sp, #40]	; 0x28
 80070a8:	e7bf      	b.n	800702a <_dtoa_r+0x1da>
 80070aa:	2300      	movs	r3, #0
 80070ac:	9308      	str	r3, [sp, #32]
 80070ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	dc55      	bgt.n	8007160 <_dtoa_r+0x310>
 80070b4:	2301      	movs	r3, #1
 80070b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80070ba:	461a      	mov	r2, r3
 80070bc:	9209      	str	r2, [sp, #36]	; 0x24
 80070be:	e00c      	b.n	80070da <_dtoa_r+0x28a>
 80070c0:	2301      	movs	r3, #1
 80070c2:	e7f3      	b.n	80070ac <_dtoa_r+0x25c>
 80070c4:	2300      	movs	r3, #0
 80070c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070c8:	9308      	str	r3, [sp, #32]
 80070ca:	9b00      	ldr	r3, [sp, #0]
 80070cc:	4413      	add	r3, r2
 80070ce:	9302      	str	r3, [sp, #8]
 80070d0:	3301      	adds	r3, #1
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	9303      	str	r3, [sp, #12]
 80070d6:	bfb8      	it	lt
 80070d8:	2301      	movlt	r3, #1
 80070da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80070dc:	2200      	movs	r2, #0
 80070de:	6042      	str	r2, [r0, #4]
 80070e0:	2204      	movs	r2, #4
 80070e2:	f102 0614 	add.w	r6, r2, #20
 80070e6:	429e      	cmp	r6, r3
 80070e8:	6841      	ldr	r1, [r0, #4]
 80070ea:	d93d      	bls.n	8007168 <_dtoa_r+0x318>
 80070ec:	4620      	mov	r0, r4
 80070ee:	f000 fdb1 	bl	8007c54 <_Balloc>
 80070f2:	9001      	str	r0, [sp, #4]
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d13b      	bne.n	8007170 <_dtoa_r+0x320>
 80070f8:	4b11      	ldr	r3, [pc, #68]	; (8007140 <_dtoa_r+0x2f0>)
 80070fa:	4602      	mov	r2, r0
 80070fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007100:	e6c0      	b.n	8006e84 <_dtoa_r+0x34>
 8007102:	2301      	movs	r3, #1
 8007104:	e7df      	b.n	80070c6 <_dtoa_r+0x276>
 8007106:	bf00      	nop
 8007108:	636f4361 	.word	0x636f4361
 800710c:	3fd287a7 	.word	0x3fd287a7
 8007110:	8b60c8b3 	.word	0x8b60c8b3
 8007114:	3fc68a28 	.word	0x3fc68a28
 8007118:	509f79fb 	.word	0x509f79fb
 800711c:	3fd34413 	.word	0x3fd34413
 8007120:	08008f4d 	.word	0x08008f4d
 8007124:	08008f64 	.word	0x08008f64
 8007128:	7ff00000 	.word	0x7ff00000
 800712c:	08008f49 	.word	0x08008f49
 8007130:	08008f40 	.word	0x08008f40
 8007134:	08008f1d 	.word	0x08008f1d
 8007138:	3ff80000 	.word	0x3ff80000
 800713c:	080090b8 	.word	0x080090b8
 8007140:	08008fbf 	.word	0x08008fbf
 8007144:	2501      	movs	r5, #1
 8007146:	2300      	movs	r3, #0
 8007148:	9306      	str	r3, [sp, #24]
 800714a:	9508      	str	r5, [sp, #32]
 800714c:	f04f 33ff 	mov.w	r3, #4294967295
 8007150:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007154:	2200      	movs	r2, #0
 8007156:	2312      	movs	r3, #18
 8007158:	e7b0      	b.n	80070bc <_dtoa_r+0x26c>
 800715a:	2301      	movs	r3, #1
 800715c:	9308      	str	r3, [sp, #32]
 800715e:	e7f5      	b.n	800714c <_dtoa_r+0x2fc>
 8007160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007162:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007166:	e7b8      	b.n	80070da <_dtoa_r+0x28a>
 8007168:	3101      	adds	r1, #1
 800716a:	6041      	str	r1, [r0, #4]
 800716c:	0052      	lsls	r2, r2, #1
 800716e:	e7b8      	b.n	80070e2 <_dtoa_r+0x292>
 8007170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007172:	9a01      	ldr	r2, [sp, #4]
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	9b03      	ldr	r3, [sp, #12]
 8007178:	2b0e      	cmp	r3, #14
 800717a:	f200 809d 	bhi.w	80072b8 <_dtoa_r+0x468>
 800717e:	2d00      	cmp	r5, #0
 8007180:	f000 809a 	beq.w	80072b8 <_dtoa_r+0x468>
 8007184:	9b00      	ldr	r3, [sp, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	dd32      	ble.n	80071f0 <_dtoa_r+0x3a0>
 800718a:	4ab7      	ldr	r2, [pc, #732]	; (8007468 <_dtoa_r+0x618>)
 800718c:	f003 030f 	and.w	r3, r3, #15
 8007190:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007194:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007198:	9b00      	ldr	r3, [sp, #0]
 800719a:	05d8      	lsls	r0, r3, #23
 800719c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80071a0:	d516      	bpl.n	80071d0 <_dtoa_r+0x380>
 80071a2:	4bb2      	ldr	r3, [pc, #712]	; (800746c <_dtoa_r+0x61c>)
 80071a4:	ec51 0b19 	vmov	r0, r1, d9
 80071a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071ac:	f7f9 fb4e 	bl	800084c <__aeabi_ddiv>
 80071b0:	f007 070f 	and.w	r7, r7, #15
 80071b4:	4682      	mov	sl, r0
 80071b6:	468b      	mov	fp, r1
 80071b8:	2503      	movs	r5, #3
 80071ba:	4eac      	ldr	r6, [pc, #688]	; (800746c <_dtoa_r+0x61c>)
 80071bc:	b957      	cbnz	r7, 80071d4 <_dtoa_r+0x384>
 80071be:	4642      	mov	r2, r8
 80071c0:	464b      	mov	r3, r9
 80071c2:	4650      	mov	r0, sl
 80071c4:	4659      	mov	r1, fp
 80071c6:	f7f9 fb41 	bl	800084c <__aeabi_ddiv>
 80071ca:	4682      	mov	sl, r0
 80071cc:	468b      	mov	fp, r1
 80071ce:	e028      	b.n	8007222 <_dtoa_r+0x3d2>
 80071d0:	2502      	movs	r5, #2
 80071d2:	e7f2      	b.n	80071ba <_dtoa_r+0x36a>
 80071d4:	07f9      	lsls	r1, r7, #31
 80071d6:	d508      	bpl.n	80071ea <_dtoa_r+0x39a>
 80071d8:	4640      	mov	r0, r8
 80071da:	4649      	mov	r1, r9
 80071dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80071e0:	f7f9 fa0a 	bl	80005f8 <__aeabi_dmul>
 80071e4:	3501      	adds	r5, #1
 80071e6:	4680      	mov	r8, r0
 80071e8:	4689      	mov	r9, r1
 80071ea:	107f      	asrs	r7, r7, #1
 80071ec:	3608      	adds	r6, #8
 80071ee:	e7e5      	b.n	80071bc <_dtoa_r+0x36c>
 80071f0:	f000 809b 	beq.w	800732a <_dtoa_r+0x4da>
 80071f4:	9b00      	ldr	r3, [sp, #0]
 80071f6:	4f9d      	ldr	r7, [pc, #628]	; (800746c <_dtoa_r+0x61c>)
 80071f8:	425e      	negs	r6, r3
 80071fa:	4b9b      	ldr	r3, [pc, #620]	; (8007468 <_dtoa_r+0x618>)
 80071fc:	f006 020f 	and.w	r2, r6, #15
 8007200:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007208:	ec51 0b19 	vmov	r0, r1, d9
 800720c:	f7f9 f9f4 	bl	80005f8 <__aeabi_dmul>
 8007210:	1136      	asrs	r6, r6, #4
 8007212:	4682      	mov	sl, r0
 8007214:	468b      	mov	fp, r1
 8007216:	2300      	movs	r3, #0
 8007218:	2502      	movs	r5, #2
 800721a:	2e00      	cmp	r6, #0
 800721c:	d17a      	bne.n	8007314 <_dtoa_r+0x4c4>
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1d3      	bne.n	80071ca <_dtoa_r+0x37a>
 8007222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007224:	2b00      	cmp	r3, #0
 8007226:	f000 8082 	beq.w	800732e <_dtoa_r+0x4de>
 800722a:	4b91      	ldr	r3, [pc, #580]	; (8007470 <_dtoa_r+0x620>)
 800722c:	2200      	movs	r2, #0
 800722e:	4650      	mov	r0, sl
 8007230:	4659      	mov	r1, fp
 8007232:	f7f9 fc53 	bl	8000adc <__aeabi_dcmplt>
 8007236:	2800      	cmp	r0, #0
 8007238:	d079      	beq.n	800732e <_dtoa_r+0x4de>
 800723a:	9b03      	ldr	r3, [sp, #12]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d076      	beq.n	800732e <_dtoa_r+0x4de>
 8007240:	9b02      	ldr	r3, [sp, #8]
 8007242:	2b00      	cmp	r3, #0
 8007244:	dd36      	ble.n	80072b4 <_dtoa_r+0x464>
 8007246:	9b00      	ldr	r3, [sp, #0]
 8007248:	4650      	mov	r0, sl
 800724a:	4659      	mov	r1, fp
 800724c:	1e5f      	subs	r7, r3, #1
 800724e:	2200      	movs	r2, #0
 8007250:	4b88      	ldr	r3, [pc, #544]	; (8007474 <_dtoa_r+0x624>)
 8007252:	f7f9 f9d1 	bl	80005f8 <__aeabi_dmul>
 8007256:	9e02      	ldr	r6, [sp, #8]
 8007258:	4682      	mov	sl, r0
 800725a:	468b      	mov	fp, r1
 800725c:	3501      	adds	r5, #1
 800725e:	4628      	mov	r0, r5
 8007260:	f7f9 f960 	bl	8000524 <__aeabi_i2d>
 8007264:	4652      	mov	r2, sl
 8007266:	465b      	mov	r3, fp
 8007268:	f7f9 f9c6 	bl	80005f8 <__aeabi_dmul>
 800726c:	4b82      	ldr	r3, [pc, #520]	; (8007478 <_dtoa_r+0x628>)
 800726e:	2200      	movs	r2, #0
 8007270:	f7f9 f80c 	bl	800028c <__adddf3>
 8007274:	46d0      	mov	r8, sl
 8007276:	46d9      	mov	r9, fp
 8007278:	4682      	mov	sl, r0
 800727a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800727e:	2e00      	cmp	r6, #0
 8007280:	d158      	bne.n	8007334 <_dtoa_r+0x4e4>
 8007282:	4b7e      	ldr	r3, [pc, #504]	; (800747c <_dtoa_r+0x62c>)
 8007284:	2200      	movs	r2, #0
 8007286:	4640      	mov	r0, r8
 8007288:	4649      	mov	r1, r9
 800728a:	f7f8 fffd 	bl	8000288 <__aeabi_dsub>
 800728e:	4652      	mov	r2, sl
 8007290:	465b      	mov	r3, fp
 8007292:	4680      	mov	r8, r0
 8007294:	4689      	mov	r9, r1
 8007296:	f7f9 fc3f 	bl	8000b18 <__aeabi_dcmpgt>
 800729a:	2800      	cmp	r0, #0
 800729c:	f040 8295 	bne.w	80077ca <_dtoa_r+0x97a>
 80072a0:	4652      	mov	r2, sl
 80072a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80072a6:	4640      	mov	r0, r8
 80072a8:	4649      	mov	r1, r9
 80072aa:	f7f9 fc17 	bl	8000adc <__aeabi_dcmplt>
 80072ae:	2800      	cmp	r0, #0
 80072b0:	f040 8289 	bne.w	80077c6 <_dtoa_r+0x976>
 80072b4:	ec5b ab19 	vmov	sl, fp, d9
 80072b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f2c0 8148 	blt.w	8007550 <_dtoa_r+0x700>
 80072c0:	9a00      	ldr	r2, [sp, #0]
 80072c2:	2a0e      	cmp	r2, #14
 80072c4:	f300 8144 	bgt.w	8007550 <_dtoa_r+0x700>
 80072c8:	4b67      	ldr	r3, [pc, #412]	; (8007468 <_dtoa_r+0x618>)
 80072ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80072d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f280 80d5 	bge.w	8007484 <_dtoa_r+0x634>
 80072da:	9b03      	ldr	r3, [sp, #12]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f300 80d1 	bgt.w	8007484 <_dtoa_r+0x634>
 80072e2:	f040 826f 	bne.w	80077c4 <_dtoa_r+0x974>
 80072e6:	4b65      	ldr	r3, [pc, #404]	; (800747c <_dtoa_r+0x62c>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	4640      	mov	r0, r8
 80072ec:	4649      	mov	r1, r9
 80072ee:	f7f9 f983 	bl	80005f8 <__aeabi_dmul>
 80072f2:	4652      	mov	r2, sl
 80072f4:	465b      	mov	r3, fp
 80072f6:	f7f9 fc05 	bl	8000b04 <__aeabi_dcmpge>
 80072fa:	9e03      	ldr	r6, [sp, #12]
 80072fc:	4637      	mov	r7, r6
 80072fe:	2800      	cmp	r0, #0
 8007300:	f040 8245 	bne.w	800778e <_dtoa_r+0x93e>
 8007304:	9d01      	ldr	r5, [sp, #4]
 8007306:	2331      	movs	r3, #49	; 0x31
 8007308:	f805 3b01 	strb.w	r3, [r5], #1
 800730c:	9b00      	ldr	r3, [sp, #0]
 800730e:	3301      	adds	r3, #1
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	e240      	b.n	8007796 <_dtoa_r+0x946>
 8007314:	07f2      	lsls	r2, r6, #31
 8007316:	d505      	bpl.n	8007324 <_dtoa_r+0x4d4>
 8007318:	e9d7 2300 	ldrd	r2, r3, [r7]
 800731c:	f7f9 f96c 	bl	80005f8 <__aeabi_dmul>
 8007320:	3501      	adds	r5, #1
 8007322:	2301      	movs	r3, #1
 8007324:	1076      	asrs	r6, r6, #1
 8007326:	3708      	adds	r7, #8
 8007328:	e777      	b.n	800721a <_dtoa_r+0x3ca>
 800732a:	2502      	movs	r5, #2
 800732c:	e779      	b.n	8007222 <_dtoa_r+0x3d2>
 800732e:	9f00      	ldr	r7, [sp, #0]
 8007330:	9e03      	ldr	r6, [sp, #12]
 8007332:	e794      	b.n	800725e <_dtoa_r+0x40e>
 8007334:	9901      	ldr	r1, [sp, #4]
 8007336:	4b4c      	ldr	r3, [pc, #304]	; (8007468 <_dtoa_r+0x618>)
 8007338:	4431      	add	r1, r6
 800733a:	910d      	str	r1, [sp, #52]	; 0x34
 800733c:	9908      	ldr	r1, [sp, #32]
 800733e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007342:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007346:	2900      	cmp	r1, #0
 8007348:	d043      	beq.n	80073d2 <_dtoa_r+0x582>
 800734a:	494d      	ldr	r1, [pc, #308]	; (8007480 <_dtoa_r+0x630>)
 800734c:	2000      	movs	r0, #0
 800734e:	f7f9 fa7d 	bl	800084c <__aeabi_ddiv>
 8007352:	4652      	mov	r2, sl
 8007354:	465b      	mov	r3, fp
 8007356:	f7f8 ff97 	bl	8000288 <__aeabi_dsub>
 800735a:	9d01      	ldr	r5, [sp, #4]
 800735c:	4682      	mov	sl, r0
 800735e:	468b      	mov	fp, r1
 8007360:	4649      	mov	r1, r9
 8007362:	4640      	mov	r0, r8
 8007364:	f7f9 fbf8 	bl	8000b58 <__aeabi_d2iz>
 8007368:	4606      	mov	r6, r0
 800736a:	f7f9 f8db 	bl	8000524 <__aeabi_i2d>
 800736e:	4602      	mov	r2, r0
 8007370:	460b      	mov	r3, r1
 8007372:	4640      	mov	r0, r8
 8007374:	4649      	mov	r1, r9
 8007376:	f7f8 ff87 	bl	8000288 <__aeabi_dsub>
 800737a:	3630      	adds	r6, #48	; 0x30
 800737c:	f805 6b01 	strb.w	r6, [r5], #1
 8007380:	4652      	mov	r2, sl
 8007382:	465b      	mov	r3, fp
 8007384:	4680      	mov	r8, r0
 8007386:	4689      	mov	r9, r1
 8007388:	f7f9 fba8 	bl	8000adc <__aeabi_dcmplt>
 800738c:	2800      	cmp	r0, #0
 800738e:	d163      	bne.n	8007458 <_dtoa_r+0x608>
 8007390:	4642      	mov	r2, r8
 8007392:	464b      	mov	r3, r9
 8007394:	4936      	ldr	r1, [pc, #216]	; (8007470 <_dtoa_r+0x620>)
 8007396:	2000      	movs	r0, #0
 8007398:	f7f8 ff76 	bl	8000288 <__aeabi_dsub>
 800739c:	4652      	mov	r2, sl
 800739e:	465b      	mov	r3, fp
 80073a0:	f7f9 fb9c 	bl	8000adc <__aeabi_dcmplt>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	f040 80b5 	bne.w	8007514 <_dtoa_r+0x6c4>
 80073aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073ac:	429d      	cmp	r5, r3
 80073ae:	d081      	beq.n	80072b4 <_dtoa_r+0x464>
 80073b0:	4b30      	ldr	r3, [pc, #192]	; (8007474 <_dtoa_r+0x624>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	4650      	mov	r0, sl
 80073b6:	4659      	mov	r1, fp
 80073b8:	f7f9 f91e 	bl	80005f8 <__aeabi_dmul>
 80073bc:	4b2d      	ldr	r3, [pc, #180]	; (8007474 <_dtoa_r+0x624>)
 80073be:	4682      	mov	sl, r0
 80073c0:	468b      	mov	fp, r1
 80073c2:	4640      	mov	r0, r8
 80073c4:	4649      	mov	r1, r9
 80073c6:	2200      	movs	r2, #0
 80073c8:	f7f9 f916 	bl	80005f8 <__aeabi_dmul>
 80073cc:	4680      	mov	r8, r0
 80073ce:	4689      	mov	r9, r1
 80073d0:	e7c6      	b.n	8007360 <_dtoa_r+0x510>
 80073d2:	4650      	mov	r0, sl
 80073d4:	4659      	mov	r1, fp
 80073d6:	f7f9 f90f 	bl	80005f8 <__aeabi_dmul>
 80073da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073dc:	9d01      	ldr	r5, [sp, #4]
 80073de:	930f      	str	r3, [sp, #60]	; 0x3c
 80073e0:	4682      	mov	sl, r0
 80073e2:	468b      	mov	fp, r1
 80073e4:	4649      	mov	r1, r9
 80073e6:	4640      	mov	r0, r8
 80073e8:	f7f9 fbb6 	bl	8000b58 <__aeabi_d2iz>
 80073ec:	4606      	mov	r6, r0
 80073ee:	f7f9 f899 	bl	8000524 <__aeabi_i2d>
 80073f2:	3630      	adds	r6, #48	; 0x30
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	4640      	mov	r0, r8
 80073fa:	4649      	mov	r1, r9
 80073fc:	f7f8 ff44 	bl	8000288 <__aeabi_dsub>
 8007400:	f805 6b01 	strb.w	r6, [r5], #1
 8007404:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007406:	429d      	cmp	r5, r3
 8007408:	4680      	mov	r8, r0
 800740a:	4689      	mov	r9, r1
 800740c:	f04f 0200 	mov.w	r2, #0
 8007410:	d124      	bne.n	800745c <_dtoa_r+0x60c>
 8007412:	4b1b      	ldr	r3, [pc, #108]	; (8007480 <_dtoa_r+0x630>)
 8007414:	4650      	mov	r0, sl
 8007416:	4659      	mov	r1, fp
 8007418:	f7f8 ff38 	bl	800028c <__adddf3>
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	4640      	mov	r0, r8
 8007422:	4649      	mov	r1, r9
 8007424:	f7f9 fb78 	bl	8000b18 <__aeabi_dcmpgt>
 8007428:	2800      	cmp	r0, #0
 800742a:	d173      	bne.n	8007514 <_dtoa_r+0x6c4>
 800742c:	4652      	mov	r2, sl
 800742e:	465b      	mov	r3, fp
 8007430:	4913      	ldr	r1, [pc, #76]	; (8007480 <_dtoa_r+0x630>)
 8007432:	2000      	movs	r0, #0
 8007434:	f7f8 ff28 	bl	8000288 <__aeabi_dsub>
 8007438:	4602      	mov	r2, r0
 800743a:	460b      	mov	r3, r1
 800743c:	4640      	mov	r0, r8
 800743e:	4649      	mov	r1, r9
 8007440:	f7f9 fb4c 	bl	8000adc <__aeabi_dcmplt>
 8007444:	2800      	cmp	r0, #0
 8007446:	f43f af35 	beq.w	80072b4 <_dtoa_r+0x464>
 800744a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800744c:	1e6b      	subs	r3, r5, #1
 800744e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007450:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007454:	2b30      	cmp	r3, #48	; 0x30
 8007456:	d0f8      	beq.n	800744a <_dtoa_r+0x5fa>
 8007458:	9700      	str	r7, [sp, #0]
 800745a:	e049      	b.n	80074f0 <_dtoa_r+0x6a0>
 800745c:	4b05      	ldr	r3, [pc, #20]	; (8007474 <_dtoa_r+0x624>)
 800745e:	f7f9 f8cb 	bl	80005f8 <__aeabi_dmul>
 8007462:	4680      	mov	r8, r0
 8007464:	4689      	mov	r9, r1
 8007466:	e7bd      	b.n	80073e4 <_dtoa_r+0x594>
 8007468:	080090b8 	.word	0x080090b8
 800746c:	08009090 	.word	0x08009090
 8007470:	3ff00000 	.word	0x3ff00000
 8007474:	40240000 	.word	0x40240000
 8007478:	401c0000 	.word	0x401c0000
 800747c:	40140000 	.word	0x40140000
 8007480:	3fe00000 	.word	0x3fe00000
 8007484:	9d01      	ldr	r5, [sp, #4]
 8007486:	4656      	mov	r6, sl
 8007488:	465f      	mov	r7, fp
 800748a:	4642      	mov	r2, r8
 800748c:	464b      	mov	r3, r9
 800748e:	4630      	mov	r0, r6
 8007490:	4639      	mov	r1, r7
 8007492:	f7f9 f9db 	bl	800084c <__aeabi_ddiv>
 8007496:	f7f9 fb5f 	bl	8000b58 <__aeabi_d2iz>
 800749a:	4682      	mov	sl, r0
 800749c:	f7f9 f842 	bl	8000524 <__aeabi_i2d>
 80074a0:	4642      	mov	r2, r8
 80074a2:	464b      	mov	r3, r9
 80074a4:	f7f9 f8a8 	bl	80005f8 <__aeabi_dmul>
 80074a8:	4602      	mov	r2, r0
 80074aa:	460b      	mov	r3, r1
 80074ac:	4630      	mov	r0, r6
 80074ae:	4639      	mov	r1, r7
 80074b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80074b4:	f7f8 fee8 	bl	8000288 <__aeabi_dsub>
 80074b8:	f805 6b01 	strb.w	r6, [r5], #1
 80074bc:	9e01      	ldr	r6, [sp, #4]
 80074be:	9f03      	ldr	r7, [sp, #12]
 80074c0:	1bae      	subs	r6, r5, r6
 80074c2:	42b7      	cmp	r7, r6
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	d135      	bne.n	8007536 <_dtoa_r+0x6e6>
 80074ca:	f7f8 fedf 	bl	800028c <__adddf3>
 80074ce:	4642      	mov	r2, r8
 80074d0:	464b      	mov	r3, r9
 80074d2:	4606      	mov	r6, r0
 80074d4:	460f      	mov	r7, r1
 80074d6:	f7f9 fb1f 	bl	8000b18 <__aeabi_dcmpgt>
 80074da:	b9d0      	cbnz	r0, 8007512 <_dtoa_r+0x6c2>
 80074dc:	4642      	mov	r2, r8
 80074de:	464b      	mov	r3, r9
 80074e0:	4630      	mov	r0, r6
 80074e2:	4639      	mov	r1, r7
 80074e4:	f7f9 faf0 	bl	8000ac8 <__aeabi_dcmpeq>
 80074e8:	b110      	cbz	r0, 80074f0 <_dtoa_r+0x6a0>
 80074ea:	f01a 0f01 	tst.w	sl, #1
 80074ee:	d110      	bne.n	8007512 <_dtoa_r+0x6c2>
 80074f0:	4620      	mov	r0, r4
 80074f2:	ee18 1a10 	vmov	r1, s16
 80074f6:	f000 fbed 	bl	8007cd4 <_Bfree>
 80074fa:	2300      	movs	r3, #0
 80074fc:	9800      	ldr	r0, [sp, #0]
 80074fe:	702b      	strb	r3, [r5, #0]
 8007500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007502:	3001      	adds	r0, #1
 8007504:	6018      	str	r0, [r3, #0]
 8007506:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007508:	2b00      	cmp	r3, #0
 800750a:	f43f acf1 	beq.w	8006ef0 <_dtoa_r+0xa0>
 800750e:	601d      	str	r5, [r3, #0]
 8007510:	e4ee      	b.n	8006ef0 <_dtoa_r+0xa0>
 8007512:	9f00      	ldr	r7, [sp, #0]
 8007514:	462b      	mov	r3, r5
 8007516:	461d      	mov	r5, r3
 8007518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800751c:	2a39      	cmp	r2, #57	; 0x39
 800751e:	d106      	bne.n	800752e <_dtoa_r+0x6de>
 8007520:	9a01      	ldr	r2, [sp, #4]
 8007522:	429a      	cmp	r2, r3
 8007524:	d1f7      	bne.n	8007516 <_dtoa_r+0x6c6>
 8007526:	9901      	ldr	r1, [sp, #4]
 8007528:	2230      	movs	r2, #48	; 0x30
 800752a:	3701      	adds	r7, #1
 800752c:	700a      	strb	r2, [r1, #0]
 800752e:	781a      	ldrb	r2, [r3, #0]
 8007530:	3201      	adds	r2, #1
 8007532:	701a      	strb	r2, [r3, #0]
 8007534:	e790      	b.n	8007458 <_dtoa_r+0x608>
 8007536:	4ba6      	ldr	r3, [pc, #664]	; (80077d0 <_dtoa_r+0x980>)
 8007538:	2200      	movs	r2, #0
 800753a:	f7f9 f85d 	bl	80005f8 <__aeabi_dmul>
 800753e:	2200      	movs	r2, #0
 8007540:	2300      	movs	r3, #0
 8007542:	4606      	mov	r6, r0
 8007544:	460f      	mov	r7, r1
 8007546:	f7f9 fabf 	bl	8000ac8 <__aeabi_dcmpeq>
 800754a:	2800      	cmp	r0, #0
 800754c:	d09d      	beq.n	800748a <_dtoa_r+0x63a>
 800754e:	e7cf      	b.n	80074f0 <_dtoa_r+0x6a0>
 8007550:	9a08      	ldr	r2, [sp, #32]
 8007552:	2a00      	cmp	r2, #0
 8007554:	f000 80d7 	beq.w	8007706 <_dtoa_r+0x8b6>
 8007558:	9a06      	ldr	r2, [sp, #24]
 800755a:	2a01      	cmp	r2, #1
 800755c:	f300 80ba 	bgt.w	80076d4 <_dtoa_r+0x884>
 8007560:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007562:	2a00      	cmp	r2, #0
 8007564:	f000 80b2 	beq.w	80076cc <_dtoa_r+0x87c>
 8007568:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800756c:	9e07      	ldr	r6, [sp, #28]
 800756e:	9d04      	ldr	r5, [sp, #16]
 8007570:	9a04      	ldr	r2, [sp, #16]
 8007572:	441a      	add	r2, r3
 8007574:	9204      	str	r2, [sp, #16]
 8007576:	9a05      	ldr	r2, [sp, #20]
 8007578:	2101      	movs	r1, #1
 800757a:	441a      	add	r2, r3
 800757c:	4620      	mov	r0, r4
 800757e:	9205      	str	r2, [sp, #20]
 8007580:	f000 fc60 	bl	8007e44 <__i2b>
 8007584:	4607      	mov	r7, r0
 8007586:	2d00      	cmp	r5, #0
 8007588:	dd0c      	ble.n	80075a4 <_dtoa_r+0x754>
 800758a:	9b05      	ldr	r3, [sp, #20]
 800758c:	2b00      	cmp	r3, #0
 800758e:	dd09      	ble.n	80075a4 <_dtoa_r+0x754>
 8007590:	42ab      	cmp	r3, r5
 8007592:	9a04      	ldr	r2, [sp, #16]
 8007594:	bfa8      	it	ge
 8007596:	462b      	movge	r3, r5
 8007598:	1ad2      	subs	r2, r2, r3
 800759a:	9204      	str	r2, [sp, #16]
 800759c:	9a05      	ldr	r2, [sp, #20]
 800759e:	1aed      	subs	r5, r5, r3
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	9305      	str	r3, [sp, #20]
 80075a4:	9b07      	ldr	r3, [sp, #28]
 80075a6:	b31b      	cbz	r3, 80075f0 <_dtoa_r+0x7a0>
 80075a8:	9b08      	ldr	r3, [sp, #32]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f000 80af 	beq.w	800770e <_dtoa_r+0x8be>
 80075b0:	2e00      	cmp	r6, #0
 80075b2:	dd13      	ble.n	80075dc <_dtoa_r+0x78c>
 80075b4:	4639      	mov	r1, r7
 80075b6:	4632      	mov	r2, r6
 80075b8:	4620      	mov	r0, r4
 80075ba:	f000 fd03 	bl	8007fc4 <__pow5mult>
 80075be:	ee18 2a10 	vmov	r2, s16
 80075c2:	4601      	mov	r1, r0
 80075c4:	4607      	mov	r7, r0
 80075c6:	4620      	mov	r0, r4
 80075c8:	f000 fc52 	bl	8007e70 <__multiply>
 80075cc:	ee18 1a10 	vmov	r1, s16
 80075d0:	4680      	mov	r8, r0
 80075d2:	4620      	mov	r0, r4
 80075d4:	f000 fb7e 	bl	8007cd4 <_Bfree>
 80075d8:	ee08 8a10 	vmov	s16, r8
 80075dc:	9b07      	ldr	r3, [sp, #28]
 80075de:	1b9a      	subs	r2, r3, r6
 80075e0:	d006      	beq.n	80075f0 <_dtoa_r+0x7a0>
 80075e2:	ee18 1a10 	vmov	r1, s16
 80075e6:	4620      	mov	r0, r4
 80075e8:	f000 fcec 	bl	8007fc4 <__pow5mult>
 80075ec:	ee08 0a10 	vmov	s16, r0
 80075f0:	2101      	movs	r1, #1
 80075f2:	4620      	mov	r0, r4
 80075f4:	f000 fc26 	bl	8007e44 <__i2b>
 80075f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	4606      	mov	r6, r0
 80075fe:	f340 8088 	ble.w	8007712 <_dtoa_r+0x8c2>
 8007602:	461a      	mov	r2, r3
 8007604:	4601      	mov	r1, r0
 8007606:	4620      	mov	r0, r4
 8007608:	f000 fcdc 	bl	8007fc4 <__pow5mult>
 800760c:	9b06      	ldr	r3, [sp, #24]
 800760e:	2b01      	cmp	r3, #1
 8007610:	4606      	mov	r6, r0
 8007612:	f340 8081 	ble.w	8007718 <_dtoa_r+0x8c8>
 8007616:	f04f 0800 	mov.w	r8, #0
 800761a:	6933      	ldr	r3, [r6, #16]
 800761c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007620:	6918      	ldr	r0, [r3, #16]
 8007622:	f000 fbbf 	bl	8007da4 <__hi0bits>
 8007626:	f1c0 0020 	rsb	r0, r0, #32
 800762a:	9b05      	ldr	r3, [sp, #20]
 800762c:	4418      	add	r0, r3
 800762e:	f010 001f 	ands.w	r0, r0, #31
 8007632:	f000 8092 	beq.w	800775a <_dtoa_r+0x90a>
 8007636:	f1c0 0320 	rsb	r3, r0, #32
 800763a:	2b04      	cmp	r3, #4
 800763c:	f340 808a 	ble.w	8007754 <_dtoa_r+0x904>
 8007640:	f1c0 001c 	rsb	r0, r0, #28
 8007644:	9b04      	ldr	r3, [sp, #16]
 8007646:	4403      	add	r3, r0
 8007648:	9304      	str	r3, [sp, #16]
 800764a:	9b05      	ldr	r3, [sp, #20]
 800764c:	4403      	add	r3, r0
 800764e:	4405      	add	r5, r0
 8007650:	9305      	str	r3, [sp, #20]
 8007652:	9b04      	ldr	r3, [sp, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	dd07      	ble.n	8007668 <_dtoa_r+0x818>
 8007658:	ee18 1a10 	vmov	r1, s16
 800765c:	461a      	mov	r2, r3
 800765e:	4620      	mov	r0, r4
 8007660:	f000 fd0a 	bl	8008078 <__lshift>
 8007664:	ee08 0a10 	vmov	s16, r0
 8007668:	9b05      	ldr	r3, [sp, #20]
 800766a:	2b00      	cmp	r3, #0
 800766c:	dd05      	ble.n	800767a <_dtoa_r+0x82a>
 800766e:	4631      	mov	r1, r6
 8007670:	461a      	mov	r2, r3
 8007672:	4620      	mov	r0, r4
 8007674:	f000 fd00 	bl	8008078 <__lshift>
 8007678:	4606      	mov	r6, r0
 800767a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800767c:	2b00      	cmp	r3, #0
 800767e:	d06e      	beq.n	800775e <_dtoa_r+0x90e>
 8007680:	ee18 0a10 	vmov	r0, s16
 8007684:	4631      	mov	r1, r6
 8007686:	f000 fd67 	bl	8008158 <__mcmp>
 800768a:	2800      	cmp	r0, #0
 800768c:	da67      	bge.n	800775e <_dtoa_r+0x90e>
 800768e:	9b00      	ldr	r3, [sp, #0]
 8007690:	3b01      	subs	r3, #1
 8007692:	ee18 1a10 	vmov	r1, s16
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	220a      	movs	r2, #10
 800769a:	2300      	movs	r3, #0
 800769c:	4620      	mov	r0, r4
 800769e:	f000 fb3b 	bl	8007d18 <__multadd>
 80076a2:	9b08      	ldr	r3, [sp, #32]
 80076a4:	ee08 0a10 	vmov	s16, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 81b1 	beq.w	8007a10 <_dtoa_r+0xbc0>
 80076ae:	2300      	movs	r3, #0
 80076b0:	4639      	mov	r1, r7
 80076b2:	220a      	movs	r2, #10
 80076b4:	4620      	mov	r0, r4
 80076b6:	f000 fb2f 	bl	8007d18 <__multadd>
 80076ba:	9b02      	ldr	r3, [sp, #8]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	4607      	mov	r7, r0
 80076c0:	f300 808e 	bgt.w	80077e0 <_dtoa_r+0x990>
 80076c4:	9b06      	ldr	r3, [sp, #24]
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	dc51      	bgt.n	800776e <_dtoa_r+0x91e>
 80076ca:	e089      	b.n	80077e0 <_dtoa_r+0x990>
 80076cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80076d2:	e74b      	b.n	800756c <_dtoa_r+0x71c>
 80076d4:	9b03      	ldr	r3, [sp, #12]
 80076d6:	1e5e      	subs	r6, r3, #1
 80076d8:	9b07      	ldr	r3, [sp, #28]
 80076da:	42b3      	cmp	r3, r6
 80076dc:	bfbf      	itttt	lt
 80076de:	9b07      	ldrlt	r3, [sp, #28]
 80076e0:	9607      	strlt	r6, [sp, #28]
 80076e2:	1af2      	sublt	r2, r6, r3
 80076e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80076e6:	bfb6      	itet	lt
 80076e8:	189b      	addlt	r3, r3, r2
 80076ea:	1b9e      	subge	r6, r3, r6
 80076ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 80076ee:	9b03      	ldr	r3, [sp, #12]
 80076f0:	bfb8      	it	lt
 80076f2:	2600      	movlt	r6, #0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	bfb7      	itett	lt
 80076f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80076fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007700:	1a9d      	sublt	r5, r3, r2
 8007702:	2300      	movlt	r3, #0
 8007704:	e734      	b.n	8007570 <_dtoa_r+0x720>
 8007706:	9e07      	ldr	r6, [sp, #28]
 8007708:	9d04      	ldr	r5, [sp, #16]
 800770a:	9f08      	ldr	r7, [sp, #32]
 800770c:	e73b      	b.n	8007586 <_dtoa_r+0x736>
 800770e:	9a07      	ldr	r2, [sp, #28]
 8007710:	e767      	b.n	80075e2 <_dtoa_r+0x792>
 8007712:	9b06      	ldr	r3, [sp, #24]
 8007714:	2b01      	cmp	r3, #1
 8007716:	dc18      	bgt.n	800774a <_dtoa_r+0x8fa>
 8007718:	f1ba 0f00 	cmp.w	sl, #0
 800771c:	d115      	bne.n	800774a <_dtoa_r+0x8fa>
 800771e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007722:	b993      	cbnz	r3, 800774a <_dtoa_r+0x8fa>
 8007724:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007728:	0d1b      	lsrs	r3, r3, #20
 800772a:	051b      	lsls	r3, r3, #20
 800772c:	b183      	cbz	r3, 8007750 <_dtoa_r+0x900>
 800772e:	9b04      	ldr	r3, [sp, #16]
 8007730:	3301      	adds	r3, #1
 8007732:	9304      	str	r3, [sp, #16]
 8007734:	9b05      	ldr	r3, [sp, #20]
 8007736:	3301      	adds	r3, #1
 8007738:	9305      	str	r3, [sp, #20]
 800773a:	f04f 0801 	mov.w	r8, #1
 800773e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007740:	2b00      	cmp	r3, #0
 8007742:	f47f af6a 	bne.w	800761a <_dtoa_r+0x7ca>
 8007746:	2001      	movs	r0, #1
 8007748:	e76f      	b.n	800762a <_dtoa_r+0x7da>
 800774a:	f04f 0800 	mov.w	r8, #0
 800774e:	e7f6      	b.n	800773e <_dtoa_r+0x8ee>
 8007750:	4698      	mov	r8, r3
 8007752:	e7f4      	b.n	800773e <_dtoa_r+0x8ee>
 8007754:	f43f af7d 	beq.w	8007652 <_dtoa_r+0x802>
 8007758:	4618      	mov	r0, r3
 800775a:	301c      	adds	r0, #28
 800775c:	e772      	b.n	8007644 <_dtoa_r+0x7f4>
 800775e:	9b03      	ldr	r3, [sp, #12]
 8007760:	2b00      	cmp	r3, #0
 8007762:	dc37      	bgt.n	80077d4 <_dtoa_r+0x984>
 8007764:	9b06      	ldr	r3, [sp, #24]
 8007766:	2b02      	cmp	r3, #2
 8007768:	dd34      	ble.n	80077d4 <_dtoa_r+0x984>
 800776a:	9b03      	ldr	r3, [sp, #12]
 800776c:	9302      	str	r3, [sp, #8]
 800776e:	9b02      	ldr	r3, [sp, #8]
 8007770:	b96b      	cbnz	r3, 800778e <_dtoa_r+0x93e>
 8007772:	4631      	mov	r1, r6
 8007774:	2205      	movs	r2, #5
 8007776:	4620      	mov	r0, r4
 8007778:	f000 face 	bl	8007d18 <__multadd>
 800777c:	4601      	mov	r1, r0
 800777e:	4606      	mov	r6, r0
 8007780:	ee18 0a10 	vmov	r0, s16
 8007784:	f000 fce8 	bl	8008158 <__mcmp>
 8007788:	2800      	cmp	r0, #0
 800778a:	f73f adbb 	bgt.w	8007304 <_dtoa_r+0x4b4>
 800778e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007790:	9d01      	ldr	r5, [sp, #4]
 8007792:	43db      	mvns	r3, r3
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	f04f 0800 	mov.w	r8, #0
 800779a:	4631      	mov	r1, r6
 800779c:	4620      	mov	r0, r4
 800779e:	f000 fa99 	bl	8007cd4 <_Bfree>
 80077a2:	2f00      	cmp	r7, #0
 80077a4:	f43f aea4 	beq.w	80074f0 <_dtoa_r+0x6a0>
 80077a8:	f1b8 0f00 	cmp.w	r8, #0
 80077ac:	d005      	beq.n	80077ba <_dtoa_r+0x96a>
 80077ae:	45b8      	cmp	r8, r7
 80077b0:	d003      	beq.n	80077ba <_dtoa_r+0x96a>
 80077b2:	4641      	mov	r1, r8
 80077b4:	4620      	mov	r0, r4
 80077b6:	f000 fa8d 	bl	8007cd4 <_Bfree>
 80077ba:	4639      	mov	r1, r7
 80077bc:	4620      	mov	r0, r4
 80077be:	f000 fa89 	bl	8007cd4 <_Bfree>
 80077c2:	e695      	b.n	80074f0 <_dtoa_r+0x6a0>
 80077c4:	2600      	movs	r6, #0
 80077c6:	4637      	mov	r7, r6
 80077c8:	e7e1      	b.n	800778e <_dtoa_r+0x93e>
 80077ca:	9700      	str	r7, [sp, #0]
 80077cc:	4637      	mov	r7, r6
 80077ce:	e599      	b.n	8007304 <_dtoa_r+0x4b4>
 80077d0:	40240000 	.word	0x40240000
 80077d4:	9b08      	ldr	r3, [sp, #32]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 80ca 	beq.w	8007970 <_dtoa_r+0xb20>
 80077dc:	9b03      	ldr	r3, [sp, #12]
 80077de:	9302      	str	r3, [sp, #8]
 80077e0:	2d00      	cmp	r5, #0
 80077e2:	dd05      	ble.n	80077f0 <_dtoa_r+0x9a0>
 80077e4:	4639      	mov	r1, r7
 80077e6:	462a      	mov	r2, r5
 80077e8:	4620      	mov	r0, r4
 80077ea:	f000 fc45 	bl	8008078 <__lshift>
 80077ee:	4607      	mov	r7, r0
 80077f0:	f1b8 0f00 	cmp.w	r8, #0
 80077f4:	d05b      	beq.n	80078ae <_dtoa_r+0xa5e>
 80077f6:	6879      	ldr	r1, [r7, #4]
 80077f8:	4620      	mov	r0, r4
 80077fa:	f000 fa2b 	bl	8007c54 <_Balloc>
 80077fe:	4605      	mov	r5, r0
 8007800:	b928      	cbnz	r0, 800780e <_dtoa_r+0x9be>
 8007802:	4b87      	ldr	r3, [pc, #540]	; (8007a20 <_dtoa_r+0xbd0>)
 8007804:	4602      	mov	r2, r0
 8007806:	f240 21ea 	movw	r1, #746	; 0x2ea
 800780a:	f7ff bb3b 	b.w	8006e84 <_dtoa_r+0x34>
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	3202      	adds	r2, #2
 8007812:	0092      	lsls	r2, r2, #2
 8007814:	f107 010c 	add.w	r1, r7, #12
 8007818:	300c      	adds	r0, #12
 800781a:	f000 fa0d 	bl	8007c38 <memcpy>
 800781e:	2201      	movs	r2, #1
 8007820:	4629      	mov	r1, r5
 8007822:	4620      	mov	r0, r4
 8007824:	f000 fc28 	bl	8008078 <__lshift>
 8007828:	9b01      	ldr	r3, [sp, #4]
 800782a:	f103 0901 	add.w	r9, r3, #1
 800782e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007832:	4413      	add	r3, r2
 8007834:	9305      	str	r3, [sp, #20]
 8007836:	f00a 0301 	and.w	r3, sl, #1
 800783a:	46b8      	mov	r8, r7
 800783c:	9304      	str	r3, [sp, #16]
 800783e:	4607      	mov	r7, r0
 8007840:	4631      	mov	r1, r6
 8007842:	ee18 0a10 	vmov	r0, s16
 8007846:	f7ff fa77 	bl	8006d38 <quorem>
 800784a:	4641      	mov	r1, r8
 800784c:	9002      	str	r0, [sp, #8]
 800784e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007852:	ee18 0a10 	vmov	r0, s16
 8007856:	f000 fc7f 	bl	8008158 <__mcmp>
 800785a:	463a      	mov	r2, r7
 800785c:	9003      	str	r0, [sp, #12]
 800785e:	4631      	mov	r1, r6
 8007860:	4620      	mov	r0, r4
 8007862:	f000 fc95 	bl	8008190 <__mdiff>
 8007866:	68c2      	ldr	r2, [r0, #12]
 8007868:	f109 3bff 	add.w	fp, r9, #4294967295
 800786c:	4605      	mov	r5, r0
 800786e:	bb02      	cbnz	r2, 80078b2 <_dtoa_r+0xa62>
 8007870:	4601      	mov	r1, r0
 8007872:	ee18 0a10 	vmov	r0, s16
 8007876:	f000 fc6f 	bl	8008158 <__mcmp>
 800787a:	4602      	mov	r2, r0
 800787c:	4629      	mov	r1, r5
 800787e:	4620      	mov	r0, r4
 8007880:	9207      	str	r2, [sp, #28]
 8007882:	f000 fa27 	bl	8007cd4 <_Bfree>
 8007886:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800788a:	ea43 0102 	orr.w	r1, r3, r2
 800788e:	9b04      	ldr	r3, [sp, #16]
 8007890:	430b      	orrs	r3, r1
 8007892:	464d      	mov	r5, r9
 8007894:	d10f      	bne.n	80078b6 <_dtoa_r+0xa66>
 8007896:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800789a:	d02a      	beq.n	80078f2 <_dtoa_r+0xaa2>
 800789c:	9b03      	ldr	r3, [sp, #12]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	dd02      	ble.n	80078a8 <_dtoa_r+0xa58>
 80078a2:	9b02      	ldr	r3, [sp, #8]
 80078a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80078a8:	f88b a000 	strb.w	sl, [fp]
 80078ac:	e775      	b.n	800779a <_dtoa_r+0x94a>
 80078ae:	4638      	mov	r0, r7
 80078b0:	e7ba      	b.n	8007828 <_dtoa_r+0x9d8>
 80078b2:	2201      	movs	r2, #1
 80078b4:	e7e2      	b.n	800787c <_dtoa_r+0xa2c>
 80078b6:	9b03      	ldr	r3, [sp, #12]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	db04      	blt.n	80078c6 <_dtoa_r+0xa76>
 80078bc:	9906      	ldr	r1, [sp, #24]
 80078be:	430b      	orrs	r3, r1
 80078c0:	9904      	ldr	r1, [sp, #16]
 80078c2:	430b      	orrs	r3, r1
 80078c4:	d122      	bne.n	800790c <_dtoa_r+0xabc>
 80078c6:	2a00      	cmp	r2, #0
 80078c8:	ddee      	ble.n	80078a8 <_dtoa_r+0xa58>
 80078ca:	ee18 1a10 	vmov	r1, s16
 80078ce:	2201      	movs	r2, #1
 80078d0:	4620      	mov	r0, r4
 80078d2:	f000 fbd1 	bl	8008078 <__lshift>
 80078d6:	4631      	mov	r1, r6
 80078d8:	ee08 0a10 	vmov	s16, r0
 80078dc:	f000 fc3c 	bl	8008158 <__mcmp>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	dc03      	bgt.n	80078ec <_dtoa_r+0xa9c>
 80078e4:	d1e0      	bne.n	80078a8 <_dtoa_r+0xa58>
 80078e6:	f01a 0f01 	tst.w	sl, #1
 80078ea:	d0dd      	beq.n	80078a8 <_dtoa_r+0xa58>
 80078ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80078f0:	d1d7      	bne.n	80078a2 <_dtoa_r+0xa52>
 80078f2:	2339      	movs	r3, #57	; 0x39
 80078f4:	f88b 3000 	strb.w	r3, [fp]
 80078f8:	462b      	mov	r3, r5
 80078fa:	461d      	mov	r5, r3
 80078fc:	3b01      	subs	r3, #1
 80078fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007902:	2a39      	cmp	r2, #57	; 0x39
 8007904:	d071      	beq.n	80079ea <_dtoa_r+0xb9a>
 8007906:	3201      	adds	r2, #1
 8007908:	701a      	strb	r2, [r3, #0]
 800790a:	e746      	b.n	800779a <_dtoa_r+0x94a>
 800790c:	2a00      	cmp	r2, #0
 800790e:	dd07      	ble.n	8007920 <_dtoa_r+0xad0>
 8007910:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007914:	d0ed      	beq.n	80078f2 <_dtoa_r+0xaa2>
 8007916:	f10a 0301 	add.w	r3, sl, #1
 800791a:	f88b 3000 	strb.w	r3, [fp]
 800791e:	e73c      	b.n	800779a <_dtoa_r+0x94a>
 8007920:	9b05      	ldr	r3, [sp, #20]
 8007922:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007926:	4599      	cmp	r9, r3
 8007928:	d047      	beq.n	80079ba <_dtoa_r+0xb6a>
 800792a:	ee18 1a10 	vmov	r1, s16
 800792e:	2300      	movs	r3, #0
 8007930:	220a      	movs	r2, #10
 8007932:	4620      	mov	r0, r4
 8007934:	f000 f9f0 	bl	8007d18 <__multadd>
 8007938:	45b8      	cmp	r8, r7
 800793a:	ee08 0a10 	vmov	s16, r0
 800793e:	f04f 0300 	mov.w	r3, #0
 8007942:	f04f 020a 	mov.w	r2, #10
 8007946:	4641      	mov	r1, r8
 8007948:	4620      	mov	r0, r4
 800794a:	d106      	bne.n	800795a <_dtoa_r+0xb0a>
 800794c:	f000 f9e4 	bl	8007d18 <__multadd>
 8007950:	4680      	mov	r8, r0
 8007952:	4607      	mov	r7, r0
 8007954:	f109 0901 	add.w	r9, r9, #1
 8007958:	e772      	b.n	8007840 <_dtoa_r+0x9f0>
 800795a:	f000 f9dd 	bl	8007d18 <__multadd>
 800795e:	4639      	mov	r1, r7
 8007960:	4680      	mov	r8, r0
 8007962:	2300      	movs	r3, #0
 8007964:	220a      	movs	r2, #10
 8007966:	4620      	mov	r0, r4
 8007968:	f000 f9d6 	bl	8007d18 <__multadd>
 800796c:	4607      	mov	r7, r0
 800796e:	e7f1      	b.n	8007954 <_dtoa_r+0xb04>
 8007970:	9b03      	ldr	r3, [sp, #12]
 8007972:	9302      	str	r3, [sp, #8]
 8007974:	9d01      	ldr	r5, [sp, #4]
 8007976:	ee18 0a10 	vmov	r0, s16
 800797a:	4631      	mov	r1, r6
 800797c:	f7ff f9dc 	bl	8006d38 <quorem>
 8007980:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007984:	9b01      	ldr	r3, [sp, #4]
 8007986:	f805 ab01 	strb.w	sl, [r5], #1
 800798a:	1aea      	subs	r2, r5, r3
 800798c:	9b02      	ldr	r3, [sp, #8]
 800798e:	4293      	cmp	r3, r2
 8007990:	dd09      	ble.n	80079a6 <_dtoa_r+0xb56>
 8007992:	ee18 1a10 	vmov	r1, s16
 8007996:	2300      	movs	r3, #0
 8007998:	220a      	movs	r2, #10
 800799a:	4620      	mov	r0, r4
 800799c:	f000 f9bc 	bl	8007d18 <__multadd>
 80079a0:	ee08 0a10 	vmov	s16, r0
 80079a4:	e7e7      	b.n	8007976 <_dtoa_r+0xb26>
 80079a6:	9b02      	ldr	r3, [sp, #8]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	bfc8      	it	gt
 80079ac:	461d      	movgt	r5, r3
 80079ae:	9b01      	ldr	r3, [sp, #4]
 80079b0:	bfd8      	it	le
 80079b2:	2501      	movle	r5, #1
 80079b4:	441d      	add	r5, r3
 80079b6:	f04f 0800 	mov.w	r8, #0
 80079ba:	ee18 1a10 	vmov	r1, s16
 80079be:	2201      	movs	r2, #1
 80079c0:	4620      	mov	r0, r4
 80079c2:	f000 fb59 	bl	8008078 <__lshift>
 80079c6:	4631      	mov	r1, r6
 80079c8:	ee08 0a10 	vmov	s16, r0
 80079cc:	f000 fbc4 	bl	8008158 <__mcmp>
 80079d0:	2800      	cmp	r0, #0
 80079d2:	dc91      	bgt.n	80078f8 <_dtoa_r+0xaa8>
 80079d4:	d102      	bne.n	80079dc <_dtoa_r+0xb8c>
 80079d6:	f01a 0f01 	tst.w	sl, #1
 80079da:	d18d      	bne.n	80078f8 <_dtoa_r+0xaa8>
 80079dc:	462b      	mov	r3, r5
 80079de:	461d      	mov	r5, r3
 80079e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079e4:	2a30      	cmp	r2, #48	; 0x30
 80079e6:	d0fa      	beq.n	80079de <_dtoa_r+0xb8e>
 80079e8:	e6d7      	b.n	800779a <_dtoa_r+0x94a>
 80079ea:	9a01      	ldr	r2, [sp, #4]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d184      	bne.n	80078fa <_dtoa_r+0xaaa>
 80079f0:	9b00      	ldr	r3, [sp, #0]
 80079f2:	3301      	adds	r3, #1
 80079f4:	9300      	str	r3, [sp, #0]
 80079f6:	2331      	movs	r3, #49	; 0x31
 80079f8:	7013      	strb	r3, [r2, #0]
 80079fa:	e6ce      	b.n	800779a <_dtoa_r+0x94a>
 80079fc:	4b09      	ldr	r3, [pc, #36]	; (8007a24 <_dtoa_r+0xbd4>)
 80079fe:	f7ff ba95 	b.w	8006f2c <_dtoa_r+0xdc>
 8007a02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f47f aa6e 	bne.w	8006ee6 <_dtoa_r+0x96>
 8007a0a:	4b07      	ldr	r3, [pc, #28]	; (8007a28 <_dtoa_r+0xbd8>)
 8007a0c:	f7ff ba8e 	b.w	8006f2c <_dtoa_r+0xdc>
 8007a10:	9b02      	ldr	r3, [sp, #8]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	dcae      	bgt.n	8007974 <_dtoa_r+0xb24>
 8007a16:	9b06      	ldr	r3, [sp, #24]
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	f73f aea8 	bgt.w	800776e <_dtoa_r+0x91e>
 8007a1e:	e7a9      	b.n	8007974 <_dtoa_r+0xb24>
 8007a20:	08008fbf 	.word	0x08008fbf
 8007a24:	08008f1c 	.word	0x08008f1c
 8007a28:	08008f40 	.word	0x08008f40

08007a2c <std>:
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	b510      	push	{r4, lr}
 8007a30:	4604      	mov	r4, r0
 8007a32:	e9c0 3300 	strd	r3, r3, [r0]
 8007a36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a3a:	6083      	str	r3, [r0, #8]
 8007a3c:	8181      	strh	r1, [r0, #12]
 8007a3e:	6643      	str	r3, [r0, #100]	; 0x64
 8007a40:	81c2      	strh	r2, [r0, #14]
 8007a42:	6183      	str	r3, [r0, #24]
 8007a44:	4619      	mov	r1, r3
 8007a46:	2208      	movs	r2, #8
 8007a48:	305c      	adds	r0, #92	; 0x5c
 8007a4a:	f7fe fceb 	bl	8006424 <memset>
 8007a4e:	4b05      	ldr	r3, [pc, #20]	; (8007a64 <std+0x38>)
 8007a50:	6263      	str	r3, [r4, #36]	; 0x24
 8007a52:	4b05      	ldr	r3, [pc, #20]	; (8007a68 <std+0x3c>)
 8007a54:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a56:	4b05      	ldr	r3, [pc, #20]	; (8007a6c <std+0x40>)
 8007a58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a5a:	4b05      	ldr	r3, [pc, #20]	; (8007a70 <std+0x44>)
 8007a5c:	6224      	str	r4, [r4, #32]
 8007a5e:	6323      	str	r3, [r4, #48]	; 0x30
 8007a60:	bd10      	pop	{r4, pc}
 8007a62:	bf00      	nop
 8007a64:	0800881d 	.word	0x0800881d
 8007a68:	0800883f 	.word	0x0800883f
 8007a6c:	08008877 	.word	0x08008877
 8007a70:	0800889b 	.word	0x0800889b

08007a74 <_cleanup_r>:
 8007a74:	4901      	ldr	r1, [pc, #4]	; (8007a7c <_cleanup_r+0x8>)
 8007a76:	f000 b8af 	b.w	8007bd8 <_fwalk_reent>
 8007a7a:	bf00      	nop
 8007a7c:	08008bb1 	.word	0x08008bb1

08007a80 <__sfmoreglue>:
 8007a80:	b570      	push	{r4, r5, r6, lr}
 8007a82:	2268      	movs	r2, #104	; 0x68
 8007a84:	1e4d      	subs	r5, r1, #1
 8007a86:	4355      	muls	r5, r2
 8007a88:	460e      	mov	r6, r1
 8007a8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a8e:	f000 fce7 	bl	8008460 <_malloc_r>
 8007a92:	4604      	mov	r4, r0
 8007a94:	b140      	cbz	r0, 8007aa8 <__sfmoreglue+0x28>
 8007a96:	2100      	movs	r1, #0
 8007a98:	e9c0 1600 	strd	r1, r6, [r0]
 8007a9c:	300c      	adds	r0, #12
 8007a9e:	60a0      	str	r0, [r4, #8]
 8007aa0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007aa4:	f7fe fcbe 	bl	8006424 <memset>
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	bd70      	pop	{r4, r5, r6, pc}

08007aac <__sfp_lock_acquire>:
 8007aac:	4801      	ldr	r0, [pc, #4]	; (8007ab4 <__sfp_lock_acquire+0x8>)
 8007aae:	f000 b8b8 	b.w	8007c22 <__retarget_lock_acquire_recursive>
 8007ab2:	bf00      	nop
 8007ab4:	2000040d 	.word	0x2000040d

08007ab8 <__sfp_lock_release>:
 8007ab8:	4801      	ldr	r0, [pc, #4]	; (8007ac0 <__sfp_lock_release+0x8>)
 8007aba:	f000 b8b3 	b.w	8007c24 <__retarget_lock_release_recursive>
 8007abe:	bf00      	nop
 8007ac0:	2000040d 	.word	0x2000040d

08007ac4 <__sinit_lock_acquire>:
 8007ac4:	4801      	ldr	r0, [pc, #4]	; (8007acc <__sinit_lock_acquire+0x8>)
 8007ac6:	f000 b8ac 	b.w	8007c22 <__retarget_lock_acquire_recursive>
 8007aca:	bf00      	nop
 8007acc:	2000040e 	.word	0x2000040e

08007ad0 <__sinit_lock_release>:
 8007ad0:	4801      	ldr	r0, [pc, #4]	; (8007ad8 <__sinit_lock_release+0x8>)
 8007ad2:	f000 b8a7 	b.w	8007c24 <__retarget_lock_release_recursive>
 8007ad6:	bf00      	nop
 8007ad8:	2000040e 	.word	0x2000040e

08007adc <__sinit>:
 8007adc:	b510      	push	{r4, lr}
 8007ade:	4604      	mov	r4, r0
 8007ae0:	f7ff fff0 	bl	8007ac4 <__sinit_lock_acquire>
 8007ae4:	69a3      	ldr	r3, [r4, #24]
 8007ae6:	b11b      	cbz	r3, 8007af0 <__sinit+0x14>
 8007ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aec:	f7ff bff0 	b.w	8007ad0 <__sinit_lock_release>
 8007af0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007af4:	6523      	str	r3, [r4, #80]	; 0x50
 8007af6:	4b13      	ldr	r3, [pc, #76]	; (8007b44 <__sinit+0x68>)
 8007af8:	4a13      	ldr	r2, [pc, #76]	; (8007b48 <__sinit+0x6c>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	62a2      	str	r2, [r4, #40]	; 0x28
 8007afe:	42a3      	cmp	r3, r4
 8007b00:	bf04      	itt	eq
 8007b02:	2301      	moveq	r3, #1
 8007b04:	61a3      	streq	r3, [r4, #24]
 8007b06:	4620      	mov	r0, r4
 8007b08:	f000 f820 	bl	8007b4c <__sfp>
 8007b0c:	6060      	str	r0, [r4, #4]
 8007b0e:	4620      	mov	r0, r4
 8007b10:	f000 f81c 	bl	8007b4c <__sfp>
 8007b14:	60a0      	str	r0, [r4, #8]
 8007b16:	4620      	mov	r0, r4
 8007b18:	f000 f818 	bl	8007b4c <__sfp>
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	60e0      	str	r0, [r4, #12]
 8007b20:	2104      	movs	r1, #4
 8007b22:	6860      	ldr	r0, [r4, #4]
 8007b24:	f7ff ff82 	bl	8007a2c <std>
 8007b28:	68a0      	ldr	r0, [r4, #8]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	2109      	movs	r1, #9
 8007b2e:	f7ff ff7d 	bl	8007a2c <std>
 8007b32:	68e0      	ldr	r0, [r4, #12]
 8007b34:	2202      	movs	r2, #2
 8007b36:	2112      	movs	r1, #18
 8007b38:	f7ff ff78 	bl	8007a2c <std>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	61a3      	str	r3, [r4, #24]
 8007b40:	e7d2      	b.n	8007ae8 <__sinit+0xc>
 8007b42:	bf00      	nop
 8007b44:	08008f08 	.word	0x08008f08
 8007b48:	08007a75 	.word	0x08007a75

08007b4c <__sfp>:
 8007b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b4e:	4607      	mov	r7, r0
 8007b50:	f7ff ffac 	bl	8007aac <__sfp_lock_acquire>
 8007b54:	4b1e      	ldr	r3, [pc, #120]	; (8007bd0 <__sfp+0x84>)
 8007b56:	681e      	ldr	r6, [r3, #0]
 8007b58:	69b3      	ldr	r3, [r6, #24]
 8007b5a:	b913      	cbnz	r3, 8007b62 <__sfp+0x16>
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	f7ff ffbd 	bl	8007adc <__sinit>
 8007b62:	3648      	adds	r6, #72	; 0x48
 8007b64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	d503      	bpl.n	8007b74 <__sfp+0x28>
 8007b6c:	6833      	ldr	r3, [r6, #0]
 8007b6e:	b30b      	cbz	r3, 8007bb4 <__sfp+0x68>
 8007b70:	6836      	ldr	r6, [r6, #0]
 8007b72:	e7f7      	b.n	8007b64 <__sfp+0x18>
 8007b74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b78:	b9d5      	cbnz	r5, 8007bb0 <__sfp+0x64>
 8007b7a:	4b16      	ldr	r3, [pc, #88]	; (8007bd4 <__sfp+0x88>)
 8007b7c:	60e3      	str	r3, [r4, #12]
 8007b7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b82:	6665      	str	r5, [r4, #100]	; 0x64
 8007b84:	f000 f84c 	bl	8007c20 <__retarget_lock_init_recursive>
 8007b88:	f7ff ff96 	bl	8007ab8 <__sfp_lock_release>
 8007b8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007b90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007b94:	6025      	str	r5, [r4, #0]
 8007b96:	61a5      	str	r5, [r4, #24]
 8007b98:	2208      	movs	r2, #8
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ba0:	f7fe fc40 	bl	8006424 <memset>
 8007ba4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ba8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007bac:	4620      	mov	r0, r4
 8007bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bb0:	3468      	adds	r4, #104	; 0x68
 8007bb2:	e7d9      	b.n	8007b68 <__sfp+0x1c>
 8007bb4:	2104      	movs	r1, #4
 8007bb6:	4638      	mov	r0, r7
 8007bb8:	f7ff ff62 	bl	8007a80 <__sfmoreglue>
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	6030      	str	r0, [r6, #0]
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	d1d5      	bne.n	8007b70 <__sfp+0x24>
 8007bc4:	f7ff ff78 	bl	8007ab8 <__sfp_lock_release>
 8007bc8:	230c      	movs	r3, #12
 8007bca:	603b      	str	r3, [r7, #0]
 8007bcc:	e7ee      	b.n	8007bac <__sfp+0x60>
 8007bce:	bf00      	nop
 8007bd0:	08008f08 	.word	0x08008f08
 8007bd4:	ffff0001 	.word	0xffff0001

08007bd8 <_fwalk_reent>:
 8007bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bdc:	4606      	mov	r6, r0
 8007bde:	4688      	mov	r8, r1
 8007be0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007be4:	2700      	movs	r7, #0
 8007be6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007bea:	f1b9 0901 	subs.w	r9, r9, #1
 8007bee:	d505      	bpl.n	8007bfc <_fwalk_reent+0x24>
 8007bf0:	6824      	ldr	r4, [r4, #0]
 8007bf2:	2c00      	cmp	r4, #0
 8007bf4:	d1f7      	bne.n	8007be6 <_fwalk_reent+0xe>
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bfc:	89ab      	ldrh	r3, [r5, #12]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d907      	bls.n	8007c12 <_fwalk_reent+0x3a>
 8007c02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c06:	3301      	adds	r3, #1
 8007c08:	d003      	beq.n	8007c12 <_fwalk_reent+0x3a>
 8007c0a:	4629      	mov	r1, r5
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	47c0      	blx	r8
 8007c10:	4307      	orrs	r7, r0
 8007c12:	3568      	adds	r5, #104	; 0x68
 8007c14:	e7e9      	b.n	8007bea <_fwalk_reent+0x12>
	...

08007c18 <_localeconv_r>:
 8007c18:	4800      	ldr	r0, [pc, #0]	; (8007c1c <_localeconv_r+0x4>)
 8007c1a:	4770      	bx	lr
 8007c1c:	20000164 	.word	0x20000164

08007c20 <__retarget_lock_init_recursive>:
 8007c20:	4770      	bx	lr

08007c22 <__retarget_lock_acquire_recursive>:
 8007c22:	4770      	bx	lr

08007c24 <__retarget_lock_release_recursive>:
 8007c24:	4770      	bx	lr
	...

08007c28 <malloc>:
 8007c28:	4b02      	ldr	r3, [pc, #8]	; (8007c34 <malloc+0xc>)
 8007c2a:	4601      	mov	r1, r0
 8007c2c:	6818      	ldr	r0, [r3, #0]
 8007c2e:	f000 bc17 	b.w	8008460 <_malloc_r>
 8007c32:	bf00      	nop
 8007c34:	20000010 	.word	0x20000010

08007c38 <memcpy>:
 8007c38:	440a      	add	r2, r1
 8007c3a:	4291      	cmp	r1, r2
 8007c3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c40:	d100      	bne.n	8007c44 <memcpy+0xc>
 8007c42:	4770      	bx	lr
 8007c44:	b510      	push	{r4, lr}
 8007c46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c4e:	4291      	cmp	r1, r2
 8007c50:	d1f9      	bne.n	8007c46 <memcpy+0xe>
 8007c52:	bd10      	pop	{r4, pc}

08007c54 <_Balloc>:
 8007c54:	b570      	push	{r4, r5, r6, lr}
 8007c56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c58:	4604      	mov	r4, r0
 8007c5a:	460d      	mov	r5, r1
 8007c5c:	b976      	cbnz	r6, 8007c7c <_Balloc+0x28>
 8007c5e:	2010      	movs	r0, #16
 8007c60:	f7ff ffe2 	bl	8007c28 <malloc>
 8007c64:	4602      	mov	r2, r0
 8007c66:	6260      	str	r0, [r4, #36]	; 0x24
 8007c68:	b920      	cbnz	r0, 8007c74 <_Balloc+0x20>
 8007c6a:	4b18      	ldr	r3, [pc, #96]	; (8007ccc <_Balloc+0x78>)
 8007c6c:	4818      	ldr	r0, [pc, #96]	; (8007cd0 <_Balloc+0x7c>)
 8007c6e:	2166      	movs	r1, #102	; 0x66
 8007c70:	f000 feea 	bl	8008a48 <__assert_func>
 8007c74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c78:	6006      	str	r6, [r0, #0]
 8007c7a:	60c6      	str	r6, [r0, #12]
 8007c7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c7e:	68f3      	ldr	r3, [r6, #12]
 8007c80:	b183      	cbz	r3, 8007ca4 <_Balloc+0x50>
 8007c82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c8a:	b9b8      	cbnz	r0, 8007cbc <_Balloc+0x68>
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	fa01 f605 	lsl.w	r6, r1, r5
 8007c92:	1d72      	adds	r2, r6, #5
 8007c94:	0092      	lsls	r2, r2, #2
 8007c96:	4620      	mov	r0, r4
 8007c98:	f000 fb60 	bl	800835c <_calloc_r>
 8007c9c:	b160      	cbz	r0, 8007cb8 <_Balloc+0x64>
 8007c9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ca2:	e00e      	b.n	8007cc2 <_Balloc+0x6e>
 8007ca4:	2221      	movs	r2, #33	; 0x21
 8007ca6:	2104      	movs	r1, #4
 8007ca8:	4620      	mov	r0, r4
 8007caa:	f000 fb57 	bl	800835c <_calloc_r>
 8007cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cb0:	60f0      	str	r0, [r6, #12]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1e4      	bne.n	8007c82 <_Balloc+0x2e>
 8007cb8:	2000      	movs	r0, #0
 8007cba:	bd70      	pop	{r4, r5, r6, pc}
 8007cbc:	6802      	ldr	r2, [r0, #0]
 8007cbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007cc8:	e7f7      	b.n	8007cba <_Balloc+0x66>
 8007cca:	bf00      	nop
 8007ccc:	08008f4d 	.word	0x08008f4d
 8007cd0:	08009030 	.word	0x08009030

08007cd4 <_Bfree>:
 8007cd4:	b570      	push	{r4, r5, r6, lr}
 8007cd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007cd8:	4605      	mov	r5, r0
 8007cda:	460c      	mov	r4, r1
 8007cdc:	b976      	cbnz	r6, 8007cfc <_Bfree+0x28>
 8007cde:	2010      	movs	r0, #16
 8007ce0:	f7ff ffa2 	bl	8007c28 <malloc>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	6268      	str	r0, [r5, #36]	; 0x24
 8007ce8:	b920      	cbnz	r0, 8007cf4 <_Bfree+0x20>
 8007cea:	4b09      	ldr	r3, [pc, #36]	; (8007d10 <_Bfree+0x3c>)
 8007cec:	4809      	ldr	r0, [pc, #36]	; (8007d14 <_Bfree+0x40>)
 8007cee:	218a      	movs	r1, #138	; 0x8a
 8007cf0:	f000 feaa 	bl	8008a48 <__assert_func>
 8007cf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cf8:	6006      	str	r6, [r0, #0]
 8007cfa:	60c6      	str	r6, [r0, #12]
 8007cfc:	b13c      	cbz	r4, 8007d0e <_Bfree+0x3a>
 8007cfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007d00:	6862      	ldr	r2, [r4, #4]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d08:	6021      	str	r1, [r4, #0]
 8007d0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d0e:	bd70      	pop	{r4, r5, r6, pc}
 8007d10:	08008f4d 	.word	0x08008f4d
 8007d14:	08009030 	.word	0x08009030

08007d18 <__multadd>:
 8007d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d1c:	690d      	ldr	r5, [r1, #16]
 8007d1e:	4607      	mov	r7, r0
 8007d20:	460c      	mov	r4, r1
 8007d22:	461e      	mov	r6, r3
 8007d24:	f101 0c14 	add.w	ip, r1, #20
 8007d28:	2000      	movs	r0, #0
 8007d2a:	f8dc 3000 	ldr.w	r3, [ip]
 8007d2e:	b299      	uxth	r1, r3
 8007d30:	fb02 6101 	mla	r1, r2, r1, r6
 8007d34:	0c1e      	lsrs	r6, r3, #16
 8007d36:	0c0b      	lsrs	r3, r1, #16
 8007d38:	fb02 3306 	mla	r3, r2, r6, r3
 8007d3c:	b289      	uxth	r1, r1
 8007d3e:	3001      	adds	r0, #1
 8007d40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d44:	4285      	cmp	r5, r0
 8007d46:	f84c 1b04 	str.w	r1, [ip], #4
 8007d4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d4e:	dcec      	bgt.n	8007d2a <__multadd+0x12>
 8007d50:	b30e      	cbz	r6, 8007d96 <__multadd+0x7e>
 8007d52:	68a3      	ldr	r3, [r4, #8]
 8007d54:	42ab      	cmp	r3, r5
 8007d56:	dc19      	bgt.n	8007d8c <__multadd+0x74>
 8007d58:	6861      	ldr	r1, [r4, #4]
 8007d5a:	4638      	mov	r0, r7
 8007d5c:	3101      	adds	r1, #1
 8007d5e:	f7ff ff79 	bl	8007c54 <_Balloc>
 8007d62:	4680      	mov	r8, r0
 8007d64:	b928      	cbnz	r0, 8007d72 <__multadd+0x5a>
 8007d66:	4602      	mov	r2, r0
 8007d68:	4b0c      	ldr	r3, [pc, #48]	; (8007d9c <__multadd+0x84>)
 8007d6a:	480d      	ldr	r0, [pc, #52]	; (8007da0 <__multadd+0x88>)
 8007d6c:	21b5      	movs	r1, #181	; 0xb5
 8007d6e:	f000 fe6b 	bl	8008a48 <__assert_func>
 8007d72:	6922      	ldr	r2, [r4, #16]
 8007d74:	3202      	adds	r2, #2
 8007d76:	f104 010c 	add.w	r1, r4, #12
 8007d7a:	0092      	lsls	r2, r2, #2
 8007d7c:	300c      	adds	r0, #12
 8007d7e:	f7ff ff5b 	bl	8007c38 <memcpy>
 8007d82:	4621      	mov	r1, r4
 8007d84:	4638      	mov	r0, r7
 8007d86:	f7ff ffa5 	bl	8007cd4 <_Bfree>
 8007d8a:	4644      	mov	r4, r8
 8007d8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d90:	3501      	adds	r5, #1
 8007d92:	615e      	str	r6, [r3, #20]
 8007d94:	6125      	str	r5, [r4, #16]
 8007d96:	4620      	mov	r0, r4
 8007d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d9c:	08008fbf 	.word	0x08008fbf
 8007da0:	08009030 	.word	0x08009030

08007da4 <__hi0bits>:
 8007da4:	0c03      	lsrs	r3, r0, #16
 8007da6:	041b      	lsls	r3, r3, #16
 8007da8:	b9d3      	cbnz	r3, 8007de0 <__hi0bits+0x3c>
 8007daa:	0400      	lsls	r0, r0, #16
 8007dac:	2310      	movs	r3, #16
 8007dae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007db2:	bf04      	itt	eq
 8007db4:	0200      	lsleq	r0, r0, #8
 8007db6:	3308      	addeq	r3, #8
 8007db8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007dbc:	bf04      	itt	eq
 8007dbe:	0100      	lsleq	r0, r0, #4
 8007dc0:	3304      	addeq	r3, #4
 8007dc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007dc6:	bf04      	itt	eq
 8007dc8:	0080      	lsleq	r0, r0, #2
 8007dca:	3302      	addeq	r3, #2
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	db05      	blt.n	8007ddc <__hi0bits+0x38>
 8007dd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007dd4:	f103 0301 	add.w	r3, r3, #1
 8007dd8:	bf08      	it	eq
 8007dda:	2320      	moveq	r3, #32
 8007ddc:	4618      	mov	r0, r3
 8007dde:	4770      	bx	lr
 8007de0:	2300      	movs	r3, #0
 8007de2:	e7e4      	b.n	8007dae <__hi0bits+0xa>

08007de4 <__lo0bits>:
 8007de4:	6803      	ldr	r3, [r0, #0]
 8007de6:	f013 0207 	ands.w	r2, r3, #7
 8007dea:	4601      	mov	r1, r0
 8007dec:	d00b      	beq.n	8007e06 <__lo0bits+0x22>
 8007dee:	07da      	lsls	r2, r3, #31
 8007df0:	d423      	bmi.n	8007e3a <__lo0bits+0x56>
 8007df2:	0798      	lsls	r0, r3, #30
 8007df4:	bf49      	itett	mi
 8007df6:	085b      	lsrmi	r3, r3, #1
 8007df8:	089b      	lsrpl	r3, r3, #2
 8007dfa:	2001      	movmi	r0, #1
 8007dfc:	600b      	strmi	r3, [r1, #0]
 8007dfe:	bf5c      	itt	pl
 8007e00:	600b      	strpl	r3, [r1, #0]
 8007e02:	2002      	movpl	r0, #2
 8007e04:	4770      	bx	lr
 8007e06:	b298      	uxth	r0, r3
 8007e08:	b9a8      	cbnz	r0, 8007e36 <__lo0bits+0x52>
 8007e0a:	0c1b      	lsrs	r3, r3, #16
 8007e0c:	2010      	movs	r0, #16
 8007e0e:	b2da      	uxtb	r2, r3
 8007e10:	b90a      	cbnz	r2, 8007e16 <__lo0bits+0x32>
 8007e12:	3008      	adds	r0, #8
 8007e14:	0a1b      	lsrs	r3, r3, #8
 8007e16:	071a      	lsls	r2, r3, #28
 8007e18:	bf04      	itt	eq
 8007e1a:	091b      	lsreq	r3, r3, #4
 8007e1c:	3004      	addeq	r0, #4
 8007e1e:	079a      	lsls	r2, r3, #30
 8007e20:	bf04      	itt	eq
 8007e22:	089b      	lsreq	r3, r3, #2
 8007e24:	3002      	addeq	r0, #2
 8007e26:	07da      	lsls	r2, r3, #31
 8007e28:	d403      	bmi.n	8007e32 <__lo0bits+0x4e>
 8007e2a:	085b      	lsrs	r3, r3, #1
 8007e2c:	f100 0001 	add.w	r0, r0, #1
 8007e30:	d005      	beq.n	8007e3e <__lo0bits+0x5a>
 8007e32:	600b      	str	r3, [r1, #0]
 8007e34:	4770      	bx	lr
 8007e36:	4610      	mov	r0, r2
 8007e38:	e7e9      	b.n	8007e0e <__lo0bits+0x2a>
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	4770      	bx	lr
 8007e3e:	2020      	movs	r0, #32
 8007e40:	4770      	bx	lr
	...

08007e44 <__i2b>:
 8007e44:	b510      	push	{r4, lr}
 8007e46:	460c      	mov	r4, r1
 8007e48:	2101      	movs	r1, #1
 8007e4a:	f7ff ff03 	bl	8007c54 <_Balloc>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	b928      	cbnz	r0, 8007e5e <__i2b+0x1a>
 8007e52:	4b05      	ldr	r3, [pc, #20]	; (8007e68 <__i2b+0x24>)
 8007e54:	4805      	ldr	r0, [pc, #20]	; (8007e6c <__i2b+0x28>)
 8007e56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007e5a:	f000 fdf5 	bl	8008a48 <__assert_func>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	6144      	str	r4, [r0, #20]
 8007e62:	6103      	str	r3, [r0, #16]
 8007e64:	bd10      	pop	{r4, pc}
 8007e66:	bf00      	nop
 8007e68:	08008fbf 	.word	0x08008fbf
 8007e6c:	08009030 	.word	0x08009030

08007e70 <__multiply>:
 8007e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e74:	4691      	mov	r9, r2
 8007e76:	690a      	ldr	r2, [r1, #16]
 8007e78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	bfb8      	it	lt
 8007e80:	460b      	movlt	r3, r1
 8007e82:	460c      	mov	r4, r1
 8007e84:	bfbc      	itt	lt
 8007e86:	464c      	movlt	r4, r9
 8007e88:	4699      	movlt	r9, r3
 8007e8a:	6927      	ldr	r7, [r4, #16]
 8007e8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e90:	68a3      	ldr	r3, [r4, #8]
 8007e92:	6861      	ldr	r1, [r4, #4]
 8007e94:	eb07 060a 	add.w	r6, r7, sl
 8007e98:	42b3      	cmp	r3, r6
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	bfb8      	it	lt
 8007e9e:	3101      	addlt	r1, #1
 8007ea0:	f7ff fed8 	bl	8007c54 <_Balloc>
 8007ea4:	b930      	cbnz	r0, 8007eb4 <__multiply+0x44>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	4b44      	ldr	r3, [pc, #272]	; (8007fbc <__multiply+0x14c>)
 8007eaa:	4845      	ldr	r0, [pc, #276]	; (8007fc0 <__multiply+0x150>)
 8007eac:	f240 115d 	movw	r1, #349	; 0x15d
 8007eb0:	f000 fdca 	bl	8008a48 <__assert_func>
 8007eb4:	f100 0514 	add.w	r5, r0, #20
 8007eb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ebc:	462b      	mov	r3, r5
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	4543      	cmp	r3, r8
 8007ec2:	d321      	bcc.n	8007f08 <__multiply+0x98>
 8007ec4:	f104 0314 	add.w	r3, r4, #20
 8007ec8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ecc:	f109 0314 	add.w	r3, r9, #20
 8007ed0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007ed4:	9202      	str	r2, [sp, #8]
 8007ed6:	1b3a      	subs	r2, r7, r4
 8007ed8:	3a15      	subs	r2, #21
 8007eda:	f022 0203 	bic.w	r2, r2, #3
 8007ede:	3204      	adds	r2, #4
 8007ee0:	f104 0115 	add.w	r1, r4, #21
 8007ee4:	428f      	cmp	r7, r1
 8007ee6:	bf38      	it	cc
 8007ee8:	2204      	movcc	r2, #4
 8007eea:	9201      	str	r2, [sp, #4]
 8007eec:	9a02      	ldr	r2, [sp, #8]
 8007eee:	9303      	str	r3, [sp, #12]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d80c      	bhi.n	8007f0e <__multiply+0x9e>
 8007ef4:	2e00      	cmp	r6, #0
 8007ef6:	dd03      	ble.n	8007f00 <__multiply+0x90>
 8007ef8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d05a      	beq.n	8007fb6 <__multiply+0x146>
 8007f00:	6106      	str	r6, [r0, #16]
 8007f02:	b005      	add	sp, #20
 8007f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f08:	f843 2b04 	str.w	r2, [r3], #4
 8007f0c:	e7d8      	b.n	8007ec0 <__multiply+0x50>
 8007f0e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007f12:	f1ba 0f00 	cmp.w	sl, #0
 8007f16:	d024      	beq.n	8007f62 <__multiply+0xf2>
 8007f18:	f104 0e14 	add.w	lr, r4, #20
 8007f1c:	46a9      	mov	r9, r5
 8007f1e:	f04f 0c00 	mov.w	ip, #0
 8007f22:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007f26:	f8d9 1000 	ldr.w	r1, [r9]
 8007f2a:	fa1f fb82 	uxth.w	fp, r2
 8007f2e:	b289      	uxth	r1, r1
 8007f30:	fb0a 110b 	mla	r1, sl, fp, r1
 8007f34:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007f38:	f8d9 2000 	ldr.w	r2, [r9]
 8007f3c:	4461      	add	r1, ip
 8007f3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f42:	fb0a c20b 	mla	r2, sl, fp, ip
 8007f46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f4a:	b289      	uxth	r1, r1
 8007f4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f50:	4577      	cmp	r7, lr
 8007f52:	f849 1b04 	str.w	r1, [r9], #4
 8007f56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f5a:	d8e2      	bhi.n	8007f22 <__multiply+0xb2>
 8007f5c:	9a01      	ldr	r2, [sp, #4]
 8007f5e:	f845 c002 	str.w	ip, [r5, r2]
 8007f62:	9a03      	ldr	r2, [sp, #12]
 8007f64:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f68:	3304      	adds	r3, #4
 8007f6a:	f1b9 0f00 	cmp.w	r9, #0
 8007f6e:	d020      	beq.n	8007fb2 <__multiply+0x142>
 8007f70:	6829      	ldr	r1, [r5, #0]
 8007f72:	f104 0c14 	add.w	ip, r4, #20
 8007f76:	46ae      	mov	lr, r5
 8007f78:	f04f 0a00 	mov.w	sl, #0
 8007f7c:	f8bc b000 	ldrh.w	fp, [ip]
 8007f80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007f84:	fb09 220b 	mla	r2, r9, fp, r2
 8007f88:	4492      	add	sl, r2
 8007f8a:	b289      	uxth	r1, r1
 8007f8c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007f90:	f84e 1b04 	str.w	r1, [lr], #4
 8007f94:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007f98:	f8be 1000 	ldrh.w	r1, [lr]
 8007f9c:	0c12      	lsrs	r2, r2, #16
 8007f9e:	fb09 1102 	mla	r1, r9, r2, r1
 8007fa2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007fa6:	4567      	cmp	r7, ip
 8007fa8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007fac:	d8e6      	bhi.n	8007f7c <__multiply+0x10c>
 8007fae:	9a01      	ldr	r2, [sp, #4]
 8007fb0:	50a9      	str	r1, [r5, r2]
 8007fb2:	3504      	adds	r5, #4
 8007fb4:	e79a      	b.n	8007eec <__multiply+0x7c>
 8007fb6:	3e01      	subs	r6, #1
 8007fb8:	e79c      	b.n	8007ef4 <__multiply+0x84>
 8007fba:	bf00      	nop
 8007fbc:	08008fbf 	.word	0x08008fbf
 8007fc0:	08009030 	.word	0x08009030

08007fc4 <__pow5mult>:
 8007fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fc8:	4615      	mov	r5, r2
 8007fca:	f012 0203 	ands.w	r2, r2, #3
 8007fce:	4606      	mov	r6, r0
 8007fd0:	460f      	mov	r7, r1
 8007fd2:	d007      	beq.n	8007fe4 <__pow5mult+0x20>
 8007fd4:	4c25      	ldr	r4, [pc, #148]	; (800806c <__pow5mult+0xa8>)
 8007fd6:	3a01      	subs	r2, #1
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007fde:	f7ff fe9b 	bl	8007d18 <__multadd>
 8007fe2:	4607      	mov	r7, r0
 8007fe4:	10ad      	asrs	r5, r5, #2
 8007fe6:	d03d      	beq.n	8008064 <__pow5mult+0xa0>
 8007fe8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007fea:	b97c      	cbnz	r4, 800800c <__pow5mult+0x48>
 8007fec:	2010      	movs	r0, #16
 8007fee:	f7ff fe1b 	bl	8007c28 <malloc>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	6270      	str	r0, [r6, #36]	; 0x24
 8007ff6:	b928      	cbnz	r0, 8008004 <__pow5mult+0x40>
 8007ff8:	4b1d      	ldr	r3, [pc, #116]	; (8008070 <__pow5mult+0xac>)
 8007ffa:	481e      	ldr	r0, [pc, #120]	; (8008074 <__pow5mult+0xb0>)
 8007ffc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008000:	f000 fd22 	bl	8008a48 <__assert_func>
 8008004:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008008:	6004      	str	r4, [r0, #0]
 800800a:	60c4      	str	r4, [r0, #12]
 800800c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008010:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008014:	b94c      	cbnz	r4, 800802a <__pow5mult+0x66>
 8008016:	f240 2171 	movw	r1, #625	; 0x271
 800801a:	4630      	mov	r0, r6
 800801c:	f7ff ff12 	bl	8007e44 <__i2b>
 8008020:	2300      	movs	r3, #0
 8008022:	f8c8 0008 	str.w	r0, [r8, #8]
 8008026:	4604      	mov	r4, r0
 8008028:	6003      	str	r3, [r0, #0]
 800802a:	f04f 0900 	mov.w	r9, #0
 800802e:	07eb      	lsls	r3, r5, #31
 8008030:	d50a      	bpl.n	8008048 <__pow5mult+0x84>
 8008032:	4639      	mov	r1, r7
 8008034:	4622      	mov	r2, r4
 8008036:	4630      	mov	r0, r6
 8008038:	f7ff ff1a 	bl	8007e70 <__multiply>
 800803c:	4639      	mov	r1, r7
 800803e:	4680      	mov	r8, r0
 8008040:	4630      	mov	r0, r6
 8008042:	f7ff fe47 	bl	8007cd4 <_Bfree>
 8008046:	4647      	mov	r7, r8
 8008048:	106d      	asrs	r5, r5, #1
 800804a:	d00b      	beq.n	8008064 <__pow5mult+0xa0>
 800804c:	6820      	ldr	r0, [r4, #0]
 800804e:	b938      	cbnz	r0, 8008060 <__pow5mult+0x9c>
 8008050:	4622      	mov	r2, r4
 8008052:	4621      	mov	r1, r4
 8008054:	4630      	mov	r0, r6
 8008056:	f7ff ff0b 	bl	8007e70 <__multiply>
 800805a:	6020      	str	r0, [r4, #0]
 800805c:	f8c0 9000 	str.w	r9, [r0]
 8008060:	4604      	mov	r4, r0
 8008062:	e7e4      	b.n	800802e <__pow5mult+0x6a>
 8008064:	4638      	mov	r0, r7
 8008066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800806a:	bf00      	nop
 800806c:	08009180 	.word	0x08009180
 8008070:	08008f4d 	.word	0x08008f4d
 8008074:	08009030 	.word	0x08009030

08008078 <__lshift>:
 8008078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800807c:	460c      	mov	r4, r1
 800807e:	6849      	ldr	r1, [r1, #4]
 8008080:	6923      	ldr	r3, [r4, #16]
 8008082:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008086:	68a3      	ldr	r3, [r4, #8]
 8008088:	4607      	mov	r7, r0
 800808a:	4691      	mov	r9, r2
 800808c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008090:	f108 0601 	add.w	r6, r8, #1
 8008094:	42b3      	cmp	r3, r6
 8008096:	db0b      	blt.n	80080b0 <__lshift+0x38>
 8008098:	4638      	mov	r0, r7
 800809a:	f7ff fddb 	bl	8007c54 <_Balloc>
 800809e:	4605      	mov	r5, r0
 80080a0:	b948      	cbnz	r0, 80080b6 <__lshift+0x3e>
 80080a2:	4602      	mov	r2, r0
 80080a4:	4b2a      	ldr	r3, [pc, #168]	; (8008150 <__lshift+0xd8>)
 80080a6:	482b      	ldr	r0, [pc, #172]	; (8008154 <__lshift+0xdc>)
 80080a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80080ac:	f000 fccc 	bl	8008a48 <__assert_func>
 80080b0:	3101      	adds	r1, #1
 80080b2:	005b      	lsls	r3, r3, #1
 80080b4:	e7ee      	b.n	8008094 <__lshift+0x1c>
 80080b6:	2300      	movs	r3, #0
 80080b8:	f100 0114 	add.w	r1, r0, #20
 80080bc:	f100 0210 	add.w	r2, r0, #16
 80080c0:	4618      	mov	r0, r3
 80080c2:	4553      	cmp	r3, sl
 80080c4:	db37      	blt.n	8008136 <__lshift+0xbe>
 80080c6:	6920      	ldr	r0, [r4, #16]
 80080c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080cc:	f104 0314 	add.w	r3, r4, #20
 80080d0:	f019 091f 	ands.w	r9, r9, #31
 80080d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80080dc:	d02f      	beq.n	800813e <__lshift+0xc6>
 80080de:	f1c9 0e20 	rsb	lr, r9, #32
 80080e2:	468a      	mov	sl, r1
 80080e4:	f04f 0c00 	mov.w	ip, #0
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	fa02 f209 	lsl.w	r2, r2, r9
 80080ee:	ea42 020c 	orr.w	r2, r2, ip
 80080f2:	f84a 2b04 	str.w	r2, [sl], #4
 80080f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80080fa:	4298      	cmp	r0, r3
 80080fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008100:	d8f2      	bhi.n	80080e8 <__lshift+0x70>
 8008102:	1b03      	subs	r3, r0, r4
 8008104:	3b15      	subs	r3, #21
 8008106:	f023 0303 	bic.w	r3, r3, #3
 800810a:	3304      	adds	r3, #4
 800810c:	f104 0215 	add.w	r2, r4, #21
 8008110:	4290      	cmp	r0, r2
 8008112:	bf38      	it	cc
 8008114:	2304      	movcc	r3, #4
 8008116:	f841 c003 	str.w	ip, [r1, r3]
 800811a:	f1bc 0f00 	cmp.w	ip, #0
 800811e:	d001      	beq.n	8008124 <__lshift+0xac>
 8008120:	f108 0602 	add.w	r6, r8, #2
 8008124:	3e01      	subs	r6, #1
 8008126:	4638      	mov	r0, r7
 8008128:	612e      	str	r6, [r5, #16]
 800812a:	4621      	mov	r1, r4
 800812c:	f7ff fdd2 	bl	8007cd4 <_Bfree>
 8008130:	4628      	mov	r0, r5
 8008132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008136:	f842 0f04 	str.w	r0, [r2, #4]!
 800813a:	3301      	adds	r3, #1
 800813c:	e7c1      	b.n	80080c2 <__lshift+0x4a>
 800813e:	3904      	subs	r1, #4
 8008140:	f853 2b04 	ldr.w	r2, [r3], #4
 8008144:	f841 2f04 	str.w	r2, [r1, #4]!
 8008148:	4298      	cmp	r0, r3
 800814a:	d8f9      	bhi.n	8008140 <__lshift+0xc8>
 800814c:	e7ea      	b.n	8008124 <__lshift+0xac>
 800814e:	bf00      	nop
 8008150:	08008fbf 	.word	0x08008fbf
 8008154:	08009030 	.word	0x08009030

08008158 <__mcmp>:
 8008158:	b530      	push	{r4, r5, lr}
 800815a:	6902      	ldr	r2, [r0, #16]
 800815c:	690c      	ldr	r4, [r1, #16]
 800815e:	1b12      	subs	r2, r2, r4
 8008160:	d10e      	bne.n	8008180 <__mcmp+0x28>
 8008162:	f100 0314 	add.w	r3, r0, #20
 8008166:	3114      	adds	r1, #20
 8008168:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800816c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008170:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008174:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008178:	42a5      	cmp	r5, r4
 800817a:	d003      	beq.n	8008184 <__mcmp+0x2c>
 800817c:	d305      	bcc.n	800818a <__mcmp+0x32>
 800817e:	2201      	movs	r2, #1
 8008180:	4610      	mov	r0, r2
 8008182:	bd30      	pop	{r4, r5, pc}
 8008184:	4283      	cmp	r3, r0
 8008186:	d3f3      	bcc.n	8008170 <__mcmp+0x18>
 8008188:	e7fa      	b.n	8008180 <__mcmp+0x28>
 800818a:	f04f 32ff 	mov.w	r2, #4294967295
 800818e:	e7f7      	b.n	8008180 <__mcmp+0x28>

08008190 <__mdiff>:
 8008190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008194:	460c      	mov	r4, r1
 8008196:	4606      	mov	r6, r0
 8008198:	4611      	mov	r1, r2
 800819a:	4620      	mov	r0, r4
 800819c:	4690      	mov	r8, r2
 800819e:	f7ff ffdb 	bl	8008158 <__mcmp>
 80081a2:	1e05      	subs	r5, r0, #0
 80081a4:	d110      	bne.n	80081c8 <__mdiff+0x38>
 80081a6:	4629      	mov	r1, r5
 80081a8:	4630      	mov	r0, r6
 80081aa:	f7ff fd53 	bl	8007c54 <_Balloc>
 80081ae:	b930      	cbnz	r0, 80081be <__mdiff+0x2e>
 80081b0:	4b3a      	ldr	r3, [pc, #232]	; (800829c <__mdiff+0x10c>)
 80081b2:	4602      	mov	r2, r0
 80081b4:	f240 2132 	movw	r1, #562	; 0x232
 80081b8:	4839      	ldr	r0, [pc, #228]	; (80082a0 <__mdiff+0x110>)
 80081ba:	f000 fc45 	bl	8008a48 <__assert_func>
 80081be:	2301      	movs	r3, #1
 80081c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c8:	bfa4      	itt	ge
 80081ca:	4643      	movge	r3, r8
 80081cc:	46a0      	movge	r8, r4
 80081ce:	4630      	mov	r0, r6
 80081d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80081d4:	bfa6      	itte	ge
 80081d6:	461c      	movge	r4, r3
 80081d8:	2500      	movge	r5, #0
 80081da:	2501      	movlt	r5, #1
 80081dc:	f7ff fd3a 	bl	8007c54 <_Balloc>
 80081e0:	b920      	cbnz	r0, 80081ec <__mdiff+0x5c>
 80081e2:	4b2e      	ldr	r3, [pc, #184]	; (800829c <__mdiff+0x10c>)
 80081e4:	4602      	mov	r2, r0
 80081e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80081ea:	e7e5      	b.n	80081b8 <__mdiff+0x28>
 80081ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80081f0:	6926      	ldr	r6, [r4, #16]
 80081f2:	60c5      	str	r5, [r0, #12]
 80081f4:	f104 0914 	add.w	r9, r4, #20
 80081f8:	f108 0514 	add.w	r5, r8, #20
 80081fc:	f100 0e14 	add.w	lr, r0, #20
 8008200:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008204:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008208:	f108 0210 	add.w	r2, r8, #16
 800820c:	46f2      	mov	sl, lr
 800820e:	2100      	movs	r1, #0
 8008210:	f859 3b04 	ldr.w	r3, [r9], #4
 8008214:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008218:	fa1f f883 	uxth.w	r8, r3
 800821c:	fa11 f18b 	uxtah	r1, r1, fp
 8008220:	0c1b      	lsrs	r3, r3, #16
 8008222:	eba1 0808 	sub.w	r8, r1, r8
 8008226:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800822a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800822e:	fa1f f888 	uxth.w	r8, r8
 8008232:	1419      	asrs	r1, r3, #16
 8008234:	454e      	cmp	r6, r9
 8008236:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800823a:	f84a 3b04 	str.w	r3, [sl], #4
 800823e:	d8e7      	bhi.n	8008210 <__mdiff+0x80>
 8008240:	1b33      	subs	r3, r6, r4
 8008242:	3b15      	subs	r3, #21
 8008244:	f023 0303 	bic.w	r3, r3, #3
 8008248:	3304      	adds	r3, #4
 800824a:	3415      	adds	r4, #21
 800824c:	42a6      	cmp	r6, r4
 800824e:	bf38      	it	cc
 8008250:	2304      	movcc	r3, #4
 8008252:	441d      	add	r5, r3
 8008254:	4473      	add	r3, lr
 8008256:	469e      	mov	lr, r3
 8008258:	462e      	mov	r6, r5
 800825a:	4566      	cmp	r6, ip
 800825c:	d30e      	bcc.n	800827c <__mdiff+0xec>
 800825e:	f10c 0203 	add.w	r2, ip, #3
 8008262:	1b52      	subs	r2, r2, r5
 8008264:	f022 0203 	bic.w	r2, r2, #3
 8008268:	3d03      	subs	r5, #3
 800826a:	45ac      	cmp	ip, r5
 800826c:	bf38      	it	cc
 800826e:	2200      	movcc	r2, #0
 8008270:	441a      	add	r2, r3
 8008272:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008276:	b17b      	cbz	r3, 8008298 <__mdiff+0x108>
 8008278:	6107      	str	r7, [r0, #16]
 800827a:	e7a3      	b.n	80081c4 <__mdiff+0x34>
 800827c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008280:	fa11 f288 	uxtah	r2, r1, r8
 8008284:	1414      	asrs	r4, r2, #16
 8008286:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800828a:	b292      	uxth	r2, r2
 800828c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008290:	f84e 2b04 	str.w	r2, [lr], #4
 8008294:	1421      	asrs	r1, r4, #16
 8008296:	e7e0      	b.n	800825a <__mdiff+0xca>
 8008298:	3f01      	subs	r7, #1
 800829a:	e7ea      	b.n	8008272 <__mdiff+0xe2>
 800829c:	08008fbf 	.word	0x08008fbf
 80082a0:	08009030 	.word	0x08009030

080082a4 <__d2b>:
 80082a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80082a8:	4689      	mov	r9, r1
 80082aa:	2101      	movs	r1, #1
 80082ac:	ec57 6b10 	vmov	r6, r7, d0
 80082b0:	4690      	mov	r8, r2
 80082b2:	f7ff fccf 	bl	8007c54 <_Balloc>
 80082b6:	4604      	mov	r4, r0
 80082b8:	b930      	cbnz	r0, 80082c8 <__d2b+0x24>
 80082ba:	4602      	mov	r2, r0
 80082bc:	4b25      	ldr	r3, [pc, #148]	; (8008354 <__d2b+0xb0>)
 80082be:	4826      	ldr	r0, [pc, #152]	; (8008358 <__d2b+0xb4>)
 80082c0:	f240 310a 	movw	r1, #778	; 0x30a
 80082c4:	f000 fbc0 	bl	8008a48 <__assert_func>
 80082c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80082cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80082d0:	bb35      	cbnz	r5, 8008320 <__d2b+0x7c>
 80082d2:	2e00      	cmp	r6, #0
 80082d4:	9301      	str	r3, [sp, #4]
 80082d6:	d028      	beq.n	800832a <__d2b+0x86>
 80082d8:	4668      	mov	r0, sp
 80082da:	9600      	str	r6, [sp, #0]
 80082dc:	f7ff fd82 	bl	8007de4 <__lo0bits>
 80082e0:	9900      	ldr	r1, [sp, #0]
 80082e2:	b300      	cbz	r0, 8008326 <__d2b+0x82>
 80082e4:	9a01      	ldr	r2, [sp, #4]
 80082e6:	f1c0 0320 	rsb	r3, r0, #32
 80082ea:	fa02 f303 	lsl.w	r3, r2, r3
 80082ee:	430b      	orrs	r3, r1
 80082f0:	40c2      	lsrs	r2, r0
 80082f2:	6163      	str	r3, [r4, #20]
 80082f4:	9201      	str	r2, [sp, #4]
 80082f6:	9b01      	ldr	r3, [sp, #4]
 80082f8:	61a3      	str	r3, [r4, #24]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	bf14      	ite	ne
 80082fe:	2202      	movne	r2, #2
 8008300:	2201      	moveq	r2, #1
 8008302:	6122      	str	r2, [r4, #16]
 8008304:	b1d5      	cbz	r5, 800833c <__d2b+0x98>
 8008306:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800830a:	4405      	add	r5, r0
 800830c:	f8c9 5000 	str.w	r5, [r9]
 8008310:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008314:	f8c8 0000 	str.w	r0, [r8]
 8008318:	4620      	mov	r0, r4
 800831a:	b003      	add	sp, #12
 800831c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008320:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008324:	e7d5      	b.n	80082d2 <__d2b+0x2e>
 8008326:	6161      	str	r1, [r4, #20]
 8008328:	e7e5      	b.n	80082f6 <__d2b+0x52>
 800832a:	a801      	add	r0, sp, #4
 800832c:	f7ff fd5a 	bl	8007de4 <__lo0bits>
 8008330:	9b01      	ldr	r3, [sp, #4]
 8008332:	6163      	str	r3, [r4, #20]
 8008334:	2201      	movs	r2, #1
 8008336:	6122      	str	r2, [r4, #16]
 8008338:	3020      	adds	r0, #32
 800833a:	e7e3      	b.n	8008304 <__d2b+0x60>
 800833c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008340:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008344:	f8c9 0000 	str.w	r0, [r9]
 8008348:	6918      	ldr	r0, [r3, #16]
 800834a:	f7ff fd2b 	bl	8007da4 <__hi0bits>
 800834e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008352:	e7df      	b.n	8008314 <__d2b+0x70>
 8008354:	08008fbf 	.word	0x08008fbf
 8008358:	08009030 	.word	0x08009030

0800835c <_calloc_r>:
 800835c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800835e:	fba1 2402 	umull	r2, r4, r1, r2
 8008362:	b94c      	cbnz	r4, 8008378 <_calloc_r+0x1c>
 8008364:	4611      	mov	r1, r2
 8008366:	9201      	str	r2, [sp, #4]
 8008368:	f000 f87a 	bl	8008460 <_malloc_r>
 800836c:	9a01      	ldr	r2, [sp, #4]
 800836e:	4605      	mov	r5, r0
 8008370:	b930      	cbnz	r0, 8008380 <_calloc_r+0x24>
 8008372:	4628      	mov	r0, r5
 8008374:	b003      	add	sp, #12
 8008376:	bd30      	pop	{r4, r5, pc}
 8008378:	220c      	movs	r2, #12
 800837a:	6002      	str	r2, [r0, #0]
 800837c:	2500      	movs	r5, #0
 800837e:	e7f8      	b.n	8008372 <_calloc_r+0x16>
 8008380:	4621      	mov	r1, r4
 8008382:	f7fe f84f 	bl	8006424 <memset>
 8008386:	e7f4      	b.n	8008372 <_calloc_r+0x16>

08008388 <_free_r>:
 8008388:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800838a:	2900      	cmp	r1, #0
 800838c:	d044      	beq.n	8008418 <_free_r+0x90>
 800838e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008392:	9001      	str	r0, [sp, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	f1a1 0404 	sub.w	r4, r1, #4
 800839a:	bfb8      	it	lt
 800839c:	18e4      	addlt	r4, r4, r3
 800839e:	f000 fcdf 	bl	8008d60 <__malloc_lock>
 80083a2:	4a1e      	ldr	r2, [pc, #120]	; (800841c <_free_r+0x94>)
 80083a4:	9801      	ldr	r0, [sp, #4]
 80083a6:	6813      	ldr	r3, [r2, #0]
 80083a8:	b933      	cbnz	r3, 80083b8 <_free_r+0x30>
 80083aa:	6063      	str	r3, [r4, #4]
 80083ac:	6014      	str	r4, [r2, #0]
 80083ae:	b003      	add	sp, #12
 80083b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083b4:	f000 bcda 	b.w	8008d6c <__malloc_unlock>
 80083b8:	42a3      	cmp	r3, r4
 80083ba:	d908      	bls.n	80083ce <_free_r+0x46>
 80083bc:	6825      	ldr	r5, [r4, #0]
 80083be:	1961      	adds	r1, r4, r5
 80083c0:	428b      	cmp	r3, r1
 80083c2:	bf01      	itttt	eq
 80083c4:	6819      	ldreq	r1, [r3, #0]
 80083c6:	685b      	ldreq	r3, [r3, #4]
 80083c8:	1949      	addeq	r1, r1, r5
 80083ca:	6021      	streq	r1, [r4, #0]
 80083cc:	e7ed      	b.n	80083aa <_free_r+0x22>
 80083ce:	461a      	mov	r2, r3
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	b10b      	cbz	r3, 80083d8 <_free_r+0x50>
 80083d4:	42a3      	cmp	r3, r4
 80083d6:	d9fa      	bls.n	80083ce <_free_r+0x46>
 80083d8:	6811      	ldr	r1, [r2, #0]
 80083da:	1855      	adds	r5, r2, r1
 80083dc:	42a5      	cmp	r5, r4
 80083de:	d10b      	bne.n	80083f8 <_free_r+0x70>
 80083e0:	6824      	ldr	r4, [r4, #0]
 80083e2:	4421      	add	r1, r4
 80083e4:	1854      	adds	r4, r2, r1
 80083e6:	42a3      	cmp	r3, r4
 80083e8:	6011      	str	r1, [r2, #0]
 80083ea:	d1e0      	bne.n	80083ae <_free_r+0x26>
 80083ec:	681c      	ldr	r4, [r3, #0]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	6053      	str	r3, [r2, #4]
 80083f2:	4421      	add	r1, r4
 80083f4:	6011      	str	r1, [r2, #0]
 80083f6:	e7da      	b.n	80083ae <_free_r+0x26>
 80083f8:	d902      	bls.n	8008400 <_free_r+0x78>
 80083fa:	230c      	movs	r3, #12
 80083fc:	6003      	str	r3, [r0, #0]
 80083fe:	e7d6      	b.n	80083ae <_free_r+0x26>
 8008400:	6825      	ldr	r5, [r4, #0]
 8008402:	1961      	adds	r1, r4, r5
 8008404:	428b      	cmp	r3, r1
 8008406:	bf04      	itt	eq
 8008408:	6819      	ldreq	r1, [r3, #0]
 800840a:	685b      	ldreq	r3, [r3, #4]
 800840c:	6063      	str	r3, [r4, #4]
 800840e:	bf04      	itt	eq
 8008410:	1949      	addeq	r1, r1, r5
 8008412:	6021      	streq	r1, [r4, #0]
 8008414:	6054      	str	r4, [r2, #4]
 8008416:	e7ca      	b.n	80083ae <_free_r+0x26>
 8008418:	b003      	add	sp, #12
 800841a:	bd30      	pop	{r4, r5, pc}
 800841c:	20000410 	.word	0x20000410

08008420 <sbrk_aligned>:
 8008420:	b570      	push	{r4, r5, r6, lr}
 8008422:	4e0e      	ldr	r6, [pc, #56]	; (800845c <sbrk_aligned+0x3c>)
 8008424:	460c      	mov	r4, r1
 8008426:	6831      	ldr	r1, [r6, #0]
 8008428:	4605      	mov	r5, r0
 800842a:	b911      	cbnz	r1, 8008432 <sbrk_aligned+0x12>
 800842c:	f000 f9e6 	bl	80087fc <_sbrk_r>
 8008430:	6030      	str	r0, [r6, #0]
 8008432:	4621      	mov	r1, r4
 8008434:	4628      	mov	r0, r5
 8008436:	f000 f9e1 	bl	80087fc <_sbrk_r>
 800843a:	1c43      	adds	r3, r0, #1
 800843c:	d00a      	beq.n	8008454 <sbrk_aligned+0x34>
 800843e:	1cc4      	adds	r4, r0, #3
 8008440:	f024 0403 	bic.w	r4, r4, #3
 8008444:	42a0      	cmp	r0, r4
 8008446:	d007      	beq.n	8008458 <sbrk_aligned+0x38>
 8008448:	1a21      	subs	r1, r4, r0
 800844a:	4628      	mov	r0, r5
 800844c:	f000 f9d6 	bl	80087fc <_sbrk_r>
 8008450:	3001      	adds	r0, #1
 8008452:	d101      	bne.n	8008458 <sbrk_aligned+0x38>
 8008454:	f04f 34ff 	mov.w	r4, #4294967295
 8008458:	4620      	mov	r0, r4
 800845a:	bd70      	pop	{r4, r5, r6, pc}
 800845c:	20000414 	.word	0x20000414

08008460 <_malloc_r>:
 8008460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008464:	1ccd      	adds	r5, r1, #3
 8008466:	f025 0503 	bic.w	r5, r5, #3
 800846a:	3508      	adds	r5, #8
 800846c:	2d0c      	cmp	r5, #12
 800846e:	bf38      	it	cc
 8008470:	250c      	movcc	r5, #12
 8008472:	2d00      	cmp	r5, #0
 8008474:	4607      	mov	r7, r0
 8008476:	db01      	blt.n	800847c <_malloc_r+0x1c>
 8008478:	42a9      	cmp	r1, r5
 800847a:	d905      	bls.n	8008488 <_malloc_r+0x28>
 800847c:	230c      	movs	r3, #12
 800847e:	603b      	str	r3, [r7, #0]
 8008480:	2600      	movs	r6, #0
 8008482:	4630      	mov	r0, r6
 8008484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008488:	4e2e      	ldr	r6, [pc, #184]	; (8008544 <_malloc_r+0xe4>)
 800848a:	f000 fc69 	bl	8008d60 <__malloc_lock>
 800848e:	6833      	ldr	r3, [r6, #0]
 8008490:	461c      	mov	r4, r3
 8008492:	bb34      	cbnz	r4, 80084e2 <_malloc_r+0x82>
 8008494:	4629      	mov	r1, r5
 8008496:	4638      	mov	r0, r7
 8008498:	f7ff ffc2 	bl	8008420 <sbrk_aligned>
 800849c:	1c43      	adds	r3, r0, #1
 800849e:	4604      	mov	r4, r0
 80084a0:	d14d      	bne.n	800853e <_malloc_r+0xde>
 80084a2:	6834      	ldr	r4, [r6, #0]
 80084a4:	4626      	mov	r6, r4
 80084a6:	2e00      	cmp	r6, #0
 80084a8:	d140      	bne.n	800852c <_malloc_r+0xcc>
 80084aa:	6823      	ldr	r3, [r4, #0]
 80084ac:	4631      	mov	r1, r6
 80084ae:	4638      	mov	r0, r7
 80084b0:	eb04 0803 	add.w	r8, r4, r3
 80084b4:	f000 f9a2 	bl	80087fc <_sbrk_r>
 80084b8:	4580      	cmp	r8, r0
 80084ba:	d13a      	bne.n	8008532 <_malloc_r+0xd2>
 80084bc:	6821      	ldr	r1, [r4, #0]
 80084be:	3503      	adds	r5, #3
 80084c0:	1a6d      	subs	r5, r5, r1
 80084c2:	f025 0503 	bic.w	r5, r5, #3
 80084c6:	3508      	adds	r5, #8
 80084c8:	2d0c      	cmp	r5, #12
 80084ca:	bf38      	it	cc
 80084cc:	250c      	movcc	r5, #12
 80084ce:	4629      	mov	r1, r5
 80084d0:	4638      	mov	r0, r7
 80084d2:	f7ff ffa5 	bl	8008420 <sbrk_aligned>
 80084d6:	3001      	adds	r0, #1
 80084d8:	d02b      	beq.n	8008532 <_malloc_r+0xd2>
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	442b      	add	r3, r5
 80084de:	6023      	str	r3, [r4, #0]
 80084e0:	e00e      	b.n	8008500 <_malloc_r+0xa0>
 80084e2:	6822      	ldr	r2, [r4, #0]
 80084e4:	1b52      	subs	r2, r2, r5
 80084e6:	d41e      	bmi.n	8008526 <_malloc_r+0xc6>
 80084e8:	2a0b      	cmp	r2, #11
 80084ea:	d916      	bls.n	800851a <_malloc_r+0xba>
 80084ec:	1961      	adds	r1, r4, r5
 80084ee:	42a3      	cmp	r3, r4
 80084f0:	6025      	str	r5, [r4, #0]
 80084f2:	bf18      	it	ne
 80084f4:	6059      	strne	r1, [r3, #4]
 80084f6:	6863      	ldr	r3, [r4, #4]
 80084f8:	bf08      	it	eq
 80084fa:	6031      	streq	r1, [r6, #0]
 80084fc:	5162      	str	r2, [r4, r5]
 80084fe:	604b      	str	r3, [r1, #4]
 8008500:	4638      	mov	r0, r7
 8008502:	f104 060b 	add.w	r6, r4, #11
 8008506:	f000 fc31 	bl	8008d6c <__malloc_unlock>
 800850a:	f026 0607 	bic.w	r6, r6, #7
 800850e:	1d23      	adds	r3, r4, #4
 8008510:	1af2      	subs	r2, r6, r3
 8008512:	d0b6      	beq.n	8008482 <_malloc_r+0x22>
 8008514:	1b9b      	subs	r3, r3, r6
 8008516:	50a3      	str	r3, [r4, r2]
 8008518:	e7b3      	b.n	8008482 <_malloc_r+0x22>
 800851a:	6862      	ldr	r2, [r4, #4]
 800851c:	42a3      	cmp	r3, r4
 800851e:	bf0c      	ite	eq
 8008520:	6032      	streq	r2, [r6, #0]
 8008522:	605a      	strne	r2, [r3, #4]
 8008524:	e7ec      	b.n	8008500 <_malloc_r+0xa0>
 8008526:	4623      	mov	r3, r4
 8008528:	6864      	ldr	r4, [r4, #4]
 800852a:	e7b2      	b.n	8008492 <_malloc_r+0x32>
 800852c:	4634      	mov	r4, r6
 800852e:	6876      	ldr	r6, [r6, #4]
 8008530:	e7b9      	b.n	80084a6 <_malloc_r+0x46>
 8008532:	230c      	movs	r3, #12
 8008534:	603b      	str	r3, [r7, #0]
 8008536:	4638      	mov	r0, r7
 8008538:	f000 fc18 	bl	8008d6c <__malloc_unlock>
 800853c:	e7a1      	b.n	8008482 <_malloc_r+0x22>
 800853e:	6025      	str	r5, [r4, #0]
 8008540:	e7de      	b.n	8008500 <_malloc_r+0xa0>
 8008542:	bf00      	nop
 8008544:	20000410 	.word	0x20000410

08008548 <__sfputc_r>:
 8008548:	6893      	ldr	r3, [r2, #8]
 800854a:	3b01      	subs	r3, #1
 800854c:	2b00      	cmp	r3, #0
 800854e:	b410      	push	{r4}
 8008550:	6093      	str	r3, [r2, #8]
 8008552:	da08      	bge.n	8008566 <__sfputc_r+0x1e>
 8008554:	6994      	ldr	r4, [r2, #24]
 8008556:	42a3      	cmp	r3, r4
 8008558:	db01      	blt.n	800855e <__sfputc_r+0x16>
 800855a:	290a      	cmp	r1, #10
 800855c:	d103      	bne.n	8008566 <__sfputc_r+0x1e>
 800855e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008562:	f000 b99f 	b.w	80088a4 <__swbuf_r>
 8008566:	6813      	ldr	r3, [r2, #0]
 8008568:	1c58      	adds	r0, r3, #1
 800856a:	6010      	str	r0, [r2, #0]
 800856c:	7019      	strb	r1, [r3, #0]
 800856e:	4608      	mov	r0, r1
 8008570:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008574:	4770      	bx	lr

08008576 <__sfputs_r>:
 8008576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008578:	4606      	mov	r6, r0
 800857a:	460f      	mov	r7, r1
 800857c:	4614      	mov	r4, r2
 800857e:	18d5      	adds	r5, r2, r3
 8008580:	42ac      	cmp	r4, r5
 8008582:	d101      	bne.n	8008588 <__sfputs_r+0x12>
 8008584:	2000      	movs	r0, #0
 8008586:	e007      	b.n	8008598 <__sfputs_r+0x22>
 8008588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800858c:	463a      	mov	r2, r7
 800858e:	4630      	mov	r0, r6
 8008590:	f7ff ffda 	bl	8008548 <__sfputc_r>
 8008594:	1c43      	adds	r3, r0, #1
 8008596:	d1f3      	bne.n	8008580 <__sfputs_r+0xa>
 8008598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800859c <_vfiprintf_r>:
 800859c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a0:	460d      	mov	r5, r1
 80085a2:	b09d      	sub	sp, #116	; 0x74
 80085a4:	4614      	mov	r4, r2
 80085a6:	4698      	mov	r8, r3
 80085a8:	4606      	mov	r6, r0
 80085aa:	b118      	cbz	r0, 80085b4 <_vfiprintf_r+0x18>
 80085ac:	6983      	ldr	r3, [r0, #24]
 80085ae:	b90b      	cbnz	r3, 80085b4 <_vfiprintf_r+0x18>
 80085b0:	f7ff fa94 	bl	8007adc <__sinit>
 80085b4:	4b89      	ldr	r3, [pc, #548]	; (80087dc <_vfiprintf_r+0x240>)
 80085b6:	429d      	cmp	r5, r3
 80085b8:	d11b      	bne.n	80085f2 <_vfiprintf_r+0x56>
 80085ba:	6875      	ldr	r5, [r6, #4]
 80085bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085be:	07d9      	lsls	r1, r3, #31
 80085c0:	d405      	bmi.n	80085ce <_vfiprintf_r+0x32>
 80085c2:	89ab      	ldrh	r3, [r5, #12]
 80085c4:	059a      	lsls	r2, r3, #22
 80085c6:	d402      	bmi.n	80085ce <_vfiprintf_r+0x32>
 80085c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085ca:	f7ff fb2a 	bl	8007c22 <__retarget_lock_acquire_recursive>
 80085ce:	89ab      	ldrh	r3, [r5, #12]
 80085d0:	071b      	lsls	r3, r3, #28
 80085d2:	d501      	bpl.n	80085d8 <_vfiprintf_r+0x3c>
 80085d4:	692b      	ldr	r3, [r5, #16]
 80085d6:	b9eb      	cbnz	r3, 8008614 <_vfiprintf_r+0x78>
 80085d8:	4629      	mov	r1, r5
 80085da:	4630      	mov	r0, r6
 80085dc:	f000 f9c6 	bl	800896c <__swsetup_r>
 80085e0:	b1c0      	cbz	r0, 8008614 <_vfiprintf_r+0x78>
 80085e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085e4:	07dc      	lsls	r4, r3, #31
 80085e6:	d50e      	bpl.n	8008606 <_vfiprintf_r+0x6a>
 80085e8:	f04f 30ff 	mov.w	r0, #4294967295
 80085ec:	b01d      	add	sp, #116	; 0x74
 80085ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f2:	4b7b      	ldr	r3, [pc, #492]	; (80087e0 <_vfiprintf_r+0x244>)
 80085f4:	429d      	cmp	r5, r3
 80085f6:	d101      	bne.n	80085fc <_vfiprintf_r+0x60>
 80085f8:	68b5      	ldr	r5, [r6, #8]
 80085fa:	e7df      	b.n	80085bc <_vfiprintf_r+0x20>
 80085fc:	4b79      	ldr	r3, [pc, #484]	; (80087e4 <_vfiprintf_r+0x248>)
 80085fe:	429d      	cmp	r5, r3
 8008600:	bf08      	it	eq
 8008602:	68f5      	ldreq	r5, [r6, #12]
 8008604:	e7da      	b.n	80085bc <_vfiprintf_r+0x20>
 8008606:	89ab      	ldrh	r3, [r5, #12]
 8008608:	0598      	lsls	r0, r3, #22
 800860a:	d4ed      	bmi.n	80085e8 <_vfiprintf_r+0x4c>
 800860c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800860e:	f7ff fb09 	bl	8007c24 <__retarget_lock_release_recursive>
 8008612:	e7e9      	b.n	80085e8 <_vfiprintf_r+0x4c>
 8008614:	2300      	movs	r3, #0
 8008616:	9309      	str	r3, [sp, #36]	; 0x24
 8008618:	2320      	movs	r3, #32
 800861a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800861e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008622:	2330      	movs	r3, #48	; 0x30
 8008624:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80087e8 <_vfiprintf_r+0x24c>
 8008628:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800862c:	f04f 0901 	mov.w	r9, #1
 8008630:	4623      	mov	r3, r4
 8008632:	469a      	mov	sl, r3
 8008634:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008638:	b10a      	cbz	r2, 800863e <_vfiprintf_r+0xa2>
 800863a:	2a25      	cmp	r2, #37	; 0x25
 800863c:	d1f9      	bne.n	8008632 <_vfiprintf_r+0x96>
 800863e:	ebba 0b04 	subs.w	fp, sl, r4
 8008642:	d00b      	beq.n	800865c <_vfiprintf_r+0xc0>
 8008644:	465b      	mov	r3, fp
 8008646:	4622      	mov	r2, r4
 8008648:	4629      	mov	r1, r5
 800864a:	4630      	mov	r0, r6
 800864c:	f7ff ff93 	bl	8008576 <__sfputs_r>
 8008650:	3001      	adds	r0, #1
 8008652:	f000 80aa 	beq.w	80087aa <_vfiprintf_r+0x20e>
 8008656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008658:	445a      	add	r2, fp
 800865a:	9209      	str	r2, [sp, #36]	; 0x24
 800865c:	f89a 3000 	ldrb.w	r3, [sl]
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 80a2 	beq.w	80087aa <_vfiprintf_r+0x20e>
 8008666:	2300      	movs	r3, #0
 8008668:	f04f 32ff 	mov.w	r2, #4294967295
 800866c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008670:	f10a 0a01 	add.w	sl, sl, #1
 8008674:	9304      	str	r3, [sp, #16]
 8008676:	9307      	str	r3, [sp, #28]
 8008678:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800867c:	931a      	str	r3, [sp, #104]	; 0x68
 800867e:	4654      	mov	r4, sl
 8008680:	2205      	movs	r2, #5
 8008682:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008686:	4858      	ldr	r0, [pc, #352]	; (80087e8 <_vfiprintf_r+0x24c>)
 8008688:	f7f7 fdaa 	bl	80001e0 <memchr>
 800868c:	9a04      	ldr	r2, [sp, #16]
 800868e:	b9d8      	cbnz	r0, 80086c8 <_vfiprintf_r+0x12c>
 8008690:	06d1      	lsls	r1, r2, #27
 8008692:	bf44      	itt	mi
 8008694:	2320      	movmi	r3, #32
 8008696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800869a:	0713      	lsls	r3, r2, #28
 800869c:	bf44      	itt	mi
 800869e:	232b      	movmi	r3, #43	; 0x2b
 80086a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086a4:	f89a 3000 	ldrb.w	r3, [sl]
 80086a8:	2b2a      	cmp	r3, #42	; 0x2a
 80086aa:	d015      	beq.n	80086d8 <_vfiprintf_r+0x13c>
 80086ac:	9a07      	ldr	r2, [sp, #28]
 80086ae:	4654      	mov	r4, sl
 80086b0:	2000      	movs	r0, #0
 80086b2:	f04f 0c0a 	mov.w	ip, #10
 80086b6:	4621      	mov	r1, r4
 80086b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086bc:	3b30      	subs	r3, #48	; 0x30
 80086be:	2b09      	cmp	r3, #9
 80086c0:	d94e      	bls.n	8008760 <_vfiprintf_r+0x1c4>
 80086c2:	b1b0      	cbz	r0, 80086f2 <_vfiprintf_r+0x156>
 80086c4:	9207      	str	r2, [sp, #28]
 80086c6:	e014      	b.n	80086f2 <_vfiprintf_r+0x156>
 80086c8:	eba0 0308 	sub.w	r3, r0, r8
 80086cc:	fa09 f303 	lsl.w	r3, r9, r3
 80086d0:	4313      	orrs	r3, r2
 80086d2:	9304      	str	r3, [sp, #16]
 80086d4:	46a2      	mov	sl, r4
 80086d6:	e7d2      	b.n	800867e <_vfiprintf_r+0xe2>
 80086d8:	9b03      	ldr	r3, [sp, #12]
 80086da:	1d19      	adds	r1, r3, #4
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	9103      	str	r1, [sp, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	bfbb      	ittet	lt
 80086e4:	425b      	neglt	r3, r3
 80086e6:	f042 0202 	orrlt.w	r2, r2, #2
 80086ea:	9307      	strge	r3, [sp, #28]
 80086ec:	9307      	strlt	r3, [sp, #28]
 80086ee:	bfb8      	it	lt
 80086f0:	9204      	strlt	r2, [sp, #16]
 80086f2:	7823      	ldrb	r3, [r4, #0]
 80086f4:	2b2e      	cmp	r3, #46	; 0x2e
 80086f6:	d10c      	bne.n	8008712 <_vfiprintf_r+0x176>
 80086f8:	7863      	ldrb	r3, [r4, #1]
 80086fa:	2b2a      	cmp	r3, #42	; 0x2a
 80086fc:	d135      	bne.n	800876a <_vfiprintf_r+0x1ce>
 80086fe:	9b03      	ldr	r3, [sp, #12]
 8008700:	1d1a      	adds	r2, r3, #4
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	9203      	str	r2, [sp, #12]
 8008706:	2b00      	cmp	r3, #0
 8008708:	bfb8      	it	lt
 800870a:	f04f 33ff 	movlt.w	r3, #4294967295
 800870e:	3402      	adds	r4, #2
 8008710:	9305      	str	r3, [sp, #20]
 8008712:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80087f8 <_vfiprintf_r+0x25c>
 8008716:	7821      	ldrb	r1, [r4, #0]
 8008718:	2203      	movs	r2, #3
 800871a:	4650      	mov	r0, sl
 800871c:	f7f7 fd60 	bl	80001e0 <memchr>
 8008720:	b140      	cbz	r0, 8008734 <_vfiprintf_r+0x198>
 8008722:	2340      	movs	r3, #64	; 0x40
 8008724:	eba0 000a 	sub.w	r0, r0, sl
 8008728:	fa03 f000 	lsl.w	r0, r3, r0
 800872c:	9b04      	ldr	r3, [sp, #16]
 800872e:	4303      	orrs	r3, r0
 8008730:	3401      	adds	r4, #1
 8008732:	9304      	str	r3, [sp, #16]
 8008734:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008738:	482c      	ldr	r0, [pc, #176]	; (80087ec <_vfiprintf_r+0x250>)
 800873a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800873e:	2206      	movs	r2, #6
 8008740:	f7f7 fd4e 	bl	80001e0 <memchr>
 8008744:	2800      	cmp	r0, #0
 8008746:	d03f      	beq.n	80087c8 <_vfiprintf_r+0x22c>
 8008748:	4b29      	ldr	r3, [pc, #164]	; (80087f0 <_vfiprintf_r+0x254>)
 800874a:	bb1b      	cbnz	r3, 8008794 <_vfiprintf_r+0x1f8>
 800874c:	9b03      	ldr	r3, [sp, #12]
 800874e:	3307      	adds	r3, #7
 8008750:	f023 0307 	bic.w	r3, r3, #7
 8008754:	3308      	adds	r3, #8
 8008756:	9303      	str	r3, [sp, #12]
 8008758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800875a:	443b      	add	r3, r7
 800875c:	9309      	str	r3, [sp, #36]	; 0x24
 800875e:	e767      	b.n	8008630 <_vfiprintf_r+0x94>
 8008760:	fb0c 3202 	mla	r2, ip, r2, r3
 8008764:	460c      	mov	r4, r1
 8008766:	2001      	movs	r0, #1
 8008768:	e7a5      	b.n	80086b6 <_vfiprintf_r+0x11a>
 800876a:	2300      	movs	r3, #0
 800876c:	3401      	adds	r4, #1
 800876e:	9305      	str	r3, [sp, #20]
 8008770:	4619      	mov	r1, r3
 8008772:	f04f 0c0a 	mov.w	ip, #10
 8008776:	4620      	mov	r0, r4
 8008778:	f810 2b01 	ldrb.w	r2, [r0], #1
 800877c:	3a30      	subs	r2, #48	; 0x30
 800877e:	2a09      	cmp	r2, #9
 8008780:	d903      	bls.n	800878a <_vfiprintf_r+0x1ee>
 8008782:	2b00      	cmp	r3, #0
 8008784:	d0c5      	beq.n	8008712 <_vfiprintf_r+0x176>
 8008786:	9105      	str	r1, [sp, #20]
 8008788:	e7c3      	b.n	8008712 <_vfiprintf_r+0x176>
 800878a:	fb0c 2101 	mla	r1, ip, r1, r2
 800878e:	4604      	mov	r4, r0
 8008790:	2301      	movs	r3, #1
 8008792:	e7f0      	b.n	8008776 <_vfiprintf_r+0x1da>
 8008794:	ab03      	add	r3, sp, #12
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	462a      	mov	r2, r5
 800879a:	4b16      	ldr	r3, [pc, #88]	; (80087f4 <_vfiprintf_r+0x258>)
 800879c:	a904      	add	r1, sp, #16
 800879e:	4630      	mov	r0, r6
 80087a0:	f7fd fee8 	bl	8006574 <_printf_float>
 80087a4:	4607      	mov	r7, r0
 80087a6:	1c78      	adds	r0, r7, #1
 80087a8:	d1d6      	bne.n	8008758 <_vfiprintf_r+0x1bc>
 80087aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087ac:	07d9      	lsls	r1, r3, #31
 80087ae:	d405      	bmi.n	80087bc <_vfiprintf_r+0x220>
 80087b0:	89ab      	ldrh	r3, [r5, #12]
 80087b2:	059a      	lsls	r2, r3, #22
 80087b4:	d402      	bmi.n	80087bc <_vfiprintf_r+0x220>
 80087b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087b8:	f7ff fa34 	bl	8007c24 <__retarget_lock_release_recursive>
 80087bc:	89ab      	ldrh	r3, [r5, #12]
 80087be:	065b      	lsls	r3, r3, #25
 80087c0:	f53f af12 	bmi.w	80085e8 <_vfiprintf_r+0x4c>
 80087c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087c6:	e711      	b.n	80085ec <_vfiprintf_r+0x50>
 80087c8:	ab03      	add	r3, sp, #12
 80087ca:	9300      	str	r3, [sp, #0]
 80087cc:	462a      	mov	r2, r5
 80087ce:	4b09      	ldr	r3, [pc, #36]	; (80087f4 <_vfiprintf_r+0x258>)
 80087d0:	a904      	add	r1, sp, #16
 80087d2:	4630      	mov	r0, r6
 80087d4:	f7fe f972 	bl	8006abc <_printf_i>
 80087d8:	e7e4      	b.n	80087a4 <_vfiprintf_r+0x208>
 80087da:	bf00      	nop
 80087dc:	08008ff0 	.word	0x08008ff0
 80087e0:	08009010 	.word	0x08009010
 80087e4:	08008fd0 	.word	0x08008fd0
 80087e8:	0800918c 	.word	0x0800918c
 80087ec:	08009196 	.word	0x08009196
 80087f0:	08006575 	.word	0x08006575
 80087f4:	08008577 	.word	0x08008577
 80087f8:	08009192 	.word	0x08009192

080087fc <_sbrk_r>:
 80087fc:	b538      	push	{r3, r4, r5, lr}
 80087fe:	4d06      	ldr	r5, [pc, #24]	; (8008818 <_sbrk_r+0x1c>)
 8008800:	2300      	movs	r3, #0
 8008802:	4604      	mov	r4, r0
 8008804:	4608      	mov	r0, r1
 8008806:	602b      	str	r3, [r5, #0]
 8008808:	f7f9 f836 	bl	8001878 <_sbrk>
 800880c:	1c43      	adds	r3, r0, #1
 800880e:	d102      	bne.n	8008816 <_sbrk_r+0x1a>
 8008810:	682b      	ldr	r3, [r5, #0]
 8008812:	b103      	cbz	r3, 8008816 <_sbrk_r+0x1a>
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	bd38      	pop	{r3, r4, r5, pc}
 8008818:	20000418 	.word	0x20000418

0800881c <__sread>:
 800881c:	b510      	push	{r4, lr}
 800881e:	460c      	mov	r4, r1
 8008820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008824:	f000 faa8 	bl	8008d78 <_read_r>
 8008828:	2800      	cmp	r0, #0
 800882a:	bfab      	itete	ge
 800882c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800882e:	89a3      	ldrhlt	r3, [r4, #12]
 8008830:	181b      	addge	r3, r3, r0
 8008832:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008836:	bfac      	ite	ge
 8008838:	6563      	strge	r3, [r4, #84]	; 0x54
 800883a:	81a3      	strhlt	r3, [r4, #12]
 800883c:	bd10      	pop	{r4, pc}

0800883e <__swrite>:
 800883e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008842:	461f      	mov	r7, r3
 8008844:	898b      	ldrh	r3, [r1, #12]
 8008846:	05db      	lsls	r3, r3, #23
 8008848:	4605      	mov	r5, r0
 800884a:	460c      	mov	r4, r1
 800884c:	4616      	mov	r6, r2
 800884e:	d505      	bpl.n	800885c <__swrite+0x1e>
 8008850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008854:	2302      	movs	r3, #2
 8008856:	2200      	movs	r2, #0
 8008858:	f000 f9f8 	bl	8008c4c <_lseek_r>
 800885c:	89a3      	ldrh	r3, [r4, #12]
 800885e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008862:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008866:	81a3      	strh	r3, [r4, #12]
 8008868:	4632      	mov	r2, r6
 800886a:	463b      	mov	r3, r7
 800886c:	4628      	mov	r0, r5
 800886e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008872:	f000 b869 	b.w	8008948 <_write_r>

08008876 <__sseek>:
 8008876:	b510      	push	{r4, lr}
 8008878:	460c      	mov	r4, r1
 800887a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800887e:	f000 f9e5 	bl	8008c4c <_lseek_r>
 8008882:	1c43      	adds	r3, r0, #1
 8008884:	89a3      	ldrh	r3, [r4, #12]
 8008886:	bf15      	itete	ne
 8008888:	6560      	strne	r0, [r4, #84]	; 0x54
 800888a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800888e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008892:	81a3      	strheq	r3, [r4, #12]
 8008894:	bf18      	it	ne
 8008896:	81a3      	strhne	r3, [r4, #12]
 8008898:	bd10      	pop	{r4, pc}

0800889a <__sclose>:
 800889a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800889e:	f000 b8f1 	b.w	8008a84 <_close_r>
	...

080088a4 <__swbuf_r>:
 80088a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088a6:	460e      	mov	r6, r1
 80088a8:	4614      	mov	r4, r2
 80088aa:	4605      	mov	r5, r0
 80088ac:	b118      	cbz	r0, 80088b6 <__swbuf_r+0x12>
 80088ae:	6983      	ldr	r3, [r0, #24]
 80088b0:	b90b      	cbnz	r3, 80088b6 <__swbuf_r+0x12>
 80088b2:	f7ff f913 	bl	8007adc <__sinit>
 80088b6:	4b21      	ldr	r3, [pc, #132]	; (800893c <__swbuf_r+0x98>)
 80088b8:	429c      	cmp	r4, r3
 80088ba:	d12b      	bne.n	8008914 <__swbuf_r+0x70>
 80088bc:	686c      	ldr	r4, [r5, #4]
 80088be:	69a3      	ldr	r3, [r4, #24]
 80088c0:	60a3      	str	r3, [r4, #8]
 80088c2:	89a3      	ldrh	r3, [r4, #12]
 80088c4:	071a      	lsls	r2, r3, #28
 80088c6:	d52f      	bpl.n	8008928 <__swbuf_r+0x84>
 80088c8:	6923      	ldr	r3, [r4, #16]
 80088ca:	b36b      	cbz	r3, 8008928 <__swbuf_r+0x84>
 80088cc:	6923      	ldr	r3, [r4, #16]
 80088ce:	6820      	ldr	r0, [r4, #0]
 80088d0:	1ac0      	subs	r0, r0, r3
 80088d2:	6963      	ldr	r3, [r4, #20]
 80088d4:	b2f6      	uxtb	r6, r6
 80088d6:	4283      	cmp	r3, r0
 80088d8:	4637      	mov	r7, r6
 80088da:	dc04      	bgt.n	80088e6 <__swbuf_r+0x42>
 80088dc:	4621      	mov	r1, r4
 80088de:	4628      	mov	r0, r5
 80088e0:	f000 f966 	bl	8008bb0 <_fflush_r>
 80088e4:	bb30      	cbnz	r0, 8008934 <__swbuf_r+0x90>
 80088e6:	68a3      	ldr	r3, [r4, #8]
 80088e8:	3b01      	subs	r3, #1
 80088ea:	60a3      	str	r3, [r4, #8]
 80088ec:	6823      	ldr	r3, [r4, #0]
 80088ee:	1c5a      	adds	r2, r3, #1
 80088f0:	6022      	str	r2, [r4, #0]
 80088f2:	701e      	strb	r6, [r3, #0]
 80088f4:	6963      	ldr	r3, [r4, #20]
 80088f6:	3001      	adds	r0, #1
 80088f8:	4283      	cmp	r3, r0
 80088fa:	d004      	beq.n	8008906 <__swbuf_r+0x62>
 80088fc:	89a3      	ldrh	r3, [r4, #12]
 80088fe:	07db      	lsls	r3, r3, #31
 8008900:	d506      	bpl.n	8008910 <__swbuf_r+0x6c>
 8008902:	2e0a      	cmp	r6, #10
 8008904:	d104      	bne.n	8008910 <__swbuf_r+0x6c>
 8008906:	4621      	mov	r1, r4
 8008908:	4628      	mov	r0, r5
 800890a:	f000 f951 	bl	8008bb0 <_fflush_r>
 800890e:	b988      	cbnz	r0, 8008934 <__swbuf_r+0x90>
 8008910:	4638      	mov	r0, r7
 8008912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008914:	4b0a      	ldr	r3, [pc, #40]	; (8008940 <__swbuf_r+0x9c>)
 8008916:	429c      	cmp	r4, r3
 8008918:	d101      	bne.n	800891e <__swbuf_r+0x7a>
 800891a:	68ac      	ldr	r4, [r5, #8]
 800891c:	e7cf      	b.n	80088be <__swbuf_r+0x1a>
 800891e:	4b09      	ldr	r3, [pc, #36]	; (8008944 <__swbuf_r+0xa0>)
 8008920:	429c      	cmp	r4, r3
 8008922:	bf08      	it	eq
 8008924:	68ec      	ldreq	r4, [r5, #12]
 8008926:	e7ca      	b.n	80088be <__swbuf_r+0x1a>
 8008928:	4621      	mov	r1, r4
 800892a:	4628      	mov	r0, r5
 800892c:	f000 f81e 	bl	800896c <__swsetup_r>
 8008930:	2800      	cmp	r0, #0
 8008932:	d0cb      	beq.n	80088cc <__swbuf_r+0x28>
 8008934:	f04f 37ff 	mov.w	r7, #4294967295
 8008938:	e7ea      	b.n	8008910 <__swbuf_r+0x6c>
 800893a:	bf00      	nop
 800893c:	08008ff0 	.word	0x08008ff0
 8008940:	08009010 	.word	0x08009010
 8008944:	08008fd0 	.word	0x08008fd0

08008948 <_write_r>:
 8008948:	b538      	push	{r3, r4, r5, lr}
 800894a:	4d07      	ldr	r5, [pc, #28]	; (8008968 <_write_r+0x20>)
 800894c:	4604      	mov	r4, r0
 800894e:	4608      	mov	r0, r1
 8008950:	4611      	mov	r1, r2
 8008952:	2200      	movs	r2, #0
 8008954:	602a      	str	r2, [r5, #0]
 8008956:	461a      	mov	r2, r3
 8008958:	f7f8 ff3d 	bl	80017d6 <_write>
 800895c:	1c43      	adds	r3, r0, #1
 800895e:	d102      	bne.n	8008966 <_write_r+0x1e>
 8008960:	682b      	ldr	r3, [r5, #0]
 8008962:	b103      	cbz	r3, 8008966 <_write_r+0x1e>
 8008964:	6023      	str	r3, [r4, #0]
 8008966:	bd38      	pop	{r3, r4, r5, pc}
 8008968:	20000418 	.word	0x20000418

0800896c <__swsetup_r>:
 800896c:	4b32      	ldr	r3, [pc, #200]	; (8008a38 <__swsetup_r+0xcc>)
 800896e:	b570      	push	{r4, r5, r6, lr}
 8008970:	681d      	ldr	r5, [r3, #0]
 8008972:	4606      	mov	r6, r0
 8008974:	460c      	mov	r4, r1
 8008976:	b125      	cbz	r5, 8008982 <__swsetup_r+0x16>
 8008978:	69ab      	ldr	r3, [r5, #24]
 800897a:	b913      	cbnz	r3, 8008982 <__swsetup_r+0x16>
 800897c:	4628      	mov	r0, r5
 800897e:	f7ff f8ad 	bl	8007adc <__sinit>
 8008982:	4b2e      	ldr	r3, [pc, #184]	; (8008a3c <__swsetup_r+0xd0>)
 8008984:	429c      	cmp	r4, r3
 8008986:	d10f      	bne.n	80089a8 <__swsetup_r+0x3c>
 8008988:	686c      	ldr	r4, [r5, #4]
 800898a:	89a3      	ldrh	r3, [r4, #12]
 800898c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008990:	0719      	lsls	r1, r3, #28
 8008992:	d42c      	bmi.n	80089ee <__swsetup_r+0x82>
 8008994:	06dd      	lsls	r5, r3, #27
 8008996:	d411      	bmi.n	80089bc <__swsetup_r+0x50>
 8008998:	2309      	movs	r3, #9
 800899a:	6033      	str	r3, [r6, #0]
 800899c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80089a0:	81a3      	strh	r3, [r4, #12]
 80089a2:	f04f 30ff 	mov.w	r0, #4294967295
 80089a6:	e03e      	b.n	8008a26 <__swsetup_r+0xba>
 80089a8:	4b25      	ldr	r3, [pc, #148]	; (8008a40 <__swsetup_r+0xd4>)
 80089aa:	429c      	cmp	r4, r3
 80089ac:	d101      	bne.n	80089b2 <__swsetup_r+0x46>
 80089ae:	68ac      	ldr	r4, [r5, #8]
 80089b0:	e7eb      	b.n	800898a <__swsetup_r+0x1e>
 80089b2:	4b24      	ldr	r3, [pc, #144]	; (8008a44 <__swsetup_r+0xd8>)
 80089b4:	429c      	cmp	r4, r3
 80089b6:	bf08      	it	eq
 80089b8:	68ec      	ldreq	r4, [r5, #12]
 80089ba:	e7e6      	b.n	800898a <__swsetup_r+0x1e>
 80089bc:	0758      	lsls	r0, r3, #29
 80089be:	d512      	bpl.n	80089e6 <__swsetup_r+0x7a>
 80089c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089c2:	b141      	cbz	r1, 80089d6 <__swsetup_r+0x6a>
 80089c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089c8:	4299      	cmp	r1, r3
 80089ca:	d002      	beq.n	80089d2 <__swsetup_r+0x66>
 80089cc:	4630      	mov	r0, r6
 80089ce:	f7ff fcdb 	bl	8008388 <_free_r>
 80089d2:	2300      	movs	r3, #0
 80089d4:	6363      	str	r3, [r4, #52]	; 0x34
 80089d6:	89a3      	ldrh	r3, [r4, #12]
 80089d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80089dc:	81a3      	strh	r3, [r4, #12]
 80089de:	2300      	movs	r3, #0
 80089e0:	6063      	str	r3, [r4, #4]
 80089e2:	6923      	ldr	r3, [r4, #16]
 80089e4:	6023      	str	r3, [r4, #0]
 80089e6:	89a3      	ldrh	r3, [r4, #12]
 80089e8:	f043 0308 	orr.w	r3, r3, #8
 80089ec:	81a3      	strh	r3, [r4, #12]
 80089ee:	6923      	ldr	r3, [r4, #16]
 80089f0:	b94b      	cbnz	r3, 8008a06 <__swsetup_r+0x9a>
 80089f2:	89a3      	ldrh	r3, [r4, #12]
 80089f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80089f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089fc:	d003      	beq.n	8008a06 <__swsetup_r+0x9a>
 80089fe:	4621      	mov	r1, r4
 8008a00:	4630      	mov	r0, r6
 8008a02:	f000 f95b 	bl	8008cbc <__smakebuf_r>
 8008a06:	89a0      	ldrh	r0, [r4, #12]
 8008a08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a0c:	f010 0301 	ands.w	r3, r0, #1
 8008a10:	d00a      	beq.n	8008a28 <__swsetup_r+0xbc>
 8008a12:	2300      	movs	r3, #0
 8008a14:	60a3      	str	r3, [r4, #8]
 8008a16:	6963      	ldr	r3, [r4, #20]
 8008a18:	425b      	negs	r3, r3
 8008a1a:	61a3      	str	r3, [r4, #24]
 8008a1c:	6923      	ldr	r3, [r4, #16]
 8008a1e:	b943      	cbnz	r3, 8008a32 <__swsetup_r+0xc6>
 8008a20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a24:	d1ba      	bne.n	800899c <__swsetup_r+0x30>
 8008a26:	bd70      	pop	{r4, r5, r6, pc}
 8008a28:	0781      	lsls	r1, r0, #30
 8008a2a:	bf58      	it	pl
 8008a2c:	6963      	ldrpl	r3, [r4, #20]
 8008a2e:	60a3      	str	r3, [r4, #8]
 8008a30:	e7f4      	b.n	8008a1c <__swsetup_r+0xb0>
 8008a32:	2000      	movs	r0, #0
 8008a34:	e7f7      	b.n	8008a26 <__swsetup_r+0xba>
 8008a36:	bf00      	nop
 8008a38:	20000010 	.word	0x20000010
 8008a3c:	08008ff0 	.word	0x08008ff0
 8008a40:	08009010 	.word	0x08009010
 8008a44:	08008fd0 	.word	0x08008fd0

08008a48 <__assert_func>:
 8008a48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a4a:	4614      	mov	r4, r2
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	4b09      	ldr	r3, [pc, #36]	; (8008a74 <__assert_func+0x2c>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4605      	mov	r5, r0
 8008a54:	68d8      	ldr	r0, [r3, #12]
 8008a56:	b14c      	cbz	r4, 8008a6c <__assert_func+0x24>
 8008a58:	4b07      	ldr	r3, [pc, #28]	; (8008a78 <__assert_func+0x30>)
 8008a5a:	9100      	str	r1, [sp, #0]
 8008a5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a60:	4906      	ldr	r1, [pc, #24]	; (8008a7c <__assert_func+0x34>)
 8008a62:	462b      	mov	r3, r5
 8008a64:	f000 f8e0 	bl	8008c28 <fiprintf>
 8008a68:	f000 f9a5 	bl	8008db6 <abort>
 8008a6c:	4b04      	ldr	r3, [pc, #16]	; (8008a80 <__assert_func+0x38>)
 8008a6e:	461c      	mov	r4, r3
 8008a70:	e7f3      	b.n	8008a5a <__assert_func+0x12>
 8008a72:	bf00      	nop
 8008a74:	20000010 	.word	0x20000010
 8008a78:	0800919d 	.word	0x0800919d
 8008a7c:	080091aa 	.word	0x080091aa
 8008a80:	080091d8 	.word	0x080091d8

08008a84 <_close_r>:
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	4d06      	ldr	r5, [pc, #24]	; (8008aa0 <_close_r+0x1c>)
 8008a88:	2300      	movs	r3, #0
 8008a8a:	4604      	mov	r4, r0
 8008a8c:	4608      	mov	r0, r1
 8008a8e:	602b      	str	r3, [r5, #0]
 8008a90:	f7f8 febd 	bl	800180e <_close>
 8008a94:	1c43      	adds	r3, r0, #1
 8008a96:	d102      	bne.n	8008a9e <_close_r+0x1a>
 8008a98:	682b      	ldr	r3, [r5, #0]
 8008a9a:	b103      	cbz	r3, 8008a9e <_close_r+0x1a>
 8008a9c:	6023      	str	r3, [r4, #0]
 8008a9e:	bd38      	pop	{r3, r4, r5, pc}
 8008aa0:	20000418 	.word	0x20000418

08008aa4 <__sflush_r>:
 8008aa4:	898a      	ldrh	r2, [r1, #12]
 8008aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aaa:	4605      	mov	r5, r0
 8008aac:	0710      	lsls	r0, r2, #28
 8008aae:	460c      	mov	r4, r1
 8008ab0:	d458      	bmi.n	8008b64 <__sflush_r+0xc0>
 8008ab2:	684b      	ldr	r3, [r1, #4]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	dc05      	bgt.n	8008ac4 <__sflush_r+0x20>
 8008ab8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	dc02      	bgt.n	8008ac4 <__sflush_r+0x20>
 8008abe:	2000      	movs	r0, #0
 8008ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ac4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ac6:	2e00      	cmp	r6, #0
 8008ac8:	d0f9      	beq.n	8008abe <__sflush_r+0x1a>
 8008aca:	2300      	movs	r3, #0
 8008acc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ad0:	682f      	ldr	r7, [r5, #0]
 8008ad2:	602b      	str	r3, [r5, #0]
 8008ad4:	d032      	beq.n	8008b3c <__sflush_r+0x98>
 8008ad6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ad8:	89a3      	ldrh	r3, [r4, #12]
 8008ada:	075a      	lsls	r2, r3, #29
 8008adc:	d505      	bpl.n	8008aea <__sflush_r+0x46>
 8008ade:	6863      	ldr	r3, [r4, #4]
 8008ae0:	1ac0      	subs	r0, r0, r3
 8008ae2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ae4:	b10b      	cbz	r3, 8008aea <__sflush_r+0x46>
 8008ae6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ae8:	1ac0      	subs	r0, r0, r3
 8008aea:	2300      	movs	r3, #0
 8008aec:	4602      	mov	r2, r0
 8008aee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008af0:	6a21      	ldr	r1, [r4, #32]
 8008af2:	4628      	mov	r0, r5
 8008af4:	47b0      	blx	r6
 8008af6:	1c43      	adds	r3, r0, #1
 8008af8:	89a3      	ldrh	r3, [r4, #12]
 8008afa:	d106      	bne.n	8008b0a <__sflush_r+0x66>
 8008afc:	6829      	ldr	r1, [r5, #0]
 8008afe:	291d      	cmp	r1, #29
 8008b00:	d82c      	bhi.n	8008b5c <__sflush_r+0xb8>
 8008b02:	4a2a      	ldr	r2, [pc, #168]	; (8008bac <__sflush_r+0x108>)
 8008b04:	40ca      	lsrs	r2, r1
 8008b06:	07d6      	lsls	r6, r2, #31
 8008b08:	d528      	bpl.n	8008b5c <__sflush_r+0xb8>
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	6062      	str	r2, [r4, #4]
 8008b0e:	04d9      	lsls	r1, r3, #19
 8008b10:	6922      	ldr	r2, [r4, #16]
 8008b12:	6022      	str	r2, [r4, #0]
 8008b14:	d504      	bpl.n	8008b20 <__sflush_r+0x7c>
 8008b16:	1c42      	adds	r2, r0, #1
 8008b18:	d101      	bne.n	8008b1e <__sflush_r+0x7a>
 8008b1a:	682b      	ldr	r3, [r5, #0]
 8008b1c:	b903      	cbnz	r3, 8008b20 <__sflush_r+0x7c>
 8008b1e:	6560      	str	r0, [r4, #84]	; 0x54
 8008b20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b22:	602f      	str	r7, [r5, #0]
 8008b24:	2900      	cmp	r1, #0
 8008b26:	d0ca      	beq.n	8008abe <__sflush_r+0x1a>
 8008b28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b2c:	4299      	cmp	r1, r3
 8008b2e:	d002      	beq.n	8008b36 <__sflush_r+0x92>
 8008b30:	4628      	mov	r0, r5
 8008b32:	f7ff fc29 	bl	8008388 <_free_r>
 8008b36:	2000      	movs	r0, #0
 8008b38:	6360      	str	r0, [r4, #52]	; 0x34
 8008b3a:	e7c1      	b.n	8008ac0 <__sflush_r+0x1c>
 8008b3c:	6a21      	ldr	r1, [r4, #32]
 8008b3e:	2301      	movs	r3, #1
 8008b40:	4628      	mov	r0, r5
 8008b42:	47b0      	blx	r6
 8008b44:	1c41      	adds	r1, r0, #1
 8008b46:	d1c7      	bne.n	8008ad8 <__sflush_r+0x34>
 8008b48:	682b      	ldr	r3, [r5, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d0c4      	beq.n	8008ad8 <__sflush_r+0x34>
 8008b4e:	2b1d      	cmp	r3, #29
 8008b50:	d001      	beq.n	8008b56 <__sflush_r+0xb2>
 8008b52:	2b16      	cmp	r3, #22
 8008b54:	d101      	bne.n	8008b5a <__sflush_r+0xb6>
 8008b56:	602f      	str	r7, [r5, #0]
 8008b58:	e7b1      	b.n	8008abe <__sflush_r+0x1a>
 8008b5a:	89a3      	ldrh	r3, [r4, #12]
 8008b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b60:	81a3      	strh	r3, [r4, #12]
 8008b62:	e7ad      	b.n	8008ac0 <__sflush_r+0x1c>
 8008b64:	690f      	ldr	r7, [r1, #16]
 8008b66:	2f00      	cmp	r7, #0
 8008b68:	d0a9      	beq.n	8008abe <__sflush_r+0x1a>
 8008b6a:	0793      	lsls	r3, r2, #30
 8008b6c:	680e      	ldr	r6, [r1, #0]
 8008b6e:	bf08      	it	eq
 8008b70:	694b      	ldreq	r3, [r1, #20]
 8008b72:	600f      	str	r7, [r1, #0]
 8008b74:	bf18      	it	ne
 8008b76:	2300      	movne	r3, #0
 8008b78:	eba6 0807 	sub.w	r8, r6, r7
 8008b7c:	608b      	str	r3, [r1, #8]
 8008b7e:	f1b8 0f00 	cmp.w	r8, #0
 8008b82:	dd9c      	ble.n	8008abe <__sflush_r+0x1a>
 8008b84:	6a21      	ldr	r1, [r4, #32]
 8008b86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b88:	4643      	mov	r3, r8
 8008b8a:	463a      	mov	r2, r7
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	47b0      	blx	r6
 8008b90:	2800      	cmp	r0, #0
 8008b92:	dc06      	bgt.n	8008ba2 <__sflush_r+0xfe>
 8008b94:	89a3      	ldrh	r3, [r4, #12]
 8008b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b9a:	81a3      	strh	r3, [r4, #12]
 8008b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba0:	e78e      	b.n	8008ac0 <__sflush_r+0x1c>
 8008ba2:	4407      	add	r7, r0
 8008ba4:	eba8 0800 	sub.w	r8, r8, r0
 8008ba8:	e7e9      	b.n	8008b7e <__sflush_r+0xda>
 8008baa:	bf00      	nop
 8008bac:	20400001 	.word	0x20400001

08008bb0 <_fflush_r>:
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	690b      	ldr	r3, [r1, #16]
 8008bb4:	4605      	mov	r5, r0
 8008bb6:	460c      	mov	r4, r1
 8008bb8:	b913      	cbnz	r3, 8008bc0 <_fflush_r+0x10>
 8008bba:	2500      	movs	r5, #0
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	bd38      	pop	{r3, r4, r5, pc}
 8008bc0:	b118      	cbz	r0, 8008bca <_fflush_r+0x1a>
 8008bc2:	6983      	ldr	r3, [r0, #24]
 8008bc4:	b90b      	cbnz	r3, 8008bca <_fflush_r+0x1a>
 8008bc6:	f7fe ff89 	bl	8007adc <__sinit>
 8008bca:	4b14      	ldr	r3, [pc, #80]	; (8008c1c <_fflush_r+0x6c>)
 8008bcc:	429c      	cmp	r4, r3
 8008bce:	d11b      	bne.n	8008c08 <_fflush_r+0x58>
 8008bd0:	686c      	ldr	r4, [r5, #4]
 8008bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d0ef      	beq.n	8008bba <_fflush_r+0xa>
 8008bda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bdc:	07d0      	lsls	r0, r2, #31
 8008bde:	d404      	bmi.n	8008bea <_fflush_r+0x3a>
 8008be0:	0599      	lsls	r1, r3, #22
 8008be2:	d402      	bmi.n	8008bea <_fflush_r+0x3a>
 8008be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008be6:	f7ff f81c 	bl	8007c22 <__retarget_lock_acquire_recursive>
 8008bea:	4628      	mov	r0, r5
 8008bec:	4621      	mov	r1, r4
 8008bee:	f7ff ff59 	bl	8008aa4 <__sflush_r>
 8008bf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bf4:	07da      	lsls	r2, r3, #31
 8008bf6:	4605      	mov	r5, r0
 8008bf8:	d4e0      	bmi.n	8008bbc <_fflush_r+0xc>
 8008bfa:	89a3      	ldrh	r3, [r4, #12]
 8008bfc:	059b      	lsls	r3, r3, #22
 8008bfe:	d4dd      	bmi.n	8008bbc <_fflush_r+0xc>
 8008c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c02:	f7ff f80f 	bl	8007c24 <__retarget_lock_release_recursive>
 8008c06:	e7d9      	b.n	8008bbc <_fflush_r+0xc>
 8008c08:	4b05      	ldr	r3, [pc, #20]	; (8008c20 <_fflush_r+0x70>)
 8008c0a:	429c      	cmp	r4, r3
 8008c0c:	d101      	bne.n	8008c12 <_fflush_r+0x62>
 8008c0e:	68ac      	ldr	r4, [r5, #8]
 8008c10:	e7df      	b.n	8008bd2 <_fflush_r+0x22>
 8008c12:	4b04      	ldr	r3, [pc, #16]	; (8008c24 <_fflush_r+0x74>)
 8008c14:	429c      	cmp	r4, r3
 8008c16:	bf08      	it	eq
 8008c18:	68ec      	ldreq	r4, [r5, #12]
 8008c1a:	e7da      	b.n	8008bd2 <_fflush_r+0x22>
 8008c1c:	08008ff0 	.word	0x08008ff0
 8008c20:	08009010 	.word	0x08009010
 8008c24:	08008fd0 	.word	0x08008fd0

08008c28 <fiprintf>:
 8008c28:	b40e      	push	{r1, r2, r3}
 8008c2a:	b503      	push	{r0, r1, lr}
 8008c2c:	4601      	mov	r1, r0
 8008c2e:	ab03      	add	r3, sp, #12
 8008c30:	4805      	ldr	r0, [pc, #20]	; (8008c48 <fiprintf+0x20>)
 8008c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c36:	6800      	ldr	r0, [r0, #0]
 8008c38:	9301      	str	r3, [sp, #4]
 8008c3a:	f7ff fcaf 	bl	800859c <_vfiprintf_r>
 8008c3e:	b002      	add	sp, #8
 8008c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c44:	b003      	add	sp, #12
 8008c46:	4770      	bx	lr
 8008c48:	20000010 	.word	0x20000010

08008c4c <_lseek_r>:
 8008c4c:	b538      	push	{r3, r4, r5, lr}
 8008c4e:	4d07      	ldr	r5, [pc, #28]	; (8008c6c <_lseek_r+0x20>)
 8008c50:	4604      	mov	r4, r0
 8008c52:	4608      	mov	r0, r1
 8008c54:	4611      	mov	r1, r2
 8008c56:	2200      	movs	r2, #0
 8008c58:	602a      	str	r2, [r5, #0]
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	f7f8 fdfe 	bl	800185c <_lseek>
 8008c60:	1c43      	adds	r3, r0, #1
 8008c62:	d102      	bne.n	8008c6a <_lseek_r+0x1e>
 8008c64:	682b      	ldr	r3, [r5, #0]
 8008c66:	b103      	cbz	r3, 8008c6a <_lseek_r+0x1e>
 8008c68:	6023      	str	r3, [r4, #0]
 8008c6a:	bd38      	pop	{r3, r4, r5, pc}
 8008c6c:	20000418 	.word	0x20000418

08008c70 <__swhatbuf_r>:
 8008c70:	b570      	push	{r4, r5, r6, lr}
 8008c72:	460e      	mov	r6, r1
 8008c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c78:	2900      	cmp	r1, #0
 8008c7a:	b096      	sub	sp, #88	; 0x58
 8008c7c:	4614      	mov	r4, r2
 8008c7e:	461d      	mov	r5, r3
 8008c80:	da08      	bge.n	8008c94 <__swhatbuf_r+0x24>
 8008c82:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	602a      	str	r2, [r5, #0]
 8008c8a:	061a      	lsls	r2, r3, #24
 8008c8c:	d410      	bmi.n	8008cb0 <__swhatbuf_r+0x40>
 8008c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c92:	e00e      	b.n	8008cb2 <__swhatbuf_r+0x42>
 8008c94:	466a      	mov	r2, sp
 8008c96:	f000 f895 	bl	8008dc4 <_fstat_r>
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	dbf1      	blt.n	8008c82 <__swhatbuf_r+0x12>
 8008c9e:	9a01      	ldr	r2, [sp, #4]
 8008ca0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ca4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ca8:	425a      	negs	r2, r3
 8008caa:	415a      	adcs	r2, r3
 8008cac:	602a      	str	r2, [r5, #0]
 8008cae:	e7ee      	b.n	8008c8e <__swhatbuf_r+0x1e>
 8008cb0:	2340      	movs	r3, #64	; 0x40
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	6023      	str	r3, [r4, #0]
 8008cb6:	b016      	add	sp, #88	; 0x58
 8008cb8:	bd70      	pop	{r4, r5, r6, pc}
	...

08008cbc <__smakebuf_r>:
 8008cbc:	898b      	ldrh	r3, [r1, #12]
 8008cbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cc0:	079d      	lsls	r5, r3, #30
 8008cc2:	4606      	mov	r6, r0
 8008cc4:	460c      	mov	r4, r1
 8008cc6:	d507      	bpl.n	8008cd8 <__smakebuf_r+0x1c>
 8008cc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ccc:	6023      	str	r3, [r4, #0]
 8008cce:	6123      	str	r3, [r4, #16]
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	6163      	str	r3, [r4, #20]
 8008cd4:	b002      	add	sp, #8
 8008cd6:	bd70      	pop	{r4, r5, r6, pc}
 8008cd8:	ab01      	add	r3, sp, #4
 8008cda:	466a      	mov	r2, sp
 8008cdc:	f7ff ffc8 	bl	8008c70 <__swhatbuf_r>
 8008ce0:	9900      	ldr	r1, [sp, #0]
 8008ce2:	4605      	mov	r5, r0
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	f7ff fbbb 	bl	8008460 <_malloc_r>
 8008cea:	b948      	cbnz	r0, 8008d00 <__smakebuf_r+0x44>
 8008cec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cf0:	059a      	lsls	r2, r3, #22
 8008cf2:	d4ef      	bmi.n	8008cd4 <__smakebuf_r+0x18>
 8008cf4:	f023 0303 	bic.w	r3, r3, #3
 8008cf8:	f043 0302 	orr.w	r3, r3, #2
 8008cfc:	81a3      	strh	r3, [r4, #12]
 8008cfe:	e7e3      	b.n	8008cc8 <__smakebuf_r+0xc>
 8008d00:	4b0d      	ldr	r3, [pc, #52]	; (8008d38 <__smakebuf_r+0x7c>)
 8008d02:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d04:	89a3      	ldrh	r3, [r4, #12]
 8008d06:	6020      	str	r0, [r4, #0]
 8008d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d0c:	81a3      	strh	r3, [r4, #12]
 8008d0e:	9b00      	ldr	r3, [sp, #0]
 8008d10:	6163      	str	r3, [r4, #20]
 8008d12:	9b01      	ldr	r3, [sp, #4]
 8008d14:	6120      	str	r0, [r4, #16]
 8008d16:	b15b      	cbz	r3, 8008d30 <__smakebuf_r+0x74>
 8008d18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	f000 f863 	bl	8008de8 <_isatty_r>
 8008d22:	b128      	cbz	r0, 8008d30 <__smakebuf_r+0x74>
 8008d24:	89a3      	ldrh	r3, [r4, #12]
 8008d26:	f023 0303 	bic.w	r3, r3, #3
 8008d2a:	f043 0301 	orr.w	r3, r3, #1
 8008d2e:	81a3      	strh	r3, [r4, #12]
 8008d30:	89a0      	ldrh	r0, [r4, #12]
 8008d32:	4305      	orrs	r5, r0
 8008d34:	81a5      	strh	r5, [r4, #12]
 8008d36:	e7cd      	b.n	8008cd4 <__smakebuf_r+0x18>
 8008d38:	08007a75 	.word	0x08007a75

08008d3c <__ascii_mbtowc>:
 8008d3c:	b082      	sub	sp, #8
 8008d3e:	b901      	cbnz	r1, 8008d42 <__ascii_mbtowc+0x6>
 8008d40:	a901      	add	r1, sp, #4
 8008d42:	b142      	cbz	r2, 8008d56 <__ascii_mbtowc+0x1a>
 8008d44:	b14b      	cbz	r3, 8008d5a <__ascii_mbtowc+0x1e>
 8008d46:	7813      	ldrb	r3, [r2, #0]
 8008d48:	600b      	str	r3, [r1, #0]
 8008d4a:	7812      	ldrb	r2, [r2, #0]
 8008d4c:	1e10      	subs	r0, r2, #0
 8008d4e:	bf18      	it	ne
 8008d50:	2001      	movne	r0, #1
 8008d52:	b002      	add	sp, #8
 8008d54:	4770      	bx	lr
 8008d56:	4610      	mov	r0, r2
 8008d58:	e7fb      	b.n	8008d52 <__ascii_mbtowc+0x16>
 8008d5a:	f06f 0001 	mvn.w	r0, #1
 8008d5e:	e7f8      	b.n	8008d52 <__ascii_mbtowc+0x16>

08008d60 <__malloc_lock>:
 8008d60:	4801      	ldr	r0, [pc, #4]	; (8008d68 <__malloc_lock+0x8>)
 8008d62:	f7fe bf5e 	b.w	8007c22 <__retarget_lock_acquire_recursive>
 8008d66:	bf00      	nop
 8008d68:	2000040c 	.word	0x2000040c

08008d6c <__malloc_unlock>:
 8008d6c:	4801      	ldr	r0, [pc, #4]	; (8008d74 <__malloc_unlock+0x8>)
 8008d6e:	f7fe bf59 	b.w	8007c24 <__retarget_lock_release_recursive>
 8008d72:	bf00      	nop
 8008d74:	2000040c 	.word	0x2000040c

08008d78 <_read_r>:
 8008d78:	b538      	push	{r3, r4, r5, lr}
 8008d7a:	4d07      	ldr	r5, [pc, #28]	; (8008d98 <_read_r+0x20>)
 8008d7c:	4604      	mov	r4, r0
 8008d7e:	4608      	mov	r0, r1
 8008d80:	4611      	mov	r1, r2
 8008d82:	2200      	movs	r2, #0
 8008d84:	602a      	str	r2, [r5, #0]
 8008d86:	461a      	mov	r2, r3
 8008d88:	f7f8 fd08 	bl	800179c <_read>
 8008d8c:	1c43      	adds	r3, r0, #1
 8008d8e:	d102      	bne.n	8008d96 <_read_r+0x1e>
 8008d90:	682b      	ldr	r3, [r5, #0]
 8008d92:	b103      	cbz	r3, 8008d96 <_read_r+0x1e>
 8008d94:	6023      	str	r3, [r4, #0]
 8008d96:	bd38      	pop	{r3, r4, r5, pc}
 8008d98:	20000418 	.word	0x20000418

08008d9c <__ascii_wctomb>:
 8008d9c:	b149      	cbz	r1, 8008db2 <__ascii_wctomb+0x16>
 8008d9e:	2aff      	cmp	r2, #255	; 0xff
 8008da0:	bf85      	ittet	hi
 8008da2:	238a      	movhi	r3, #138	; 0x8a
 8008da4:	6003      	strhi	r3, [r0, #0]
 8008da6:	700a      	strbls	r2, [r1, #0]
 8008da8:	f04f 30ff 	movhi.w	r0, #4294967295
 8008dac:	bf98      	it	ls
 8008dae:	2001      	movls	r0, #1
 8008db0:	4770      	bx	lr
 8008db2:	4608      	mov	r0, r1
 8008db4:	4770      	bx	lr

08008db6 <abort>:
 8008db6:	b508      	push	{r3, lr}
 8008db8:	2006      	movs	r0, #6
 8008dba:	f000 f84d 	bl	8008e58 <raise>
 8008dbe:	2001      	movs	r0, #1
 8008dc0:	f7f8 fce2 	bl	8001788 <_exit>

08008dc4 <_fstat_r>:
 8008dc4:	b538      	push	{r3, r4, r5, lr}
 8008dc6:	4d07      	ldr	r5, [pc, #28]	; (8008de4 <_fstat_r+0x20>)
 8008dc8:	2300      	movs	r3, #0
 8008dca:	4604      	mov	r4, r0
 8008dcc:	4608      	mov	r0, r1
 8008dce:	4611      	mov	r1, r2
 8008dd0:	602b      	str	r3, [r5, #0]
 8008dd2:	f7f8 fd28 	bl	8001826 <_fstat>
 8008dd6:	1c43      	adds	r3, r0, #1
 8008dd8:	d102      	bne.n	8008de0 <_fstat_r+0x1c>
 8008dda:	682b      	ldr	r3, [r5, #0]
 8008ddc:	b103      	cbz	r3, 8008de0 <_fstat_r+0x1c>
 8008dde:	6023      	str	r3, [r4, #0]
 8008de0:	bd38      	pop	{r3, r4, r5, pc}
 8008de2:	bf00      	nop
 8008de4:	20000418 	.word	0x20000418

08008de8 <_isatty_r>:
 8008de8:	b538      	push	{r3, r4, r5, lr}
 8008dea:	4d06      	ldr	r5, [pc, #24]	; (8008e04 <_isatty_r+0x1c>)
 8008dec:	2300      	movs	r3, #0
 8008dee:	4604      	mov	r4, r0
 8008df0:	4608      	mov	r0, r1
 8008df2:	602b      	str	r3, [r5, #0]
 8008df4:	f7f8 fd27 	bl	8001846 <_isatty>
 8008df8:	1c43      	adds	r3, r0, #1
 8008dfa:	d102      	bne.n	8008e02 <_isatty_r+0x1a>
 8008dfc:	682b      	ldr	r3, [r5, #0]
 8008dfe:	b103      	cbz	r3, 8008e02 <_isatty_r+0x1a>
 8008e00:	6023      	str	r3, [r4, #0]
 8008e02:	bd38      	pop	{r3, r4, r5, pc}
 8008e04:	20000418 	.word	0x20000418

08008e08 <_raise_r>:
 8008e08:	291f      	cmp	r1, #31
 8008e0a:	b538      	push	{r3, r4, r5, lr}
 8008e0c:	4604      	mov	r4, r0
 8008e0e:	460d      	mov	r5, r1
 8008e10:	d904      	bls.n	8008e1c <_raise_r+0x14>
 8008e12:	2316      	movs	r3, #22
 8008e14:	6003      	str	r3, [r0, #0]
 8008e16:	f04f 30ff 	mov.w	r0, #4294967295
 8008e1a:	bd38      	pop	{r3, r4, r5, pc}
 8008e1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008e1e:	b112      	cbz	r2, 8008e26 <_raise_r+0x1e>
 8008e20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e24:	b94b      	cbnz	r3, 8008e3a <_raise_r+0x32>
 8008e26:	4620      	mov	r0, r4
 8008e28:	f000 f830 	bl	8008e8c <_getpid_r>
 8008e2c:	462a      	mov	r2, r5
 8008e2e:	4601      	mov	r1, r0
 8008e30:	4620      	mov	r0, r4
 8008e32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e36:	f000 b817 	b.w	8008e68 <_kill_r>
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d00a      	beq.n	8008e54 <_raise_r+0x4c>
 8008e3e:	1c59      	adds	r1, r3, #1
 8008e40:	d103      	bne.n	8008e4a <_raise_r+0x42>
 8008e42:	2316      	movs	r3, #22
 8008e44:	6003      	str	r3, [r0, #0]
 8008e46:	2001      	movs	r0, #1
 8008e48:	e7e7      	b.n	8008e1a <_raise_r+0x12>
 8008e4a:	2400      	movs	r4, #0
 8008e4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e50:	4628      	mov	r0, r5
 8008e52:	4798      	blx	r3
 8008e54:	2000      	movs	r0, #0
 8008e56:	e7e0      	b.n	8008e1a <_raise_r+0x12>

08008e58 <raise>:
 8008e58:	4b02      	ldr	r3, [pc, #8]	; (8008e64 <raise+0xc>)
 8008e5a:	4601      	mov	r1, r0
 8008e5c:	6818      	ldr	r0, [r3, #0]
 8008e5e:	f7ff bfd3 	b.w	8008e08 <_raise_r>
 8008e62:	bf00      	nop
 8008e64:	20000010 	.word	0x20000010

08008e68 <_kill_r>:
 8008e68:	b538      	push	{r3, r4, r5, lr}
 8008e6a:	4d07      	ldr	r5, [pc, #28]	; (8008e88 <_kill_r+0x20>)
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	4604      	mov	r4, r0
 8008e70:	4608      	mov	r0, r1
 8008e72:	4611      	mov	r1, r2
 8008e74:	602b      	str	r3, [r5, #0]
 8008e76:	f7f8 fc77 	bl	8001768 <_kill>
 8008e7a:	1c43      	adds	r3, r0, #1
 8008e7c:	d102      	bne.n	8008e84 <_kill_r+0x1c>
 8008e7e:	682b      	ldr	r3, [r5, #0]
 8008e80:	b103      	cbz	r3, 8008e84 <_kill_r+0x1c>
 8008e82:	6023      	str	r3, [r4, #0]
 8008e84:	bd38      	pop	{r3, r4, r5, pc}
 8008e86:	bf00      	nop
 8008e88:	20000418 	.word	0x20000418

08008e8c <_getpid_r>:
 8008e8c:	f7f8 bc64 	b.w	8001758 <_getpid>

08008e90 <_init>:
 8008e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e92:	bf00      	nop
 8008e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e96:	bc08      	pop	{r3}
 8008e98:	469e      	mov	lr, r3
 8008e9a:	4770      	bx	lr

08008e9c <_fini>:
 8008e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9e:	bf00      	nop
 8008ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ea2:	bc08      	pop	{r3}
 8008ea4:	469e      	mov	lr, r3
 8008ea6:	4770      	bx	lr
