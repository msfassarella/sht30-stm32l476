
prj1_sht30.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b204  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004c70  0800b398  0800b398  0001b398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010008  08010008  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  08010008  08010008  00020008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010010  08010010  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010010  08010010  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010014  08010014  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08010018  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000644  20000204  0801021c  00030204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000848  0801021c  00030848  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172cf  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f94  00000000  00000000  00047503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  0004a498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  0004b920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c9f  00000000  00000000  0004cc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018878  00000000  00000000  00075907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f802d  00000000  00000000  0008e17f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001861ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b24  00000000  00000000  001861fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b37c 	.word	0x0800b37c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	0800b37c 	.word	0x0800b37c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f52:	f001 ffe6 	bl	8002f22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f56:	f000 f82d 	bl	8000fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5a:	f000 f9a3 	bl	80012a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f5e:	f000 f97b 	bl	8001258 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f62:	f000 f949 	bl	80011f8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f66:	f000 f877 	bl	8001058 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000f6a:	f000 f8b5 	bl	80010d8 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000f6e:	f000 f8f3 	bl	8001158 <MX_TIM2_Init>
//  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  bool pressed = false;
 8000f72:	2300      	movs	r3, #0
 8000f74:	73fb      	strb	r3, [r7, #15]
  int16_t probe_ret;
  uint16_t status_reg;
  HAL_TIM_Base_Start_IT(&htim2);
 8000f76:	480d      	ldr	r0, [pc, #52]	; (8000fac <main+0x60>)
 8000f78:	f004 fd5e 	bl	8005a38 <HAL_TIM_Base_Start_IT>
  while (1)
  {
	  pressed = button_press_action();
 8000f7c:	f000 f9ec 	bl	8001358 <button_press_action>
 8000f80:	4603      	mov	r3, r0
 8000f82:	73fb      	strb	r3, [r7, #15]
	  if (pressed){
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0f8      	beq.n	8000f7c <main+0x30>
		 HAL_Delay(100);
 8000f8a:	2064      	movs	r0, #100	; 0x64
 8000f8c:	f002 f83e 	bl	800300c <HAL_Delay>
		 //probe_ret = sht3x_get_status(&hi2c1, SHT3X_I2C_ADDR_DFLT, &status_reg );
//		 printf("probe_ret %04X, %04X\n", probe_ret, status_reg);
		 //probe_ret = sht3x_measure(&hi2c1, SHT3X_I2C_ADDR_DFLT << 1);
		 HAL_Delay(100);
 8000f90:	2064      	movs	r0, #100	; 0x64
 8000f92:	f002 f83b 	bl	800300c <HAL_Delay>
		 int32_t temp, umidade;
		 //probe_ret = sht3x_read(&hi2c1, SHT3X_I2C_ADDR_DFLT << 1, &temp, &umidade );
	     printf("probe_ret %04X, %d, %d\n", probe_ret, temp, umidade);
 8000f96:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <main+0x64>)
 8000fa0:	f006 fecc 	bl	8007d3c <iprintf>

	     ssd1306_TestAll();
 8000fa4:	f001 ff44 	bl	8002e30 <ssd1306_TestAll>
	  pressed = button_press_action();
 8000fa8:	e7e8      	b.n	8000f7c <main+0x30>
 8000faa:	bf00      	nop
 8000fac:	200002c8 	.word	0x200002c8
 8000fb0:	0800b398 	.word	0x0800b398

08000fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b096      	sub	sp, #88	; 0x58
 8000fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	2244      	movs	r2, #68	; 0x44
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f006 fa48 	bl	8007458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	463b      	mov	r3, r7
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fd6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fda:	f003 f9c3 	bl	8004364 <HAL_PWREx_ControlVoltageScaling>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fe4:	f000 f9df 	bl	80013a6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff2:	2310      	movs	r3, #16
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ffe:	2301      	movs	r3, #1
 8001000:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001002:	2308      	movs	r3, #8
 8001004:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001006:	2307      	movs	r3, #7
 8001008:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800100a:	2302      	movs	r3, #2
 800100c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 800100e:	2308      	movs	r3, #8
 8001010:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4618      	mov	r0, r3
 8001018:	f003 f9fa 	bl	8004410 <HAL_RCC_OscConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001022:	f000 f9c0 	bl	80013a6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001026:	230f      	movs	r3, #15
 8001028:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102a:	2303      	movs	r3, #3
 800102c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800103a:	463b      	mov	r3, r7
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f003 fdc2 	bl	8004bc8 <HAL_RCC_ClockConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800104a:	f000 f9ac 	bl	80013a6 <Error_Handler>
  }
}
 800104e:	bf00      	nop
 8001050:	3758      	adds	r7, #88	; 0x58
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <MX_I2C1_Init+0x74>)
 800105e:	4a1c      	ldr	r2, [pc, #112]	; (80010d0 <MX_I2C1_Init+0x78>)
 8001060:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010131D;
 8001062:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <MX_I2C1_Init+0x74>)
 8001064:	4a1b      	ldr	r2, [pc, #108]	; (80010d4 <MX_I2C1_Init+0x7c>)
 8001066:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001068:	4b18      	ldr	r3, [pc, #96]	; (80010cc <MX_I2C1_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <MX_I2C1_Init+0x74>)
 8001070:	2201      	movs	r2, #1
 8001072:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <MX_I2C1_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800107a:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_I2C1_Init+0x74>)
 800107c:	2200      	movs	r2, #0
 800107e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <MX_I2C1_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_I2C1_Init+0x74>)
 8001088:	2200      	movs	r2, #0
 800108a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MX_I2C1_Init+0x74>)
 800108e:	2200      	movs	r2, #0
 8001090:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001092:	480e      	ldr	r0, [pc, #56]	; (80010cc <MX_I2C1_Init+0x74>)
 8001094:	f002 fcca 	bl	8003a2c <HAL_I2C_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800109e:	f000 f982 	bl	80013a6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010a2:	2100      	movs	r1, #0
 80010a4:	4809      	ldr	r0, [pc, #36]	; (80010cc <MX_I2C1_Init+0x74>)
 80010a6:	f003 f8b7 	bl	8004218 <HAL_I2CEx_ConfigAnalogFilter>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010b0:	f000 f979 	bl	80013a6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 2) != HAL_OK)
 80010b4:	2102      	movs	r1, #2
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_I2C1_Init+0x74>)
 80010b8:	f003 f8f9 	bl	80042ae <HAL_I2CEx_ConfigDigitalFilter>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010c2:	f000 f970 	bl	80013a6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000220 	.word	0x20000220
 80010d0:	40005400 	.word	0x40005400
 80010d4:	2010131d 	.word	0x2010131d

080010d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <MX_I2C2_Init+0x74>)
 80010de:	4a1c      	ldr	r2, [pc, #112]	; (8001150 <MX_I2C2_Init+0x78>)
 80010e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_I2C2_Init+0x74>)
 80010e4:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <MX_I2C2_Init+0x7c>)
 80010e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <MX_I2C2_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_I2C2_Init+0x74>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <MX_I2C2_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_I2C2_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <MX_I2C2_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_I2C2_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_I2C2_Init+0x74>)
 800110e:	2200      	movs	r2, #0
 8001110:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001112:	480e      	ldr	r0, [pc, #56]	; (800114c <MX_I2C2_Init+0x74>)
 8001114:	f002 fc8a 	bl	8003a2c <HAL_I2C_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800111e:	f000 f942 	bl	80013a6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001122:	2100      	movs	r1, #0
 8001124:	4809      	ldr	r0, [pc, #36]	; (800114c <MX_I2C2_Init+0x74>)
 8001126:	f003 f877 	bl	8004218 <HAL_I2CEx_ConfigAnalogFilter>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001130:	f000 f939 	bl	80013a6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001134:	2100      	movs	r1, #0
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_I2C2_Init+0x74>)
 8001138:	f003 f8b9 	bl	80042ae <HAL_I2CEx_ConfigDigitalFilter>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001142:	f000 f930 	bl	80013a6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000274 	.word	0x20000274
 8001150:	40005800 	.word	0x40005800
 8001154:	00303d5b 	.word	0x00303d5b

08001158 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115e:	f107 0310 	add.w	r3, r7, #16
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001176:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <MX_TIM2_Init+0x9c>)
 8001178:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800117c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <MX_TIM2_Init+0x9c>)
 8001180:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001184:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001186:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <MX_TIM2_Init+0x9c>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <MX_TIM2_Init+0x9c>)
 800118e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001192:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_TIM2_Init+0x9c>)
 8001196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800119a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <MX_TIM2_Init+0x9c>)
 800119e:	2280      	movs	r2, #128	; 0x80
 80011a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011a2:	4814      	ldr	r0, [pc, #80]	; (80011f4 <MX_TIM2_Init+0x9c>)
 80011a4:	f004 fbf0 	bl	8005988 <HAL_TIM_Base_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80011ae:	f000 f8fa 	bl	80013a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	4619      	mov	r1, r3
 80011be:	480d      	ldr	r0, [pc, #52]	; (80011f4 <MX_TIM2_Init+0x9c>)
 80011c0:	f004 fdc9 	bl	8005d56 <HAL_TIM_ConfigClockSource>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80011ca:	f000 f8ec 	bl	80013a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <MX_TIM2_Init+0x9c>)
 80011dc:	f004 ffe0 	bl	80061a0 <HAL_TIMEx_MasterConfigSynchronization>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80011e6:	f000 f8de 	bl	80013a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	3720      	adds	r7, #32
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200002c8 	.word	0x200002c8

080011f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <MX_USART2_UART_Init+0x58>)
 80011fe:	4a15      	ldr	r2, [pc, #84]	; (8001254 <MX_USART2_UART_Init+0x5c>)
 8001200:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <MX_USART2_UART_Init+0x58>)
 8001204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001208:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_USART2_UART_Init+0x58>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MX_USART2_UART_Init+0x58>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_USART2_UART_Init+0x58>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_USART2_UART_Init+0x58>)
 800121e:	220c      	movs	r2, #12
 8001220:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <MX_USART2_UART_Init+0x58>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_USART2_UART_Init+0x58>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <MX_USART2_UART_Init+0x58>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_USART2_UART_Init+0x58>)
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_USART2_UART_Init+0x58>)
 800123c:	f005 f856 	bl	80062ec <HAL_UART_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001246:	f000 f8ae 	bl	80013a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000314 	.word	0x20000314
 8001254:	40004400 	.word	0x40004400

08001258 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <MX_DMA_Init+0x48>)
 8001260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001262:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <MX_DMA_Init+0x48>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6493      	str	r3, [r2, #72]	; 0x48
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <MX_DMA_Init+0x48>)
 800126c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	2010      	movs	r0, #16
 800127c:	f001 ffc5 	bl	800320a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001280:	2010      	movs	r0, #16
 8001282:	f001 ffde 	bl	8003242 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	2011      	movs	r0, #17
 800128c:	f001 ffbd 	bl	800320a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001290:	2011      	movs	r0, #17
 8001292:	f001 ffd6 	bl	8003242 <HAL_NVIC_EnableIRQ>

}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000

080012a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ba:	4b25      	ldr	r3, [pc, #148]	; (8001350 <MX_GPIO_Init+0xac>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	4a24      	ldr	r2, [pc, #144]	; (8001350 <MX_GPIO_Init+0xac>)
 80012c0:	f043 0304 	orr.w	r3, r3, #4
 80012c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c6:	4b22      	ldr	r3, [pc, #136]	; (8001350 <MX_GPIO_Init+0xac>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <MX_GPIO_Init+0xac>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	4a1e      	ldr	r2, [pc, #120]	; (8001350 <MX_GPIO_Init+0xac>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012de:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <MX_GPIO_Init+0xac>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ea:	4b19      	ldr	r3, [pc, #100]	; (8001350 <MX_GPIO_Init+0xac>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	4a18      	ldr	r2, [pc, #96]	; (8001350 <MX_GPIO_Init+0xac>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <MX_GPIO_Init+0xac>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	2120      	movs	r1, #32
 8001306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130a:	f002 fb5d 	bl	80039c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800130e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001312:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	4619      	mov	r1, r3
 8001322:	480c      	ldr	r0, [pc, #48]	; (8001354 <MX_GPIO_Init+0xb0>)
 8001324:	f002 f98e 	bl	8003644 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8001328:	2320      	movs	r3, #32
 800132a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132c:	2301      	movs	r3, #1
 800132e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	4619      	mov	r1, r3
 800133e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001342:	f002 f97f 	bl	8003644 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001346:	bf00      	nop
 8001348:	3720      	adds	r7, #32
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000
 8001354:	48000800 	.word	0x48000800

08001358 <button_press_action>:

/* USER CODE BEGIN 4 */
bool button_press_action(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
	bool press = false;
 800135e:	2300      	movs	r3, #0
 8001360:	71fb      	strb	r3, [r7, #7]

	  if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port,USER_BUTTON_Pin) == GPIO_PIN_SET){
 8001362:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001366:	4808      	ldr	r0, [pc, #32]	; (8001388 <button_press_action+0x30>)
 8001368:	f002 fb16 	bl	8003998 <HAL_GPIO_ReadPin>
 800136c:	4603      	mov	r3, r0
 800136e:	2b01      	cmp	r3, #1
 8001370:	d102      	bne.n	8001378 <button_press_action+0x20>
	     //HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
	     press = false;
 8001372:	2300      	movs	r3, #0
 8001374:	71fb      	strb	r3, [r7, #7]
 8001376:	e001      	b.n	800137c <button_press_action+0x24>
	  }
	  else{
		 //HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
		 press = true;
 8001378:	2301      	movs	r3, #1
 800137a:	71fb      	strb	r3, [r7, #7]
	  }

	  return press;
 800137c:	79fb      	ldrb	r3, [r7, #7]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	48000800 	.word	0x48000800

0800138c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
    HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8001394:	2120      	movs	r1, #32
 8001396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139a:	f002 fb2d 	bl	80039f8 <HAL_GPIO_TogglePin>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013aa:	b672      	cpsid	i
}
 80013ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ae:	e7fe      	b.n	80013ae <Error_Handler+0x8>

080013b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_MspInit+0x50>)
 80013b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ba:	4a11      	ldr	r2, [pc, #68]	; (8001400 <HAL_MspInit+0x50>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6613      	str	r3, [r2, #96]	; 0x60
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <HAL_MspInit+0x50>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <HAL_MspInit+0x50>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d2:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <HAL_MspInit+0x50>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	6593      	str	r3, [r2, #88]	; 0x58
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <HAL_MspInit+0x50>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	2005      	movs	r0, #5
 80013ec:	f001 ff0d 	bl	800320a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80013f0:	2005      	movs	r0, #5
 80013f2:	f001 ff26 	bl	8003242 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000

08001404 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b0ae      	sub	sp, #184	; 0xb8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	2288      	movs	r2, #136	; 0x88
 8001422:	2100      	movs	r1, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f006 f817 	bl	8007458 <memset>
  if(hi2c->Instance==I2C1)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a48      	ldr	r2, [pc, #288]	; (8001550 <HAL_I2C_MspInit+0x14c>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d148      	bne.n	80014c6 <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001434:	2340      	movs	r3, #64	; 0x40
 8001436:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001438:	2300      	movs	r3, #0
 800143a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	4618      	mov	r0, r3
 8001442:	f003 fde5 	bl	8005010 <HAL_RCCEx_PeriphCLKConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800144c:	f7ff ffab 	bl	80013a6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001450:	4b40      	ldr	r3, [pc, #256]	; (8001554 <HAL_I2C_MspInit+0x150>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001454:	4a3f      	ldr	r2, [pc, #252]	; (8001554 <HAL_I2C_MspInit+0x150>)
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145c:	4b3d      	ldr	r3, [pc, #244]	; (8001554 <HAL_I2C_MspInit+0x150>)
 800145e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	61bb      	str	r3, [r7, #24]
 8001466:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001468:	f44f 7340 	mov.w	r3, #768	; 0x300
 800146c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001470:	2312      	movs	r3, #18
 8001472:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001482:	2304      	movs	r3, #4
 8001484:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001488:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800148c:	4619      	mov	r1, r3
 800148e:	4832      	ldr	r0, [pc, #200]	; (8001558 <HAL_I2C_MspInit+0x154>)
 8001490:	f002 f8d8 	bl	8003644 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 8001494:	4b31      	ldr	r3, [pc, #196]	; (800155c <HAL_I2C_MspInit+0x158>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	4a30      	ldr	r2, [pc, #192]	; (800155c <HAL_I2C_MspInit+0x158>)
 800149a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800149e:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 80014a0:	4b2e      	ldr	r3, [pc, #184]	; (800155c <HAL_I2C_MspInit+0x158>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	4a2d      	ldr	r2, [pc, #180]	; (800155c <HAL_I2C_MspInit+0x158>)
 80014a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014aa:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ac:	4b29      	ldr	r3, [pc, #164]	; (8001554 <HAL_I2C_MspInit+0x150>)
 80014ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b0:	4a28      	ldr	r2, [pc, #160]	; (8001554 <HAL_I2C_MspInit+0x150>)
 80014b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014b6:	6593      	str	r3, [r2, #88]	; 0x58
 80014b8:	4b26      	ldr	r3, [pc, #152]	; (8001554 <HAL_I2C_MspInit+0x150>)
 80014ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014c4:	e040      	b.n	8001548 <HAL_I2C_MspInit+0x144>
  else if(hi2c->Instance==I2C2)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a25      	ldr	r2, [pc, #148]	; (8001560 <HAL_I2C_MspInit+0x15c>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d13b      	bne.n	8001548 <HAL_I2C_MspInit+0x144>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	4618      	mov	r0, r3
 80014de:	f003 fd97 	bl	8005010 <HAL_RCCEx_PeriphCLKConfig>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_I2C_MspInit+0xe8>
      Error_Handler();
 80014e8:	f7ff ff5d 	bl	80013a6 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <HAL_I2C_MspInit+0x150>)
 80014ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f0:	4a18      	ldr	r2, [pc, #96]	; (8001554 <HAL_I2C_MspInit+0x150>)
 80014f2:	f043 0302 	orr.w	r3, r3, #2
 80014f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_I2C_MspInit+0x150>)
 80014fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001504:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001508:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800150c:	2312      	movs	r3, #18
 800150e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800151e:	2304      	movs	r3, #4
 8001520:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001524:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001528:	4619      	mov	r1, r3
 800152a:	480b      	ldr	r0, [pc, #44]	; (8001558 <HAL_I2C_MspInit+0x154>)
 800152c:	f002 f88a 	bl	8003644 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <HAL_I2C_MspInit+0x150>)
 8001532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001534:	4a07      	ldr	r2, [pc, #28]	; (8001554 <HAL_I2C_MspInit+0x150>)
 8001536:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800153a:	6593      	str	r3, [r2, #88]	; 0x58
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_I2C_MspInit+0x150>)
 800153e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001540:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
}
 8001548:	bf00      	nop
 800154a:	37b8      	adds	r7, #184	; 0xb8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40005400 	.word	0x40005400
 8001554:	40021000 	.word	0x40021000
 8001558:	48000400 	.word	0x48000400
 800155c:	40010000 	.word	0x40010000
 8001560:	40005800 	.word	0x40005800

08001564 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001574:	d113      	bne.n	800159e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <HAL_TIM_Base_MspInit+0x44>)
 8001578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157a:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <HAL_TIM_Base_MspInit+0x44>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6593      	str	r3, [r2, #88]	; 0x58
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <HAL_TIM_Base_MspInit+0x44>)
 8001584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	201c      	movs	r0, #28
 8001594:	f001 fe39 	bl	800320a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001598:	201c      	movs	r0, #28
 800159a:	f001 fe52 	bl	8003242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40021000 	.word	0x40021000

080015ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b0ac      	sub	sp, #176	; 0xb0
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2288      	movs	r2, #136	; 0x88
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f005 ff43 	bl	8007458 <memset>
  if(huart->Instance==USART2)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a4f      	ldr	r2, [pc, #316]	; (8001714 <HAL_UART_MspInit+0x168>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	f040 8096 	bne.w	800170a <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015de:	2302      	movs	r3, #2
 80015e0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 fd10 	bl	8005010 <HAL_RCCEx_PeriphCLKConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015f6:	f7ff fed6 	bl	80013a6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015fa:	4b47      	ldr	r3, [pc, #284]	; (8001718 <HAL_UART_MspInit+0x16c>)
 80015fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fe:	4a46      	ldr	r2, [pc, #280]	; (8001718 <HAL_UART_MspInit+0x16c>)
 8001600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001604:	6593      	str	r3, [r2, #88]	; 0x58
 8001606:	4b44      	ldr	r3, [pc, #272]	; (8001718 <HAL_UART_MspInit+0x16c>)
 8001608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	4b41      	ldr	r3, [pc, #260]	; (8001718 <HAL_UART_MspInit+0x16c>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	4a40      	ldr	r2, [pc, #256]	; (8001718 <HAL_UART_MspInit+0x16c>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800161e:	4b3e      	ldr	r3, [pc, #248]	; (8001718 <HAL_UART_MspInit+0x16c>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800162a:	230c      	movs	r3, #12
 800162c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001642:	2307      	movs	r3, #7
 8001644:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001648:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800164c:	4619      	mov	r1, r3
 800164e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001652:	f001 fff7 	bl	8003644 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001656:	4b31      	ldr	r3, [pc, #196]	; (800171c <HAL_UART_MspInit+0x170>)
 8001658:	4a31      	ldr	r2, [pc, #196]	; (8001720 <HAL_UART_MspInit+0x174>)
 800165a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800165c:	4b2f      	ldr	r3, [pc, #188]	; (800171c <HAL_UART_MspInit+0x170>)
 800165e:	2202      	movs	r2, #2
 8001660:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001662:	4b2e      	ldr	r3, [pc, #184]	; (800171c <HAL_UART_MspInit+0x170>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001668:	4b2c      	ldr	r3, [pc, #176]	; (800171c <HAL_UART_MspInit+0x170>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800166e:	4b2b      	ldr	r3, [pc, #172]	; (800171c <HAL_UART_MspInit+0x170>)
 8001670:	2280      	movs	r2, #128	; 0x80
 8001672:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001674:	4b29      	ldr	r3, [pc, #164]	; (800171c <HAL_UART_MspInit+0x170>)
 8001676:	2200      	movs	r2, #0
 8001678:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800167a:	4b28      	ldr	r3, [pc, #160]	; (800171c <HAL_UART_MspInit+0x170>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001680:	4b26      	ldr	r3, [pc, #152]	; (800171c <HAL_UART_MspInit+0x170>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001686:	4b25      	ldr	r3, [pc, #148]	; (800171c <HAL_UART_MspInit+0x170>)
 8001688:	2200      	movs	r2, #0
 800168a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800168c:	4823      	ldr	r0, [pc, #140]	; (800171c <HAL_UART_MspInit+0x170>)
 800168e:	f001 fdf3 	bl	8003278 <HAL_DMA_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8001698:	f7ff fe85 	bl	80013a6 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a1f      	ldr	r2, [pc, #124]	; (800171c <HAL_UART_MspInit+0x170>)
 80016a0:	671a      	str	r2, [r3, #112]	; 0x70
 80016a2:	4a1e      	ldr	r2, [pc, #120]	; (800171c <HAL_UART_MspInit+0x170>)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80016a8:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <HAL_UART_MspInit+0x178>)
 80016aa:	4a1f      	ldr	r2, [pc, #124]	; (8001728 <HAL_UART_MspInit+0x17c>)
 80016ac:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80016ae:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <HAL_UART_MspInit+0x178>)
 80016b0:	2202      	movs	r2, #2
 80016b2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <HAL_UART_MspInit+0x178>)
 80016b6:	2210      	movs	r2, #16
 80016b8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ba:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <HAL_UART_MspInit+0x178>)
 80016bc:	2200      	movs	r2, #0
 80016be:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016c0:	4b18      	ldr	r3, [pc, #96]	; (8001724 <HAL_UART_MspInit+0x178>)
 80016c2:	2280      	movs	r2, #128	; 0x80
 80016c4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016c6:	4b17      	ldr	r3, [pc, #92]	; (8001724 <HAL_UART_MspInit+0x178>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016cc:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_UART_MspInit+0x178>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80016d2:	4b14      	ldr	r3, [pc, #80]	; (8001724 <HAL_UART_MspInit+0x178>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <HAL_UART_MspInit+0x178>)
 80016da:	2200      	movs	r2, #0
 80016dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80016de:	4811      	ldr	r0, [pc, #68]	; (8001724 <HAL_UART_MspInit+0x178>)
 80016e0:	f001 fdca 	bl	8003278 <HAL_DMA_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 80016ea:	f7ff fe5c 	bl	80013a6 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a0c      	ldr	r2, [pc, #48]	; (8001724 <HAL_UART_MspInit+0x178>)
 80016f2:	66da      	str	r2, [r3, #108]	; 0x6c
 80016f4:	4a0b      	ldr	r2, [pc, #44]	; (8001724 <HAL_UART_MspInit+0x178>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	2026      	movs	r0, #38	; 0x26
 8001700:	f001 fd83 	bl	800320a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001704:	2026      	movs	r0, #38	; 0x26
 8001706:	f001 fd9c 	bl	8003242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800170a:	bf00      	nop
 800170c:	37b0      	adds	r7, #176	; 0xb0
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40004400 	.word	0x40004400
 8001718:	40021000 	.word	0x40021000
 800171c:	20000398 	.word	0x20000398
 8001720:	4002006c 	.word	0x4002006c
 8001724:	200003e0 	.word	0x200003e0
 8001728:	40020080 	.word	0x40020080

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <NMI_Handler+0x4>

08001732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <HardFault_Handler+0x4>

08001738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <MemManage_Handler+0x4>

0800173e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <UsageFault_Handler+0x4>

0800174a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001778:	f001 fc28 	bl	8002fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}

08001780 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <DMA1_Channel6_IRQHandler+0x10>)
 8001796:	f001 fea6 	bl	80034e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000398 	.word	0x20000398

080017a4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <DMA1_Channel7_IRQHandler+0x10>)
 80017aa:	f001 fe9c 	bl	80034e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200003e0 	.word	0x200003e0

080017b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <TIM2_IRQHandler+0x10>)
 80017be:	f004 f9ab 	bl	8005b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200002c8 	.word	0x200002c8

080017cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <USART2_IRQHandler+0x10>)
 80017d2:	f004 fdd9 	bl	8006388 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000314 	.word	0x20000314

080017e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return 1;
 80017e4:	2301      	movs	r3, #1
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <_kill>:

int _kill(int pid, int sig)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017fa:	f005 fddb 	bl	80073b4 <__errno>
 80017fe:	4603      	mov	r3, r0
 8001800:	2216      	movs	r2, #22
 8001802:	601a      	str	r2, [r3, #0]
  return -1;
 8001804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <_exit>:

void _exit (int status)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ffe7 	bl	80017f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001822:	e7fe      	b.n	8001822 <_exit+0x12>

08001824 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	e00a      	b.n	800184c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001836:	f3af 8000 	nop.w
 800183a:	4601      	mov	r1, r0
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	60ba      	str	r2, [r7, #8]
 8001842:	b2ca      	uxtb	r2, r1
 8001844:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3301      	adds	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	429a      	cmp	r2, r3
 8001852:	dbf0      	blt.n	8001836 <_read+0x12>
  }

  return len;
 8001854:	687b      	ldr	r3, [r7, #4]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	e009      	b.n	8001884 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	60ba      	str	r2, [r7, #8]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	3301      	adds	r3, #1
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	429a      	cmp	r2, r3
 800188a:	dbf1      	blt.n	8001870 <_write+0x12>
  }
  return len;
 800188c:	687b      	ldr	r3, [r7, #4]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <_close>:

int _close(int file)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018be:	605a      	str	r2, [r3, #4]
  return 0;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <_isatty>:

int _isatty(int file)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018d6:	2301      	movs	r3, #1
}
 80018d8:	4618      	mov	r0, r3
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001908:	4a14      	ldr	r2, [pc, #80]	; (800195c <_sbrk+0x5c>)
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <_sbrk+0x60>)
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d102      	bne.n	8001922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <_sbrk+0x64>)
 800191e:	4a12      	ldr	r2, [pc, #72]	; (8001968 <_sbrk+0x68>)
 8001920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <_sbrk+0x64>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	429a      	cmp	r2, r3
 800192e:	d207      	bcs.n	8001940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001930:	f005 fd40 	bl	80073b4 <__errno>
 8001934:	4603      	mov	r3, r0
 8001936:	220c      	movs	r2, #12
 8001938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800193a:	f04f 33ff 	mov.w	r3, #4294967295
 800193e:	e009      	b.n	8001954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <_sbrk+0x64>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <_sbrk+0x64>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	4a05      	ldr	r2, [pc, #20]	; (8001964 <_sbrk+0x64>)
 8001950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001952:	68fb      	ldr	r3, [r7, #12]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20018000 	.word	0x20018000
 8001960:	00000400 	.word	0x00000400
 8001964:	20000428 	.word	0x20000428
 8001968:	20000848 	.word	0x20000848

0800196c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <SystemInit+0x20>)
 8001972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001976:	4a05      	ldr	r2, [pc, #20]	; (800198c <SystemInit+0x20>)
 8001978:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800197c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af04      	add	r7, sp, #16
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
 80019ae:	9302      	str	r3, [sp, #8]
 80019b0:	2301      	movs	r3, #1
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	1dfb      	adds	r3, r7, #7
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2301      	movs	r3, #1
 80019ba:	2200      	movs	r2, #0
 80019bc:	2178      	movs	r1, #120	; 0x78
 80019be:	4803      	ldr	r0, [pc, #12]	; (80019cc <ssd1306_WriteCommand+0x2c>)
 80019c0:	f002 f8c4 	bl	8003b4c <HAL_I2C_Mem_Write>
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000274 	.word	0x20000274

080019d0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af04      	add	r7, sp, #16
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	f04f 32ff 	mov.w	r2, #4294967295
 80019e2:	9202      	str	r2, [sp, #8]
 80019e4:	9301      	str	r3, [sp, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2301      	movs	r3, #1
 80019ec:	2240      	movs	r2, #64	; 0x40
 80019ee:	2178      	movs	r1, #120	; 0x78
 80019f0:	4803      	ldr	r0, [pc, #12]	; (8001a00 <ssd1306_WriteData+0x30>)
 80019f2:	f002 f8ab 	bl	8003b4c <HAL_I2C_Mem_Write>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000274 	.word	0x20000274

08001a04 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001a08:	f7ff ffc2 	bl	8001990 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001a0c:	2064      	movs	r0, #100	; 0x64
 8001a0e:	f001 fafd 	bl	800300c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001a12:	2000      	movs	r0, #0
 8001a14:	f000 ff4c 	bl	80028b0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001a18:	2020      	movs	r0, #32
 8001a1a:	f7ff ffc1 	bl	80019a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f7ff ffbe 	bl	80019a0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001a24:	20b0      	movs	r0, #176	; 0xb0
 8001a26:	f7ff ffbb 	bl	80019a0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001a2a:	20c8      	movs	r0, #200	; 0xc8
 8001a2c:	f7ff ffb8 	bl	80019a0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001a30:	2000      	movs	r0, #0
 8001a32:	f7ff ffb5 	bl	80019a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001a36:	2010      	movs	r0, #16
 8001a38:	f7ff ffb2 	bl	80019a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001a3c:	2040      	movs	r0, #64	; 0x40
 8001a3e:	f7ff ffaf 	bl	80019a0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001a42:	20ff      	movs	r0, #255	; 0xff
 8001a44:	f000 ff20 	bl	8002888 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001a48:	20a1      	movs	r0, #161	; 0xa1
 8001a4a:	f7ff ffa9 	bl	80019a0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001a4e:	20a6      	movs	r0, #166	; 0xa6
 8001a50:	f7ff ffa6 	bl	80019a0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001a54:	20a8      	movs	r0, #168	; 0xa8
 8001a56:	f7ff ffa3 	bl	80019a0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001a5a:	203f      	movs	r0, #63	; 0x3f
 8001a5c:	f7ff ffa0 	bl	80019a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001a60:	20a4      	movs	r0, #164	; 0xa4
 8001a62:	f7ff ff9d 	bl	80019a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001a66:	20d3      	movs	r0, #211	; 0xd3
 8001a68:	f7ff ff9a 	bl	80019a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f7ff ff97 	bl	80019a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001a72:	20d5      	movs	r0, #213	; 0xd5
 8001a74:	f7ff ff94 	bl	80019a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001a78:	20f0      	movs	r0, #240	; 0xf0
 8001a7a:	f7ff ff91 	bl	80019a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001a7e:	20d9      	movs	r0, #217	; 0xd9
 8001a80:	f7ff ff8e 	bl	80019a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001a84:	2022      	movs	r0, #34	; 0x22
 8001a86:	f7ff ff8b 	bl	80019a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001a8a:	20da      	movs	r0, #218	; 0xda
 8001a8c:	f7ff ff88 	bl	80019a0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001a90:	2012      	movs	r0, #18
 8001a92:	f7ff ff85 	bl	80019a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001a96:	20db      	movs	r0, #219	; 0xdb
 8001a98:	f7ff ff82 	bl	80019a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001a9c:	2020      	movs	r0, #32
 8001a9e:	f7ff ff7f 	bl	80019a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001aa2:	208d      	movs	r0, #141	; 0x8d
 8001aa4:	f7ff ff7c 	bl	80019a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001aa8:	2014      	movs	r0, #20
 8001aaa:	f7ff ff79 	bl	80019a0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f000 fefe 	bl	80028b0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f000 f80f 	bl	8001ad8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001aba:	f000 f831 	bl	8001b20 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <ssd1306_Init+0xd0>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <ssd1306_Init+0xd0>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001aca:	4b02      	ldr	r3, [pc, #8]	; (8001ad4 <ssd1306_Init+0xd0>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	711a      	strb	r2, [r3, #4]
}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	2000082c 	.word	0x2000082c

08001ad8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	e00d      	b.n	8001b04 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <ssd1306_Fill+0x1a>
 8001aee:	2100      	movs	r1, #0
 8001af0:	e000      	b.n	8001af4 <ssd1306_Fill+0x1c>
 8001af2:	21ff      	movs	r1, #255	; 0xff
 8001af4:	4a09      	ldr	r2, [pc, #36]	; (8001b1c <ssd1306_Fill+0x44>)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4413      	add	r3, r2
 8001afa:	460a      	mov	r2, r1
 8001afc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	3301      	adds	r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b0a:	d3ed      	bcc.n	8001ae8 <ssd1306_Fill+0x10>
    }
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	2000042c 	.word	0x2000042c

08001b20 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b26:	2300      	movs	r3, #0
 8001b28:	71fb      	strb	r3, [r7, #7]
 8001b2a:	e016      	b.n	8001b5a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	3b50      	subs	r3, #80	; 0x50
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff ff34 	bl	80019a0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f7ff ff31 	bl	80019a0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001b3e:	2010      	movs	r0, #16
 8001b40:	f7ff ff2e 	bl	80019a0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	01db      	lsls	r3, r3, #7
 8001b48:	4a08      	ldr	r2, [pc, #32]	; (8001b6c <ssd1306_UpdateScreen+0x4c>)
 8001b4a:	4413      	add	r3, r2
 8001b4c:	2180      	movs	r1, #128	; 0x80
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff ff3e 	bl	80019d0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	3301      	adds	r3, #1
 8001b58:	71fb      	strb	r3, [r7, #7]
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	2b07      	cmp	r3, #7
 8001b5e:	d9e5      	bls.n	8001b2c <ssd1306_UpdateScreen+0xc>
    }
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	2000042c 	.word	0x2000042c

08001b70 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	71fb      	strb	r3, [r7, #7]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	71bb      	strb	r3, [r7, #6]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	db3d      	blt.n	8001c06 <ssd1306_DrawPixel+0x96>
 8001b8a:	79bb      	ldrb	r3, [r7, #6]
 8001b8c:	2b3f      	cmp	r3, #63	; 0x3f
 8001b8e:	d83a      	bhi.n	8001c06 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001b90:	797b      	ldrb	r3, [r7, #5]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d11a      	bne.n	8001bcc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b96:	79fa      	ldrb	r2, [r7, #7]
 8001b98:	79bb      	ldrb	r3, [r7, #6]
 8001b9a:	08db      	lsrs	r3, r3, #3
 8001b9c:	b2d8      	uxtb	r0, r3
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	01db      	lsls	r3, r3, #7
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4a1b      	ldr	r2, [pc, #108]	; (8001c14 <ssd1306_DrawPixel+0xa4>)
 8001ba6:	5cd3      	ldrb	r3, [r2, r3]
 8001ba8:	b25a      	sxtb	r2, r3
 8001baa:	79bb      	ldrb	r3, [r7, #6]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb6:	b25b      	sxtb	r3, r3
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	b259      	sxtb	r1, r3
 8001bbc:	79fa      	ldrb	r2, [r7, #7]
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	01db      	lsls	r3, r3, #7
 8001bc2:	4413      	add	r3, r2
 8001bc4:	b2c9      	uxtb	r1, r1
 8001bc6:	4a13      	ldr	r2, [pc, #76]	; (8001c14 <ssd1306_DrawPixel+0xa4>)
 8001bc8:	54d1      	strb	r1, [r2, r3]
 8001bca:	e01d      	b.n	8001c08 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001bcc:	79fa      	ldrb	r2, [r7, #7]
 8001bce:	79bb      	ldrb	r3, [r7, #6]
 8001bd0:	08db      	lsrs	r3, r3, #3
 8001bd2:	b2d8      	uxtb	r0, r3
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	01db      	lsls	r3, r3, #7
 8001bd8:	4413      	add	r3, r2
 8001bda:	4a0e      	ldr	r2, [pc, #56]	; (8001c14 <ssd1306_DrawPixel+0xa4>)
 8001bdc:	5cd3      	ldrb	r3, [r2, r3]
 8001bde:	b25a      	sxtb	r2, r3
 8001be0:	79bb      	ldrb	r3, [r7, #6]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	2101      	movs	r1, #1
 8001be8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bec:	b25b      	sxtb	r3, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	b25b      	sxtb	r3, r3
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	b259      	sxtb	r1, r3
 8001bf6:	79fa      	ldrb	r2, [r7, #7]
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	01db      	lsls	r3, r3, #7
 8001bfc:	4413      	add	r3, r2
 8001bfe:	b2c9      	uxtb	r1, r1
 8001c00:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <ssd1306_DrawPixel+0xa4>)
 8001c02:	54d1      	strb	r1, [r2, r3]
 8001c04:	e000      	b.n	8001c08 <ssd1306_DrawPixel+0x98>
        return;
 8001c06:	bf00      	nop
    }
}
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	2000042c 	.word	0x2000042c

08001c18 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4604      	mov	r4, r0
 8001c20:	1d38      	adds	r0, r7, #4
 8001c22:	e880 0006 	stmia.w	r0, {r1, r2}
 8001c26:	461a      	mov	r2, r3
 8001c28:	4623      	mov	r3, r4
 8001c2a:	73fb      	strb	r3, [r7, #15]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	2b1f      	cmp	r3, #31
 8001c34:	d902      	bls.n	8001c3c <ssd1306_WriteChar+0x24>
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	2b7e      	cmp	r3, #126	; 0x7e
 8001c3a:	d901      	bls.n	8001c40 <ssd1306_WriteChar+0x28>
        return 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	e06d      	b.n	8001d1c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001c40:	4b38      	ldr	r3, [pc, #224]	; (8001d24 <ssd1306_WriteChar+0x10c>)
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	793b      	ldrb	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	2b80      	cmp	r3, #128	; 0x80
 8001c4c:	dc06      	bgt.n	8001c5c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001c4e:	4b35      	ldr	r3, [pc, #212]	; (8001d24 <ssd1306_WriteChar+0x10c>)
 8001c50:	885b      	ldrh	r3, [r3, #2]
 8001c52:	461a      	mov	r2, r3
 8001c54:	797b      	ldrb	r3, [r7, #5]
 8001c56:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001c58:	2b40      	cmp	r3, #64	; 0x40
 8001c5a:	dd01      	ble.n	8001c60 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	e05d      	b.n	8001d1c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
 8001c64:	e04c      	b.n	8001d00 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	3b20      	subs	r3, #32
 8001c6c:	7979      	ldrb	r1, [r7, #5]
 8001c6e:	fb01 f303 	mul.w	r3, r1, r3
 8001c72:	4619      	mov	r1, r3
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	440b      	add	r3, r1
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	4413      	add	r3, r2
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001c80:	2300      	movs	r3, #0
 8001c82:	61bb      	str	r3, [r7, #24]
 8001c84:	e034      	b.n	8001cf0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d012      	beq.n	8001cbc <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001c96:	4b23      	ldr	r3, [pc, #140]	; (8001d24 <ssd1306_WriteChar+0x10c>)
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	b2d8      	uxtb	r0, r3
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <ssd1306_WriteChar+0x10c>)
 8001ca6:	885b      	ldrh	r3, [r3, #2]
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	4413      	add	r3, r2
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	7bba      	ldrb	r2, [r7, #14]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7ff ff5b 	bl	8001b70 <ssd1306_DrawPixel>
 8001cba:	e016      	b.n	8001cea <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001cbc:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <ssd1306_WriteChar+0x10c>)
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	b2d8      	uxtb	r0, r3
 8001cca:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <ssd1306_WriteChar+0x10c>)
 8001ccc:	885b      	ldrh	r3, [r3, #2]
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	b2d9      	uxtb	r1, r3
 8001cd8:	7bbb      	ldrb	r3, [r7, #14]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	bf0c      	ite	eq
 8001cde:	2301      	moveq	r3, #1
 8001ce0:	2300      	movne	r3, #0
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	f7ff ff43 	bl	8001b70 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	3301      	adds	r3, #1
 8001cee:	61bb      	str	r3, [r7, #24]
 8001cf0:	793b      	ldrb	r3, [r7, #4]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d3c5      	bcc.n	8001c86 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	61fb      	str	r3, [r7, #28]
 8001d00:	797b      	ldrb	r3, [r7, #5]
 8001d02:	461a      	mov	r2, r3
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d3ad      	bcc.n	8001c66 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <ssd1306_WriteChar+0x10c>)
 8001d0c:	881a      	ldrh	r2, [r3, #0]
 8001d0e:	793b      	ldrb	r3, [r7, #4]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	4413      	add	r3, r2
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <ssd1306_WriteChar+0x10c>)
 8001d18:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3724      	adds	r7, #36	; 0x24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd90      	pop	{r4, r7, pc}
 8001d24:	2000082c 	.word	0x2000082c

08001d28 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	1d38      	adds	r0, r7, #4
 8001d32:	e880 0006 	stmia.w	r0, {r1, r2}
 8001d36:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001d38:	e012      	b.n	8001d60 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	7818      	ldrb	r0, [r3, #0]
 8001d3e:	78fb      	ldrb	r3, [r7, #3]
 8001d40:	1d3a      	adds	r2, r7, #4
 8001d42:	ca06      	ldmia	r2, {r1, r2}
 8001d44:	f7ff ff68 	bl	8001c18 <ssd1306_WriteChar>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d002      	beq.n	8001d5a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	e008      	b.n	8001d6c <ssd1306_WriteString+0x44>
        }
        str++;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1e8      	bne.n	8001d3a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	460a      	mov	r2, r1
 8001d7e:	71fb      	strb	r3, [r7, #7]
 8001d80:	4613      	mov	r3, r2
 8001d82:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <ssd1306_SetCursor+0x2c>)
 8001d8a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001d8c:	79bb      	ldrb	r3, [r7, #6]
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <ssd1306_SetCursor+0x2c>)
 8001d92:	805a      	strh	r2, [r3, #2]
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	2000082c 	.word	0x2000082c

08001da4 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001da4:	b590      	push	{r4, r7, lr}
 8001da6:	b089      	sub	sp, #36	; 0x24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4604      	mov	r4, r0
 8001dac:	4608      	mov	r0, r1
 8001dae:	4611      	mov	r1, r2
 8001db0:	461a      	mov	r2, r3
 8001db2:	4623      	mov	r3, r4
 8001db4:	71fb      	strb	r3, [r7, #7]
 8001db6:	4603      	mov	r3, r0
 8001db8:	71bb      	strb	r3, [r7, #6]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	717b      	strb	r3, [r7, #5]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8001dc2:	797a      	ldrb	r2, [r7, #5]
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bfb8      	it	lt
 8001dcc:	425b      	neglt	r3, r3
 8001dce:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8001dd0:	793a      	ldrb	r2, [r7, #4]
 8001dd2:	79bb      	ldrb	r3, [r7, #6]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	bfb8      	it	lt
 8001dda:	425b      	neglt	r3, r3
 8001ddc:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8001dde:	79fa      	ldrb	r2, [r7, #7]
 8001de0:	797b      	ldrb	r3, [r7, #5]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d201      	bcs.n	8001dea <ssd1306_Line+0x46>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e001      	b.n	8001dee <ssd1306_Line+0x4a>
 8001dea:	f04f 33ff 	mov.w	r3, #4294967295
 8001dee:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8001df0:	79ba      	ldrb	r2, [r7, #6]
 8001df2:	793b      	ldrb	r3, [r7, #4]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d201      	bcs.n	8001dfc <ssd1306_Line+0x58>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e001      	b.n	8001e00 <ssd1306_Line+0x5c>
 8001dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001e00:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8001e0a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001e0e:	7939      	ldrb	r1, [r7, #4]
 8001e10:	797b      	ldrb	r3, [r7, #5]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff feac 	bl	8001b70 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8001e18:	e024      	b.n	8001e64 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8001e1a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001e1e:	79b9      	ldrb	r1, [r7, #6]
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fea4 	bl	8001b70 <ssd1306_DrawPixel>
        error2 = error * 2;
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	425b      	negs	r3, r3
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	dd08      	ble.n	8001e4a <ssd1306_Line+0xa6>
            error -= deltaY;
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	4413      	add	r3, r2
 8001e48:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	da08      	bge.n	8001e64 <ssd1306_Line+0xc0>
            error += deltaX;
 8001e52:	69fa      	ldr	r2, [r7, #28]
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	4413      	add	r3, r2
 8001e58:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	79bb      	ldrb	r3, [r7, #6]
 8001e60:	4413      	add	r3, r2
 8001e62:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8001e64:	79fa      	ldrb	r2, [r7, #7]
 8001e66:	797b      	ldrb	r3, [r7, #5]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d1d6      	bne.n	8001e1a <ssd1306_Line+0x76>
 8001e6c:	79ba      	ldrb	r2, [r7, #6]
 8001e6e:	793b      	ldrb	r3, [r7, #4]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d1d2      	bne.n	8001e1a <ssd1306_Line+0x76>
        }
    }
    return;
 8001e74:	bf00      	nop
}
 8001e76:	3724      	adds	r7, #36	; 0x24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd90      	pop	{r4, r7, pc}

08001e7c <ssd1306_Polyline>:

/* Draw polyline */
void ssd1306_Polyline(const SSD1306_VERTEX *par_vertex, uint16_t par_size, SSD1306_COLOR color) {
 8001e7c:	b590      	push	{r4, r7, lr}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af02      	add	r7, sp, #8
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	707b      	strb	r3, [r7, #1]
    uint16_t i;
    if(par_vertex == NULL) {
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d02a      	beq.n	8001ee8 <ssd1306_Polyline+0x6c>
        return;
    }

    for(i = 1; i < par_size; i++) {
 8001e92:	2301      	movs	r3, #1
 8001e94:	81fb      	strh	r3, [r7, #14]
 8001e96:	e022      	b.n	8001ede <ssd1306_Polyline+0x62>
        ssd1306_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 8001e98:	89fb      	ldrh	r3, [r7, #14]
 8001e9a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	7818      	ldrb	r0, [r3, #0]
 8001ea8:	89fb      	ldrh	r3, [r7, #14]
 8001eaa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	7859      	ldrb	r1, [r3, #1]
 8001eb8:	89fb      	ldrh	r3, [r7, #14]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	781c      	ldrb	r4, [r3, #0]
 8001ec2:	89fb      	ldrh	r3, [r7, #14]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	785a      	ldrb	r2, [r3, #1]
 8001ecc:	787b      	ldrb	r3, [r7, #1]
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	4622      	mov	r2, r4
 8001ed4:	f7ff ff66 	bl	8001da4 <ssd1306_Line>
    for(i = 1; i < par_size; i++) {
 8001ed8:	89fb      	ldrh	r3, [r7, #14]
 8001eda:	3301      	adds	r3, #1
 8001edc:	81fb      	strh	r3, [r7, #14]
 8001ede:	89fa      	ldrh	r2, [r7, #14]
 8001ee0:	887b      	ldrh	r3, [r7, #2]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d3d8      	bcc.n	8001e98 <ssd1306_Polyline+0x1c>
    }

    return;
 8001ee6:	e000      	b.n	8001eea <ssd1306_Polyline+0x6e>
        return;
 8001ee8:	bf00      	nop
}
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd90      	pop	{r4, r7, pc}

08001ef0 <ssd1306_DegToRad>:

/* Convert Degrees to Radians */
static float ssd1306_DegToRad(float par_deg) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	ed87 0a01 	vstr	s0, [r7, #4]
    return par_deg * 3.14 / 180.0;
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7fe fb24 	bl	8000548 <__aeabi_f2d>
 8001f00:	a30e      	add	r3, pc, #56	; (adr r3, 8001f3c <ssd1306_DegToRad+0x4c>)
 8001f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f06:	f7fe fb77 	bl	80005f8 <__aeabi_dmul>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4610      	mov	r0, r2
 8001f10:	4619      	mov	r1, r3
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <ssd1306_DegToRad+0x48>)
 8001f18:	f7fe fc98 	bl	800084c <__aeabi_ddiv>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7fe fe40 	bl	8000ba8 <__aeabi_d2f>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	ee07 3a90 	vmov	s15, r3
}
 8001f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40668000 	.word	0x40668000
 8001f3c:	51eb851f 	.word	0x51eb851f
 8001f40:	40091eb8 	.word	0x40091eb8

08001f44 <ssd1306_NormalizeTo0_360>:

/* Normalize degree to [0;360] */
static uint16_t ssd1306_NormalizeTo0_360(uint16_t par_deg) {
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	80fb      	strh	r3, [r7, #6]
    uint16_t loc_angle;
    if(par_deg <= 360) {
 8001f4e:	88fb      	ldrh	r3, [r7, #6]
 8001f50:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001f54:	d802      	bhi.n	8001f5c <ssd1306_NormalizeTo0_360+0x18>
        loc_angle = par_deg;
 8001f56:	88fb      	ldrh	r3, [r7, #6]
 8001f58:	81fb      	strh	r3, [r7, #14]
 8001f5a:	e013      	b.n	8001f84 <ssd1306_NormalizeTo0_360+0x40>
    } else {
        loc_angle = par_deg % 360;
 8001f5c:	88fb      	ldrh	r3, [r7, #6]
 8001f5e:	08da      	lsrs	r2, r3, #3
 8001f60:	490c      	ldr	r1, [pc, #48]	; (8001f94 <ssd1306_NormalizeTo0_360+0x50>)
 8001f62:	fba1 1202 	umull	r1, r2, r1, r2
 8001f66:	0892      	lsrs	r2, r2, #2
 8001f68:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001f6c:	fb01 f202 	mul.w	r2, r1, r2
 8001f70:	1a9b      	subs	r3, r3, r2
 8001f72:	81fb      	strh	r3, [r7, #14]
        loc_angle = ((par_deg != 0)?par_deg:360);
 8001f74:	88fb      	ldrh	r3, [r7, #6]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <ssd1306_NormalizeTo0_360+0x3a>
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	e001      	b.n	8001f82 <ssd1306_NormalizeTo0_360+0x3e>
 8001f7e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001f82:	81fb      	strh	r3, [r7, #14]
    }
    return loc_angle;
 8001f84:	89fb      	ldrh	r3, [r7, #14]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	16c16c17 	.word	0x16c16c17

08001f98 <ssd1306_DrawArc>:
/*
 * DrawArc. Draw angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle in degree
 * sweep in degree
 */
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8001f98:	b5b0      	push	{r4, r5, r7, lr}
 8001f9a:	b08a      	sub	sp, #40	; 0x28
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	4604      	mov	r4, r0
 8001fa0:	4608      	mov	r0, r1
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4623      	mov	r3, r4
 8001fa8:	71fb      	strb	r3, [r7, #7]
 8001faa:	4603      	mov	r3, r0
 8001fac:	71bb      	strb	r3, [r7, #6]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	717b      	strb	r3, [r7, #5]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	807b      	strh	r3, [r7, #2]
    static const uint8_t CIRCLE_APPROXIMATION_SEGMENTS = 36;
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1,xp2;
    uint8_t yp1,yp2;
    uint32_t count = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
    uint32_t loc_sweep = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 8001fbe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ffbf 	bl	8001f44 <ssd1306_NormalizeTo0_360>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	617b      	str	r3, [r7, #20]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001fca:	887b      	ldrh	r3, [r7, #2]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ffb9 	bl	8001f44 <ssd1306_NormalizeTo0_360>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b77      	ldr	r3, [pc, #476]	; (80021b4 <ssd1306_DrawArc+0x21c>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	fb02 f303 	mul.w	r3, r2, r3
 8001fde:	4a76      	ldr	r2, [pc, #472]	; (80021b8 <ssd1306_DrawArc+0x220>)
 8001fe0:	fb82 1203 	smull	r1, r2, r2, r3
 8001fe4:	441a      	add	r2, r3
 8001fe6:	1212      	asrs	r2, r2, #8
 8001fe8:	17db      	asrs	r3, r3, #31
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	61fb      	str	r3, [r7, #28]
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001fee:	4b71      	ldr	r3, [pc, #452]	; (80021b4 <ssd1306_DrawArc+0x21c>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	fb02 f303 	mul.w	r3, r2, r3
 8001ffa:	08db      	lsrs	r3, r3, #3
 8001ffc:	4a6f      	ldr	r2, [pc, #444]	; (80021bc <ssd1306_DrawArc+0x224>)
 8001ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8002002:	089b      	lsrs	r3, r3, #2
 8002004:	613b      	str	r3, [r7, #16]
    approx_degree = loc_sweep / (float)approx_segments;
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	ee07 3a90 	vmov	s15, r3
 800200c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800201a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800201e:	edc7 7a03 	vstr	s15, [r7, #12]
    while(count < approx_segments)
 8002022:	e0be      	b.n	80021a2 <ssd1306_DrawArc+0x20a>
    {
        rad = ssd1306_DegToRad(count*approx_degree);
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800202e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002036:	eeb0 0a67 	vmov.f32	s0, s15
 800203a:	f7ff ff59 	bl	8001ef0 <ssd1306_DegToRad>
 800203e:	ed87 0a06 	vstr	s0, [r7, #24]
        xp1 = x + (int8_t)(sin(rad)*radius);
 8002042:	69b8      	ldr	r0, [r7, #24]
 8002044:	f7fe fa80 	bl	8000548 <__aeabi_f2d>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	ec43 2b10 	vmov	d0, r2, r3
 8002050:	f008 f94a 	bl	800a2e8 <sin>
 8002054:	ec55 4b10 	vmov	r4, r5, d0
 8002058:	797b      	ldrb	r3, [r7, #5]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fa62 	bl	8000524 <__aeabi_i2d>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4620      	mov	r0, r4
 8002066:	4629      	mov	r1, r5
 8002068:	f7fe fac6 	bl	80005f8 <__aeabi_dmul>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4610      	mov	r0, r2
 8002072:	4619      	mov	r1, r3
 8002074:	f7fe fd70 	bl	8000b58 <__aeabi_d2iz>
 8002078:	4603      	mov	r3, r0
 800207a:	b25b      	sxtb	r3, r3
 800207c:	b2da      	uxtb	r2, r3
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	4413      	add	r3, r2
 8002082:	72fb      	strb	r3, [r7, #11]
        yp1 = y + (int8_t)(cos(rad)*radius);    
 8002084:	69b8      	ldr	r0, [r7, #24]
 8002086:	f7fe fa5f 	bl	8000548 <__aeabi_f2d>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	ec43 2b10 	vmov	d0, r2, r3
 8002092:	f008 f8d5 	bl	800a240 <cos>
 8002096:	ec55 4b10 	vmov	r4, r5, d0
 800209a:	797b      	ldrb	r3, [r7, #5]
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fa41 	bl	8000524 <__aeabi_i2d>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4620      	mov	r0, r4
 80020a8:	4629      	mov	r1, r5
 80020aa:	f7fe faa5 	bl	80005f8 <__aeabi_dmul>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	f7fe fd4f 	bl	8000b58 <__aeabi_d2iz>
 80020ba:	4603      	mov	r3, r0
 80020bc:	b25b      	sxtb	r3, r3
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	79bb      	ldrb	r3, [r7, #6]
 80020c2:	4413      	add	r3, r2
 80020c4:	72bb      	strb	r3, [r7, #10]
        count++;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3301      	adds	r3, #1
 80020ca:	61fb      	str	r3, [r7, #28]
        if(count != approx_segments) {
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d00f      	beq.n	80020f4 <ssd1306_DrawArc+0x15c>
            rad = ssd1306_DegToRad(count*approx_degree);
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	ee07 3a90 	vmov	s15, r3
 80020da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020de:	edd7 7a03 	vldr	s15, [r7, #12]
 80020e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e6:	eeb0 0a67 	vmov.f32	s0, s15
 80020ea:	f7ff ff01 	bl	8001ef0 <ssd1306_DegToRad>
 80020ee:	ed87 0a06 	vstr	s0, [r7, #24]
 80020f2:	e00a      	b.n	800210a <ssd1306_DrawArc+0x172>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	ee07 3a90 	vmov	s15, r3
 80020fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002102:	f7ff fef5 	bl	8001ef0 <ssd1306_DegToRad>
 8002106:	ed87 0a06 	vstr	s0, [r7, #24]
        }
        xp2 = x + (int8_t)(sin(rad)*radius);
 800210a:	69b8      	ldr	r0, [r7, #24]
 800210c:	f7fe fa1c 	bl	8000548 <__aeabi_f2d>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	ec43 2b10 	vmov	d0, r2, r3
 8002118:	f008 f8e6 	bl	800a2e8 <sin>
 800211c:	ec55 4b10 	vmov	r4, r5, d0
 8002120:	797b      	ldrb	r3, [r7, #5]
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe f9fe 	bl	8000524 <__aeabi_i2d>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4620      	mov	r0, r4
 800212e:	4629      	mov	r1, r5
 8002130:	f7fe fa62 	bl	80005f8 <__aeabi_dmul>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4610      	mov	r0, r2
 800213a:	4619      	mov	r1, r3
 800213c:	f7fe fd0c 	bl	8000b58 <__aeabi_d2iz>
 8002140:	4603      	mov	r3, r0
 8002142:	b25b      	sxtb	r3, r3
 8002144:	b2da      	uxtb	r2, r3
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	4413      	add	r3, r2
 800214a:	727b      	strb	r3, [r7, #9]
        yp2 = y + (int8_t)(cos(rad)*radius);    
 800214c:	69b8      	ldr	r0, [r7, #24]
 800214e:	f7fe f9fb 	bl	8000548 <__aeabi_f2d>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	ec43 2b10 	vmov	d0, r2, r3
 800215a:	f008 f871 	bl	800a240 <cos>
 800215e:	ec55 4b10 	vmov	r4, r5, d0
 8002162:	797b      	ldrb	r3, [r7, #5]
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe f9dd 	bl	8000524 <__aeabi_i2d>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4620      	mov	r0, r4
 8002170:	4629      	mov	r1, r5
 8002172:	f7fe fa41 	bl	80005f8 <__aeabi_dmul>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4610      	mov	r0, r2
 800217c:	4619      	mov	r1, r3
 800217e:	f7fe fceb 	bl	8000b58 <__aeabi_d2iz>
 8002182:	4603      	mov	r3, r0
 8002184:	b25b      	sxtb	r3, r3
 8002186:	b2da      	uxtb	r2, r3
 8002188:	79bb      	ldrb	r3, [r7, #6]
 800218a:	4413      	add	r3, r2
 800218c:	723b      	strb	r3, [r7, #8]
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 800218e:	7a3c      	ldrb	r4, [r7, #8]
 8002190:	7a7a      	ldrb	r2, [r7, #9]
 8002192:	7ab9      	ldrb	r1, [r7, #10]
 8002194:	7af8      	ldrb	r0, [r7, #11]
 8002196:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	4623      	mov	r3, r4
 800219e:	f7ff fe01 	bl	8001da4 <ssd1306_Line>
    while(count < approx_segments)
 80021a2:	69fa      	ldr	r2, [r7, #28]
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	f4ff af3c 	bcc.w	8002024 <ssd1306_DrawArc+0x8c>
    }
    
    return;
 80021ac:	bf00      	nop
}
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bdb0      	pop	{r4, r5, r7, pc}
 80021b4:	0800b47c 	.word	0x0800b47c
 80021b8:	b60b60b7 	.word	0xb60b60b7
 80021bc:	16c16c17 	.word	0x16c16c17

080021c0 <ssd1306_DrawArcWithRadiusLine>:
 * Draw arc with radius line
 * Angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle: start angle in degree
 * sweep: finish angle in degree
 */
void ssd1306_DrawArcWithRadiusLine(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 80021c0:	b5b0      	push	{r4, r5, r7, lr}
 80021c2:	b08c      	sub	sp, #48	; 0x30
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	4604      	mov	r4, r0
 80021c8:	4608      	mov	r0, r1
 80021ca:	4611      	mov	r1, r2
 80021cc:	461a      	mov	r2, r3
 80021ce:	4623      	mov	r3, r4
 80021d0:	71fb      	strb	r3, [r7, #7]
 80021d2:	4603      	mov	r3, r0
 80021d4:	71bb      	strb	r3, [r7, #6]
 80021d6:	460b      	mov	r3, r1
 80021d8:	717b      	strb	r3, [r7, #5]
 80021da:	4613      	mov	r3, r2
 80021dc:	807b      	strh	r3, [r7, #2]
    static const uint8_t CIRCLE_APPROXIMATION_SEGMENTS = 36;
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1 = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	76fb      	strb	r3, [r7, #27]
    uint8_t xp2 = 0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t yp1 = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	76bb      	strb	r3, [r7, #26]
    uint8_t yp2 = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint32_t count = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	623b      	str	r3, [r7, #32]
    uint32_t loc_sweep = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 80021fa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fea1 	bl	8001f44 <ssd1306_NormalizeTo0_360>
 8002202:	4603      	mov	r3, r0
 8002204:	617b      	str	r3, [r7, #20]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8002206:	887b      	ldrh	r3, [r7, #2]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff fe9b 	bl	8001f44 <ssd1306_NormalizeTo0_360>
 800220e:	4603      	mov	r3, r0
 8002210:	461a      	mov	r2, r3
 8002212:	4bad      	ldr	r3, [pc, #692]	; (80024c8 <ssd1306_DrawArcWithRadiusLine+0x308>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	fb02 f303 	mul.w	r3, r2, r3
 800221a:	4aac      	ldr	r2, [pc, #688]	; (80024cc <ssd1306_DrawArcWithRadiusLine+0x30c>)
 800221c:	fb82 1203 	smull	r1, r2, r2, r3
 8002220:	441a      	add	r2, r3
 8002222:	1212      	asrs	r2, r2, #8
 8002224:	17db      	asrs	r3, r3, #31
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	623b      	str	r3, [r7, #32]
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 800222a:	4ba7      	ldr	r3, [pc, #668]	; (80024c8 <ssd1306_DrawArcWithRadiusLine+0x308>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fb02 f303 	mul.w	r3, r2, r3
 8002236:	08db      	lsrs	r3, r3, #3
 8002238:	4aa5      	ldr	r2, [pc, #660]	; (80024d0 <ssd1306_DrawArcWithRadiusLine+0x310>)
 800223a:	fba2 2303 	umull	r2, r3, r2, r3
 800223e:	089b      	lsrs	r3, r3, #2
 8002240:	613b      	str	r3, [r7, #16]
    approx_degree = loc_sweep / (float)approx_segments;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	ee07 3a90 	vmov	s15, r3
 8002248:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	ee07 3a90 	vmov	s15, r3
 8002252:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800225a:	edc7 7a03 	vstr	s15, [r7, #12]

    rad = ssd1306_DegToRad(count*approx_degree);
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	ee07 3a90 	vmov	s15, r3
 8002264:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002268:	edd7 7a03 	vldr	s15, [r7, #12]
 800226c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002270:	eeb0 0a67 	vmov.f32	s0, s15
 8002274:	f7ff fe3c 	bl	8001ef0 <ssd1306_DegToRad>
 8002278:	ed87 0a07 	vstr	s0, [r7, #28]
    uint8_t first_point_x = x + (int8_t)(sin(rad)*radius);
 800227c:	69f8      	ldr	r0, [r7, #28]
 800227e:	f7fe f963 	bl	8000548 <__aeabi_f2d>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	ec43 2b10 	vmov	d0, r2, r3
 800228a:	f008 f82d 	bl	800a2e8 <sin>
 800228e:	ec55 4b10 	vmov	r4, r5, d0
 8002292:	797b      	ldrb	r3, [r7, #5]
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe f945 	bl	8000524 <__aeabi_i2d>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4620      	mov	r0, r4
 80022a0:	4629      	mov	r1, r5
 80022a2:	f7fe f9a9 	bl	80005f8 <__aeabi_dmul>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	f7fe fc53 	bl	8000b58 <__aeabi_d2iz>
 80022b2:	4603      	mov	r3, r0
 80022b4:	b25b      	sxtb	r3, r3
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	4413      	add	r3, r2
 80022bc:	72fb      	strb	r3, [r7, #11]
    uint8_t first_point_y = y + (int8_t)(cos(rad)*radius);   
 80022be:	69f8      	ldr	r0, [r7, #28]
 80022c0:	f7fe f942 	bl	8000548 <__aeabi_f2d>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	ec43 2b10 	vmov	d0, r2, r3
 80022cc:	f007 ffb8 	bl	800a240 <cos>
 80022d0:	ec55 4b10 	vmov	r4, r5, d0
 80022d4:	797b      	ldrb	r3, [r7, #5]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe f924 	bl	8000524 <__aeabi_i2d>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4620      	mov	r0, r4
 80022e2:	4629      	mov	r1, r5
 80022e4:	f7fe f988 	bl	80005f8 <__aeabi_dmul>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4610      	mov	r0, r2
 80022ee:	4619      	mov	r1, r3
 80022f0:	f7fe fc32 	bl	8000b58 <__aeabi_d2iz>
 80022f4:	4603      	mov	r3, r0
 80022f6:	b25b      	sxtb	r3, r3
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	79bb      	ldrb	r3, [r7, #6]
 80022fc:	4413      	add	r3, r2
 80022fe:	72bb      	strb	r3, [r7, #10]
    while (count < approx_segments) {
 8002300:	e0c2      	b.n	8002488 <ssd1306_DrawArcWithRadiusLine+0x2c8>
        rad = ssd1306_DegToRad(count*approx_degree);
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	ee07 3a90 	vmov	s15, r3
 8002308:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800230c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002314:	eeb0 0a67 	vmov.f32	s0, s15
 8002318:	f7ff fdea 	bl	8001ef0 <ssd1306_DegToRad>
 800231c:	ed87 0a07 	vstr	s0, [r7, #28]
        xp1 = x + (int8_t)(sin(rad)*radius);
 8002320:	69f8      	ldr	r0, [r7, #28]
 8002322:	f7fe f911 	bl	8000548 <__aeabi_f2d>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	ec43 2b10 	vmov	d0, r2, r3
 800232e:	f007 ffdb 	bl	800a2e8 <sin>
 8002332:	ec55 4b10 	vmov	r4, r5, d0
 8002336:	797b      	ldrb	r3, [r7, #5]
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe f8f3 	bl	8000524 <__aeabi_i2d>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4620      	mov	r0, r4
 8002344:	4629      	mov	r1, r5
 8002346:	f7fe f957 	bl	80005f8 <__aeabi_dmul>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4610      	mov	r0, r2
 8002350:	4619      	mov	r1, r3
 8002352:	f7fe fc01 	bl	8000b58 <__aeabi_d2iz>
 8002356:	4603      	mov	r3, r0
 8002358:	b25b      	sxtb	r3, r3
 800235a:	b2da      	uxtb	r2, r3
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	4413      	add	r3, r2
 8002360:	76fb      	strb	r3, [r7, #27]
        yp1 = y + (int8_t)(cos(rad)*radius);    
 8002362:	69f8      	ldr	r0, [r7, #28]
 8002364:	f7fe f8f0 	bl	8000548 <__aeabi_f2d>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	ec43 2b10 	vmov	d0, r2, r3
 8002370:	f007 ff66 	bl	800a240 <cos>
 8002374:	ec55 4b10 	vmov	r4, r5, d0
 8002378:	797b      	ldrb	r3, [r7, #5]
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe f8d2 	bl	8000524 <__aeabi_i2d>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4620      	mov	r0, r4
 8002386:	4629      	mov	r1, r5
 8002388:	f7fe f936 	bl	80005f8 <__aeabi_dmul>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4610      	mov	r0, r2
 8002392:	4619      	mov	r1, r3
 8002394:	f7fe fbe0 	bl	8000b58 <__aeabi_d2iz>
 8002398:	4603      	mov	r3, r0
 800239a:	b25b      	sxtb	r3, r3
 800239c:	b2da      	uxtb	r2, r3
 800239e:	79bb      	ldrb	r3, [r7, #6]
 80023a0:	4413      	add	r3, r2
 80023a2:	76bb      	strb	r3, [r7, #26]
        count++;
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	3301      	adds	r3, #1
 80023a8:	623b      	str	r3, [r7, #32]
        if (count != approx_segments) {
 80023aa:	6a3a      	ldr	r2, [r7, #32]
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d00f      	beq.n	80023d2 <ssd1306_DrawArcWithRadiusLine+0x212>
            rad = ssd1306_DegToRad(count*approx_degree);
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	ee07 3a90 	vmov	s15, r3
 80023b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80023c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c4:	eeb0 0a67 	vmov.f32	s0, s15
 80023c8:	f7ff fd92 	bl	8001ef0 <ssd1306_DegToRad>
 80023cc:	ed87 0a07 	vstr	s0, [r7, #28]
 80023d0:	e00a      	b.n	80023e8 <ssd1306_DrawArcWithRadiusLine+0x228>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	ee07 3a90 	vmov	s15, r3
 80023d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023dc:	eeb0 0a67 	vmov.f32	s0, s15
 80023e0:	f7ff fd86 	bl	8001ef0 <ssd1306_DegToRad>
 80023e4:	ed87 0a07 	vstr	s0, [r7, #28]
        }
        xp2 = x + (int8_t)(sin(rad)*radius);
 80023e8:	69f8      	ldr	r0, [r7, #28]
 80023ea:	f7fe f8ad 	bl	8000548 <__aeabi_f2d>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	ec43 2b10 	vmov	d0, r2, r3
 80023f6:	f007 ff77 	bl	800a2e8 <sin>
 80023fa:	ec55 4b10 	vmov	r4, r5, d0
 80023fe:	797b      	ldrb	r3, [r7, #5]
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe f88f 	bl	8000524 <__aeabi_i2d>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4620      	mov	r0, r4
 800240c:	4629      	mov	r1, r5
 800240e:	f7fe f8f3 	bl	80005f8 <__aeabi_dmul>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	4610      	mov	r0, r2
 8002418:	4619      	mov	r1, r3
 800241a:	f7fe fb9d 	bl	8000b58 <__aeabi_d2iz>
 800241e:	4603      	mov	r3, r0
 8002420:	b25b      	sxtb	r3, r3
 8002422:	b2da      	uxtb	r2, r3
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	4413      	add	r3, r2
 8002428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        yp2 = y + (int8_t)(cos(rad)*radius);    
 800242c:	69f8      	ldr	r0, [r7, #28]
 800242e:	f7fe f88b 	bl	8000548 <__aeabi_f2d>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	ec43 2b10 	vmov	d0, r2, r3
 800243a:	f007 ff01 	bl	800a240 <cos>
 800243e:	ec55 4b10 	vmov	r4, r5, d0
 8002442:	797b      	ldrb	r3, [r7, #5]
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe f86d 	bl	8000524 <__aeabi_i2d>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4620      	mov	r0, r4
 8002450:	4629      	mov	r1, r5
 8002452:	f7fe f8d1 	bl	80005f8 <__aeabi_dmul>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4610      	mov	r0, r2
 800245c:	4619      	mov	r1, r3
 800245e:	f7fe fb7b 	bl	8000b58 <__aeabi_d2iz>
 8002462:	4603      	mov	r3, r0
 8002464:	b25b      	sxtb	r3, r3
 8002466:	b2da      	uxtb	r2, r3
 8002468:	79bb      	ldrb	r3, [r7, #6]
 800246a:	4413      	add	r3, r2
 800246c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8002470:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
 8002474:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002478:	7eb9      	ldrb	r1, [r7, #26]
 800247a:	7ef8      	ldrb	r0, [r7, #27]
 800247c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	4623      	mov	r3, r4
 8002484:	f7ff fc8e 	bl	8001da4 <ssd1306_Line>
    while (count < approx_segments) {
 8002488:	6a3a      	ldr	r2, [r7, #32]
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	429a      	cmp	r2, r3
 800248e:	f4ff af38 	bcc.w	8002302 <ssd1306_DrawArcWithRadiusLine+0x142>
    }
    
    // Radius line
    ssd1306_Line(x,y,first_point_x,first_point_y,color);
 8002492:	7abc      	ldrb	r4, [r7, #10]
 8002494:	7afa      	ldrb	r2, [r7, #11]
 8002496:	79b9      	ldrb	r1, [r7, #6]
 8002498:	79f8      	ldrb	r0, [r7, #7]
 800249a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	4623      	mov	r3, r4
 80024a2:	f7ff fc7f 	bl	8001da4 <ssd1306_Line>
    ssd1306_Line(x,y,xp2,yp2,color);
 80024a6:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
 80024aa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80024ae:	79b9      	ldrb	r1, [r7, #6]
 80024b0:	79f8      	ldrb	r0, [r7, #7]
 80024b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	4623      	mov	r3, r4
 80024ba:	f7ff fc73 	bl	8001da4 <ssd1306_Line>
    return;
 80024be:	bf00      	nop
}
 80024c0:	3728      	adds	r7, #40	; 0x28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bdb0      	pop	{r4, r5, r7, pc}
 80024c6:	bf00      	nop
 80024c8:	0800b47d 	.word	0x0800b47d
 80024cc:	b60b60b7 	.word	0xb60b60b7
 80024d0:	16c16c17 	.word	0x16c16c17

080024d4 <ssd1306_DrawCircle>:

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 80024d4:	b590      	push	{r4, r7, lr}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4604      	mov	r4, r0
 80024dc:	4608      	mov	r0, r1
 80024de:	4611      	mov	r1, r2
 80024e0:	461a      	mov	r2, r3
 80024e2:	4623      	mov	r3, r4
 80024e4:	71fb      	strb	r3, [r7, #7]
 80024e6:	4603      	mov	r3, r0
 80024e8:	71bb      	strb	r3, [r7, #6]
 80024ea:	460b      	mov	r3, r1
 80024ec:	717b      	strb	r3, [r7, #5]
 80024ee:	4613      	mov	r3, r2
 80024f0:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 80024f2:	797b      	ldrb	r3, [r7, #5]
 80024f4:	425b      	negs	r3, r3
 80024f6:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 80024fc:	797b      	ldrb	r3, [r7, #5]
 80024fe:	f1c3 0301 	rsb	r3, r3, #1
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	2b00      	cmp	r3, #0
 800250c:	db65      	blt.n	80025da <ssd1306_DrawCircle+0x106>
 800250e:	79bb      	ldrb	r3, [r7, #6]
 8002510:	2b3f      	cmp	r3, #63	; 0x3f
 8002512:	d862      	bhi.n	80025da <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	79fa      	ldrb	r2, [r7, #7]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	b2d8      	uxtb	r0, r3
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	b2da      	uxtb	r2, r3
 8002522:	79bb      	ldrb	r3, [r7, #6]
 8002524:	4413      	add	r3, r2
 8002526:	b2db      	uxtb	r3, r3
 8002528:	793a      	ldrb	r2, [r7, #4]
 800252a:	4619      	mov	r1, r3
 800252c:	f7ff fb20 	bl	8001b70 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	b2da      	uxtb	r2, r3
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	4413      	add	r3, r2
 8002538:	b2d8      	uxtb	r0, r3
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	b2da      	uxtb	r2, r3
 800253e:	79bb      	ldrb	r3, [r7, #6]
 8002540:	4413      	add	r3, r2
 8002542:	b2db      	uxtb	r3, r3
 8002544:	793a      	ldrb	r2, [r7, #4]
 8002546:	4619      	mov	r1, r3
 8002548:	f7ff fb12 	bl	8001b70 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	b2da      	uxtb	r2, r3
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	4413      	add	r3, r2
 8002554:	b2d8      	uxtb	r0, r3
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	79ba      	ldrb	r2, [r7, #6]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	b2db      	uxtb	r3, r3
 8002560:	793a      	ldrb	r2, [r7, #4]
 8002562:	4619      	mov	r1, r3
 8002564:	f7ff fb04 	bl	8001b70 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	79fa      	ldrb	r2, [r7, #7]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	b2d8      	uxtb	r0, r3
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	79ba      	ldrb	r2, [r7, #6]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	793a      	ldrb	r2, [r7, #4]
 800257e:	4619      	mov	r1, r3
 8002580:	f7ff faf6 	bl	8001b70 <ssd1306_DrawPixel>
        e2 = err;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	429a      	cmp	r2, r3
 800258e:	dc13      	bgt.n	80025b8 <ssd1306_DrawCircle+0xe4>
            y++;
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	3301      	adds	r3, #1
 8002594:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	3301      	adds	r3, #1
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4413      	add	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	425b      	negs	r3, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d105      	bne.n	80025b8 <ssd1306_DrawCircle+0xe4>
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	dc01      	bgt.n	80025b8 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	429a      	cmp	r2, r3
 80025be:	dd08      	ble.n	80025d2 <ssd1306_DrawCircle+0xfe>
            x++;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	3301      	adds	r3, #1
 80025c4:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	3301      	adds	r3, #1
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	4413      	add	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	dd9d      	ble.n	8002514 <ssd1306_DrawCircle+0x40>

    return;
 80025d8:	e000      	b.n	80025dc <ssd1306_DrawCircle+0x108>
        return;
 80025da:	bf00      	nop
}
 80025dc:	371c      	adds	r7, #28
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd90      	pop	{r4, r7, pc}

080025e2 <ssd1306_FillCircle>:

/* Draw filled circle. Pixel positions calculated using Bresenham's algorithm */
void ssd1306_FillCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 80025e2:	b590      	push	{r4, r7, lr}
 80025e4:	b089      	sub	sp, #36	; 0x24
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4604      	mov	r4, r0
 80025ea:	4608      	mov	r0, r1
 80025ec:	4611      	mov	r1, r2
 80025ee:	461a      	mov	r2, r3
 80025f0:	4623      	mov	r3, r4
 80025f2:	71fb      	strb	r3, [r7, #7]
 80025f4:	4603      	mov	r3, r0
 80025f6:	71bb      	strb	r3, [r7, #6]
 80025f8:	460b      	mov	r3, r1
 80025fa:	717b      	strb	r3, [r7, #5]
 80025fc:	4613      	mov	r3, r2
 80025fe:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8002600:	797b      	ldrb	r3, [r7, #5]
 8002602:	425b      	negs	r3, r3
 8002604:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	61bb      	str	r3, [r7, #24]
    int32_t err = 2 - 2 * par_r;
 800260a:	797b      	ldrb	r3, [r7, #5]
 800260c:	f1c3 0301 	rsb	r3, r3, #1
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	617b      	str	r3, [r7, #20]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8002614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002618:	2b00      	cmp	r3, #0
 800261a:	db51      	blt.n	80026c0 <ssd1306_FillCircle+0xde>
 800261c:	79bb      	ldrb	r3, [r7, #6]
 800261e:	2b3f      	cmp	r3, #63	; 0x3f
 8002620:	d84e      	bhi.n	80026c0 <ssd1306_FillCircle+0xde>
        return;
    }

    do {
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	b2da      	uxtb	r2, r3
 8002626:	79bb      	ldrb	r3, [r7, #6]
 8002628:	4413      	add	r3, r2
 800262a:	73fb      	strb	r3, [r7, #15]
 800262c:	e017      	b.n	800265e <ssd1306_FillCircle+0x7c>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	79fa      	ldrb	r2, [r7, #7]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	73bb      	strb	r3, [r7, #14]
 8002638:	e008      	b.n	800264c <ssd1306_FillCircle+0x6a>
                ssd1306_DrawPixel(_x, _y, par_color);
 800263a:	793a      	ldrb	r2, [r7, #4]
 800263c:	7bf9      	ldrb	r1, [r7, #15]
 800263e:	7bbb      	ldrb	r3, [r7, #14]
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff fa95 	bl	8001b70 <ssd1306_DrawPixel>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 8002646:	7bbb      	ldrb	r3, [r7, #14]
 8002648:	3b01      	subs	r3, #1
 800264a:	73bb      	strb	r3, [r7, #14]
 800264c:	7bba      	ldrb	r2, [r7, #14]
 800264e:	79f9      	ldrb	r1, [r7, #7]
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	440b      	add	r3, r1
 8002654:	429a      	cmp	r2, r3
 8002656:	daf0      	bge.n	800263a <ssd1306_FillCircle+0x58>
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8002658:	7bfb      	ldrb	r3, [r7, #15]
 800265a:	3b01      	subs	r3, #1
 800265c:	73fb      	strb	r3, [r7, #15]
 800265e:	7bfa      	ldrb	r2, [r7, #15]
 8002660:	79b9      	ldrb	r1, [r7, #6]
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	1acb      	subs	r3, r1, r3
 8002666:	429a      	cmp	r2, r3
 8002668:	dae1      	bge.n	800262e <ssd1306_FillCircle+0x4c>
            }
        }

        e2 = err;
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	613b      	str	r3, [r7, #16]
        if (e2 <= y) {
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	429a      	cmp	r2, r3
 8002674:	dc13      	bgt.n	800269e <ssd1306_FillCircle+0xbc>
            y++;
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	3301      	adds	r3, #1
 800267a:	61bb      	str	r3, [r7, #24]
            err = err + (y * 2 + 1);
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	3301      	adds	r3, #1
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	4413      	add	r3, r2
 8002686:	617b      	str	r3, [r7, #20]
            if (-x == y && e2 <= x) {
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	425b      	negs	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	429a      	cmp	r2, r3
 8002690:	d105      	bne.n	800269e <ssd1306_FillCircle+0xbc>
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	429a      	cmp	r2, r3
 8002698:	dc01      	bgt.n	800269e <ssd1306_FillCircle+0xbc>
                e2 = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
            }
        }

        if (e2 > x) {
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	dd08      	ble.n	80026b8 <ssd1306_FillCircle+0xd6>
            x++;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3301      	adds	r3, #1
 80026aa:	61fb      	str	r3, [r7, #28]
            err = err + (x * 2 + 1);
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	3301      	adds	r3, #1
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	4413      	add	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]
        }
    } while (x <= 0);
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	ddb1      	ble.n	8002622 <ssd1306_FillCircle+0x40>

    return;
 80026be:	e000      	b.n	80026c2 <ssd1306_FillCircle+0xe0>
        return;
 80026c0:	bf00      	nop
}
 80026c2:	3724      	adds	r7, #36	; 0x24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd90      	pop	{r4, r7, pc}

080026c8 <ssd1306_DrawRectangle>:

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af02      	add	r7, sp, #8
 80026ce:	4604      	mov	r4, r0
 80026d0:	4608      	mov	r0, r1
 80026d2:	4611      	mov	r1, r2
 80026d4:	461a      	mov	r2, r3
 80026d6:	4623      	mov	r3, r4
 80026d8:	71fb      	strb	r3, [r7, #7]
 80026da:	4603      	mov	r3, r0
 80026dc:	71bb      	strb	r3, [r7, #6]
 80026de:	460b      	mov	r3, r1
 80026e0:	717b      	strb	r3, [r7, #5]
 80026e2:	4613      	mov	r3, r2
 80026e4:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 80026e6:	79bc      	ldrb	r4, [r7, #6]
 80026e8:	797a      	ldrb	r2, [r7, #5]
 80026ea:	79b9      	ldrb	r1, [r7, #6]
 80026ec:	79f8      	ldrb	r0, [r7, #7]
 80026ee:	7e3b      	ldrb	r3, [r7, #24]
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	4623      	mov	r3, r4
 80026f4:	f7ff fb56 	bl	8001da4 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 80026f8:	793c      	ldrb	r4, [r7, #4]
 80026fa:	797a      	ldrb	r2, [r7, #5]
 80026fc:	79b9      	ldrb	r1, [r7, #6]
 80026fe:	7978      	ldrb	r0, [r7, #5]
 8002700:	7e3b      	ldrb	r3, [r7, #24]
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	4623      	mov	r3, r4
 8002706:	f7ff fb4d 	bl	8001da4 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 800270a:	793c      	ldrb	r4, [r7, #4]
 800270c:	79fa      	ldrb	r2, [r7, #7]
 800270e:	7939      	ldrb	r1, [r7, #4]
 8002710:	7978      	ldrb	r0, [r7, #5]
 8002712:	7e3b      	ldrb	r3, [r7, #24]
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	4623      	mov	r3, r4
 8002718:	f7ff fb44 	bl	8001da4 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 800271c:	79bc      	ldrb	r4, [r7, #6]
 800271e:	79fa      	ldrb	r2, [r7, #7]
 8002720:	7939      	ldrb	r1, [r7, #4]
 8002722:	79f8      	ldrb	r0, [r7, #7]
 8002724:	7e3b      	ldrb	r3, [r7, #24]
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	4623      	mov	r3, r4
 800272a:	f7ff fb3b 	bl	8001da4 <ssd1306_Line>

    return;
 800272e:	bf00      	nop
}
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bd90      	pop	{r4, r7, pc}

08002736 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002736:	b590      	push	{r4, r7, lr}
 8002738:	b085      	sub	sp, #20
 800273a:	af00      	add	r7, sp, #0
 800273c:	4604      	mov	r4, r0
 800273e:	4608      	mov	r0, r1
 8002740:	4611      	mov	r1, r2
 8002742:	461a      	mov	r2, r3
 8002744:	4623      	mov	r3, r4
 8002746:	71fb      	strb	r3, [r7, #7]
 8002748:	4603      	mov	r3, r0
 800274a:	71bb      	strb	r3, [r7, #6]
 800274c:	460b      	mov	r3, r1
 800274e:	717b      	strb	r3, [r7, #5]
 8002750:	4613      	mov	r3, r2
 8002752:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8002754:	79fa      	ldrb	r2, [r7, #7]
 8002756:	797b      	ldrb	r3, [r7, #5]
 8002758:	4293      	cmp	r3, r2
 800275a:	bf28      	it	cs
 800275c:	4613      	movcs	r3, r2
 800275e:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8002760:	797a      	ldrb	r2, [r7, #5]
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	4293      	cmp	r3, r2
 8002766:	bf38      	it	cc
 8002768:	4613      	movcc	r3, r2
 800276a:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 800276c:	79ba      	ldrb	r2, [r7, #6]
 800276e:	793b      	ldrb	r3, [r7, #4]
 8002770:	4293      	cmp	r3, r2
 8002772:	bf28      	it	cs
 8002774:	4613      	movcs	r3, r2
 8002776:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8002778:	793a      	ldrb	r2, [r7, #4]
 800277a:	79bb      	ldrb	r3, [r7, #6]
 800277c:	4293      	cmp	r3, r2
 800277e:	bf38      	it	cc
 8002780:	4613      	movcc	r3, r2
 8002782:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002784:	7afb      	ldrb	r3, [r7, #11]
 8002786:	73fb      	strb	r3, [r7, #15]
 8002788:	e017      	b.n	80027ba <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800278a:	7b7b      	ldrb	r3, [r7, #13]
 800278c:	73bb      	strb	r3, [r7, #14]
 800278e:	e009      	b.n	80027a4 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8002790:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002794:	7bf9      	ldrb	r1, [r7, #15]
 8002796:	7bbb      	ldrb	r3, [r7, #14]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff f9e9 	bl	8001b70 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800279e:	7bbb      	ldrb	r3, [r7, #14]
 80027a0:	3301      	adds	r3, #1
 80027a2:	73bb      	strb	r3, [r7, #14]
 80027a4:	7bba      	ldrb	r2, [r7, #14]
 80027a6:	7b3b      	ldrb	r3, [r7, #12]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d803      	bhi.n	80027b4 <ssd1306_FillRectangle+0x7e>
 80027ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	daed      	bge.n	8002790 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
 80027b6:	3301      	adds	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
 80027ba:	7bfa      	ldrb	r2, [r7, #15]
 80027bc:	7abb      	ldrb	r3, [r7, #10]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d803      	bhi.n	80027ca <ssd1306_FillRectangle+0x94>
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	2b3f      	cmp	r3, #63	; 0x3f
 80027c6:	d9e0      	bls.n	800278a <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 80027c8:	bf00      	nop
 80027ca:	bf00      	nop
}
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd90      	pop	{r4, r7, pc}

080027d2 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b084      	sub	sp, #16
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	603a      	str	r2, [r7, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	4603      	mov	r3, r0
 80027de:	71fb      	strb	r3, [r7, #7]
 80027e0:	460b      	mov	r3, r1
 80027e2:	71bb      	strb	r3, [r7, #6]
 80027e4:	4613      	mov	r3, r2
 80027e6:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80027e8:	797b      	ldrb	r3, [r7, #5]
 80027ea:	3307      	adds	r3, #7
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	da00      	bge.n	80027f2 <ssd1306_DrawBitmap+0x20>
 80027f0:	3307      	adds	r3, #7
 80027f2:	10db      	asrs	r3, r3, #3
 80027f4:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	db3e      	blt.n	8002880 <ssd1306_DrawBitmap+0xae>
 8002802:	79bb      	ldrb	r3, [r7, #6]
 8002804:	2b3f      	cmp	r3, #63	; 0x3f
 8002806:	d83b      	bhi.n	8002880 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8002808:	2300      	movs	r3, #0
 800280a:	73bb      	strb	r3, [r7, #14]
 800280c:	e033      	b.n	8002876 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 800280e:	2300      	movs	r3, #0
 8002810:	737b      	strb	r3, [r7, #13]
 8002812:	e026      	b.n	8002862 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8002814:	7b7b      	ldrb	r3, [r7, #13]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
 8002824:	e00d      	b.n	8002842 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002826:	7bbb      	ldrb	r3, [r7, #14]
 8002828:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800282c:	fb02 f303 	mul.w	r3, r2, r3
 8002830:	7b7a      	ldrb	r2, [r7, #13]
 8002832:	08d2      	lsrs	r2, r2, #3
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	4413      	add	r3, r2
 8002838:	461a      	mov	r2, r3
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	4413      	add	r3, r2
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8002842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002846:	2b00      	cmp	r3, #0
 8002848:	da08      	bge.n	800285c <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 800284a:	79fa      	ldrb	r2, [r7, #7]
 800284c:	7b7b      	ldrb	r3, [r7, #13]
 800284e:	4413      	add	r3, r2
 8002850:	b2db      	uxtb	r3, r3
 8002852:	7f3a      	ldrb	r2, [r7, #28]
 8002854:	79b9      	ldrb	r1, [r7, #6]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff f98a 	bl	8001b70 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800285c:	7b7b      	ldrb	r3, [r7, #13]
 800285e:	3301      	adds	r3, #1
 8002860:	737b      	strb	r3, [r7, #13]
 8002862:	7b7a      	ldrb	r2, [r7, #13]
 8002864:	797b      	ldrb	r3, [r7, #5]
 8002866:	429a      	cmp	r2, r3
 8002868:	d3d4      	bcc.n	8002814 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 800286a:	7bbb      	ldrb	r3, [r7, #14]
 800286c:	3301      	adds	r3, #1
 800286e:	73bb      	strb	r3, [r7, #14]
 8002870:	79bb      	ldrb	r3, [r7, #6]
 8002872:	3301      	adds	r3, #1
 8002874:	71bb      	strb	r3, [r7, #6]
 8002876:	7bba      	ldrb	r2, [r7, #14]
 8002878:	7e3b      	ldrb	r3, [r7, #24]
 800287a:	429a      	cmp	r2, r3
 800287c:	d3c7      	bcc.n	800280e <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 800287e:	e000      	b.n	8002882 <ssd1306_DrawBitmap+0xb0>
        return;
 8002880:	bf00      	nop
}
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002892:	2381      	movs	r3, #129	; 0x81
 8002894:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002896:	7bfb      	ldrb	r3, [r7, #15]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff f881 	bl	80019a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff f87d 	bl	80019a0 <ssd1306_WriteCommand>
}
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80028c0:	23af      	movs	r3, #175	; 0xaf
 80028c2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80028c4:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <ssd1306_SetDisplayOn+0x38>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	715a      	strb	r2, [r3, #5]
 80028ca:	e004      	b.n	80028d6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80028cc:	23ae      	movs	r3, #174	; 0xae
 80028ce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80028d0:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <ssd1306_SetDisplayOn+0x38>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff f861 	bl	80019a0 <ssd1306_WriteCommand>
}
 80028de:	bf00      	nop
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	2000082c 	.word	0x2000082c

080028ec <ssd1306_TestBorder>:
0x00, 0x03, 0xFF, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x3F, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void ssd1306_TestBorder() {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 80028f2:	2000      	movs	r0, #0
 80028f4:	f7ff f8f0 	bl	8001ad8 <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 80028f8:	f000 fb7c 	bl	8002ff4 <HAL_GetTick>
 80028fc:	60b8      	str	r0, [r7, #8]
    uint32_t end = start;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	607b      	str	r3, [r7, #4]
    uint8_t x = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	73fb      	strb	r3, [r7, #15]
    uint8_t y = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	73bb      	strb	r3, [r7, #14]
    do {
        ssd1306_DrawPixel(x, y, Black);
 800290a:	7bb9      	ldrb	r1, [r7, #14]
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	2200      	movs	r2, #0
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff f92d 	bl	8001b70 <ssd1306_DrawPixel>

        if((y == 0) && (x < 127))
 8002916:	7bbb      	ldrb	r3, [r7, #14]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d106      	bne.n	800292a <ssd1306_TestBorder+0x3e>
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	2b7e      	cmp	r3, #126	; 0x7e
 8002920:	d803      	bhi.n	800292a <ssd1306_TestBorder+0x3e>
            x++;
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	3301      	adds	r3, #1
 8002926:	73fb      	strb	r3, [r7, #15]
 8002928:	e016      	b.n	8002958 <ssd1306_TestBorder+0x6c>
        else if((x == 127) && (y < (SSD1306_HEIGHT-1)))
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	2b7f      	cmp	r3, #127	; 0x7f
 800292e:	d106      	bne.n	800293e <ssd1306_TestBorder+0x52>
 8002930:	7bbb      	ldrb	r3, [r7, #14]
 8002932:	2b3e      	cmp	r3, #62	; 0x3e
 8002934:	d803      	bhi.n	800293e <ssd1306_TestBorder+0x52>
            y++;
 8002936:	7bbb      	ldrb	r3, [r7, #14]
 8002938:	3301      	adds	r3, #1
 800293a:	73bb      	strb	r3, [r7, #14]
 800293c:	e00c      	b.n	8002958 <ssd1306_TestBorder+0x6c>
        else if((y == (SSD1306_HEIGHT-1)) && (x > 0)) 
 800293e:	7bbb      	ldrb	r3, [r7, #14]
 8002940:	2b3f      	cmp	r3, #63	; 0x3f
 8002942:	d106      	bne.n	8002952 <ssd1306_TestBorder+0x66>
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <ssd1306_TestBorder+0x66>
            x--;
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	3b01      	subs	r3, #1
 800294e:	73fb      	strb	r3, [r7, #15]
 8002950:	e002      	b.n	8002958 <ssd1306_TestBorder+0x6c>
        else
            y--;
 8002952:	7bbb      	ldrb	r3, [r7, #14]
 8002954:	3b01      	subs	r3, #1
 8002956:	73bb      	strb	r3, [r7, #14]

        ssd1306_DrawPixel(x, y, White);
 8002958:	7bb9      	ldrb	r1, [r7, #14]
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	2201      	movs	r2, #1
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff f906 	bl	8001b70 <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 8002964:	f7ff f8dc 	bl	8001b20 <ssd1306_UpdateScreen>
    
        HAL_Delay(5);
 8002968:	2005      	movs	r0, #5
 800296a:	f000 fb4f 	bl	800300c <HAL_Delay>
        end = HAL_GetTick();
 800296e:	f000 fb41 	bl	8002ff4 <HAL_GetTick>
 8002972:	6078      	str	r0, [r7, #4]
    } while((end - start) < 8000);
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800297e:	d3c4      	bcc.n	800290a <ssd1306_TestBorder+0x1e>
   
    HAL_Delay(1000);
 8002980:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002984:	f000 fb42 	bl	800300c <HAL_Delay>
}
 8002988:	bf00      	nop
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <ssd1306_TestFonts1>:

void ssd1306_TestFonts1() {
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
    uint8_t y = 0;
 8002996:	2300      	movs	r3, #0
 8002998:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 800299a:	2000      	movs	r0, #0
 800299c:	f7ff f89c 	bl	8001ad8 <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_16x26
    ssd1306_SetCursor(2, y);
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	4619      	mov	r1, r3
 80029a4:	2002      	movs	r0, #2
 80029a6:	f7ff f9e5 	bl	8001d74 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 80029aa:	4a1b      	ldr	r2, [pc, #108]	; (8002a18 <ssd1306_TestFonts1+0x88>)
 80029ac:	2301      	movs	r3, #1
 80029ae:	ca06      	ldmia	r2, {r1, r2}
 80029b0:	481a      	ldr	r0, [pc, #104]	; (8002a1c <ssd1306_TestFonts1+0x8c>)
 80029b2:	f7ff f9b9 	bl	8001d28 <ssd1306_WriteString>
    y += 26;
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	331a      	adds	r3, #26
 80029ba:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	4619      	mov	r1, r3
 80029c0:	2002      	movs	r0, #2
 80029c2:	f7ff f9d7 	bl	8001d74 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 80029c6:	4a16      	ldr	r2, [pc, #88]	; (8002a20 <ssd1306_TestFonts1+0x90>)
 80029c8:	2301      	movs	r3, #1
 80029ca:	ca06      	ldmia	r2, {r1, r2}
 80029cc:	4815      	ldr	r0, [pc, #84]	; (8002a24 <ssd1306_TestFonts1+0x94>)
 80029ce:	f7ff f9ab 	bl	8001d28 <ssd1306_WriteString>
    y += 18;
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	3312      	adds	r3, #18
 80029d6:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	4619      	mov	r1, r3
 80029dc:	2002      	movs	r0, #2
 80029de:	f7ff f9c9 	bl	8001d74 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 80029e2:	4a11      	ldr	r2, [pc, #68]	; (8002a28 <ssd1306_TestFonts1+0x98>)
 80029e4:	2301      	movs	r3, #1
 80029e6:	ca06      	ldmia	r2, {r1, r2}
 80029e8:	4810      	ldr	r0, [pc, #64]	; (8002a2c <ssd1306_TestFonts1+0x9c>)
 80029ea:	f7ff f99d 	bl	8001d28 <ssd1306_WriteString>
    y += 10;
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	330a      	adds	r3, #10
 80029f2:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	4619      	mov	r1, r3
 80029f8:	2002      	movs	r0, #2
 80029fa:	f7ff f9bb 	bl	8001d74 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 80029fe:	4a0c      	ldr	r2, [pc, #48]	; (8002a30 <ssd1306_TestFonts1+0xa0>)
 8002a00:	2301      	movs	r3, #1
 8002a02:	ca06      	ldmia	r2, {r1, r2}
 8002a04:	480b      	ldr	r0, [pc, #44]	; (8002a34 <ssd1306_TestFonts1+0xa4>)
 8002a06:	f7ff f98f 	bl	8001d28 <ssd1306_WriteString>
    #endif

    ssd1306_UpdateScreen();
 8002a0a:	f7ff f889 	bl	8001b20 <ssd1306_UpdateScreen>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	2000001c 	.word	0x2000001c
 8002a1c:	0800b3b0 	.word	0x0800b3b0
 8002a20:	20000014 	.word	0x20000014
 8002a24:	0800b3bc 	.word	0x0800b3bc
 8002a28:	2000000c 	.word	0x2000000c
 8002a2c:	0800b3c8 	.word	0x0800b3c8
 8002a30:	20000004 	.word	0x20000004
 8002a34:	0800b3d4 	.word	0x0800b3d4

08002a38 <ssd1306_TestFonts2>:

/*
 * This test shows how an 128x64 px OLED can replace a 0802 LCD.
 */
void ssd1306_TestFonts2() {
 8002a38:	b590      	push	{r4, r7, lr}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_16x24
    uint8_t x1, y1, x2, y2;

    ssd1306_Fill(Black);
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f7ff f84a 	bl	8001ad8 <ssd1306_Fill>

    ssd1306_SetCursor(0, 4);
 8002a44:	2104      	movs	r1, #4
 8002a46:	2000      	movs	r0, #0
 8002a48:	f7ff f994 	bl	8001d74 <ssd1306_SetCursor>
    ssd1306_WriteString("18.092.5", Font_16x24, White);
 8002a4c:	4a13      	ldr	r2, [pc, #76]	; (8002a9c <ssd1306_TestFonts2+0x64>)
 8002a4e:	2301      	movs	r3, #1
 8002a50:	ca06      	ldmia	r2, {r1, r2}
 8002a52:	4813      	ldr	r0, [pc, #76]	; (8002aa0 <ssd1306_TestFonts2+0x68>)
 8002a54:	f7ff f968 	bl	8001d28 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 4+24+8);
 8002a58:	2124      	movs	r1, #36	; 0x24
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f7ff f98a 	bl	8001d74 <ssd1306_SetCursor>
    ssd1306_WriteString("RIT+1000", Font_16x24, White);
 8002a60:	4a0e      	ldr	r2, [pc, #56]	; (8002a9c <ssd1306_TestFonts2+0x64>)
 8002a62:	2301      	movs	r3, #1
 8002a64:	ca06      	ldmia	r2, {r1, r2}
 8002a66:	480f      	ldr	r0, [pc, #60]	; (8002aa4 <ssd1306_TestFonts2+0x6c>)
 8002a68:	f7ff f95e 	bl	8001d28 <ssd1306_WriteString>

    // underline
    x1 = 6*16;
 8002a6c:	2360      	movs	r3, #96	; 0x60
 8002a6e:	71fb      	strb	r3, [r7, #7]
    y1 = 4+24+8+24;
 8002a70:	233c      	movs	r3, #60	; 0x3c
 8002a72:	71bb      	strb	r3, [r7, #6]
    x2 = x1+16;
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	3310      	adds	r3, #16
 8002a78:	717b      	strb	r3, [r7, #5]
    y2 = y1+2;
 8002a7a:	79bb      	ldrb	r3, [r7, #6]
 8002a7c:	3302      	adds	r3, #2
 8002a7e:	713b      	strb	r3, [r7, #4]
    ssd1306_FillRectangle(x1, y1, x2, y2, White);
 8002a80:	793b      	ldrb	r3, [r7, #4]
 8002a82:	797a      	ldrb	r2, [r7, #5]
 8002a84:	79b9      	ldrb	r1, [r7, #6]
 8002a86:	79f8      	ldrb	r0, [r7, #7]
 8002a88:	2401      	movs	r4, #1
 8002a8a:	9400      	str	r4, [sp, #0]
 8002a8c:	f7ff fe53 	bl	8002736 <ssd1306_FillRectangle>

    ssd1306_UpdateScreen();
 8002a90:	f7ff f846 	bl	8001b20 <ssd1306_UpdateScreen>
#endif
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd90      	pop	{r4, r7, pc}
 8002a9c:	20000024 	.word	0x20000024
 8002aa0:	0800b3e0 	.word	0x0800b3e0
 8002aa4:	0800b3ec 	.word	0x0800b3ec

08002aa8 <ssd1306_TestFPS>:

void ssd1306_TestFPS() {
 8002aa8:	b5b0      	push	{r4, r5, r7, lr}
 8002aaa:	b098      	sub	sp, #96	; 0x60
 8002aac:	af00      	add	r7, sp, #0
    ssd1306_Fill(White);
 8002aae:	2001      	movs	r0, #1
 8002ab0:	f7ff f812 	bl	8001ad8 <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 8002ab4:	f000 fa9e 	bl	8002ff4 <HAL_GetTick>
 8002ab8:	65b8      	str	r0, [r7, #88]	; 0x58
    uint32_t end = start;
 8002aba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002abc:	657b      	str	r3, [r7, #84]	; 0x54
    int fps = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	65fb      	str	r3, [r7, #92]	; 0x5c
    char message[] = "ABCDEFGHIJK";
 8002ac2:	4a43      	ldr	r2, [pc, #268]	; (8002bd0 <ssd1306_TestFPS+0x128>)
 8002ac4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ac8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002aca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   
    ssd1306_SetCursor(2,0);
 8002ace:	2100      	movs	r1, #0
 8002ad0:	2002      	movs	r0, #2
 8002ad2:	f7ff f94f 	bl	8001d74 <ssd1306_SetCursor>
    ssd1306_WriteString("Testing...", Font_11x18, Black);
 8002ad6:	4a3f      	ldr	r2, [pc, #252]	; (8002bd4 <ssd1306_TestFPS+0x12c>)
 8002ad8:	2300      	movs	r3, #0
 8002ada:	ca06      	ldmia	r2, {r1, r2}
 8002adc:	483e      	ldr	r0, [pc, #248]	; (8002bd8 <ssd1306_TestFPS+0x130>)
 8002ade:	f7ff f923 	bl	8001d28 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 18*2);
 8002ae2:	2124      	movs	r1, #36	; 0x24
 8002ae4:	2002      	movs	r0, #2
 8002ae6:	f7ff f945 	bl	8001d74 <ssd1306_SetCursor>
    ssd1306_WriteString("0123456789A", Font_11x18, Black);
 8002aea:	4a3a      	ldr	r2, [pc, #232]	; (8002bd4 <ssd1306_TestFPS+0x12c>)
 8002aec:	2300      	movs	r3, #0
 8002aee:	ca06      	ldmia	r2, {r1, r2}
 8002af0:	483a      	ldr	r0, [pc, #232]	; (8002bdc <ssd1306_TestFPS+0x134>)
 8002af2:	f7ff f919 	bl	8001d28 <ssd1306_WriteString>
   
    do {
        ssd1306_SetCursor(2, 18);
 8002af6:	2112      	movs	r1, #18
 8002af8:	2002      	movs	r0, #2
 8002afa:	f7ff f93b 	bl	8001d74 <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_11x18, Black);
 8002afe:	4a35      	ldr	r2, [pc, #212]	; (8002bd4 <ssd1306_TestFPS+0x12c>)
 8002b00:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002b04:	2300      	movs	r3, #0
 8002b06:	ca06      	ldmia	r2, {r1, r2}
 8002b08:	f7ff f90e 	bl	8001d28 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8002b0c:	f7ff f808 	bl	8001b20 <ssd1306_UpdateScreen>
       
        char ch = message[0];
 8002b10:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002b14:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        memmove(message, message+1, sizeof(message)-2);
 8002b18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002b22:	220a      	movs	r2, #10
 8002b24:	4619      	mov	r1, r3
 8002b26:	f004 fc7d 	bl	8007424 <memmove>
        message[sizeof(message)-2] = ch;
 8002b2a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002b2e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

        fps++;
 8002b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b34:	3301      	adds	r3, #1
 8002b36:	65fb      	str	r3, [r7, #92]	; 0x5c
        end = HAL_GetTick();
 8002b38:	f000 fa5c 	bl	8002ff4 <HAL_GetTick>
 8002b3c:	6578      	str	r0, [r7, #84]	; 0x54
    } while((end - start) < 5000);
 8002b3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	f241 3287 	movw	r2, #4999	; 0x1387
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d9d4      	bls.n	8002af6 <ssd1306_TestFPS+0x4e>
   
    HAL_Delay(5000);
 8002b4c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002b50:	f000 fa5c 	bl	800300c <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 8002b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b56:	ee07 3a90 	vmov	s15, r3
 8002b5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b5e:	ee17 0a90 	vmov	r0, s15
 8002b62:	f7fd fcf1 	bl	8000548 <__aeabi_f2d>
 8002b66:	4604      	mov	r4, r0
 8002b68:	460d      	mov	r5, r1
 8002b6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002b6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd fcc7 	bl	8000504 <__aeabi_ui2d>
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	4b19      	ldr	r3, [pc, #100]	; (8002be0 <ssd1306_TestFPS+0x138>)
 8002b7c:	f7fd fe66 	bl	800084c <__aeabi_ddiv>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4620      	mov	r0, r4
 8002b86:	4629      	mov	r1, r5
 8002b88:	f7fd fe60 	bl	800084c <__aeabi_ddiv>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4610      	mov	r0, r2
 8002b92:	4619      	mov	r1, r3
 8002b94:	f7fd ffe0 	bl	8000b58 <__aeabi_d2iz>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 8002b9c:	1d38      	adds	r0, r7, #4
 8002b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba0:	4a10      	ldr	r2, [pc, #64]	; (8002be4 <ssd1306_TestFPS+0x13c>)
 8002ba2:	2140      	movs	r1, #64	; 0x40
 8002ba4:	f005 f8e2 	bl	8007d6c <sniprintf>
   
    ssd1306_Fill(White);
 8002ba8:	2001      	movs	r0, #1
 8002baa:	f7fe ff95 	bl	8001ad8 <ssd1306_Fill>
    ssd1306_SetCursor(2, 2);
 8002bae:	2102      	movs	r1, #2
 8002bb0:	2002      	movs	r0, #2
 8002bb2:	f7ff f8df 	bl	8001d74 <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_11x18, Black);
 8002bb6:	4a07      	ldr	r2, [pc, #28]	; (8002bd4 <ssd1306_TestFPS+0x12c>)
 8002bb8:	1d38      	adds	r0, r7, #4
 8002bba:	2300      	movs	r3, #0
 8002bbc:	ca06      	ldmia	r2, {r1, r2}
 8002bbe:	f7ff f8b3 	bl	8001d28 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8002bc2:	f7fe ffad 	bl	8001b20 <ssd1306_UpdateScreen>
}
 8002bc6:	bf00      	nop
 8002bc8:	3760      	adds	r7, #96	; 0x60
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bdb0      	pop	{r4, r5, r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	0800b418 	.word	0x0800b418
 8002bd4:	20000014 	.word	0x20000014
 8002bd8:	0800b3f8 	.word	0x0800b3f8
 8002bdc:	0800b404 	.word	0x0800b404
 8002be0:	408f4000 	.word	0x408f4000
 8002be4:	0800b410 	.word	0x0800b410

08002be8 <ssd1306_TestLine>:

void ssd1306_TestLine() {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af02      	add	r7, sp, #8

  ssd1306_Line(1,1,SSD1306_WIDTH - 1,SSD1306_HEIGHT - 1,White);
 8002bee:	2301      	movs	r3, #1
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	233f      	movs	r3, #63	; 0x3f
 8002bf4:	227f      	movs	r2, #127	; 0x7f
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	f7ff f8d3 	bl	8001da4 <ssd1306_Line>
  ssd1306_Line(SSD1306_WIDTH - 1,1,1,SSD1306_HEIGHT - 1,White);
 8002bfe:	2301      	movs	r3, #1
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	233f      	movs	r3, #63	; 0x3f
 8002c04:	2201      	movs	r2, #1
 8002c06:	2101      	movs	r1, #1
 8002c08:	207f      	movs	r0, #127	; 0x7f
 8002c0a:	f7ff f8cb 	bl	8001da4 <ssd1306_Line>
  ssd1306_UpdateScreen();
 8002c0e:	f7fe ff87 	bl	8001b20 <ssd1306_UpdateScreen>
  return;
 8002c12:	bf00      	nop
}
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <ssd1306_TestRectangle>:

void ssd1306_TestRectangle() {
 8002c18:	b590      	push	{r4, r7, lr}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af02      	add	r7, sp, #8
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8002c1e:	2300      	movs	r3, #0
 8002c20:	607b      	str	r3, [r7, #4]
 8002c22:	e028      	b.n	8002c76 <ssd1306_TestRectangle+0x5e>
    ssd1306_DrawRectangle(1 + (5*delta),1 + (5*delta) ,SSD1306_WIDTH-1 - (5*delta),SSD1306_HEIGHT-1 - (5*delta),White);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	0092      	lsls	r2, r2, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	3301      	adds	r3, #1
 8002c32:	b2d8      	uxtb	r0, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	0092      	lsls	r2, r2, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	3301      	adds	r3, #1
 8002c42:	b2d9      	uxtb	r1, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	461a      	mov	r2, r3
 8002c4a:	0092      	lsls	r2, r2, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	461c      	mov	r4, r3
 8002c5c:	00a4      	lsls	r4, r4, #2
 8002c5e:	4423      	add	r3, r4
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2401      	movs	r4, #1
 8002c6a:	9400      	str	r4, [sp, #0]
 8002c6c:	f7ff fd2c 	bl	80026c8 <ssd1306_DrawRectangle>
  for(delta = 0; delta < 5; delta ++) {
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3301      	adds	r3, #1
 8002c74:	607b      	str	r3, [r7, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d9d3      	bls.n	8002c24 <ssd1306_TestRectangle+0xc>
  }
  ssd1306_UpdateScreen();
 8002c7c:	f7fe ff50 	bl	8001b20 <ssd1306_UpdateScreen>
  return;
 8002c80:	bf00      	nop
}
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd90      	pop	{r4, r7, pc}

08002c88 <ssd1306_TestRectangleFill>:

void ssd1306_TestRectangleFill() {
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af02      	add	r7, sp, #8
  ssd1306_FillRectangle(31, 1, 65, 35, White);
 8002c8e:	2301      	movs	r3, #1
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	2323      	movs	r3, #35	; 0x23
 8002c94:	2241      	movs	r2, #65	; 0x41
 8002c96:	2101      	movs	r1, #1
 8002c98:	201f      	movs	r0, #31
 8002c9a:	f7ff fd4c 	bl	8002736 <ssd1306_FillRectangle>
  ssd1306_FillRectangle(10, 45, 70, 60, White);
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	233c      	movs	r3, #60	; 0x3c
 8002ca4:	2246      	movs	r2, #70	; 0x46
 8002ca6:	212d      	movs	r1, #45	; 0x2d
 8002ca8:	200a      	movs	r0, #10
 8002caa:	f7ff fd44 	bl	8002736 <ssd1306_FillRectangle>
  ssd1306_FillRectangle(75, 10, 100, 45, White);
 8002cae:	2301      	movs	r3, #1
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	232d      	movs	r3, #45	; 0x2d
 8002cb4:	2264      	movs	r2, #100	; 0x64
 8002cb6:	210a      	movs	r1, #10
 8002cb8:	204b      	movs	r0, #75	; 0x4b
 8002cba:	f7ff fd3c 	bl	8002736 <ssd1306_FillRectangle>
  ssd1306_FillRectangle(55, 30, 80, 55, Black);
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	2337      	movs	r3, #55	; 0x37
 8002cc4:	2250      	movs	r2, #80	; 0x50
 8002cc6:	211e      	movs	r1, #30
 8002cc8:	2037      	movs	r0, #55	; 0x37
 8002cca:	f7ff fd34 	bl	8002736 <ssd1306_FillRectangle>
  ssd1306_UpdateScreen();
 8002cce:	f7fe ff27 	bl	8001b20 <ssd1306_UpdateScreen>
}
 8002cd2:	bf00      	nop
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <ssd1306_TestCircle>:

void ssd1306_TestCircle() {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8002cde:	2300      	movs	r3, #0
 8002ce0:	607b      	str	r3, [r7, #4]
 8002ce2:	e010      	b.n	8002d06 <ssd1306_TestCircle+0x2e>
    ssd1306_DrawCircle(20*delta+30, 15, 10, White);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	0092      	lsls	r2, r2, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	331e      	adds	r3, #30
 8002cf4:	b2d8      	uxtb	r0, r3
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	220a      	movs	r2, #10
 8002cfa:	210f      	movs	r1, #15
 8002cfc:	f7ff fbea 	bl	80024d4 <ssd1306_DrawCircle>
  for(delta = 0; delta < 5; delta ++) {
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3301      	adds	r3, #1
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d9eb      	bls.n	8002ce4 <ssd1306_TestCircle+0xc>
  }

  for(delta = 0; delta < 5; delta ++) {
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	607b      	str	r3, [r7, #4]
 8002d10:	e011      	b.n	8002d36 <ssd1306_TestCircle+0x5e>
    ssd1306_FillCircle(23*delta+15, 40, 10, White);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	0052      	lsls	r2, r2, #1
 8002d1a:	441a      	add	r2, r3
 8002d1c:	00d2      	lsls	r2, r2, #3
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	330f      	adds	r3, #15
 8002d24:	b2d8      	uxtb	r0, r3
 8002d26:	2301      	movs	r3, #1
 8002d28:	220a      	movs	r2, #10
 8002d2a:	2128      	movs	r1, #40	; 0x28
 8002d2c:	f7ff fc59 	bl	80025e2 <ssd1306_FillCircle>
  for(delta = 0; delta < 5; delta ++) {
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3301      	adds	r3, #1
 8002d34:	607b      	str	r3, [r7, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d9ea      	bls.n	8002d12 <ssd1306_TestCircle+0x3a>
  }

  ssd1306_UpdateScreen();
 8002d3c:	f7fe fef0 	bl	8001b20 <ssd1306_UpdateScreen>
  return;
 8002d40:	bf00      	nop
}
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <ssd1306_TestArc>:

void ssd1306_TestArc() {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af02      	add	r7, sp, #8
  ssd1306_DrawArc(30, 30, 30, 20, 270, White);
 8002d4e:	2301      	movs	r3, #1
 8002d50:	9301      	str	r3, [sp, #4]
 8002d52:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	2314      	movs	r3, #20
 8002d5a:	221e      	movs	r2, #30
 8002d5c:	211e      	movs	r1, #30
 8002d5e:	201e      	movs	r0, #30
 8002d60:	f7ff f91a 	bl	8001f98 <ssd1306_DrawArc>
  ssd1306_DrawArcWithRadiusLine(80, 55, 10, 30, 270, White);
 8002d64:	2301      	movs	r3, #1
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	231e      	movs	r3, #30
 8002d70:	220a      	movs	r2, #10
 8002d72:	2137      	movs	r1, #55	; 0x37
 8002d74:	2050      	movs	r0, #80	; 0x50
 8002d76:	f7ff fa23 	bl	80021c0 <ssd1306_DrawArcWithRadiusLine>
  ssd1306_UpdateScreen();
 8002d7a:	f7fe fed1 	bl	8001b20 <ssd1306_UpdateScreen>
  return;
 8002d7e:	bf00      	nop
}
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <ssd1306_TestPolyline>:

void ssd1306_TestPolyline() {
 8002d84:	b590      	push	{r4, r7, lr}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
  SSD1306_VERTEX loc_vertex[] =
 8002d8a:	4b08      	ldr	r3, [pc, #32]	; (8002dac <ssd1306_TestPolyline+0x28>)
 8002d8c:	463c      	mov	r4, r7
 8002d8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d90:	c407      	stmia	r4!, {r0, r1, r2}
 8002d92:	8023      	strh	r3, [r4, #0]
      {45,16},
      {50,10},
      {53,16}
  };

  ssd1306_Polyline(loc_vertex,sizeof(loc_vertex)/sizeof(loc_vertex[0]),White);
 8002d94:	463b      	mov	r3, r7
 8002d96:	2201      	movs	r2, #1
 8002d98:	2107      	movs	r1, #7
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff f86e 	bl	8001e7c <ssd1306_Polyline>
  ssd1306_UpdateScreen();
 8002da0:	f7fe febe 	bl	8001b20 <ssd1306_UpdateScreen>
  return;
 8002da4:	bf00      	nop
}
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd90      	pop	{r4, r7, pc}
 8002dac:	0800b424 	.word	0x0800b424

08002db0 <ssd1306_TestDrawBitmap>:

void ssd1306_TestDrawBitmap()
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 8002db6:	2001      	movs	r0, #1
 8002db8:	f7fe fe8e 	bl	8001ad8 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	9301      	str	r3, [sp, #4]
 8002dc0:	2340      	movs	r3, #64	; 0x40
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	2380      	movs	r3, #128	; 0x80
 8002dc6:	4a18      	ldr	r2, [pc, #96]	; (8002e28 <ssd1306_TestDrawBitmap+0x78>)
 8002dc8:	2100      	movs	r1, #0
 8002dca:	2000      	movs	r0, #0
 8002dcc:	f7ff fd01 	bl	80027d2 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 8002dd0:	f7fe fea6 	bl	8001b20 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 8002dd4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002dd8:	f000 f918 	bl	800300c <HAL_Delay>
    ssd1306_Fill(Black);
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f7fe fe7b 	bl	8001ad8 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,White);
 8002de2:	2301      	movs	r3, #1
 8002de4:	9301      	str	r3, [sp, #4]
 8002de6:	2340      	movs	r3, #64	; 0x40
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	2340      	movs	r3, #64	; 0x40
 8002dec:	4a0f      	ldr	r2, [pc, #60]	; (8002e2c <ssd1306_TestDrawBitmap+0x7c>)
 8002dee:	2100      	movs	r1, #0
 8002df0:	2020      	movs	r0, #32
 8002df2:	f7ff fcee 	bl	80027d2 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 8002df6:	f7fe fe93 	bl	8001b20 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 8002dfa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002dfe:	f000 f905 	bl	800300c <HAL_Delay>
    ssd1306_Fill(White);
 8002e02:	2001      	movs	r0, #1
 8002e04:	f7fe fe68 	bl	8001ad8 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,Black);
 8002e08:	2300      	movs	r3, #0
 8002e0a:	9301      	str	r3, [sp, #4]
 8002e0c:	2340      	movs	r3, #64	; 0x40
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	2340      	movs	r3, #64	; 0x40
 8002e12:	4a06      	ldr	r2, [pc, #24]	; (8002e2c <ssd1306_TestDrawBitmap+0x7c>)
 8002e14:	2100      	movs	r1, #0
 8002e16:	2020      	movs	r0, #32
 8002e18:	f7ff fcdb 	bl	80027d2 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 8002e1c:	f7fe fe80 	bl	8001b20 <ssd1306_UpdateScreen>
}
 8002e20:	bf00      	nop
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	0800f454 	.word	0x0800f454
 8002e2c:	0800f854 	.word	0x0800f854

08002e30 <ssd1306_TestAll>:

void ssd1306_TestAll() {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8002e34:	f7fe fde6 	bl	8001a04 <ssd1306_Init>

    ssd1306_TestFPS();
 8002e38:	f7ff fe36 	bl	8002aa8 <ssd1306_TestFPS>
    HAL_Delay(3000);
 8002e3c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002e40:	f000 f8e4 	bl	800300c <HAL_Delay>
    ssd1306_TestBorder();
 8002e44:	f7ff fd52 	bl	80028ec <ssd1306_TestBorder>
    ssd1306_TestFonts1();
 8002e48:	f7ff fda2 	bl	8002990 <ssd1306_TestFonts1>
    HAL_Delay(3000);
 8002e4c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002e50:	f000 f8dc 	bl	800300c <HAL_Delay>
    ssd1306_TestFonts2();
 8002e54:	f7ff fdf0 	bl	8002a38 <ssd1306_TestFonts2>
    HAL_Delay(3000);
 8002e58:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002e5c:	f000 f8d6 	bl	800300c <HAL_Delay>
    ssd1306_Fill(Black);
 8002e60:	2000      	movs	r0, #0
 8002e62:	f7fe fe39 	bl	8001ad8 <ssd1306_Fill>
    ssd1306_TestRectangle();
 8002e66:	f7ff fed7 	bl	8002c18 <ssd1306_TestRectangle>
    ssd1306_TestLine();
 8002e6a:	f7ff febd 	bl	8002be8 <ssd1306_TestLine>
    HAL_Delay(3000);
 8002e6e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002e72:	f000 f8cb 	bl	800300c <HAL_Delay>
    ssd1306_Fill(Black);
 8002e76:	2000      	movs	r0, #0
 8002e78:	f7fe fe2e 	bl	8001ad8 <ssd1306_Fill>
    ssd1306_TestRectangleFill();
 8002e7c:	f7ff ff04 	bl	8002c88 <ssd1306_TestRectangleFill>
    HAL_Delay(3000);
 8002e80:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002e84:	f000 f8c2 	bl	800300c <HAL_Delay>
    ssd1306_Fill(Black);
 8002e88:	2000      	movs	r0, #0
 8002e8a:	f7fe fe25 	bl	8001ad8 <ssd1306_Fill>
    ssd1306_TestPolyline();
 8002e8e:	f7ff ff79 	bl	8002d84 <ssd1306_TestPolyline>
    HAL_Delay(3000);
 8002e92:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002e96:	f000 f8b9 	bl	800300c <HAL_Delay>
    ssd1306_Fill(Black);
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f7fe fe1c 	bl	8001ad8 <ssd1306_Fill>
    ssd1306_TestArc();
 8002ea0:	f7ff ff52 	bl	8002d48 <ssd1306_TestArc>
    HAL_Delay(3000);
 8002ea4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002ea8:	f000 f8b0 	bl	800300c <HAL_Delay>
    ssd1306_Fill(Black);
 8002eac:	2000      	movs	r0, #0
 8002eae:	f7fe fe13 	bl	8001ad8 <ssd1306_Fill>
    ssd1306_TestCircle();
 8002eb2:	f7ff ff11 	bl	8002cd8 <ssd1306_TestCircle>
    HAL_Delay(3000);
 8002eb6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002eba:	f000 f8a7 	bl	800300c <HAL_Delay>
    ssd1306_TestDrawBitmap();
 8002ebe:	f7ff ff77 	bl	8002db0 <ssd1306_TestDrawBitmap>
    HAL_Delay(3000);
 8002ec2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002ec6:	f000 f8a1 	bl	800300c <HAL_Delay>
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ed4:	f7fe fd4a 	bl	800196c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ed8:	480c      	ldr	r0, [pc, #48]	; (8002f0c <LoopForever+0x6>)
  ldr r1, =_edata
 8002eda:	490d      	ldr	r1, [pc, #52]	; (8002f10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002edc:	4a0d      	ldr	r2, [pc, #52]	; (8002f14 <LoopForever+0xe>)
  movs r3, #0
 8002ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ee0:	e002      	b.n	8002ee8 <LoopCopyDataInit>

08002ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ee6:	3304      	adds	r3, #4

08002ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eec:	d3f9      	bcc.n	8002ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eee:	4a0a      	ldr	r2, [pc, #40]	; (8002f18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ef0:	4c0a      	ldr	r4, [pc, #40]	; (8002f1c <LoopForever+0x16>)
  movs r3, #0
 8002ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ef4:	e001      	b.n	8002efa <LoopFillZerobss>

08002ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ef8:	3204      	adds	r2, #4

08002efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002efc:	d3fb      	bcc.n	8002ef6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002efe:	f004 fa5f 	bl	80073c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f02:	f7fe f823 	bl	8000f4c <main>

08002f06 <LoopForever>:

LoopForever:
    b LoopForever
 8002f06:	e7fe      	b.n	8002f06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f08:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f10:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002f14:	08010018 	.word	0x08010018
  ldr r2, =_sbss
 8002f18:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8002f1c:	20000848 	.word	0x20000848

08002f20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f20:	e7fe      	b.n	8002f20 <ADC1_2_IRQHandler>

08002f22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f2c:	2003      	movs	r0, #3
 8002f2e:	f000 f961 	bl	80031f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f32:	200f      	movs	r0, #15
 8002f34:	f000 f80e 	bl	8002f54 <HAL_InitTick>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	71fb      	strb	r3, [r7, #7]
 8002f42:	e001      	b.n	8002f48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f44:	f7fe fa34 	bl	80013b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f48:	79fb      	ldrb	r3, [r7, #7]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002f60:	4b17      	ldr	r3, [pc, #92]	; (8002fc0 <HAL_InitTick+0x6c>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d023      	beq.n	8002fb0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f68:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <HAL_InitTick+0x70>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4b14      	ldr	r3, [pc, #80]	; (8002fc0 <HAL_InitTick+0x6c>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	4619      	mov	r1, r3
 8002f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 f96d 	bl	800325e <HAL_SYSTICK_Config>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10f      	bne.n	8002faa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b0f      	cmp	r3, #15
 8002f8e:	d809      	bhi.n	8002fa4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f90:	2200      	movs	r2, #0
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	f04f 30ff 	mov.w	r0, #4294967295
 8002f98:	f000 f937 	bl	800320a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f9c:	4a0a      	ldr	r2, [pc, #40]	; (8002fc8 <HAL_InitTick+0x74>)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	e007      	b.n	8002fb4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
 8002fa8:	e004      	b.n	8002fb4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
 8002fae:	e001      	b.n	8002fb4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20000030 	.word	0x20000030
 8002fc4:	20000000 	.word	0x20000000
 8002fc8:	2000002c 	.word	0x2000002c

08002fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fd0:	4b06      	ldr	r3, [pc, #24]	; (8002fec <HAL_IncTick+0x20>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <HAL_IncTick+0x24>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4413      	add	r3, r2
 8002fdc:	4a04      	ldr	r2, [pc, #16]	; (8002ff0 <HAL_IncTick+0x24>)
 8002fde:	6013      	str	r3, [r2, #0]
}
 8002fe0:	bf00      	nop
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	20000030 	.word	0x20000030
 8002ff0:	20000834 	.word	0x20000834

08002ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ff8:	4b03      	ldr	r3, [pc, #12]	; (8003008 <HAL_GetTick+0x14>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	20000834 	.word	0x20000834

0800300c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003014:	f7ff ffee 	bl	8002ff4 <HAL_GetTick>
 8003018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003024:	d005      	beq.n	8003032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003026:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <HAL_Delay+0x44>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4413      	add	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003032:	bf00      	nop
 8003034:	f7ff ffde 	bl	8002ff4 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	429a      	cmp	r2, r3
 8003042:	d8f7      	bhi.n	8003034 <HAL_Delay+0x28>
  {
  }
}
 8003044:	bf00      	nop
 8003046:	bf00      	nop
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20000030 	.word	0x20000030

08003054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003064:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <__NVIC_SetPriorityGrouping+0x44>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003070:	4013      	ands	r3, r2
 8003072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800307c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003086:	4a04      	ldr	r2, [pc, #16]	; (8003098 <__NVIC_SetPriorityGrouping+0x44>)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	60d3      	str	r3, [r2, #12]
}
 800308c:	bf00      	nop
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030a0:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <__NVIC_GetPriorityGrouping+0x18>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	0a1b      	lsrs	r3, r3, #8
 80030a6:	f003 0307 	and.w	r3, r3, #7
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	e000ed00 	.word	0xe000ed00

080030b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	db0b      	blt.n	80030e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	f003 021f 	and.w	r2, r3, #31
 80030d0:	4907      	ldr	r1, [pc, #28]	; (80030f0 <__NVIC_EnableIRQ+0x38>)
 80030d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d6:	095b      	lsrs	r3, r3, #5
 80030d8:	2001      	movs	r0, #1
 80030da:	fa00 f202 	lsl.w	r2, r0, r2
 80030de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	e000e100 	.word	0xe000e100

080030f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	6039      	str	r1, [r7, #0]
 80030fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003104:	2b00      	cmp	r3, #0
 8003106:	db0a      	blt.n	800311e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	b2da      	uxtb	r2, r3
 800310c:	490c      	ldr	r1, [pc, #48]	; (8003140 <__NVIC_SetPriority+0x4c>)
 800310e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003112:	0112      	lsls	r2, r2, #4
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	440b      	add	r3, r1
 8003118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800311c:	e00a      	b.n	8003134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	b2da      	uxtb	r2, r3
 8003122:	4908      	ldr	r1, [pc, #32]	; (8003144 <__NVIC_SetPriority+0x50>)
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	3b04      	subs	r3, #4
 800312c:	0112      	lsls	r2, r2, #4
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	440b      	add	r3, r1
 8003132:	761a      	strb	r2, [r3, #24]
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	e000e100 	.word	0xe000e100
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003148:	b480      	push	{r7}
 800314a:	b089      	sub	sp, #36	; 0x24
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f1c3 0307 	rsb	r3, r3, #7
 8003162:	2b04      	cmp	r3, #4
 8003164:	bf28      	it	cs
 8003166:	2304      	movcs	r3, #4
 8003168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3304      	adds	r3, #4
 800316e:	2b06      	cmp	r3, #6
 8003170:	d902      	bls.n	8003178 <NVIC_EncodePriority+0x30>
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	3b03      	subs	r3, #3
 8003176:	e000      	b.n	800317a <NVIC_EncodePriority+0x32>
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800317c:	f04f 32ff 	mov.w	r2, #4294967295
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43da      	mvns	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	401a      	ands	r2, r3
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003190:	f04f 31ff 	mov.w	r1, #4294967295
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	fa01 f303 	lsl.w	r3, r1, r3
 800319a:	43d9      	mvns	r1, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a0:	4313      	orrs	r3, r2
         );
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3724      	adds	r7, #36	; 0x24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
	...

080031b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031c0:	d301      	bcc.n	80031c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031c2:	2301      	movs	r3, #1
 80031c4:	e00f      	b.n	80031e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031c6:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <SysTick_Config+0x40>)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ce:	210f      	movs	r1, #15
 80031d0:	f04f 30ff 	mov.w	r0, #4294967295
 80031d4:	f7ff ff8e 	bl	80030f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031d8:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <SysTick_Config+0x40>)
 80031da:	2200      	movs	r2, #0
 80031dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031de:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <SysTick_Config+0x40>)
 80031e0:	2207      	movs	r2, #7
 80031e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	e000e010 	.word	0xe000e010

080031f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7ff ff29 	bl	8003054 <__NVIC_SetPriorityGrouping>
}
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b086      	sub	sp, #24
 800320e:	af00      	add	r7, sp, #0
 8003210:	4603      	mov	r3, r0
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
 8003216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800321c:	f7ff ff3e 	bl	800309c <__NVIC_GetPriorityGrouping>
 8003220:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	6978      	ldr	r0, [r7, #20]
 8003228:	f7ff ff8e 	bl	8003148 <NVIC_EncodePriority>
 800322c:	4602      	mov	r2, r0
 800322e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003232:	4611      	mov	r1, r2
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff ff5d 	bl	80030f4 <__NVIC_SetPriority>
}
 800323a:	bf00      	nop
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b082      	sub	sp, #8
 8003246:	af00      	add	r7, sp, #0
 8003248:	4603      	mov	r3, r0
 800324a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800324c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff ff31 	bl	80030b8 <__NVIC_EnableIRQ>
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff ffa2 	bl	80031b0 <SysTick_Config>
 800326c:	4603      	mov	r3, r0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
	...

08003278 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e098      	b.n	80033bc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	4b4d      	ldr	r3, [pc, #308]	; (80033c8 <HAL_DMA_Init+0x150>)
 8003292:	429a      	cmp	r2, r3
 8003294:	d80f      	bhi.n	80032b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	4b4b      	ldr	r3, [pc, #300]	; (80033cc <HAL_DMA_Init+0x154>)
 800329e:	4413      	add	r3, r2
 80032a0:	4a4b      	ldr	r2, [pc, #300]	; (80033d0 <HAL_DMA_Init+0x158>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	009a      	lsls	r2, r3, #2
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a48      	ldr	r2, [pc, #288]	; (80033d4 <HAL_DMA_Init+0x15c>)
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40
 80032b4:	e00e      	b.n	80032d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	461a      	mov	r2, r3
 80032bc:	4b46      	ldr	r3, [pc, #280]	; (80033d8 <HAL_DMA_Init+0x160>)
 80032be:	4413      	add	r3, r2
 80032c0:	4a43      	ldr	r2, [pc, #268]	; (80033d0 <HAL_DMA_Init+0x158>)
 80032c2:	fba2 2303 	umull	r2, r3, r2, r3
 80032c6:	091b      	lsrs	r3, r3, #4
 80032c8:	009a      	lsls	r2, r3, #2
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a42      	ldr	r2, [pc, #264]	; (80033dc <HAL_DMA_Init+0x164>)
 80032d2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80032ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80032f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003304:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003310:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800332e:	d039      	beq.n	80033a4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	4a27      	ldr	r2, [pc, #156]	; (80033d4 <HAL_DMA_Init+0x15c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d11a      	bne.n	8003370 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800333a:	4b29      	ldr	r3, [pc, #164]	; (80033e0 <HAL_DMA_Init+0x168>)
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	f003 031c 	and.w	r3, r3, #28
 8003346:	210f      	movs	r1, #15
 8003348:	fa01 f303 	lsl.w	r3, r1, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	4924      	ldr	r1, [pc, #144]	; (80033e0 <HAL_DMA_Init+0x168>)
 8003350:	4013      	ands	r3, r2
 8003352:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003354:	4b22      	ldr	r3, [pc, #136]	; (80033e0 <HAL_DMA_Init+0x168>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6859      	ldr	r1, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003360:	f003 031c 	and.w	r3, r3, #28
 8003364:	fa01 f303 	lsl.w	r3, r1, r3
 8003368:	491d      	ldr	r1, [pc, #116]	; (80033e0 <HAL_DMA_Init+0x168>)
 800336a:	4313      	orrs	r3, r2
 800336c:	600b      	str	r3, [r1, #0]
 800336e:	e019      	b.n	80033a4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003370:	4b1c      	ldr	r3, [pc, #112]	; (80033e4 <HAL_DMA_Init+0x16c>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003378:	f003 031c 	and.w	r3, r3, #28
 800337c:	210f      	movs	r1, #15
 800337e:	fa01 f303 	lsl.w	r3, r1, r3
 8003382:	43db      	mvns	r3, r3
 8003384:	4917      	ldr	r1, [pc, #92]	; (80033e4 <HAL_DMA_Init+0x16c>)
 8003386:	4013      	ands	r3, r2
 8003388:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800338a:	4b16      	ldr	r3, [pc, #88]	; (80033e4 <HAL_DMA_Init+0x16c>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6859      	ldr	r1, [r3, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	f003 031c 	and.w	r3, r3, #28
 800339a:	fa01 f303 	lsl.w	r3, r1, r3
 800339e:	4911      	ldr	r1, [pc, #68]	; (80033e4 <HAL_DMA_Init+0x16c>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	40020407 	.word	0x40020407
 80033cc:	bffdfff8 	.word	0xbffdfff8
 80033d0:	cccccccd 	.word	0xcccccccd
 80033d4:	40020000 	.word	0x40020000
 80033d8:	bffdfbf8 	.word	0xbffdfbf8
 80033dc:	40020400 	.word	0x40020400
 80033e0:	400200a8 	.word	0x400200a8
 80033e4:	400204a8 	.word	0x400204a8

080033e8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d008      	beq.n	8003412 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2204      	movs	r2, #4
 8003404:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e022      	b.n	8003458 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 020e 	bic.w	r2, r2, #14
 8003420:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0201 	bic.w	r2, r2, #1
 8003430:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	f003 021c 	and.w	r2, r3, #28
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	2101      	movs	r1, #1
 8003440:	fa01 f202 	lsl.w	r2, r1, r2
 8003444:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003456:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d005      	beq.n	8003488 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2204      	movs	r2, #4
 8003480:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	73fb      	strb	r3, [r7, #15]
 8003486:	e029      	b.n	80034dc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 020e 	bic.w	r2, r2, #14
 8003496:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ac:	f003 021c 	and.w	r2, r3, #28
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	2101      	movs	r1, #1
 80034b6:	fa01 f202 	lsl.w	r2, r1, r2
 80034ba:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	4798      	blx	r3
    }
  }
  return status;
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	f003 031c 	and.w	r3, r3, #28
 8003506:	2204      	movs	r2, #4
 8003508:	409a      	lsls	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4013      	ands	r3, r2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d026      	beq.n	8003560 <HAL_DMA_IRQHandler+0x7a>
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d021      	beq.n	8003560 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d107      	bne.n	800353a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0204 	bic.w	r2, r2, #4
 8003538:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	f003 021c 	and.w	r2, r3, #28
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	2104      	movs	r1, #4
 8003548:	fa01 f202 	lsl.w	r2, r1, r2
 800354c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	2b00      	cmp	r3, #0
 8003554:	d071      	beq.n	800363a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800355e:	e06c      	b.n	800363a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003564:	f003 031c 	and.w	r3, r3, #28
 8003568:	2202      	movs	r2, #2
 800356a:	409a      	lsls	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4013      	ands	r3, r2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d02e      	beq.n	80035d2 <HAL_DMA_IRQHandler+0xec>
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d029      	beq.n	80035d2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0320 	and.w	r3, r3, #32
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10b      	bne.n	80035a4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 020a 	bic.w	r2, r2, #10
 800359a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a8:	f003 021c 	and.w	r2, r3, #28
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	2102      	movs	r1, #2
 80035b2:	fa01 f202 	lsl.w	r2, r1, r2
 80035b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d038      	beq.n	800363a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80035d0:	e033      	b.n	800363a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	f003 031c 	and.w	r3, r3, #28
 80035da:	2208      	movs	r2, #8
 80035dc:	409a      	lsls	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d02a      	beq.n	800363c <HAL_DMA_IRQHandler+0x156>
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d025      	beq.n	800363c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 020e 	bic.w	r2, r2, #14
 80035fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003604:	f003 021c 	and.w	r2, r3, #28
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	2101      	movs	r1, #1
 800360e:	fa01 f202 	lsl.w	r2, r1, r2
 8003612:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362e:	2b00      	cmp	r3, #0
 8003630:	d004      	beq.n	800363c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800363a:	bf00      	nop
 800363c:	bf00      	nop
}
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003652:	e17f      	b.n	8003954 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	2101      	movs	r1, #1
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	fa01 f303 	lsl.w	r3, r1, r3
 8003660:	4013      	ands	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 8171 	beq.w	800394e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	2b01      	cmp	r3, #1
 8003676:	d005      	beq.n	8003684 <HAL_GPIO_Init+0x40>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d130      	bne.n	80036e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	2203      	movs	r2, #3
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4013      	ands	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036ba:	2201      	movs	r2, #1
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4013      	ands	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	f003 0201 	and.w	r2, r3, #1
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d118      	bne.n	8003724 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80036f8:	2201      	movs	r2, #1
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	43db      	mvns	r3, r3
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	4013      	ands	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	08db      	lsrs	r3, r3, #3
 800370e:	f003 0201 	and.w	r2, r3, #1
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 0303 	and.w	r3, r3, #3
 800372c:	2b03      	cmp	r3, #3
 800372e:	d017      	beq.n	8003760 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	2203      	movs	r2, #3
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4013      	ands	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d123      	bne.n	80037b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	08da      	lsrs	r2, r3, #3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3208      	adds	r2, #8
 8003774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003778:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	220f      	movs	r2, #15
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43db      	mvns	r3, r3
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	4013      	ands	r3, r2
 800378e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	08da      	lsrs	r2, r3, #3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3208      	adds	r2, #8
 80037ae:	6939      	ldr	r1, [r7, #16]
 80037b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	2203      	movs	r2, #3
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4013      	ands	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 0203 	and.w	r2, r3, #3
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4313      	orrs	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 80ac 	beq.w	800394e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f6:	4b5f      	ldr	r3, [pc, #380]	; (8003974 <HAL_GPIO_Init+0x330>)
 80037f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037fa:	4a5e      	ldr	r2, [pc, #376]	; (8003974 <HAL_GPIO_Init+0x330>)
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	6613      	str	r3, [r2, #96]	; 0x60
 8003802:	4b5c      	ldr	r3, [pc, #368]	; (8003974 <HAL_GPIO_Init+0x330>)
 8003804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	60bb      	str	r3, [r7, #8]
 800380c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800380e:	4a5a      	ldr	r2, [pc, #360]	; (8003978 <HAL_GPIO_Init+0x334>)
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	089b      	lsrs	r3, r3, #2
 8003814:	3302      	adds	r3, #2
 8003816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800381a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	220f      	movs	r2, #15
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43db      	mvns	r3, r3
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4013      	ands	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003838:	d025      	beq.n	8003886 <HAL_GPIO_Init+0x242>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a4f      	ldr	r2, [pc, #316]	; (800397c <HAL_GPIO_Init+0x338>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d01f      	beq.n	8003882 <HAL_GPIO_Init+0x23e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a4e      	ldr	r2, [pc, #312]	; (8003980 <HAL_GPIO_Init+0x33c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d019      	beq.n	800387e <HAL_GPIO_Init+0x23a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a4d      	ldr	r2, [pc, #308]	; (8003984 <HAL_GPIO_Init+0x340>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d013      	beq.n	800387a <HAL_GPIO_Init+0x236>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a4c      	ldr	r2, [pc, #304]	; (8003988 <HAL_GPIO_Init+0x344>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00d      	beq.n	8003876 <HAL_GPIO_Init+0x232>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a4b      	ldr	r2, [pc, #300]	; (800398c <HAL_GPIO_Init+0x348>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d007      	beq.n	8003872 <HAL_GPIO_Init+0x22e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a4a      	ldr	r2, [pc, #296]	; (8003990 <HAL_GPIO_Init+0x34c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d101      	bne.n	800386e <HAL_GPIO_Init+0x22a>
 800386a:	2306      	movs	r3, #6
 800386c:	e00c      	b.n	8003888 <HAL_GPIO_Init+0x244>
 800386e:	2307      	movs	r3, #7
 8003870:	e00a      	b.n	8003888 <HAL_GPIO_Init+0x244>
 8003872:	2305      	movs	r3, #5
 8003874:	e008      	b.n	8003888 <HAL_GPIO_Init+0x244>
 8003876:	2304      	movs	r3, #4
 8003878:	e006      	b.n	8003888 <HAL_GPIO_Init+0x244>
 800387a:	2303      	movs	r3, #3
 800387c:	e004      	b.n	8003888 <HAL_GPIO_Init+0x244>
 800387e:	2302      	movs	r3, #2
 8003880:	e002      	b.n	8003888 <HAL_GPIO_Init+0x244>
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <HAL_GPIO_Init+0x244>
 8003886:	2300      	movs	r3, #0
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	f002 0203 	and.w	r2, r2, #3
 800388e:	0092      	lsls	r2, r2, #2
 8003890:	4093      	lsls	r3, r2
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003898:	4937      	ldr	r1, [pc, #220]	; (8003978 <HAL_GPIO_Init+0x334>)
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	089b      	lsrs	r3, r3, #2
 800389e:	3302      	adds	r3, #2
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038a6:	4b3b      	ldr	r3, [pc, #236]	; (8003994 <HAL_GPIO_Init+0x350>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	43db      	mvns	r3, r3
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	4013      	ands	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80038ca:	4a32      	ldr	r2, [pc, #200]	; (8003994 <HAL_GPIO_Init+0x350>)
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80038d0:	4b30      	ldr	r3, [pc, #192]	; (8003994 <HAL_GPIO_Init+0x350>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	43db      	mvns	r3, r3
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4013      	ands	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038f4:	4a27      	ldr	r2, [pc, #156]	; (8003994 <HAL_GPIO_Init+0x350>)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80038fa:	4b26      	ldr	r3, [pc, #152]	; (8003994 <HAL_GPIO_Init+0x350>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	43db      	mvns	r3, r3
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4013      	ands	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800391e:	4a1d      	ldr	r2, [pc, #116]	; (8003994 <HAL_GPIO_Init+0x350>)
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003924:	4b1b      	ldr	r3, [pc, #108]	; (8003994 <HAL_GPIO_Init+0x350>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	43db      	mvns	r3, r3
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4013      	ands	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4313      	orrs	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003948:	4a12      	ldr	r2, [pc, #72]	; (8003994 <HAL_GPIO_Init+0x350>)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	3301      	adds	r3, #1
 8003952:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	fa22 f303 	lsr.w	r3, r2, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	f47f ae78 	bne.w	8003654 <HAL_GPIO_Init+0x10>
  }
}
 8003964:	bf00      	nop
 8003966:	bf00      	nop
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40021000 	.word	0x40021000
 8003978:	40010000 	.word	0x40010000
 800397c:	48000400 	.word	0x48000400
 8003980:	48000800 	.word	0x48000800
 8003984:	48000c00 	.word	0x48000c00
 8003988:	48001000 	.word	0x48001000
 800398c:	48001400 	.word	0x48001400
 8003990:	48001800 	.word	0x48001800
 8003994:	40010400 	.word	0x40010400

08003998 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	887b      	ldrh	r3, [r7, #2]
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039b0:	2301      	movs	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
 80039b4:	e001      	b.n	80039ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039b6:	2300      	movs	r3, #0
 80039b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	807b      	strh	r3, [r7, #2]
 80039d4:	4613      	mov	r3, r2
 80039d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039d8:	787b      	ldrb	r3, [r7, #1]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039de:	887a      	ldrh	r2, [r7, #2]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039e4:	e002      	b.n	80039ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039e6:	887a      	ldrh	r2, [r7, #2]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	460b      	mov	r3, r1
 8003a02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a0a:	887a      	ldrh	r2, [r7, #2]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	041a      	lsls	r2, r3, #16
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	43d9      	mvns	r1, r3
 8003a16:	887b      	ldrh	r3, [r7, #2]
 8003a18:	400b      	ands	r3, r1
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	619a      	str	r2, [r3, #24]
}
 8003a20:	bf00      	nop
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e081      	b.n	8003b42 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d106      	bne.n	8003a58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fd fcd6 	bl	8001404 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2224      	movs	r2, #36	; 0x24
 8003a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d107      	bne.n	8003aa6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aa2:	609a      	str	r2, [r3, #8]
 8003aa4:	e006      	b.n	8003ab4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003ab2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d104      	bne.n	8003ac6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ac4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6812      	ldr	r2, [r2, #0]
 8003ad0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ad8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ae8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69d9      	ldr	r1, [r3, #28]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1a      	ldr	r2, [r3, #32]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0201 	orr.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	4608      	mov	r0, r1
 8003b56:	4611      	mov	r1, r2
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	817b      	strh	r3, [r7, #10]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	813b      	strh	r3, [r7, #8]
 8003b62:	4613      	mov	r3, r2
 8003b64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b20      	cmp	r3, #32
 8003b70:	f040 80f9 	bne.w	8003d66 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <HAL_I2C_Mem_Write+0x34>
 8003b7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d105      	bne.n	8003b8c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b86:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e0ed      	b.n	8003d68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_I2C_Mem_Write+0x4e>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e0e6      	b.n	8003d68 <HAL_I2C_Mem_Write+0x21c>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ba2:	f7ff fa27 	bl	8002ff4 <HAL_GetTick>
 8003ba6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	2319      	movs	r3, #25
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 f955 	bl	8003e64 <I2C_WaitOnFlagUntilTimeout>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0d1      	b.n	8003d68 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2221      	movs	r2, #33	; 0x21
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2240      	movs	r2, #64	; 0x40
 8003bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a3a      	ldr	r2, [r7, #32]
 8003bde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003be4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bec:	88f8      	ldrh	r0, [r7, #6]
 8003bee:	893a      	ldrh	r2, [r7, #8]
 8003bf0:	8979      	ldrh	r1, [r7, #10]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	9301      	str	r3, [sp, #4]
 8003bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 f8b9 	bl	8003d74 <I2C_RequestMemoryWrite>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e0a9      	b.n	8003d68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2bff      	cmp	r3, #255	; 0xff
 8003c1c:	d90e      	bls.n	8003c3c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	22ff      	movs	r2, #255	; 0xff
 8003c22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	8979      	ldrh	r1, [r7, #10]
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 fabd 	bl	80041b4 <I2C_TransferConfig>
 8003c3a:	e00f      	b.n	8003c5c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	8979      	ldrh	r1, [r7, #10]
 8003c4e:	2300      	movs	r3, #0
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 faac 	bl	80041b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 f93f 	bl	8003ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e07b      	b.n	8003d68 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	781a      	ldrb	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d034      	beq.n	8003d14 <HAL_I2C_Mem_Write+0x1c8>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d130      	bne.n	8003d14 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2180      	movs	r1, #128	; 0x80
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 f8d1 	bl	8003e64 <I2C_WaitOnFlagUntilTimeout>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e04d      	b.n	8003d68 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2bff      	cmp	r3, #255	; 0xff
 8003cd4:	d90e      	bls.n	8003cf4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	22ff      	movs	r2, #255	; 0xff
 8003cda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	8979      	ldrh	r1, [r7, #10]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 fa61 	bl	80041b4 <I2C_TransferConfig>
 8003cf2:	e00f      	b.n	8003d14 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	8979      	ldrh	r1, [r7, #10]
 8003d06:	2300      	movs	r3, #0
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 fa50 	bl	80041b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d19e      	bne.n	8003c5c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 f91e 	bl	8003f64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e01a      	b.n	8003d68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2220      	movs	r2, #32
 8003d38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6859      	ldr	r1, [r3, #4]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <HAL_I2C_Mem_Write+0x224>)
 8003d46:	400b      	ands	r3, r1
 8003d48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	e000      	b.n	8003d68 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003d66:	2302      	movs	r3, #2
  }
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	fe00e800 	.word	0xfe00e800

08003d74 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	4608      	mov	r0, r1
 8003d7e:	4611      	mov	r1, r2
 8003d80:	461a      	mov	r2, r3
 8003d82:	4603      	mov	r3, r0
 8003d84:	817b      	strh	r3, [r7, #10]
 8003d86:	460b      	mov	r3, r1
 8003d88:	813b      	strh	r3, [r7, #8]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	8979      	ldrh	r1, [r7, #10]
 8003d94:	4b20      	ldr	r3, [pc, #128]	; (8003e18 <I2C_RequestMemoryWrite+0xa4>)
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 fa09 	bl	80041b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003da2:	69fa      	ldr	r2, [r7, #28]
 8003da4:	69b9      	ldr	r1, [r7, #24]
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 f89c 	bl	8003ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e02c      	b.n	8003e10 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d105      	bne.n	8003dc8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dbc:	893b      	ldrh	r3, [r7, #8]
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	629a      	str	r2, [r3, #40]	; 0x28
 8003dc6:	e015      	b.n	8003df4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003dc8:	893b      	ldrh	r3, [r7, #8]
 8003dca:	0a1b      	lsrs	r3, r3, #8
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dd6:	69fa      	ldr	r2, [r7, #28]
 8003dd8:	69b9      	ldr	r1, [r7, #24]
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 f882 	bl	8003ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e012      	b.n	8003e10 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dea:	893b      	ldrh	r3, [r7, #8]
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	2180      	movs	r1, #128	; 0x80
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f830 	bl	8003e64 <I2C_WaitOnFlagUntilTimeout>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	80002000 	.word	0x80002000

08003e1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d103      	bne.n	8003e3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2200      	movs	r2, #0
 8003e38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d007      	beq.n	8003e58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	619a      	str	r2, [r3, #24]
  }
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	4613      	mov	r3, r2
 8003e72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e74:	e022      	b.n	8003ebc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7c:	d01e      	beq.n	8003ebc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e7e:	f7ff f8b9 	bl	8002ff4 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d302      	bcc.n	8003e94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d113      	bne.n	8003ebc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e98:	f043 0220 	orr.w	r2, r3, #32
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e00f      	b.n	8003edc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699a      	ldr	r2, [r3, #24]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	bf0c      	ite	eq
 8003ecc:	2301      	moveq	r3, #1
 8003ece:	2300      	movne	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d0cd      	beq.n	8003e76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ef0:	e02c      	b.n	8003f4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	68b9      	ldr	r1, [r7, #8]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 f870 	bl	8003fdc <I2C_IsErrorOccurred>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e02a      	b.n	8003f5c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0c:	d01e      	beq.n	8003f4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f0e:	f7ff f871 	bl	8002ff4 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d302      	bcc.n	8003f24 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d113      	bne.n	8003f4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f28:	f043 0220 	orr.w	r2, r3, #32
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e007      	b.n	8003f5c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d1cb      	bne.n	8003ef2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f70:	e028      	b.n	8003fc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68b9      	ldr	r1, [r7, #8]
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 f830 	bl	8003fdc <I2C_IsErrorOccurred>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e026      	b.n	8003fd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f86:	f7ff f835 	bl	8002ff4 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d302      	bcc.n	8003f9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d113      	bne.n	8003fc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa0:	f043 0220 	orr.w	r2, r3, #32
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e007      	b.n	8003fd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d1cf      	bne.n	8003f72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08a      	sub	sp, #40	; 0x28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	f003 0310 	and.w	r3, r3, #16
 8004004:	2b00      	cmp	r3, #0
 8004006:	d075      	beq.n	80040f4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2210      	movs	r2, #16
 800400e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004010:	e056      	b.n	80040c0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004018:	d052      	beq.n	80040c0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800401a:	f7fe ffeb 	bl	8002ff4 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	429a      	cmp	r2, r3
 8004028:	d302      	bcc.n	8004030 <I2C_IsErrorOccurred+0x54>
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d147      	bne.n	80040c0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800403a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004042:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800404e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004052:	d12e      	bne.n	80040b2 <I2C_IsErrorOccurred+0xd6>
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800405a:	d02a      	beq.n	80040b2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800405c:	7cfb      	ldrb	r3, [r7, #19]
 800405e:	2b20      	cmp	r3, #32
 8004060:	d027      	beq.n	80040b2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004070:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004072:	f7fe ffbf 	bl	8002ff4 <HAL_GetTick>
 8004076:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004078:	e01b      	b.n	80040b2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800407a:	f7fe ffbb 	bl	8002ff4 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b19      	cmp	r3, #25
 8004086:	d914      	bls.n	80040b2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408c:	f043 0220 	orr.w	r2, r3, #32
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d1dc      	bne.n	800407a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	f003 0320 	and.w	r3, r3, #32
 80040ca:	2b20      	cmp	r3, #32
 80040cc:	d003      	beq.n	80040d6 <I2C_IsErrorOccurred+0xfa>
 80040ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d09d      	beq.n	8004012 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80040d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d103      	bne.n	80040e6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2220      	movs	r2, #32
 80040e4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	f043 0304 	orr.w	r3, r3, #4
 80040ec:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00b      	beq.n	800411e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004116:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00b      	beq.n	8004140 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	f043 0308 	orr.w	r3, r3, #8
 800412e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004138:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00b      	beq.n	8004162 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	f043 0302 	orr.w	r3, r3, #2
 8004150:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800415a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004166:	2b00      	cmp	r3, #0
 8004168:	d01c      	beq.n	80041a4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f7ff fe56 	bl	8003e1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6859      	ldr	r1, [r3, #4]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	4b0d      	ldr	r3, [pc, #52]	; (80041b0 <I2C_IsErrorOccurred+0x1d4>)
 800417c:	400b      	ands	r3, r1
 800417e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	431a      	orrs	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80041a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3728      	adds	r7, #40	; 0x28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	fe00e800 	.word	0xfe00e800

080041b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	607b      	str	r3, [r7, #4]
 80041be:	460b      	mov	r3, r1
 80041c0:	817b      	strh	r3, [r7, #10]
 80041c2:	4613      	mov	r3, r2
 80041c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041c6:	897b      	ldrh	r3, [r7, #10]
 80041c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041cc:	7a7b      	ldrb	r3, [r7, #9]
 80041ce:	041b      	lsls	r3, r3, #16
 80041d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	4313      	orrs	r3, r2
 80041de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	0d5b      	lsrs	r3, r3, #21
 80041ee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80041f2:	4b08      	ldr	r3, [pc, #32]	; (8004214 <I2C_TransferConfig+0x60>)
 80041f4:	430b      	orrs	r3, r1
 80041f6:	43db      	mvns	r3, r3
 80041f8:	ea02 0103 	and.w	r1, r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	430a      	orrs	r2, r1
 8004204:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004206:	bf00      	nop
 8004208:	371c      	adds	r7, #28
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	03ff63ff 	.word	0x03ff63ff

08004218 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b20      	cmp	r3, #32
 800422c:	d138      	bne.n	80042a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004238:	2302      	movs	r3, #2
 800423a:	e032      	b.n	80042a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2224      	movs	r2, #36	; 0x24
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0201 	bic.w	r2, r2, #1
 800425a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800426a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6819      	ldr	r1, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0201 	orr.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2220      	movs	r2, #32
 8004290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	e000      	b.n	80042a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042a0:	2302      	movs	r3, #2
  }
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b085      	sub	sp, #20
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	d139      	bne.n	8004338 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e033      	b.n	800433a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2224      	movs	r2, #36	; 0x24
 80042de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0201 	bic.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004300:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	021b      	lsls	r3, r3, #8
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	4313      	orrs	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	e000      	b.n	800433a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004338:	2302      	movs	r3, #2
  }
}
 800433a:	4618      	mov	r0, r3
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
	...

08004348 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <HAL_PWREx_GetVoltageRange+0x18>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004354:	4618      	mov	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40007000 	.word	0x40007000

08004364 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004372:	d130      	bne.n	80043d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004374:	4b23      	ldr	r3, [pc, #140]	; (8004404 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800437c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004380:	d038      	beq.n	80043f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004382:	4b20      	ldr	r3, [pc, #128]	; (8004404 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800438a:	4a1e      	ldr	r2, [pc, #120]	; (8004404 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800438c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004390:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004392:	4b1d      	ldr	r3, [pc, #116]	; (8004408 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2232      	movs	r2, #50	; 0x32
 8004398:	fb02 f303 	mul.w	r3, r2, r3
 800439c:	4a1b      	ldr	r2, [pc, #108]	; (800440c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800439e:	fba2 2303 	umull	r2, r3, r2, r3
 80043a2:	0c9b      	lsrs	r3, r3, #18
 80043a4:	3301      	adds	r3, #1
 80043a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043a8:	e002      	b.n	80043b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043b0:	4b14      	ldr	r3, [pc, #80]	; (8004404 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043bc:	d102      	bne.n	80043c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1f2      	bne.n	80043aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043c4:	4b0f      	ldr	r3, [pc, #60]	; (8004404 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d0:	d110      	bne.n	80043f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e00f      	b.n	80043f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e2:	d007      	beq.n	80043f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80043e4:	4b07      	ldr	r3, [pc, #28]	; (8004404 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043ec:	4a05      	ldr	r2, [pc, #20]	; (8004404 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40007000 	.word	0x40007000
 8004408:	20000000 	.word	0x20000000
 800440c:	431bde83 	.word	0x431bde83

08004410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e3ca      	b.n	8004bb8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004422:	4b97      	ldr	r3, [pc, #604]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 030c 	and.w	r3, r3, #12
 800442a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800442c:	4b94      	ldr	r3, [pc, #592]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0310 	and.w	r3, r3, #16
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 80e4 	beq.w	800460c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d007      	beq.n	800445a <HAL_RCC_OscConfig+0x4a>
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	2b0c      	cmp	r3, #12
 800444e:	f040 808b 	bne.w	8004568 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2b01      	cmp	r3, #1
 8004456:	f040 8087 	bne.w	8004568 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800445a:	4b89      	ldr	r3, [pc, #548]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <HAL_RCC_OscConfig+0x62>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e3a2      	b.n	8004bb8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1a      	ldr	r2, [r3, #32]
 8004476:	4b82      	ldr	r3, [pc, #520]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0308 	and.w	r3, r3, #8
 800447e:	2b00      	cmp	r3, #0
 8004480:	d004      	beq.n	800448c <HAL_RCC_OscConfig+0x7c>
 8004482:	4b7f      	ldr	r3, [pc, #508]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800448a:	e005      	b.n	8004498 <HAL_RCC_OscConfig+0x88>
 800448c:	4b7c      	ldr	r3, [pc, #496]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 800448e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004492:	091b      	lsrs	r3, r3, #4
 8004494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004498:	4293      	cmp	r3, r2
 800449a:	d223      	bcs.n	80044e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 fd55 	bl	8004f50 <RCC_SetFlashLatencyFromMSIRange>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e383      	b.n	8004bb8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044b0:	4b73      	ldr	r3, [pc, #460]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a72      	ldr	r2, [pc, #456]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 80044b6:	f043 0308 	orr.w	r3, r3, #8
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	4b70      	ldr	r3, [pc, #448]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	496d      	ldr	r1, [pc, #436]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044ce:	4b6c      	ldr	r3, [pc, #432]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	021b      	lsls	r3, r3, #8
 80044dc:	4968      	ldr	r1, [pc, #416]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	604b      	str	r3, [r1, #4]
 80044e2:	e025      	b.n	8004530 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044e4:	4b66      	ldr	r3, [pc, #408]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a65      	ldr	r2, [pc, #404]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 80044ea:	f043 0308 	orr.w	r3, r3, #8
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	4b63      	ldr	r3, [pc, #396]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	4960      	ldr	r1, [pc, #384]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004502:	4b5f      	ldr	r3, [pc, #380]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	021b      	lsls	r3, r3, #8
 8004510:	495b      	ldr	r1, [pc, #364]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 8004512:	4313      	orrs	r3, r2
 8004514:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d109      	bne.n	8004530 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	4618      	mov	r0, r3
 8004522:	f000 fd15 	bl	8004f50 <RCC_SetFlashLatencyFromMSIRange>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e343      	b.n	8004bb8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004530:	f000 fc4a 	bl	8004dc8 <HAL_RCC_GetSysClockFreq>
 8004534:	4602      	mov	r2, r0
 8004536:	4b52      	ldr	r3, [pc, #328]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	091b      	lsrs	r3, r3, #4
 800453c:	f003 030f 	and.w	r3, r3, #15
 8004540:	4950      	ldr	r1, [pc, #320]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 8004542:	5ccb      	ldrb	r3, [r1, r3]
 8004544:	f003 031f 	and.w	r3, r3, #31
 8004548:	fa22 f303 	lsr.w	r3, r2, r3
 800454c:	4a4e      	ldr	r2, [pc, #312]	; (8004688 <HAL_RCC_OscConfig+0x278>)
 800454e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004550:	4b4e      	ldr	r3, [pc, #312]	; (800468c <HAL_RCC_OscConfig+0x27c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f7fe fcfd 	bl	8002f54 <HAL_InitTick>
 800455a:	4603      	mov	r3, r0
 800455c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d052      	beq.n	800460a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004564:	7bfb      	ldrb	r3, [r7, #15]
 8004566:	e327      	b.n	8004bb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d032      	beq.n	80045d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004570:	4b43      	ldr	r3, [pc, #268]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a42      	ldr	r2, [pc, #264]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 8004576:	f043 0301 	orr.w	r3, r3, #1
 800457a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800457c:	f7fe fd3a 	bl	8002ff4 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004584:	f7fe fd36 	bl	8002ff4 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e310      	b.n	8004bb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004596:	4b3a      	ldr	r3, [pc, #232]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045a2:	4b37      	ldr	r3, [pc, #220]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a36      	ldr	r2, [pc, #216]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 80045a8:	f043 0308 	orr.w	r3, r3, #8
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	4b34      	ldr	r3, [pc, #208]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	4931      	ldr	r1, [pc, #196]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045c0:	4b2f      	ldr	r3, [pc, #188]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	021b      	lsls	r3, r3, #8
 80045ce:	492c      	ldr	r1, [pc, #176]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	604b      	str	r3, [r1, #4]
 80045d4:	e01a      	b.n	800460c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80045d6:	4b2a      	ldr	r3, [pc, #168]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a29      	ldr	r2, [pc, #164]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 80045dc:	f023 0301 	bic.w	r3, r3, #1
 80045e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045e2:	f7fe fd07 	bl	8002ff4 <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045ea:	f7fe fd03 	bl	8002ff4 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e2dd      	b.n	8004bb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045fc:	4b20      	ldr	r3, [pc, #128]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1f0      	bne.n	80045ea <HAL_RCC_OscConfig+0x1da>
 8004608:	e000      	b.n	800460c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800460a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	d074      	beq.n	8004702 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	2b08      	cmp	r3, #8
 800461c:	d005      	beq.n	800462a <HAL_RCC_OscConfig+0x21a>
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	2b0c      	cmp	r3, #12
 8004622:	d10e      	bne.n	8004642 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2b03      	cmp	r3, #3
 8004628:	d10b      	bne.n	8004642 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800462a:	4b15      	ldr	r3, [pc, #84]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d064      	beq.n	8004700 <HAL_RCC_OscConfig+0x2f0>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d160      	bne.n	8004700 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e2ba      	b.n	8004bb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800464a:	d106      	bne.n	800465a <HAL_RCC_OscConfig+0x24a>
 800464c:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a0b      	ldr	r2, [pc, #44]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 8004652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004656:	6013      	str	r3, [r2, #0]
 8004658:	e026      	b.n	80046a8 <HAL_RCC_OscConfig+0x298>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004662:	d115      	bne.n	8004690 <HAL_RCC_OscConfig+0x280>
 8004664:	4b06      	ldr	r3, [pc, #24]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a05      	ldr	r2, [pc, #20]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 800466a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	4b03      	ldr	r3, [pc, #12]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a02      	ldr	r2, [pc, #8]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 8004676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	e014      	b.n	80046a8 <HAL_RCC_OscConfig+0x298>
 800467e:	bf00      	nop
 8004680:	40021000 	.word	0x40021000
 8004684:	0800b434 	.word	0x0800b434
 8004688:	20000000 	.word	0x20000000
 800468c:	2000002c 	.word	0x2000002c
 8004690:	4ba0      	ldr	r3, [pc, #640]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a9f      	ldr	r2, [pc, #636]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 8004696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800469a:	6013      	str	r3, [r2, #0]
 800469c:	4b9d      	ldr	r3, [pc, #628]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a9c      	ldr	r2, [pc, #624]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 80046a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d013      	beq.n	80046d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b0:	f7fe fca0 	bl	8002ff4 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046b8:	f7fe fc9c 	bl	8002ff4 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b64      	cmp	r3, #100	; 0x64
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e276      	b.n	8004bb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046ca:	4b92      	ldr	r3, [pc, #584]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0f0      	beq.n	80046b8 <HAL_RCC_OscConfig+0x2a8>
 80046d6:	e014      	b.n	8004702 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d8:	f7fe fc8c 	bl	8002ff4 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046e0:	f7fe fc88 	bl	8002ff4 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b64      	cmp	r3, #100	; 0x64
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e262      	b.n	8004bb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046f2:	4b88      	ldr	r3, [pc, #544]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0x2d0>
 80046fe:	e000      	b.n	8004702 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d060      	beq.n	80047d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	2b04      	cmp	r3, #4
 8004712:	d005      	beq.n	8004720 <HAL_RCC_OscConfig+0x310>
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	2b0c      	cmp	r3, #12
 8004718:	d119      	bne.n	800474e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	2b02      	cmp	r3, #2
 800471e:	d116      	bne.n	800474e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004720:	4b7c      	ldr	r3, [pc, #496]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004728:	2b00      	cmp	r3, #0
 800472a:	d005      	beq.n	8004738 <HAL_RCC_OscConfig+0x328>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e23f      	b.n	8004bb8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004738:	4b76      	ldr	r3, [pc, #472]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	061b      	lsls	r3, r3, #24
 8004746:	4973      	ldr	r1, [pc, #460]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 8004748:	4313      	orrs	r3, r2
 800474a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800474c:	e040      	b.n	80047d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d023      	beq.n	800479e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004756:	4b6f      	ldr	r3, [pc, #444]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a6e      	ldr	r2, [pc, #440]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 800475c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004762:	f7fe fc47 	bl	8002ff4 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800476a:	f7fe fc43 	bl	8002ff4 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e21d      	b.n	8004bb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800477c:	4b65      	ldr	r3, [pc, #404]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f0      	beq.n	800476a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004788:	4b62      	ldr	r3, [pc, #392]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	061b      	lsls	r3, r3, #24
 8004796:	495f      	ldr	r1, [pc, #380]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 8004798:	4313      	orrs	r3, r2
 800479a:	604b      	str	r3, [r1, #4]
 800479c:	e018      	b.n	80047d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800479e:	4b5d      	ldr	r3, [pc, #372]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a5c      	ldr	r2, [pc, #368]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 80047a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047aa:	f7fe fc23 	bl	8002ff4 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047b2:	f7fe fc1f 	bl	8002ff4 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e1f9      	b.n	8004bb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80047c4:	4b53      	ldr	r3, [pc, #332]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1f0      	bne.n	80047b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d03c      	beq.n	8004856 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01c      	beq.n	800481e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047e4:	4b4b      	ldr	r3, [pc, #300]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 80047e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ea:	4a4a      	ldr	r2, [pc, #296]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 80047ec:	f043 0301 	orr.w	r3, r3, #1
 80047f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f4:	f7fe fbfe 	bl	8002ff4 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047fc:	f7fe fbfa 	bl	8002ff4 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e1d4      	b.n	8004bb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800480e:	4b41      	ldr	r3, [pc, #260]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 8004810:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d0ef      	beq.n	80047fc <HAL_RCC_OscConfig+0x3ec>
 800481c:	e01b      	b.n	8004856 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800481e:	4b3d      	ldr	r3, [pc, #244]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 8004820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004824:	4a3b      	ldr	r2, [pc, #236]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482e:	f7fe fbe1 	bl	8002ff4 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004836:	f7fe fbdd 	bl	8002ff4 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e1b7      	b.n	8004bb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004848:	4b32      	ldr	r3, [pc, #200]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 800484a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1ef      	bne.n	8004836 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 80a6 	beq.w	80049b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004864:	2300      	movs	r3, #0
 8004866:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004868:	4b2a      	ldr	r3, [pc, #168]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 800486a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10d      	bne.n	8004890 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004874:	4b27      	ldr	r3, [pc, #156]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 8004876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004878:	4a26      	ldr	r2, [pc, #152]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 800487a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800487e:	6593      	str	r3, [r2, #88]	; 0x58
 8004880:	4b24      	ldr	r3, [pc, #144]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 8004882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800488c:	2301      	movs	r3, #1
 800488e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004890:	4b21      	ldr	r3, [pc, #132]	; (8004918 <HAL_RCC_OscConfig+0x508>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004898:	2b00      	cmp	r3, #0
 800489a:	d118      	bne.n	80048ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800489c:	4b1e      	ldr	r3, [pc, #120]	; (8004918 <HAL_RCC_OscConfig+0x508>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a1d      	ldr	r2, [pc, #116]	; (8004918 <HAL_RCC_OscConfig+0x508>)
 80048a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048a8:	f7fe fba4 	bl	8002ff4 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b0:	f7fe fba0 	bl	8002ff4 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e17a      	b.n	8004bb8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048c2:	4b15      	ldr	r3, [pc, #84]	; (8004918 <HAL_RCC_OscConfig+0x508>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0f0      	beq.n	80048b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d108      	bne.n	80048e8 <HAL_RCC_OscConfig+0x4d8>
 80048d6:	4b0f      	ldr	r3, [pc, #60]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 80048d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048dc:	4a0d      	ldr	r2, [pc, #52]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 80048de:	f043 0301 	orr.w	r3, r3, #1
 80048e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048e6:	e029      	b.n	800493c <HAL_RCC_OscConfig+0x52c>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	2b05      	cmp	r3, #5
 80048ee:	d115      	bne.n	800491c <HAL_RCC_OscConfig+0x50c>
 80048f0:	4b08      	ldr	r3, [pc, #32]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 80048f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f6:	4a07      	ldr	r2, [pc, #28]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 80048f8:	f043 0304 	orr.w	r3, r3, #4
 80048fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004900:	4b04      	ldr	r3, [pc, #16]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 8004902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004906:	4a03      	ldr	r2, [pc, #12]	; (8004914 <HAL_RCC_OscConfig+0x504>)
 8004908:	f043 0301 	orr.w	r3, r3, #1
 800490c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004910:	e014      	b.n	800493c <HAL_RCC_OscConfig+0x52c>
 8004912:	bf00      	nop
 8004914:	40021000 	.word	0x40021000
 8004918:	40007000 	.word	0x40007000
 800491c:	4b9c      	ldr	r3, [pc, #624]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 800491e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004922:	4a9b      	ldr	r2, [pc, #620]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 8004924:	f023 0301 	bic.w	r3, r3, #1
 8004928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800492c:	4b98      	ldr	r3, [pc, #608]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004932:	4a97      	ldr	r2, [pc, #604]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 8004934:	f023 0304 	bic.w	r3, r3, #4
 8004938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d016      	beq.n	8004972 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004944:	f7fe fb56 	bl	8002ff4 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800494a:	e00a      	b.n	8004962 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800494c:	f7fe fb52 	bl	8002ff4 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	f241 3288 	movw	r2, #5000	; 0x1388
 800495a:	4293      	cmp	r3, r2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e12a      	b.n	8004bb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004962:	4b8b      	ldr	r3, [pc, #556]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 8004964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0ed      	beq.n	800494c <HAL_RCC_OscConfig+0x53c>
 8004970:	e015      	b.n	800499e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004972:	f7fe fb3f 	bl	8002ff4 <HAL_GetTick>
 8004976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004978:	e00a      	b.n	8004990 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800497a:	f7fe fb3b 	bl	8002ff4 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	f241 3288 	movw	r2, #5000	; 0x1388
 8004988:	4293      	cmp	r3, r2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e113      	b.n	8004bb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004990:	4b7f      	ldr	r3, [pc, #508]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 8004992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1ed      	bne.n	800497a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800499e:	7ffb      	ldrb	r3, [r7, #31]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d105      	bne.n	80049b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a4:	4b7a      	ldr	r3, [pc, #488]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 80049a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a8:	4a79      	ldr	r2, [pc, #484]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 80049aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80fe 	beq.w	8004bb6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049be:	2b02      	cmp	r3, #2
 80049c0:	f040 80d0 	bne.w	8004b64 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80049c4:	4b72      	ldr	r3, [pc, #456]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f003 0203 	and.w	r2, r3, #3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d130      	bne.n	8004a3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	3b01      	subs	r3, #1
 80049e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d127      	bne.n	8004a3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d11f      	bne.n	8004a3a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a04:	2a07      	cmp	r2, #7
 8004a06:	bf14      	ite	ne
 8004a08:	2201      	movne	r2, #1
 8004a0a:	2200      	moveq	r2, #0
 8004a0c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d113      	bne.n	8004a3a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1c:	085b      	lsrs	r3, r3, #1
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d109      	bne.n	8004a3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	085b      	lsrs	r3, r3, #1
 8004a32:	3b01      	subs	r3, #1
 8004a34:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d06e      	beq.n	8004b18 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	2b0c      	cmp	r3, #12
 8004a3e:	d069      	beq.n	8004b14 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a40:	4b53      	ldr	r3, [pc, #332]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d105      	bne.n	8004a58 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004a4c:	4b50      	ldr	r3, [pc, #320]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e0ad      	b.n	8004bb8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a5c:	4b4c      	ldr	r3, [pc, #304]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a4b      	ldr	r2, [pc, #300]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 8004a62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a66:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a68:	f7fe fac4 	bl	8002ff4 <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a70:	f7fe fac0 	bl	8002ff4 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e09a      	b.n	8004bb8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a82:	4b43      	ldr	r3, [pc, #268]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f0      	bne.n	8004a70 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a8e:	4b40      	ldr	r3, [pc, #256]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	4b40      	ldr	r3, [pc, #256]	; (8004b94 <HAL_RCC_OscConfig+0x784>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a9e:	3a01      	subs	r2, #1
 8004aa0:	0112      	lsls	r2, r2, #4
 8004aa2:	4311      	orrs	r1, r2
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004aa8:	0212      	lsls	r2, r2, #8
 8004aaa:	4311      	orrs	r1, r2
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ab0:	0852      	lsrs	r2, r2, #1
 8004ab2:	3a01      	subs	r2, #1
 8004ab4:	0552      	lsls	r2, r2, #21
 8004ab6:	4311      	orrs	r1, r2
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004abc:	0852      	lsrs	r2, r2, #1
 8004abe:	3a01      	subs	r2, #1
 8004ac0:	0652      	lsls	r2, r2, #25
 8004ac2:	4311      	orrs	r1, r2
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ac8:	0912      	lsrs	r2, r2, #4
 8004aca:	0452      	lsls	r2, r2, #17
 8004acc:	430a      	orrs	r2, r1
 8004ace:	4930      	ldr	r1, [pc, #192]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ad4:	4b2e      	ldr	r3, [pc, #184]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a2d      	ldr	r2, [pc, #180]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 8004ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ade:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ae0:	4b2b      	ldr	r3, [pc, #172]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	4a2a      	ldr	r2, [pc, #168]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 8004ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004aec:	f7fe fa82 	bl	8002ff4 <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af4:	f7fe fa7e 	bl	8002ff4 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e058      	b.n	8004bb8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b06:	4b22      	ldr	r3, [pc, #136]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d0f0      	beq.n	8004af4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b12:	e050      	b.n	8004bb6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e04f      	b.n	8004bb8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b18:	4b1d      	ldr	r3, [pc, #116]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d148      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b24:	4b1a      	ldr	r3, [pc, #104]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a19      	ldr	r2, [pc, #100]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 8004b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b30:	4b17      	ldr	r3, [pc, #92]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	4a16      	ldr	r2, [pc, #88]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 8004b36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b3c:	f7fe fa5a 	bl	8002ff4 <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b44:	f7fe fa56 	bl	8002ff4 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e030      	b.n	8004bb8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b56:	4b0e      	ldr	r3, [pc, #56]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d0f0      	beq.n	8004b44 <HAL_RCC_OscConfig+0x734>
 8004b62:	e028      	b.n	8004bb6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	2b0c      	cmp	r3, #12
 8004b68:	d023      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b6a:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a08      	ldr	r2, [pc, #32]	; (8004b90 <HAL_RCC_OscConfig+0x780>)
 8004b70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b76:	f7fe fa3d 	bl	8002ff4 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b7c:	e00c      	b.n	8004b98 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b7e:	f7fe fa39 	bl	8002ff4 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d905      	bls.n	8004b98 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e013      	b.n	8004bb8 <HAL_RCC_OscConfig+0x7a8>
 8004b90:	40021000 	.word	0x40021000
 8004b94:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b98:	4b09      	ldr	r3, [pc, #36]	; (8004bc0 <HAL_RCC_OscConfig+0x7b0>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1ec      	bne.n	8004b7e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ba4:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <HAL_RCC_OscConfig+0x7b0>)
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	4905      	ldr	r1, [pc, #20]	; (8004bc0 <HAL_RCC_OscConfig+0x7b0>)
 8004baa:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <HAL_RCC_OscConfig+0x7b4>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	60cb      	str	r3, [r1, #12]
 8004bb0:	e001      	b.n	8004bb6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3720      	adds	r7, #32
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	40021000 	.word	0x40021000
 8004bc4:	feeefffc 	.word	0xfeeefffc

08004bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e0e7      	b.n	8004dac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bdc:	4b75      	ldr	r3, [pc, #468]	; (8004db4 <HAL_RCC_ClockConfig+0x1ec>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d910      	bls.n	8004c0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bea:	4b72      	ldr	r3, [pc, #456]	; (8004db4 <HAL_RCC_ClockConfig+0x1ec>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f023 0207 	bic.w	r2, r3, #7
 8004bf2:	4970      	ldr	r1, [pc, #448]	; (8004db4 <HAL_RCC_ClockConfig+0x1ec>)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfa:	4b6e      	ldr	r3, [pc, #440]	; (8004db4 <HAL_RCC_ClockConfig+0x1ec>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d001      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e0cf      	b.n	8004dac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d010      	beq.n	8004c3a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	4b66      	ldr	r3, [pc, #408]	; (8004db8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d908      	bls.n	8004c3a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c28:	4b63      	ldr	r3, [pc, #396]	; (8004db8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	4960      	ldr	r1, [pc, #384]	; (8004db8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d04c      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b03      	cmp	r3, #3
 8004c4c:	d107      	bne.n	8004c5e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c4e:	4b5a      	ldr	r3, [pc, #360]	; (8004db8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d121      	bne.n	8004c9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e0a6      	b.n	8004dac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d107      	bne.n	8004c76 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c66:	4b54      	ldr	r3, [pc, #336]	; (8004db8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d115      	bne.n	8004c9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e09a      	b.n	8004dac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d107      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c7e:	4b4e      	ldr	r3, [pc, #312]	; (8004db8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d109      	bne.n	8004c9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e08e      	b.n	8004dac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c8e:	4b4a      	ldr	r3, [pc, #296]	; (8004db8 <HAL_RCC_ClockConfig+0x1f0>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e086      	b.n	8004dac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c9e:	4b46      	ldr	r3, [pc, #280]	; (8004db8 <HAL_RCC_ClockConfig+0x1f0>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f023 0203 	bic.w	r2, r3, #3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	4943      	ldr	r1, [pc, #268]	; (8004db8 <HAL_RCC_ClockConfig+0x1f0>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb0:	f7fe f9a0 	bl	8002ff4 <HAL_GetTick>
 8004cb4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb6:	e00a      	b.n	8004cce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cb8:	f7fe f99c 	bl	8002ff4 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e06e      	b.n	8004dac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cce:	4b3a      	ldr	r3, [pc, #232]	; (8004db8 <HAL_RCC_ClockConfig+0x1f0>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 020c 	and.w	r2, r3, #12
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d1eb      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d010      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	4b31      	ldr	r3, [pc, #196]	; (8004db8 <HAL_RCC_ClockConfig+0x1f0>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d208      	bcs.n	8004d0e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cfc:	4b2e      	ldr	r3, [pc, #184]	; (8004db8 <HAL_RCC_ClockConfig+0x1f0>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	492b      	ldr	r1, [pc, #172]	; (8004db8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d0e:	4b29      	ldr	r3, [pc, #164]	; (8004db4 <HAL_RCC_ClockConfig+0x1ec>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d210      	bcs.n	8004d3e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d1c:	4b25      	ldr	r3, [pc, #148]	; (8004db4 <HAL_RCC_ClockConfig+0x1ec>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f023 0207 	bic.w	r2, r3, #7
 8004d24:	4923      	ldr	r1, [pc, #140]	; (8004db4 <HAL_RCC_ClockConfig+0x1ec>)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d2c:	4b21      	ldr	r3, [pc, #132]	; (8004db4 <HAL_RCC_ClockConfig+0x1ec>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d001      	beq.n	8004d3e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e036      	b.n	8004dac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0304 	and.w	r3, r3, #4
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d008      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d4a:	4b1b      	ldr	r3, [pc, #108]	; (8004db8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	4918      	ldr	r1, [pc, #96]	; (8004db8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0308 	and.w	r3, r3, #8
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d009      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d68:	4b13      	ldr	r3, [pc, #76]	; (8004db8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	4910      	ldr	r1, [pc, #64]	; (8004db8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d7c:	f000 f824 	bl	8004dc8 <HAL_RCC_GetSysClockFreq>
 8004d80:	4602      	mov	r2, r0
 8004d82:	4b0d      	ldr	r3, [pc, #52]	; (8004db8 <HAL_RCC_ClockConfig+0x1f0>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	091b      	lsrs	r3, r3, #4
 8004d88:	f003 030f 	and.w	r3, r3, #15
 8004d8c:	490b      	ldr	r1, [pc, #44]	; (8004dbc <HAL_RCC_ClockConfig+0x1f4>)
 8004d8e:	5ccb      	ldrb	r3, [r1, r3]
 8004d90:	f003 031f 	and.w	r3, r3, #31
 8004d94:	fa22 f303 	lsr.w	r3, r2, r3
 8004d98:	4a09      	ldr	r2, [pc, #36]	; (8004dc0 <HAL_RCC_ClockConfig+0x1f8>)
 8004d9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d9c:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <HAL_RCC_ClockConfig+0x1fc>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fe f8d7 	bl	8002f54 <HAL_InitTick>
 8004da6:	4603      	mov	r3, r0
 8004da8:	72fb      	strb	r3, [r7, #11]

  return status;
 8004daa:	7afb      	ldrb	r3, [r7, #11]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	40022000 	.word	0x40022000
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	0800b434 	.word	0x0800b434
 8004dc0:	20000000 	.word	0x20000000
 8004dc4:	2000002c 	.word	0x2000002c

08004dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b089      	sub	sp, #36	; 0x24
 8004dcc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61fb      	str	r3, [r7, #28]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dd6:	4b3e      	ldr	r3, [pc, #248]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 030c 	and.w	r3, r3, #12
 8004dde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004de0:	4b3b      	ldr	r3, [pc, #236]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f003 0303 	and.w	r3, r3, #3
 8004de8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d005      	beq.n	8004dfc <HAL_RCC_GetSysClockFreq+0x34>
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2b0c      	cmp	r3, #12
 8004df4:	d121      	bne.n	8004e3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d11e      	bne.n	8004e3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004dfc:	4b34      	ldr	r3, [pc, #208]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d107      	bne.n	8004e18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e08:	4b31      	ldr	r3, [pc, #196]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e0e:	0a1b      	lsrs	r3, r3, #8
 8004e10:	f003 030f 	and.w	r3, r3, #15
 8004e14:	61fb      	str	r3, [r7, #28]
 8004e16:	e005      	b.n	8004e24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e18:	4b2d      	ldr	r3, [pc, #180]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	091b      	lsrs	r3, r3, #4
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e24:	4a2b      	ldr	r2, [pc, #172]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10d      	bne.n	8004e50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e38:	e00a      	b.n	8004e50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d102      	bne.n	8004e46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e40:	4b25      	ldr	r3, [pc, #148]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e42:	61bb      	str	r3, [r7, #24]
 8004e44:	e004      	b.n	8004e50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d101      	bne.n	8004e50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e4c:	4b23      	ldr	r3, [pc, #140]	; (8004edc <HAL_RCC_GetSysClockFreq+0x114>)
 8004e4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	2b0c      	cmp	r3, #12
 8004e54:	d134      	bne.n	8004ec0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e56:	4b1e      	ldr	r3, [pc, #120]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d003      	beq.n	8004e6e <HAL_RCC_GetSysClockFreq+0xa6>
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d003      	beq.n	8004e74 <HAL_RCC_GetSysClockFreq+0xac>
 8004e6c:	e005      	b.n	8004e7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e6e:	4b1a      	ldr	r3, [pc, #104]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e70:	617b      	str	r3, [r7, #20]
      break;
 8004e72:	e005      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e74:	4b19      	ldr	r3, [pc, #100]	; (8004edc <HAL_RCC_GetSysClockFreq+0x114>)
 8004e76:	617b      	str	r3, [r7, #20]
      break;
 8004e78:	e002      	b.n	8004e80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	617b      	str	r3, [r7, #20]
      break;
 8004e7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e80:	4b13      	ldr	r3, [pc, #76]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	091b      	lsrs	r3, r3, #4
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e8e:	4b10      	ldr	r3, [pc, #64]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	0a1b      	lsrs	r3, r3, #8
 8004e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	fb03 f202 	mul.w	r2, r3, r2
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ea6:	4b0a      	ldr	r3, [pc, #40]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	0e5b      	lsrs	r3, r3, #25
 8004eac:	f003 0303 	and.w	r3, r3, #3
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ec0:	69bb      	ldr	r3, [r7, #24]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3724      	adds	r7, #36	; 0x24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	0800b44c 	.word	0x0800b44c
 8004ed8:	00f42400 	.word	0x00f42400
 8004edc:	007a1200 	.word	0x007a1200

08004ee0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ee4:	4b03      	ldr	r3, [pc, #12]	; (8004ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	20000000 	.word	0x20000000

08004ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004efc:	f7ff fff0 	bl	8004ee0 <HAL_RCC_GetHCLKFreq>
 8004f00:	4602      	mov	r2, r0
 8004f02:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	0a1b      	lsrs	r3, r3, #8
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	4904      	ldr	r1, [pc, #16]	; (8004f20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f0e:	5ccb      	ldrb	r3, [r1, r3]
 8004f10:	f003 031f 	and.w	r3, r3, #31
 8004f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	0800b444 	.word	0x0800b444

08004f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f28:	f7ff ffda 	bl	8004ee0 <HAL_RCC_GetHCLKFreq>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	0adb      	lsrs	r3, r3, #11
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	4904      	ldr	r1, [pc, #16]	; (8004f4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f3a:	5ccb      	ldrb	r3, [r1, r3]
 8004f3c:	f003 031f 	and.w	r3, r3, #31
 8004f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	40021000 	.word	0x40021000
 8004f4c:	0800b444 	.word	0x0800b444

08004f50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f58:	2300      	movs	r3, #0
 8004f5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f5c:	4b2a      	ldr	r3, [pc, #168]	; (8005008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d003      	beq.n	8004f70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f68:	f7ff f9ee 	bl	8004348 <HAL_PWREx_GetVoltageRange>
 8004f6c:	6178      	str	r0, [r7, #20]
 8004f6e:	e014      	b.n	8004f9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f70:	4b25      	ldr	r3, [pc, #148]	; (8005008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f74:	4a24      	ldr	r2, [pc, #144]	; (8005008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f7a:	6593      	str	r3, [r2, #88]	; 0x58
 8004f7c:	4b22      	ldr	r3, [pc, #136]	; (8005008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f88:	f7ff f9de 	bl	8004348 <HAL_PWREx_GetVoltageRange>
 8004f8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f8e:	4b1e      	ldr	r3, [pc, #120]	; (8005008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f92:	4a1d      	ldr	r2, [pc, #116]	; (8005008 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f98:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fa0:	d10b      	bne.n	8004fba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b80      	cmp	r3, #128	; 0x80
 8004fa6:	d919      	bls.n	8004fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2ba0      	cmp	r3, #160	; 0xa0
 8004fac:	d902      	bls.n	8004fb4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fae:	2302      	movs	r3, #2
 8004fb0:	613b      	str	r3, [r7, #16]
 8004fb2:	e013      	b.n	8004fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	613b      	str	r3, [r7, #16]
 8004fb8:	e010      	b.n	8004fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b80      	cmp	r3, #128	; 0x80
 8004fbe:	d902      	bls.n	8004fc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	613b      	str	r3, [r7, #16]
 8004fc4:	e00a      	b.n	8004fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b80      	cmp	r3, #128	; 0x80
 8004fca:	d102      	bne.n	8004fd2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fcc:	2302      	movs	r3, #2
 8004fce:	613b      	str	r3, [r7, #16]
 8004fd0:	e004      	b.n	8004fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b70      	cmp	r3, #112	; 0x70
 8004fd6:	d101      	bne.n	8004fdc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fd8:	2301      	movs	r3, #1
 8004fda:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004fdc:	4b0b      	ldr	r3, [pc, #44]	; (800500c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f023 0207 	bic.w	r2, r3, #7
 8004fe4:	4909      	ldr	r1, [pc, #36]	; (800500c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004fec:	4b07      	ldr	r3, [pc, #28]	; (800500c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d001      	beq.n	8004ffe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e000      	b.n	8005000 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40021000 	.word	0x40021000
 800500c:	40022000 	.word	0x40022000

08005010 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005018:	2300      	movs	r3, #0
 800501a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800501c:	2300      	movs	r3, #0
 800501e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005028:	2b00      	cmp	r3, #0
 800502a:	d041      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005030:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005034:	d02a      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005036:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800503a:	d824      	bhi.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800503c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005040:	d008      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005042:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005046:	d81e      	bhi.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00a      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800504c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005050:	d010      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005052:	e018      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005054:	4b86      	ldr	r3, [pc, #536]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	4a85      	ldr	r2, [pc, #532]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800505a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800505e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005060:	e015      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3304      	adds	r3, #4
 8005066:	2100      	movs	r1, #0
 8005068:	4618      	mov	r0, r3
 800506a:	f000 fabb 	bl	80055e4 <RCCEx_PLLSAI1_Config>
 800506e:	4603      	mov	r3, r0
 8005070:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005072:	e00c      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3320      	adds	r3, #32
 8005078:	2100      	movs	r1, #0
 800507a:	4618      	mov	r0, r3
 800507c:	f000 fba6 	bl	80057cc <RCCEx_PLLSAI2_Config>
 8005080:	4603      	mov	r3, r0
 8005082:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005084:	e003      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	74fb      	strb	r3, [r7, #19]
      break;
 800508a:	e000      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800508c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800508e:	7cfb      	ldrb	r3, [r7, #19]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10b      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005094:	4b76      	ldr	r3, [pc, #472]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050a2:	4973      	ldr	r1, [pc, #460]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050aa:	e001      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ac:	7cfb      	ldrb	r3, [r7, #19]
 80050ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d041      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050c4:	d02a      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80050c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050ca:	d824      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80050cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050d0:	d008      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80050d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050d6:	d81e      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00a      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80050dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050e0:	d010      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80050e2:	e018      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050e4:	4b62      	ldr	r3, [pc, #392]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	4a61      	ldr	r2, [pc, #388]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050f0:	e015      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3304      	adds	r3, #4
 80050f6:	2100      	movs	r1, #0
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 fa73 	bl	80055e4 <RCCEx_PLLSAI1_Config>
 80050fe:	4603      	mov	r3, r0
 8005100:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005102:	e00c      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3320      	adds	r3, #32
 8005108:	2100      	movs	r1, #0
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fb5e 	bl	80057cc <RCCEx_PLLSAI2_Config>
 8005110:	4603      	mov	r3, r0
 8005112:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005114:	e003      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	74fb      	strb	r3, [r7, #19]
      break;
 800511a:	e000      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800511c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800511e:	7cfb      	ldrb	r3, [r7, #19]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10b      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005124:	4b52      	ldr	r3, [pc, #328]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005132:	494f      	ldr	r1, [pc, #316]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005134:	4313      	orrs	r3, r2
 8005136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800513a:	e001      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800513c:	7cfb      	ldrb	r3, [r7, #19]
 800513e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 80a0 	beq.w	800528e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800514e:	2300      	movs	r3, #0
 8005150:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005152:	4b47      	ldr	r3, [pc, #284]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005162:	2300      	movs	r3, #0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00d      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005168:	4b41      	ldr	r3, [pc, #260]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800516a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516c:	4a40      	ldr	r2, [pc, #256]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800516e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005172:	6593      	str	r3, [r2, #88]	; 0x58
 8005174:	4b3e      	ldr	r3, [pc, #248]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800517c:	60bb      	str	r3, [r7, #8]
 800517e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005180:	2301      	movs	r3, #1
 8005182:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005184:	4b3b      	ldr	r3, [pc, #236]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a3a      	ldr	r2, [pc, #232]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800518a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800518e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005190:	f7fd ff30 	bl	8002ff4 <HAL_GetTick>
 8005194:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005196:	e009      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005198:	f7fd ff2c 	bl	8002ff4 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d902      	bls.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	74fb      	strb	r3, [r7, #19]
        break;
 80051aa:	e005      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051ac:	4b31      	ldr	r3, [pc, #196]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0ef      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80051b8:	7cfb      	ldrb	r3, [r7, #19]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d15c      	bne.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051be:	4b2c      	ldr	r3, [pc, #176]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01f      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d019      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051dc:	4b24      	ldr	r3, [pc, #144]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051e8:	4b21      	ldr	r3, [pc, #132]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ee:	4a20      	ldr	r2, [pc, #128]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051f8:	4b1d      	ldr	r3, [pc, #116]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fe:	4a1c      	ldr	r2, [pc, #112]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005208:	4a19      	ldr	r2, [pc, #100]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d016      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521a:	f7fd feeb 	bl	8002ff4 <HAL_GetTick>
 800521e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005220:	e00b      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005222:	f7fd fee7 	bl	8002ff4 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005230:	4293      	cmp	r3, r2
 8005232:	d902      	bls.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	74fb      	strb	r3, [r7, #19]
            break;
 8005238:	e006      	b.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800523a:	4b0d      	ldr	r3, [pc, #52]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800523c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d0ec      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005248:	7cfb      	ldrb	r3, [r7, #19]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10c      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800524e:	4b08      	ldr	r3, [pc, #32]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005254:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800525e:	4904      	ldr	r1, [pc, #16]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005266:	e009      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005268:	7cfb      	ldrb	r3, [r7, #19]
 800526a:	74bb      	strb	r3, [r7, #18]
 800526c:	e006      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800526e:	bf00      	nop
 8005270:	40021000 	.word	0x40021000
 8005274:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005278:	7cfb      	ldrb	r3, [r7, #19]
 800527a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800527c:	7c7b      	ldrb	r3, [r7, #17]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d105      	bne.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005282:	4b9e      	ldr	r3, [pc, #632]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005286:	4a9d      	ldr	r2, [pc, #628]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800528c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00a      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800529a:	4b98      	ldr	r3, [pc, #608]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800529c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a0:	f023 0203 	bic.w	r2, r3, #3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a8:	4994      	ldr	r1, [pc, #592]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00a      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052bc:	4b8f      	ldr	r3, [pc, #572]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c2:	f023 020c 	bic.w	r2, r3, #12
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ca:	498c      	ldr	r1, [pc, #560]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0304 	and.w	r3, r3, #4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052de:	4b87      	ldr	r3, [pc, #540]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ec:	4983      	ldr	r1, [pc, #524]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0308 	and.w	r3, r3, #8
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00a      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005300:	4b7e      	ldr	r3, [pc, #504]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005306:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530e:	497b      	ldr	r1, [pc, #492]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005310:	4313      	orrs	r3, r2
 8005312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0310 	and.w	r3, r3, #16
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005322:	4b76      	ldr	r3, [pc, #472]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005328:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005330:	4972      	ldr	r1, [pc, #456]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005332:	4313      	orrs	r3, r2
 8005334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00a      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005344:	4b6d      	ldr	r3, [pc, #436]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005352:	496a      	ldr	r1, [pc, #424]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005354:	4313      	orrs	r3, r2
 8005356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005366:	4b65      	ldr	r3, [pc, #404]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005374:	4961      	ldr	r1, [pc, #388]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005376:	4313      	orrs	r3, r2
 8005378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005388:	4b5c      	ldr	r3, [pc, #368]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800538a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005396:	4959      	ldr	r1, [pc, #356]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005398:	4313      	orrs	r3, r2
 800539a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053aa:	4b54      	ldr	r3, [pc, #336]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b8:	4950      	ldr	r1, [pc, #320]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00a      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053cc:	4b4b      	ldr	r3, [pc, #300]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053da:	4948      	ldr	r1, [pc, #288]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053ee:	4b43      	ldr	r3, [pc, #268]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fc:	493f      	ldr	r1, [pc, #252]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d028      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005410:	4b3a      	ldr	r3, [pc, #232]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005416:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800541e:	4937      	ldr	r1, [pc, #220]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800542a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800542e:	d106      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005430:	4b32      	ldr	r3, [pc, #200]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	4a31      	ldr	r2, [pc, #196]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800543a:	60d3      	str	r3, [r2, #12]
 800543c:	e011      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005442:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005446:	d10c      	bne.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3304      	adds	r3, #4
 800544c:	2101      	movs	r1, #1
 800544e:	4618      	mov	r0, r3
 8005450:	f000 f8c8 	bl	80055e4 <RCCEx_PLLSAI1_Config>
 8005454:	4603      	mov	r3, r0
 8005456:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005458:	7cfb      	ldrb	r3, [r7, #19]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800545e:	7cfb      	ldrb	r3, [r7, #19]
 8005460:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d028      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800546e:	4b23      	ldr	r3, [pc, #140]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005474:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800547c:	491f      	ldr	r1, [pc, #124]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800547e:	4313      	orrs	r3, r2
 8005480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005488:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800548c:	d106      	bne.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800548e:	4b1b      	ldr	r3, [pc, #108]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	4a1a      	ldr	r2, [pc, #104]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005498:	60d3      	str	r3, [r2, #12]
 800549a:	e011      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054a4:	d10c      	bne.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	3304      	adds	r3, #4
 80054aa:	2101      	movs	r1, #1
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 f899 	bl	80055e4 <RCCEx_PLLSAI1_Config>
 80054b2:	4603      	mov	r3, r0
 80054b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054b6:	7cfb      	ldrb	r3, [r7, #19]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d001      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80054bc:	7cfb      	ldrb	r3, [r7, #19]
 80054be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d02b      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054cc:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054da:	4908      	ldr	r1, [pc, #32]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054ea:	d109      	bne.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054ec:	4b03      	ldr	r3, [pc, #12]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	4a02      	ldr	r2, [pc, #8]	; (80054fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054f6:	60d3      	str	r3, [r2, #12]
 80054f8:	e014      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80054fa:	bf00      	nop
 80054fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005504:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005508:	d10c      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	3304      	adds	r3, #4
 800550e:	2101      	movs	r1, #1
 8005510:	4618      	mov	r0, r3
 8005512:	f000 f867 	bl	80055e4 <RCCEx_PLLSAI1_Config>
 8005516:	4603      	mov	r3, r0
 8005518:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800551a:	7cfb      	ldrb	r3, [r7, #19]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005520:	7cfb      	ldrb	r3, [r7, #19]
 8005522:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d02f      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005530:	4b2b      	ldr	r3, [pc, #172]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005536:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800553e:	4928      	ldr	r1, [pc, #160]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005540:	4313      	orrs	r3, r2
 8005542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800554a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800554e:	d10d      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3304      	adds	r3, #4
 8005554:	2102      	movs	r1, #2
 8005556:	4618      	mov	r0, r3
 8005558:	f000 f844 	bl	80055e4 <RCCEx_PLLSAI1_Config>
 800555c:	4603      	mov	r3, r0
 800555e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005560:	7cfb      	ldrb	r3, [r7, #19]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d014      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005566:	7cfb      	ldrb	r3, [r7, #19]
 8005568:	74bb      	strb	r3, [r7, #18]
 800556a:	e011      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005574:	d10c      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	3320      	adds	r3, #32
 800557a:	2102      	movs	r1, #2
 800557c:	4618      	mov	r0, r3
 800557e:	f000 f925 	bl	80057cc <RCCEx_PLLSAI2_Config>
 8005582:	4603      	mov	r3, r0
 8005584:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005586:	7cfb      	ldrb	r3, [r7, #19]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800558c:	7cfb      	ldrb	r3, [r7, #19]
 800558e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00a      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800559c:	4b10      	ldr	r3, [pc, #64]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800559e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055aa:	490d      	ldr	r1, [pc, #52]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00b      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055be:	4b08      	ldr	r3, [pc, #32]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055ce:	4904      	ldr	r1, [pc, #16]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80055d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3718      	adds	r7, #24
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	40021000 	.word	0x40021000

080055e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055f2:	4b75      	ldr	r3, [pc, #468]	; (80057c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f003 0303 	and.w	r3, r3, #3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d018      	beq.n	8005630 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80055fe:	4b72      	ldr	r3, [pc, #456]	; (80057c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f003 0203 	and.w	r2, r3, #3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d10d      	bne.n	800562a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
       ||
 8005612:	2b00      	cmp	r3, #0
 8005614:	d009      	beq.n	800562a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005616:	4b6c      	ldr	r3, [pc, #432]	; (80057c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	091b      	lsrs	r3, r3, #4
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
       ||
 8005626:	429a      	cmp	r2, r3
 8005628:	d047      	beq.n	80056ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	73fb      	strb	r3, [r7, #15]
 800562e:	e044      	b.n	80056ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b03      	cmp	r3, #3
 8005636:	d018      	beq.n	800566a <RCCEx_PLLSAI1_Config+0x86>
 8005638:	2b03      	cmp	r3, #3
 800563a:	d825      	bhi.n	8005688 <RCCEx_PLLSAI1_Config+0xa4>
 800563c:	2b01      	cmp	r3, #1
 800563e:	d002      	beq.n	8005646 <RCCEx_PLLSAI1_Config+0x62>
 8005640:	2b02      	cmp	r3, #2
 8005642:	d009      	beq.n	8005658 <RCCEx_PLLSAI1_Config+0x74>
 8005644:	e020      	b.n	8005688 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005646:	4b60      	ldr	r3, [pc, #384]	; (80057c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d11d      	bne.n	800568e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005656:	e01a      	b.n	800568e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005658:	4b5b      	ldr	r3, [pc, #364]	; (80057c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005660:	2b00      	cmp	r3, #0
 8005662:	d116      	bne.n	8005692 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005668:	e013      	b.n	8005692 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800566a:	4b57      	ldr	r3, [pc, #348]	; (80057c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10f      	bne.n	8005696 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005676:	4b54      	ldr	r3, [pc, #336]	; (80057c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d109      	bne.n	8005696 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005686:	e006      	b.n	8005696 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	73fb      	strb	r3, [r7, #15]
      break;
 800568c:	e004      	b.n	8005698 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800568e:	bf00      	nop
 8005690:	e002      	b.n	8005698 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005692:	bf00      	nop
 8005694:	e000      	b.n	8005698 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005696:	bf00      	nop
    }

    if(status == HAL_OK)
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10d      	bne.n	80056ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800569e:	4b4a      	ldr	r3, [pc, #296]	; (80057c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6819      	ldr	r1, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	011b      	lsls	r3, r3, #4
 80056b2:	430b      	orrs	r3, r1
 80056b4:	4944      	ldr	r1, [pc, #272]	; (80057c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d17d      	bne.n	80057bc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80056c0:	4b41      	ldr	r3, [pc, #260]	; (80057c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a40      	ldr	r2, [pc, #256]	; (80057c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056cc:	f7fd fc92 	bl	8002ff4 <HAL_GetTick>
 80056d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056d2:	e009      	b.n	80056e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056d4:	f7fd fc8e 	bl	8002ff4 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d902      	bls.n	80056e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	73fb      	strb	r3, [r7, #15]
        break;
 80056e6:	e005      	b.n	80056f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056e8:	4b37      	ldr	r3, [pc, #220]	; (80057c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1ef      	bne.n	80056d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d160      	bne.n	80057bc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d111      	bne.n	8005724 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005700:	4b31      	ldr	r3, [pc, #196]	; (80057c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6892      	ldr	r2, [r2, #8]
 8005710:	0211      	lsls	r1, r2, #8
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	68d2      	ldr	r2, [r2, #12]
 8005716:	0912      	lsrs	r2, r2, #4
 8005718:	0452      	lsls	r2, r2, #17
 800571a:	430a      	orrs	r2, r1
 800571c:	492a      	ldr	r1, [pc, #168]	; (80057c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800571e:	4313      	orrs	r3, r2
 8005720:	610b      	str	r3, [r1, #16]
 8005722:	e027      	b.n	8005774 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d112      	bne.n	8005750 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800572a:	4b27      	ldr	r3, [pc, #156]	; (80057c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005732:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6892      	ldr	r2, [r2, #8]
 800573a:	0211      	lsls	r1, r2, #8
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6912      	ldr	r2, [r2, #16]
 8005740:	0852      	lsrs	r2, r2, #1
 8005742:	3a01      	subs	r2, #1
 8005744:	0552      	lsls	r2, r2, #21
 8005746:	430a      	orrs	r2, r1
 8005748:	491f      	ldr	r1, [pc, #124]	; (80057c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800574a:	4313      	orrs	r3, r2
 800574c:	610b      	str	r3, [r1, #16]
 800574e:	e011      	b.n	8005774 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005750:	4b1d      	ldr	r3, [pc, #116]	; (80057c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005758:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	6892      	ldr	r2, [r2, #8]
 8005760:	0211      	lsls	r1, r2, #8
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6952      	ldr	r2, [r2, #20]
 8005766:	0852      	lsrs	r2, r2, #1
 8005768:	3a01      	subs	r2, #1
 800576a:	0652      	lsls	r2, r2, #25
 800576c:	430a      	orrs	r2, r1
 800576e:	4916      	ldr	r1, [pc, #88]	; (80057c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005770:	4313      	orrs	r3, r2
 8005772:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005774:	4b14      	ldr	r3, [pc, #80]	; (80057c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a13      	ldr	r2, [pc, #76]	; (80057c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800577a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800577e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005780:	f7fd fc38 	bl	8002ff4 <HAL_GetTick>
 8005784:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005786:	e009      	b.n	800579c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005788:	f7fd fc34 	bl	8002ff4 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b02      	cmp	r3, #2
 8005794:	d902      	bls.n	800579c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	73fb      	strb	r3, [r7, #15]
          break;
 800579a:	e005      	b.n	80057a8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800579c:	4b0a      	ldr	r3, [pc, #40]	; (80057c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d0ef      	beq.n	8005788 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d106      	bne.n	80057bc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80057ae:	4b06      	ldr	r3, [pc, #24]	; (80057c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057b0:	691a      	ldr	r2, [r3, #16]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	4904      	ldr	r1, [pc, #16]	; (80057c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	40021000 	.word	0x40021000

080057cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057da:	4b6a      	ldr	r3, [pc, #424]	; (8005984 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f003 0303 	and.w	r3, r3, #3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d018      	beq.n	8005818 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80057e6:	4b67      	ldr	r3, [pc, #412]	; (8005984 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f003 0203 	and.w	r2, r3, #3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d10d      	bne.n	8005812 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
       ||
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d009      	beq.n	8005812 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80057fe:	4b61      	ldr	r3, [pc, #388]	; (8005984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	091b      	lsrs	r3, r3, #4
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
       ||
 800580e:	429a      	cmp	r2, r3
 8005810:	d047      	beq.n	80058a2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	73fb      	strb	r3, [r7, #15]
 8005816:	e044      	b.n	80058a2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b03      	cmp	r3, #3
 800581e:	d018      	beq.n	8005852 <RCCEx_PLLSAI2_Config+0x86>
 8005820:	2b03      	cmp	r3, #3
 8005822:	d825      	bhi.n	8005870 <RCCEx_PLLSAI2_Config+0xa4>
 8005824:	2b01      	cmp	r3, #1
 8005826:	d002      	beq.n	800582e <RCCEx_PLLSAI2_Config+0x62>
 8005828:	2b02      	cmp	r3, #2
 800582a:	d009      	beq.n	8005840 <RCCEx_PLLSAI2_Config+0x74>
 800582c:	e020      	b.n	8005870 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800582e:	4b55      	ldr	r3, [pc, #340]	; (8005984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d11d      	bne.n	8005876 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800583e:	e01a      	b.n	8005876 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005840:	4b50      	ldr	r3, [pc, #320]	; (8005984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005848:	2b00      	cmp	r3, #0
 800584a:	d116      	bne.n	800587a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005850:	e013      	b.n	800587a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005852:	4b4c      	ldr	r3, [pc, #304]	; (8005984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10f      	bne.n	800587e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800585e:	4b49      	ldr	r3, [pc, #292]	; (8005984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d109      	bne.n	800587e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800586e:	e006      	b.n	800587e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	73fb      	strb	r3, [r7, #15]
      break;
 8005874:	e004      	b.n	8005880 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005876:	bf00      	nop
 8005878:	e002      	b.n	8005880 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800587a:	bf00      	nop
 800587c:	e000      	b.n	8005880 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800587e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005880:	7bfb      	ldrb	r3, [r7, #15]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10d      	bne.n	80058a2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005886:	4b3f      	ldr	r3, [pc, #252]	; (8005984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6819      	ldr	r1, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	3b01      	subs	r3, #1
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	430b      	orrs	r3, r1
 800589c:	4939      	ldr	r1, [pc, #228]	; (8005984 <RCCEx_PLLSAI2_Config+0x1b8>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d167      	bne.n	8005978 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80058a8:	4b36      	ldr	r3, [pc, #216]	; (8005984 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a35      	ldr	r2, [pc, #212]	; (8005984 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058b4:	f7fd fb9e 	bl	8002ff4 <HAL_GetTick>
 80058b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058ba:	e009      	b.n	80058d0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058bc:	f7fd fb9a 	bl	8002ff4 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d902      	bls.n	80058d0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	73fb      	strb	r3, [r7, #15]
        break;
 80058ce:	e005      	b.n	80058dc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058d0:	4b2c      	ldr	r3, [pc, #176]	; (8005984 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1ef      	bne.n	80058bc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d14a      	bne.n	8005978 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d111      	bne.n	800590c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058e8:	4b26      	ldr	r3, [pc, #152]	; (8005984 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80058f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6892      	ldr	r2, [r2, #8]
 80058f8:	0211      	lsls	r1, r2, #8
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	68d2      	ldr	r2, [r2, #12]
 80058fe:	0912      	lsrs	r2, r2, #4
 8005900:	0452      	lsls	r2, r2, #17
 8005902:	430a      	orrs	r2, r1
 8005904:	491f      	ldr	r1, [pc, #124]	; (8005984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005906:	4313      	orrs	r3, r2
 8005908:	614b      	str	r3, [r1, #20]
 800590a:	e011      	b.n	8005930 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800590c:	4b1d      	ldr	r3, [pc, #116]	; (8005984 <RCCEx_PLLSAI2_Config+0x1b8>)
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005914:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6892      	ldr	r2, [r2, #8]
 800591c:	0211      	lsls	r1, r2, #8
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6912      	ldr	r2, [r2, #16]
 8005922:	0852      	lsrs	r2, r2, #1
 8005924:	3a01      	subs	r2, #1
 8005926:	0652      	lsls	r2, r2, #25
 8005928:	430a      	orrs	r2, r1
 800592a:	4916      	ldr	r1, [pc, #88]	; (8005984 <RCCEx_PLLSAI2_Config+0x1b8>)
 800592c:	4313      	orrs	r3, r2
 800592e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005930:	4b14      	ldr	r3, [pc, #80]	; (8005984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a13      	ldr	r2, [pc, #76]	; (8005984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800593a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800593c:	f7fd fb5a 	bl	8002ff4 <HAL_GetTick>
 8005940:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005942:	e009      	b.n	8005958 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005944:	f7fd fb56 	bl	8002ff4 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d902      	bls.n	8005958 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	73fb      	strb	r3, [r7, #15]
          break;
 8005956:	e005      	b.n	8005964 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005958:	4b0a      	ldr	r3, [pc, #40]	; (8005984 <RCCEx_PLLSAI2_Config+0x1b8>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d0ef      	beq.n	8005944 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005964:	7bfb      	ldrb	r3, [r7, #15]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800596a:	4b06      	ldr	r3, [pc, #24]	; (8005984 <RCCEx_PLLSAI2_Config+0x1b8>)
 800596c:	695a      	ldr	r2, [r3, #20]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	4904      	ldr	r1, [pc, #16]	; (8005984 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005974:	4313      	orrs	r3, r2
 8005976:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005978:	7bfb      	ldrb	r3, [r7, #15]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	40021000 	.word	0x40021000

08005988 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e049      	b.n	8005a2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d106      	bne.n	80059b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7fb fdd8 	bl	8001564 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3304      	adds	r3, #4
 80059c4:	4619      	mov	r1, r3
 80059c6:	4610      	mov	r0, r2
 80059c8:	f000 fab6 	bl	8005f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
	...

08005a38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d001      	beq.n	8005a50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e04f      	b.n	8005af0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0201 	orr.w	r2, r2, #1
 8005a66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a23      	ldr	r2, [pc, #140]	; (8005afc <HAL_TIM_Base_Start_IT+0xc4>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d01d      	beq.n	8005aae <HAL_TIM_Base_Start_IT+0x76>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a7a:	d018      	beq.n	8005aae <HAL_TIM_Base_Start_IT+0x76>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a1f      	ldr	r2, [pc, #124]	; (8005b00 <HAL_TIM_Base_Start_IT+0xc8>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d013      	beq.n	8005aae <HAL_TIM_Base_Start_IT+0x76>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a1e      	ldr	r2, [pc, #120]	; (8005b04 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d00e      	beq.n	8005aae <HAL_TIM_Base_Start_IT+0x76>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a1c      	ldr	r2, [pc, #112]	; (8005b08 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d009      	beq.n	8005aae <HAL_TIM_Base_Start_IT+0x76>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a1b      	ldr	r2, [pc, #108]	; (8005b0c <HAL_TIM_Base_Start_IT+0xd4>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d004      	beq.n	8005aae <HAL_TIM_Base_Start_IT+0x76>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a19      	ldr	r2, [pc, #100]	; (8005b10 <HAL_TIM_Base_Start_IT+0xd8>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d115      	bne.n	8005ada <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	4b17      	ldr	r3, [pc, #92]	; (8005b14 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2b06      	cmp	r3, #6
 8005abe:	d015      	beq.n	8005aec <HAL_TIM_Base_Start_IT+0xb4>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ac6:	d011      	beq.n	8005aec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0201 	orr.w	r2, r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad8:	e008      	b.n	8005aec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f042 0201 	orr.w	r2, r2, #1
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	e000      	b.n	8005aee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	40012c00 	.word	0x40012c00
 8005b00:	40000400 	.word	0x40000400
 8005b04:	40000800 	.word	0x40000800
 8005b08:	40000c00 	.word	0x40000c00
 8005b0c:	40013400 	.word	0x40013400
 8005b10:	40014000 	.word	0x40014000
 8005b14:	00010007 	.word	0x00010007

08005b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d122      	bne.n	8005b74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d11b      	bne.n	8005b74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f06f 0202 	mvn.w	r2, #2
 8005b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	f003 0303 	and.w	r3, r3, #3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f9ce 	bl	8005efc <HAL_TIM_IC_CaptureCallback>
 8005b60:	e005      	b.n	8005b6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f9c0 	bl	8005ee8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f9d1 	bl	8005f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	f003 0304 	and.w	r3, r3, #4
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	d122      	bne.n	8005bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f003 0304 	and.w	r3, r3, #4
 8005b8c:	2b04      	cmp	r3, #4
 8005b8e:	d11b      	bne.n	8005bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f06f 0204 	mvn.w	r2, #4
 8005b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f9a4 	bl	8005efc <HAL_TIM_IC_CaptureCallback>
 8005bb4:	e005      	b.n	8005bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f996 	bl	8005ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f9a7 	bl	8005f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f003 0308 	and.w	r3, r3, #8
 8005bd2:	2b08      	cmp	r3, #8
 8005bd4:	d122      	bne.n	8005c1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	f003 0308 	and.w	r3, r3, #8
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d11b      	bne.n	8005c1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f06f 0208 	mvn.w	r2, #8
 8005bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2204      	movs	r2, #4
 8005bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	f003 0303 	and.w	r3, r3, #3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f97a 	bl	8005efc <HAL_TIM_IC_CaptureCallback>
 8005c08:	e005      	b.n	8005c16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f96c 	bl	8005ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f97d 	bl	8005f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	f003 0310 	and.w	r3, r3, #16
 8005c26:	2b10      	cmp	r3, #16
 8005c28:	d122      	bne.n	8005c70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f003 0310 	and.w	r3, r3, #16
 8005c34:	2b10      	cmp	r3, #16
 8005c36:	d11b      	bne.n	8005c70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f06f 0210 	mvn.w	r2, #16
 8005c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2208      	movs	r2, #8
 8005c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f950 	bl	8005efc <HAL_TIM_IC_CaptureCallback>
 8005c5c:	e005      	b.n	8005c6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f942 	bl	8005ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f953 	bl	8005f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d10e      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d107      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f06f 0201 	mvn.w	r2, #1
 8005c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7fb fb78 	bl	800138c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca6:	2b80      	cmp	r3, #128	; 0x80
 8005ca8:	d10e      	bne.n	8005cc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb4:	2b80      	cmp	r3, #128	; 0x80
 8005cb6:	d107      	bne.n	8005cc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fafe 	bl	80062c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cd6:	d10e      	bne.n	8005cf6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce2:	2b80      	cmp	r3, #128	; 0x80
 8005ce4:	d107      	bne.n	8005cf6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 faf1 	bl	80062d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d00:	2b40      	cmp	r3, #64	; 0x40
 8005d02:	d10e      	bne.n	8005d22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0e:	2b40      	cmp	r3, #64	; 0x40
 8005d10:	d107      	bne.n	8005d22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f901 	bl	8005f24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	f003 0320 	and.w	r3, r3, #32
 8005d2c:	2b20      	cmp	r3, #32
 8005d2e:	d10e      	bne.n	8005d4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	f003 0320 	and.w	r3, r3, #32
 8005d3a:	2b20      	cmp	r3, #32
 8005d3c:	d107      	bne.n	8005d4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f06f 0220 	mvn.w	r2, #32
 8005d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fab1 	bl	80062b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d4e:	bf00      	nop
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b084      	sub	sp, #16
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d101      	bne.n	8005d72 <HAL_TIM_ConfigClockSource+0x1c>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e0b6      	b.n	8005ee0 <HAL_TIM_ConfigClockSource+0x18a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d90:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d94:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d9c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dae:	d03e      	beq.n	8005e2e <HAL_TIM_ConfigClockSource+0xd8>
 8005db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005db4:	f200 8087 	bhi.w	8005ec6 <HAL_TIM_ConfigClockSource+0x170>
 8005db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dbc:	f000 8086 	beq.w	8005ecc <HAL_TIM_ConfigClockSource+0x176>
 8005dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc4:	d87f      	bhi.n	8005ec6 <HAL_TIM_ConfigClockSource+0x170>
 8005dc6:	2b70      	cmp	r3, #112	; 0x70
 8005dc8:	d01a      	beq.n	8005e00 <HAL_TIM_ConfigClockSource+0xaa>
 8005dca:	2b70      	cmp	r3, #112	; 0x70
 8005dcc:	d87b      	bhi.n	8005ec6 <HAL_TIM_ConfigClockSource+0x170>
 8005dce:	2b60      	cmp	r3, #96	; 0x60
 8005dd0:	d050      	beq.n	8005e74 <HAL_TIM_ConfigClockSource+0x11e>
 8005dd2:	2b60      	cmp	r3, #96	; 0x60
 8005dd4:	d877      	bhi.n	8005ec6 <HAL_TIM_ConfigClockSource+0x170>
 8005dd6:	2b50      	cmp	r3, #80	; 0x50
 8005dd8:	d03c      	beq.n	8005e54 <HAL_TIM_ConfigClockSource+0xfe>
 8005dda:	2b50      	cmp	r3, #80	; 0x50
 8005ddc:	d873      	bhi.n	8005ec6 <HAL_TIM_ConfigClockSource+0x170>
 8005dde:	2b40      	cmp	r3, #64	; 0x40
 8005de0:	d058      	beq.n	8005e94 <HAL_TIM_ConfigClockSource+0x13e>
 8005de2:	2b40      	cmp	r3, #64	; 0x40
 8005de4:	d86f      	bhi.n	8005ec6 <HAL_TIM_ConfigClockSource+0x170>
 8005de6:	2b30      	cmp	r3, #48	; 0x30
 8005de8:	d064      	beq.n	8005eb4 <HAL_TIM_ConfigClockSource+0x15e>
 8005dea:	2b30      	cmp	r3, #48	; 0x30
 8005dec:	d86b      	bhi.n	8005ec6 <HAL_TIM_ConfigClockSource+0x170>
 8005dee:	2b20      	cmp	r3, #32
 8005df0:	d060      	beq.n	8005eb4 <HAL_TIM_ConfigClockSource+0x15e>
 8005df2:	2b20      	cmp	r3, #32
 8005df4:	d867      	bhi.n	8005ec6 <HAL_TIM_ConfigClockSource+0x170>
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d05c      	beq.n	8005eb4 <HAL_TIM_ConfigClockSource+0x15e>
 8005dfa:	2b10      	cmp	r3, #16
 8005dfc:	d05a      	beq.n	8005eb4 <HAL_TIM_ConfigClockSource+0x15e>
 8005dfe:	e062      	b.n	8005ec6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6818      	ldr	r0, [r3, #0]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	6899      	ldr	r1, [r3, #8]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f000 f9a6 	bl	8006160 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e22:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	609a      	str	r2, [r3, #8]
      break;
 8005e2c:	e04f      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6818      	ldr	r0, [r3, #0]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	6899      	ldr	r1, [r3, #8]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f000 f98f 	bl	8006160 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	689a      	ldr	r2, [r3, #8]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e50:	609a      	str	r2, [r3, #8]
      break;
 8005e52:	e03c      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6818      	ldr	r0, [r3, #0]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	6859      	ldr	r1, [r3, #4]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	461a      	mov	r2, r3
 8005e62:	f000 f903 	bl	800606c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2150      	movs	r1, #80	; 0x50
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 f95c 	bl	800612a <TIM_ITRx_SetConfig>
      break;
 8005e72:	e02c      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6818      	ldr	r0, [r3, #0]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	6859      	ldr	r1, [r3, #4]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	461a      	mov	r2, r3
 8005e82:	f000 f922 	bl	80060ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2160      	movs	r1, #96	; 0x60
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f000 f94c 	bl	800612a <TIM_ITRx_SetConfig>
      break;
 8005e92:	e01c      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6818      	ldr	r0, [r3, #0]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	6859      	ldr	r1, [r3, #4]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	f000 f8e3 	bl	800606c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2140      	movs	r1, #64	; 0x40
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 f93c 	bl	800612a <TIM_ITRx_SetConfig>
      break;
 8005eb2:	e00c      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	4610      	mov	r0, r2
 8005ec0:	f000 f933 	bl	800612a <TIM_ITRx_SetConfig>
      break;
 8005ec4:	e003      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	73fb      	strb	r3, [r7, #15]
      break;
 8005eca:	e000      	b.n	8005ece <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005ecc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a40      	ldr	r2, [pc, #256]	; (800604c <TIM_Base_SetConfig+0x114>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d013      	beq.n	8005f78 <TIM_Base_SetConfig+0x40>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f56:	d00f      	beq.n	8005f78 <TIM_Base_SetConfig+0x40>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a3d      	ldr	r2, [pc, #244]	; (8006050 <TIM_Base_SetConfig+0x118>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00b      	beq.n	8005f78 <TIM_Base_SetConfig+0x40>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a3c      	ldr	r2, [pc, #240]	; (8006054 <TIM_Base_SetConfig+0x11c>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d007      	beq.n	8005f78 <TIM_Base_SetConfig+0x40>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a3b      	ldr	r2, [pc, #236]	; (8006058 <TIM_Base_SetConfig+0x120>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d003      	beq.n	8005f78 <TIM_Base_SetConfig+0x40>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a3a      	ldr	r2, [pc, #232]	; (800605c <TIM_Base_SetConfig+0x124>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d108      	bne.n	8005f8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a2f      	ldr	r2, [pc, #188]	; (800604c <TIM_Base_SetConfig+0x114>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d01f      	beq.n	8005fd2 <TIM_Base_SetConfig+0x9a>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f98:	d01b      	beq.n	8005fd2 <TIM_Base_SetConfig+0x9a>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a2c      	ldr	r2, [pc, #176]	; (8006050 <TIM_Base_SetConfig+0x118>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d017      	beq.n	8005fd2 <TIM_Base_SetConfig+0x9a>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a2b      	ldr	r2, [pc, #172]	; (8006054 <TIM_Base_SetConfig+0x11c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d013      	beq.n	8005fd2 <TIM_Base_SetConfig+0x9a>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a2a      	ldr	r2, [pc, #168]	; (8006058 <TIM_Base_SetConfig+0x120>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00f      	beq.n	8005fd2 <TIM_Base_SetConfig+0x9a>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a29      	ldr	r2, [pc, #164]	; (800605c <TIM_Base_SetConfig+0x124>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d00b      	beq.n	8005fd2 <TIM_Base_SetConfig+0x9a>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a28      	ldr	r2, [pc, #160]	; (8006060 <TIM_Base_SetConfig+0x128>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d007      	beq.n	8005fd2 <TIM_Base_SetConfig+0x9a>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a27      	ldr	r2, [pc, #156]	; (8006064 <TIM_Base_SetConfig+0x12c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d003      	beq.n	8005fd2 <TIM_Base_SetConfig+0x9a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a26      	ldr	r2, [pc, #152]	; (8006068 <TIM_Base_SetConfig+0x130>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d108      	bne.n	8005fe4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a10      	ldr	r2, [pc, #64]	; (800604c <TIM_Base_SetConfig+0x114>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d00f      	beq.n	8006030 <TIM_Base_SetConfig+0xf8>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a12      	ldr	r2, [pc, #72]	; (800605c <TIM_Base_SetConfig+0x124>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d00b      	beq.n	8006030 <TIM_Base_SetConfig+0xf8>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a11      	ldr	r2, [pc, #68]	; (8006060 <TIM_Base_SetConfig+0x128>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d007      	beq.n	8006030 <TIM_Base_SetConfig+0xf8>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a10      	ldr	r2, [pc, #64]	; (8006064 <TIM_Base_SetConfig+0x12c>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d003      	beq.n	8006030 <TIM_Base_SetConfig+0xf8>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a0f      	ldr	r2, [pc, #60]	; (8006068 <TIM_Base_SetConfig+0x130>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d103      	bne.n	8006038 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	615a      	str	r2, [r3, #20]
}
 800603e:	bf00      	nop
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	40012c00 	.word	0x40012c00
 8006050:	40000400 	.word	0x40000400
 8006054:	40000800 	.word	0x40000800
 8006058:	40000c00 	.word	0x40000c00
 800605c:	40013400 	.word	0x40013400
 8006060:	40014000 	.word	0x40014000
 8006064:	40014400 	.word	0x40014400
 8006068:	40014800 	.word	0x40014800

0800606c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	f023 0201 	bic.w	r2, r3, #1
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	011b      	lsls	r3, r3, #4
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	4313      	orrs	r3, r2
 80060a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f023 030a 	bic.w	r3, r3, #10
 80060a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	621a      	str	r2, [r3, #32]
}
 80060be:	bf00      	nop
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b087      	sub	sp, #28
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	60f8      	str	r0, [r7, #12]
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	f023 0210 	bic.w	r2, r3, #16
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	031b      	lsls	r3, r3, #12
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006106:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	4313      	orrs	r3, r2
 8006110:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	621a      	str	r2, [r3, #32]
}
 800611e:	bf00      	nop
 8006120:	371c      	adds	r7, #28
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800612a:	b480      	push	{r7}
 800612c:	b085      	sub	sp, #20
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006140:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	f043 0307 	orr.w	r3, r3, #7
 800614c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	609a      	str	r2, [r3, #8]
}
 8006154:	bf00      	nop
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800617a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	021a      	lsls	r2, r3, #8
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	431a      	orrs	r2, r3
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	4313      	orrs	r3, r2
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	4313      	orrs	r3, r2
 800618c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	609a      	str	r2, [r3, #8]
}
 8006194:	bf00      	nop
 8006196:	371c      	adds	r7, #28
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d101      	bne.n	80061b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061b4:	2302      	movs	r3, #2
 80061b6:	e068      	b.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a2e      	ldr	r2, [pc, #184]	; (8006298 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d004      	beq.n	80061ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a2d      	ldr	r2, [pc, #180]	; (800629c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d108      	bne.n	80061fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006204:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4313      	orrs	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a1e      	ldr	r2, [pc, #120]	; (8006298 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d01d      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800622a:	d018      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a1b      	ldr	r2, [pc, #108]	; (80062a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d013      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a1a      	ldr	r2, [pc, #104]	; (80062a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d00e      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a18      	ldr	r2, [pc, #96]	; (80062a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d009      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a13      	ldr	r2, [pc, #76]	; (800629c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d004      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a14      	ldr	r2, [pc, #80]	; (80062ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d10c      	bne.n	8006278 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006264:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	4313      	orrs	r3, r2
 800626e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	40012c00 	.word	0x40012c00
 800629c:	40013400 	.word	0x40013400
 80062a0:	40000400 	.word	0x40000400
 80062a4:	40000800 	.word	0x40000800
 80062a8:	40000c00 	.word	0x40000c00
 80062ac:	40014000 	.word	0x40014000

080062b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e040      	b.n	8006380 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006302:	2b00      	cmp	r3, #0
 8006304:	d106      	bne.n	8006314 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7fb f94c 	bl	80015ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2224      	movs	r2, #36	; 0x24
 8006318:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0201 	bic.w	r2, r2, #1
 8006328:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fb2e 	bl	800698c <UART_SetConfig>
 8006330:	4603      	mov	r3, r0
 8006332:	2b01      	cmp	r3, #1
 8006334:	d101      	bne.n	800633a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e022      	b.n	8006380 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	2b00      	cmp	r3, #0
 8006340:	d002      	beq.n	8006348 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fdda 	bl	8006efc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006356:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689a      	ldr	r2, [r3, #8]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006366:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f042 0201 	orr.w	r2, r2, #1
 8006376:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 fe61 	bl	8007040 <UART_CheckIdleState>
 800637e:	4603      	mov	r3, r0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b0ba      	sub	sp, #232	; 0xe8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80063ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80063b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80063b6:	4013      	ands	r3, r2
 80063b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80063bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d115      	bne.n	80063f0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80063c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c8:	f003 0320 	and.w	r3, r3, #32
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00f      	beq.n	80063f0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063d4:	f003 0320 	and.w	r3, r3, #32
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d009      	beq.n	80063f0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 82a6 	beq.w	8006932 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	4798      	blx	r3
      }
      return;
 80063ee:	e2a0      	b.n	8006932 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80063f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 8117 	beq.w	8006628 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80063fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b00      	cmp	r3, #0
 8006404:	d106      	bne.n	8006414 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006406:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800640a:	4b85      	ldr	r3, [pc, #532]	; (8006620 <HAL_UART_IRQHandler+0x298>)
 800640c:	4013      	ands	r3, r2
 800640e:	2b00      	cmp	r3, #0
 8006410:	f000 810a 	beq.w	8006628 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b00      	cmp	r3, #0
 800641e:	d011      	beq.n	8006444 <HAL_UART_IRQHandler+0xbc>
 8006420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00b      	beq.n	8006444 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2201      	movs	r2, #1
 8006432:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800643a:	f043 0201 	orr.w	r2, r3, #1
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006448:	f003 0302 	and.w	r3, r3, #2
 800644c:	2b00      	cmp	r3, #0
 800644e:	d011      	beq.n	8006474 <HAL_UART_IRQHandler+0xec>
 8006450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00b      	beq.n	8006474 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2202      	movs	r2, #2
 8006462:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800646a:	f043 0204 	orr.w	r2, r3, #4
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006478:	f003 0304 	and.w	r3, r3, #4
 800647c:	2b00      	cmp	r3, #0
 800647e:	d011      	beq.n	80064a4 <HAL_UART_IRQHandler+0x11c>
 8006480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00b      	beq.n	80064a4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2204      	movs	r2, #4
 8006492:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800649a:	f043 0202 	orr.w	r2, r3, #2
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80064a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a8:	f003 0308 	and.w	r3, r3, #8
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d017      	beq.n	80064e0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80064b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064b4:	f003 0320 	and.w	r3, r3, #32
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d105      	bne.n	80064c8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80064bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00b      	beq.n	80064e0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2208      	movs	r2, #8
 80064ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064d6:	f043 0208 	orr.w	r2, r3, #8
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80064e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d012      	beq.n	8006512 <HAL_UART_IRQHandler+0x18a>
 80064ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00c      	beq.n	8006512 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006500:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006508:	f043 0220 	orr.w	r2, r3, #32
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 820c 	beq.w	8006936 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800651e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006522:	f003 0320 	and.w	r3, r3, #32
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00d      	beq.n	8006546 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800652a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800652e:	f003 0320 	and.w	r3, r3, #32
 8006532:	2b00      	cmp	r3, #0
 8006534:	d007      	beq.n	8006546 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800654c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655a:	2b40      	cmp	r3, #64	; 0x40
 800655c:	d005      	beq.n	800656a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800655e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006562:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006566:	2b00      	cmp	r3, #0
 8006568:	d04f      	beq.n	800660a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fe75 	bl	800725a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657a:	2b40      	cmp	r3, #64	; 0x40
 800657c:	d141      	bne.n	8006602 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3308      	adds	r3, #8
 8006584:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006588:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800658c:	e853 3f00 	ldrex	r3, [r3]
 8006590:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006594:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800659c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3308      	adds	r3, #8
 80065a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80065aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80065ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80065b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80065c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1d9      	bne.n	800657e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d013      	beq.n	80065fa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d6:	4a13      	ldr	r2, [pc, #76]	; (8006624 <HAL_UART_IRQHandler+0x29c>)
 80065d8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fc ff40 	bl	8003464 <HAL_DMA_Abort_IT>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d017      	beq.n	800661a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80065f4:	4610      	mov	r0, r2
 80065f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065f8:	e00f      	b.n	800661a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f9b0 	bl	8006960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006600:	e00b      	b.n	800661a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f9ac 	bl	8006960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006608:	e007      	b.n	800661a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f9a8 	bl	8006960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006618:	e18d      	b.n	8006936 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800661a:	bf00      	nop
    return;
 800661c:	e18b      	b.n	8006936 <HAL_UART_IRQHandler+0x5ae>
 800661e:	bf00      	nop
 8006620:	04000120 	.word	0x04000120
 8006624:	08007321 	.word	0x08007321

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800662c:	2b01      	cmp	r3, #1
 800662e:	f040 8146 	bne.w	80068be <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006636:	f003 0310 	and.w	r3, r3, #16
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 813f 	beq.w	80068be <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006644:	f003 0310 	and.w	r3, r3, #16
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 8138 	beq.w	80068be <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2210      	movs	r2, #16
 8006654:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006660:	2b40      	cmp	r3, #64	; 0x40
 8006662:	f040 80b4 	bne.w	80067ce <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006672:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 815f 	beq.w	800693a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006682:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006686:	429a      	cmp	r2, r3
 8006688:	f080 8157 	bcs.w	800693a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006692:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f040 8085 	bne.w	80067b2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066b4:	e853 3f00 	ldrex	r3, [r3]
 80066b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80066bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	461a      	mov	r2, r3
 80066ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80066d6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80066de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80066e2:	e841 2300 	strex	r3, r2, [r1]
 80066e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80066ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1da      	bne.n	80066a8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3308      	adds	r3, #8
 80066f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066fc:	e853 3f00 	ldrex	r3, [r3]
 8006700:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006702:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006704:	f023 0301 	bic.w	r3, r3, #1
 8006708:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3308      	adds	r3, #8
 8006712:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006716:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800671a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800671e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006722:	e841 2300 	strex	r3, r2, [r1]
 8006726:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006728:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1e1      	bne.n	80066f2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3308      	adds	r3, #8
 8006734:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006738:	e853 3f00 	ldrex	r3, [r3]
 800673c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800673e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006744:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3308      	adds	r3, #8
 800674e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006752:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006754:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006756:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006758:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800675a:	e841 2300 	strex	r3, r2, [r1]
 800675e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1e3      	bne.n	800672e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2220      	movs	r2, #32
 800676a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800677a:	e853 3f00 	ldrex	r3, [r3]
 800677e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006782:	f023 0310 	bic.w	r3, r3, #16
 8006786:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	461a      	mov	r2, r3
 8006790:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006794:	65bb      	str	r3, [r7, #88]	; 0x58
 8006796:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006798:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800679a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800679c:	e841 2300 	strex	r3, r2, [r1]
 80067a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e4      	bne.n	8006772 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7fc fe1b 	bl	80033e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067be:	b29b      	uxth	r3, r3
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	4619      	mov	r1, r3
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f8d4 	bl	8006974 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067cc:	e0b5      	b.n	800693a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067da:	b29b      	uxth	r3, r3
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f000 80a7 	beq.w	800693e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80067f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 80a2 	beq.w	800693e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006802:	e853 3f00 	ldrex	r3, [r3]
 8006806:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800680e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	461a      	mov	r2, r3
 8006818:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800681c:	647b      	str	r3, [r7, #68]	; 0x44
 800681e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006820:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006822:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006824:	e841 2300 	strex	r3, r2, [r1]
 8006828:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800682a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1e4      	bne.n	80067fa <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3308      	adds	r3, #8
 8006836:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	e853 3f00 	ldrex	r3, [r3]
 800683e:	623b      	str	r3, [r7, #32]
   return(result);
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	f023 0301 	bic.w	r3, r3, #1
 8006846:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3308      	adds	r3, #8
 8006850:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006854:	633a      	str	r2, [r7, #48]	; 0x30
 8006856:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006858:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800685a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800685c:	e841 2300 	strex	r3, r2, [r1]
 8006860:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1e3      	bne.n	8006830 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2220      	movs	r2, #32
 800686c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	e853 3f00 	ldrex	r3, [r3]
 8006886:	60fb      	str	r3, [r7, #12]
   return(result);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0310 	bic.w	r3, r3, #16
 800688e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	461a      	mov	r2, r3
 8006898:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800689c:	61fb      	str	r3, [r7, #28]
 800689e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a0:	69b9      	ldr	r1, [r7, #24]
 80068a2:	69fa      	ldr	r2, [r7, #28]
 80068a4:	e841 2300 	strex	r3, r2, [r1]
 80068a8:	617b      	str	r3, [r7, #20]
   return(result);
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1e4      	bne.n	800687a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068b4:	4619      	mov	r1, r3
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f85c 	bl	8006974 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068bc:	e03f      	b.n	800693e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80068be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00e      	beq.n	80068e8 <HAL_UART_IRQHandler+0x560>
 80068ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d008      	beq.n	80068e8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80068de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fd5d 	bl	80073a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068e6:	e02d      	b.n	8006944 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80068e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00e      	beq.n	8006912 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80068f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d008      	beq.n	8006912 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006904:	2b00      	cmp	r3, #0
 8006906:	d01c      	beq.n	8006942 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	4798      	blx	r3
    }
    return;
 8006910:	e017      	b.n	8006942 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691a:	2b00      	cmp	r3, #0
 800691c:	d012      	beq.n	8006944 <HAL_UART_IRQHandler+0x5bc>
 800691e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00c      	beq.n	8006944 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fd0e 	bl	800734c <UART_EndTransmit_IT>
    return;
 8006930:	e008      	b.n	8006944 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006932:	bf00      	nop
 8006934:	e006      	b.n	8006944 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006936:	bf00      	nop
 8006938:	e004      	b.n	8006944 <HAL_UART_IRQHandler+0x5bc>
      return;
 800693a:	bf00      	nop
 800693c:	e002      	b.n	8006944 <HAL_UART_IRQHandler+0x5bc>
      return;
 800693e:	bf00      	nop
 8006940:	e000      	b.n	8006944 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006942:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006944:	37e8      	adds	r7, #232	; 0xe8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop

0800694c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	460b      	mov	r3, r1
 800697e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800698c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006990:	b08a      	sub	sp, #40	; 0x28
 8006992:	af00      	add	r7, sp, #0
 8006994:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	689a      	ldr	r2, [r3, #8]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	431a      	orrs	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	431a      	orrs	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	69db      	ldr	r3, [r3, #28]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	4ba4      	ldr	r3, [pc, #656]	; (8006c4c <UART_SetConfig+0x2c0>)
 80069bc:	4013      	ands	r3, r2
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	6812      	ldr	r2, [r2, #0]
 80069c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069c4:	430b      	orrs	r3, r1
 80069c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	68da      	ldr	r2, [r3, #12]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a99      	ldr	r2, [pc, #612]	; (8006c50 <UART_SetConfig+0x2c4>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d004      	beq.n	80069f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069f4:	4313      	orrs	r3, r2
 80069f6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a90      	ldr	r2, [pc, #576]	; (8006c54 <UART_SetConfig+0x2c8>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d126      	bne.n	8006a64 <UART_SetConfig+0xd8>
 8006a16:	4b90      	ldr	r3, [pc, #576]	; (8006c58 <UART_SetConfig+0x2cc>)
 8006a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a1c:	f003 0303 	and.w	r3, r3, #3
 8006a20:	2b03      	cmp	r3, #3
 8006a22:	d81b      	bhi.n	8006a5c <UART_SetConfig+0xd0>
 8006a24:	a201      	add	r2, pc, #4	; (adr r2, 8006a2c <UART_SetConfig+0xa0>)
 8006a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2a:	bf00      	nop
 8006a2c:	08006a3d 	.word	0x08006a3d
 8006a30:	08006a4d 	.word	0x08006a4d
 8006a34:	08006a45 	.word	0x08006a45
 8006a38:	08006a55 	.word	0x08006a55
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a42:	e116      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006a44:	2302      	movs	r3, #2
 8006a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a4a:	e112      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006a4c:	2304      	movs	r3, #4
 8006a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a52:	e10e      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006a54:	2308      	movs	r3, #8
 8006a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a5a:	e10a      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006a5c:	2310      	movs	r3, #16
 8006a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a62:	e106      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a7c      	ldr	r2, [pc, #496]	; (8006c5c <UART_SetConfig+0x2d0>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d138      	bne.n	8006ae0 <UART_SetConfig+0x154>
 8006a6e:	4b7a      	ldr	r3, [pc, #488]	; (8006c58 <UART_SetConfig+0x2cc>)
 8006a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a74:	f003 030c 	and.w	r3, r3, #12
 8006a78:	2b0c      	cmp	r3, #12
 8006a7a:	d82d      	bhi.n	8006ad8 <UART_SetConfig+0x14c>
 8006a7c:	a201      	add	r2, pc, #4	; (adr r2, 8006a84 <UART_SetConfig+0xf8>)
 8006a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a82:	bf00      	nop
 8006a84:	08006ab9 	.word	0x08006ab9
 8006a88:	08006ad9 	.word	0x08006ad9
 8006a8c:	08006ad9 	.word	0x08006ad9
 8006a90:	08006ad9 	.word	0x08006ad9
 8006a94:	08006ac9 	.word	0x08006ac9
 8006a98:	08006ad9 	.word	0x08006ad9
 8006a9c:	08006ad9 	.word	0x08006ad9
 8006aa0:	08006ad9 	.word	0x08006ad9
 8006aa4:	08006ac1 	.word	0x08006ac1
 8006aa8:	08006ad9 	.word	0x08006ad9
 8006aac:	08006ad9 	.word	0x08006ad9
 8006ab0:	08006ad9 	.word	0x08006ad9
 8006ab4:	08006ad1 	.word	0x08006ad1
 8006ab8:	2300      	movs	r3, #0
 8006aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006abe:	e0d8      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ac6:	e0d4      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006ac8:	2304      	movs	r3, #4
 8006aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ace:	e0d0      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006ad0:	2308      	movs	r3, #8
 8006ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ad6:	e0cc      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006ad8:	2310      	movs	r3, #16
 8006ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ade:	e0c8      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a5e      	ldr	r2, [pc, #376]	; (8006c60 <UART_SetConfig+0x2d4>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d125      	bne.n	8006b36 <UART_SetConfig+0x1aa>
 8006aea:	4b5b      	ldr	r3, [pc, #364]	; (8006c58 <UART_SetConfig+0x2cc>)
 8006aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006af4:	2b30      	cmp	r3, #48	; 0x30
 8006af6:	d016      	beq.n	8006b26 <UART_SetConfig+0x19a>
 8006af8:	2b30      	cmp	r3, #48	; 0x30
 8006afa:	d818      	bhi.n	8006b2e <UART_SetConfig+0x1a2>
 8006afc:	2b20      	cmp	r3, #32
 8006afe:	d00a      	beq.n	8006b16 <UART_SetConfig+0x18a>
 8006b00:	2b20      	cmp	r3, #32
 8006b02:	d814      	bhi.n	8006b2e <UART_SetConfig+0x1a2>
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d002      	beq.n	8006b0e <UART_SetConfig+0x182>
 8006b08:	2b10      	cmp	r3, #16
 8006b0a:	d008      	beq.n	8006b1e <UART_SetConfig+0x192>
 8006b0c:	e00f      	b.n	8006b2e <UART_SetConfig+0x1a2>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b14:	e0ad      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006b16:	2302      	movs	r3, #2
 8006b18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b1c:	e0a9      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006b1e:	2304      	movs	r3, #4
 8006b20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b24:	e0a5      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006b26:	2308      	movs	r3, #8
 8006b28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b2c:	e0a1      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006b2e:	2310      	movs	r3, #16
 8006b30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b34:	e09d      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a4a      	ldr	r2, [pc, #296]	; (8006c64 <UART_SetConfig+0x2d8>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d125      	bne.n	8006b8c <UART_SetConfig+0x200>
 8006b40:	4b45      	ldr	r3, [pc, #276]	; (8006c58 <UART_SetConfig+0x2cc>)
 8006b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b4a:	2bc0      	cmp	r3, #192	; 0xc0
 8006b4c:	d016      	beq.n	8006b7c <UART_SetConfig+0x1f0>
 8006b4e:	2bc0      	cmp	r3, #192	; 0xc0
 8006b50:	d818      	bhi.n	8006b84 <UART_SetConfig+0x1f8>
 8006b52:	2b80      	cmp	r3, #128	; 0x80
 8006b54:	d00a      	beq.n	8006b6c <UART_SetConfig+0x1e0>
 8006b56:	2b80      	cmp	r3, #128	; 0x80
 8006b58:	d814      	bhi.n	8006b84 <UART_SetConfig+0x1f8>
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d002      	beq.n	8006b64 <UART_SetConfig+0x1d8>
 8006b5e:	2b40      	cmp	r3, #64	; 0x40
 8006b60:	d008      	beq.n	8006b74 <UART_SetConfig+0x1e8>
 8006b62:	e00f      	b.n	8006b84 <UART_SetConfig+0x1f8>
 8006b64:	2300      	movs	r3, #0
 8006b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b6a:	e082      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b72:	e07e      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006b74:	2304      	movs	r3, #4
 8006b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b7a:	e07a      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006b7c:	2308      	movs	r3, #8
 8006b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b82:	e076      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006b84:	2310      	movs	r3, #16
 8006b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b8a:	e072      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a35      	ldr	r2, [pc, #212]	; (8006c68 <UART_SetConfig+0x2dc>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d12a      	bne.n	8006bec <UART_SetConfig+0x260>
 8006b96:	4b30      	ldr	r3, [pc, #192]	; (8006c58 <UART_SetConfig+0x2cc>)
 8006b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ba0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ba4:	d01a      	beq.n	8006bdc <UART_SetConfig+0x250>
 8006ba6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006baa:	d81b      	bhi.n	8006be4 <UART_SetConfig+0x258>
 8006bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bb0:	d00c      	beq.n	8006bcc <UART_SetConfig+0x240>
 8006bb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bb6:	d815      	bhi.n	8006be4 <UART_SetConfig+0x258>
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <UART_SetConfig+0x238>
 8006bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bc0:	d008      	beq.n	8006bd4 <UART_SetConfig+0x248>
 8006bc2:	e00f      	b.n	8006be4 <UART_SetConfig+0x258>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bca:	e052      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bd2:	e04e      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006bd4:	2304      	movs	r3, #4
 8006bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bda:	e04a      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006bdc:	2308      	movs	r3, #8
 8006bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006be2:	e046      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006be4:	2310      	movs	r3, #16
 8006be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bea:	e042      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a17      	ldr	r2, [pc, #92]	; (8006c50 <UART_SetConfig+0x2c4>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d13a      	bne.n	8006c6c <UART_SetConfig+0x2e0>
 8006bf6:	4b18      	ldr	r3, [pc, #96]	; (8006c58 <UART_SetConfig+0x2cc>)
 8006bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bfc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c04:	d01a      	beq.n	8006c3c <UART_SetConfig+0x2b0>
 8006c06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c0a:	d81b      	bhi.n	8006c44 <UART_SetConfig+0x2b8>
 8006c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c10:	d00c      	beq.n	8006c2c <UART_SetConfig+0x2a0>
 8006c12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c16:	d815      	bhi.n	8006c44 <UART_SetConfig+0x2b8>
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <UART_SetConfig+0x298>
 8006c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c20:	d008      	beq.n	8006c34 <UART_SetConfig+0x2a8>
 8006c22:	e00f      	b.n	8006c44 <UART_SetConfig+0x2b8>
 8006c24:	2300      	movs	r3, #0
 8006c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c2a:	e022      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c32:	e01e      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006c34:	2304      	movs	r3, #4
 8006c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c3a:	e01a      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006c3c:	2308      	movs	r3, #8
 8006c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c42:	e016      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006c44:	2310      	movs	r3, #16
 8006c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c4a:	e012      	b.n	8006c72 <UART_SetConfig+0x2e6>
 8006c4c:	efff69f3 	.word	0xefff69f3
 8006c50:	40008000 	.word	0x40008000
 8006c54:	40013800 	.word	0x40013800
 8006c58:	40021000 	.word	0x40021000
 8006c5c:	40004400 	.word	0x40004400
 8006c60:	40004800 	.word	0x40004800
 8006c64:	40004c00 	.word	0x40004c00
 8006c68:	40005000 	.word	0x40005000
 8006c6c:	2310      	movs	r3, #16
 8006c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a9f      	ldr	r2, [pc, #636]	; (8006ef4 <UART_SetConfig+0x568>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d17a      	bne.n	8006d72 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c80:	2b08      	cmp	r3, #8
 8006c82:	d824      	bhi.n	8006cce <UART_SetConfig+0x342>
 8006c84:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <UART_SetConfig+0x300>)
 8006c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8a:	bf00      	nop
 8006c8c:	08006cb1 	.word	0x08006cb1
 8006c90:	08006ccf 	.word	0x08006ccf
 8006c94:	08006cb9 	.word	0x08006cb9
 8006c98:	08006ccf 	.word	0x08006ccf
 8006c9c:	08006cbf 	.word	0x08006cbf
 8006ca0:	08006ccf 	.word	0x08006ccf
 8006ca4:	08006ccf 	.word	0x08006ccf
 8006ca8:	08006ccf 	.word	0x08006ccf
 8006cac:	08006cc7 	.word	0x08006cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cb0:	f7fe f922 	bl	8004ef8 <HAL_RCC_GetPCLK1Freq>
 8006cb4:	61f8      	str	r0, [r7, #28]
        break;
 8006cb6:	e010      	b.n	8006cda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cb8:	4b8f      	ldr	r3, [pc, #572]	; (8006ef8 <UART_SetConfig+0x56c>)
 8006cba:	61fb      	str	r3, [r7, #28]
        break;
 8006cbc:	e00d      	b.n	8006cda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cbe:	f7fe f883 	bl	8004dc8 <HAL_RCC_GetSysClockFreq>
 8006cc2:	61f8      	str	r0, [r7, #28]
        break;
 8006cc4:	e009      	b.n	8006cda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cca:	61fb      	str	r3, [r7, #28]
        break;
 8006ccc:	e005      	b.n	8006cda <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006cd8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 80fb 	beq.w	8006ed8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	005b      	lsls	r3, r3, #1
 8006cea:	4413      	add	r3, r2
 8006cec:	69fa      	ldr	r2, [r7, #28]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d305      	bcc.n	8006cfe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006cf8:	69fa      	ldr	r2, [r7, #28]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d903      	bls.n	8006d06 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d04:	e0e8      	b.n	8006ed8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	461c      	mov	r4, r3
 8006d0c:	4615      	mov	r5, r2
 8006d0e:	f04f 0200 	mov.w	r2, #0
 8006d12:	f04f 0300 	mov.w	r3, #0
 8006d16:	022b      	lsls	r3, r5, #8
 8006d18:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006d1c:	0222      	lsls	r2, r4, #8
 8006d1e:	68f9      	ldr	r1, [r7, #12]
 8006d20:	6849      	ldr	r1, [r1, #4]
 8006d22:	0849      	lsrs	r1, r1, #1
 8006d24:	2000      	movs	r0, #0
 8006d26:	4688      	mov	r8, r1
 8006d28:	4681      	mov	r9, r0
 8006d2a:	eb12 0a08 	adds.w	sl, r2, r8
 8006d2e:	eb43 0b09 	adc.w	fp, r3, r9
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	603b      	str	r3, [r7, #0]
 8006d3a:	607a      	str	r2, [r7, #4]
 8006d3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d40:	4650      	mov	r0, sl
 8006d42:	4659      	mov	r1, fp
 8006d44:	f7f9 ff80 	bl	8000c48 <__aeabi_uldivmod>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d56:	d308      	bcc.n	8006d6a <UART_SetConfig+0x3de>
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d5e:	d204      	bcs.n	8006d6a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	69ba      	ldr	r2, [r7, #24]
 8006d66:	60da      	str	r2, [r3, #12]
 8006d68:	e0b6      	b.n	8006ed8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d70:	e0b2      	b.n	8006ed8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d7a:	d15e      	bne.n	8006e3a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006d7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d80:	2b08      	cmp	r3, #8
 8006d82:	d828      	bhi.n	8006dd6 <UART_SetConfig+0x44a>
 8006d84:	a201      	add	r2, pc, #4	; (adr r2, 8006d8c <UART_SetConfig+0x400>)
 8006d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8a:	bf00      	nop
 8006d8c:	08006db1 	.word	0x08006db1
 8006d90:	08006db9 	.word	0x08006db9
 8006d94:	08006dc1 	.word	0x08006dc1
 8006d98:	08006dd7 	.word	0x08006dd7
 8006d9c:	08006dc7 	.word	0x08006dc7
 8006da0:	08006dd7 	.word	0x08006dd7
 8006da4:	08006dd7 	.word	0x08006dd7
 8006da8:	08006dd7 	.word	0x08006dd7
 8006dac:	08006dcf 	.word	0x08006dcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006db0:	f7fe f8a2 	bl	8004ef8 <HAL_RCC_GetPCLK1Freq>
 8006db4:	61f8      	str	r0, [r7, #28]
        break;
 8006db6:	e014      	b.n	8006de2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006db8:	f7fe f8b4 	bl	8004f24 <HAL_RCC_GetPCLK2Freq>
 8006dbc:	61f8      	str	r0, [r7, #28]
        break;
 8006dbe:	e010      	b.n	8006de2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dc0:	4b4d      	ldr	r3, [pc, #308]	; (8006ef8 <UART_SetConfig+0x56c>)
 8006dc2:	61fb      	str	r3, [r7, #28]
        break;
 8006dc4:	e00d      	b.n	8006de2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dc6:	f7fd ffff 	bl	8004dc8 <HAL_RCC_GetSysClockFreq>
 8006dca:	61f8      	str	r0, [r7, #28]
        break;
 8006dcc:	e009      	b.n	8006de2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dd2:	61fb      	str	r3, [r7, #28]
        break;
 8006dd4:	e005      	b.n	8006de2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006de0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d077      	beq.n	8006ed8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	005a      	lsls	r2, r3, #1
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	085b      	lsrs	r3, r3, #1
 8006df2:	441a      	add	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dfc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	2b0f      	cmp	r3, #15
 8006e02:	d916      	bls.n	8006e32 <UART_SetConfig+0x4a6>
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e0a:	d212      	bcs.n	8006e32 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	f023 030f 	bic.w	r3, r3, #15
 8006e14:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	085b      	lsrs	r3, r3, #1
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	f003 0307 	and.w	r3, r3, #7
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	8afb      	ldrh	r3, [r7, #22]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	8afa      	ldrh	r2, [r7, #22]
 8006e2e:	60da      	str	r2, [r3, #12]
 8006e30:	e052      	b.n	8006ed8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e38:	e04e      	b.n	8006ed8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e3e:	2b08      	cmp	r3, #8
 8006e40:	d827      	bhi.n	8006e92 <UART_SetConfig+0x506>
 8006e42:	a201      	add	r2, pc, #4	; (adr r2, 8006e48 <UART_SetConfig+0x4bc>)
 8006e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e48:	08006e6d 	.word	0x08006e6d
 8006e4c:	08006e75 	.word	0x08006e75
 8006e50:	08006e7d 	.word	0x08006e7d
 8006e54:	08006e93 	.word	0x08006e93
 8006e58:	08006e83 	.word	0x08006e83
 8006e5c:	08006e93 	.word	0x08006e93
 8006e60:	08006e93 	.word	0x08006e93
 8006e64:	08006e93 	.word	0x08006e93
 8006e68:	08006e8b 	.word	0x08006e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e6c:	f7fe f844 	bl	8004ef8 <HAL_RCC_GetPCLK1Freq>
 8006e70:	61f8      	str	r0, [r7, #28]
        break;
 8006e72:	e014      	b.n	8006e9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e74:	f7fe f856 	bl	8004f24 <HAL_RCC_GetPCLK2Freq>
 8006e78:	61f8      	str	r0, [r7, #28]
        break;
 8006e7a:	e010      	b.n	8006e9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e7c:	4b1e      	ldr	r3, [pc, #120]	; (8006ef8 <UART_SetConfig+0x56c>)
 8006e7e:	61fb      	str	r3, [r7, #28]
        break;
 8006e80:	e00d      	b.n	8006e9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e82:	f7fd ffa1 	bl	8004dc8 <HAL_RCC_GetSysClockFreq>
 8006e86:	61f8      	str	r0, [r7, #28]
        break;
 8006e88:	e009      	b.n	8006e9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e8e:	61fb      	str	r3, [r7, #28]
        break;
 8006e90:	e005      	b.n	8006e9e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e9c:	bf00      	nop
    }

    if (pclk != 0U)
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d019      	beq.n	8006ed8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	085a      	lsrs	r2, r3, #1
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	441a      	add	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	2b0f      	cmp	r3, #15
 8006ebc:	d909      	bls.n	8006ed2 <UART_SetConfig+0x546>
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec4:	d205      	bcs.n	8006ed2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	60da      	str	r2, [r3, #12]
 8006ed0:	e002      	b.n	8006ed8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006ee4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3728      	adds	r7, #40	; 0x28
 8006eec:	46bd      	mov	sp, r7
 8006eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ef2:	bf00      	nop
 8006ef4:	40008000 	.word	0x40008000
 8006ef8:	00f42400 	.word	0x00f42400

08006efc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00a      	beq.n	8006f26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	430a      	orrs	r2, r1
 8006f24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2a:	f003 0302 	and.w	r3, r3, #2
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00a      	beq.n	8006f48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	430a      	orrs	r2, r1
 8006f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4c:	f003 0304 	and.w	r3, r3, #4
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00a      	beq.n	8006f6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	430a      	orrs	r2, r1
 8006f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6e:	f003 0308 	and.w	r3, r3, #8
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f90:	f003 0310 	and.w	r3, r3, #16
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00a      	beq.n	8006fae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb2:	f003 0320 	and.w	r3, r3, #32
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d01a      	beq.n	8007012 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ffa:	d10a      	bne.n	8007012 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	430a      	orrs	r2, r1
 8007010:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00a      	beq.n	8007034 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	430a      	orrs	r2, r1
 8007032:	605a      	str	r2, [r3, #4]
  }
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af02      	add	r7, sp, #8
 8007046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007050:	f7fb ffd0 	bl	8002ff4 <HAL_GetTick>
 8007054:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0308 	and.w	r3, r3, #8
 8007060:	2b08      	cmp	r3, #8
 8007062:	d10e      	bne.n	8007082 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007064:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f82d 	bl	80070d2 <UART_WaitOnFlagUntilTimeout>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e023      	b.n	80070ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0304 	and.w	r3, r3, #4
 800708c:	2b04      	cmp	r3, #4
 800708e:	d10e      	bne.n	80070ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007090:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f817 	bl	80070d2 <UART_WaitOnFlagUntilTimeout>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e00d      	b.n	80070ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2220      	movs	r2, #32
 80070b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2220      	movs	r2, #32
 80070b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b09c      	sub	sp, #112	; 0x70
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	60f8      	str	r0, [r7, #12]
 80070da:	60b9      	str	r1, [r7, #8]
 80070dc:	603b      	str	r3, [r7, #0]
 80070de:	4613      	mov	r3, r2
 80070e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070e2:	e0a5      	b.n	8007230 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ea:	f000 80a1 	beq.w	8007230 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ee:	f7fb ff81 	bl	8002ff4 <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d302      	bcc.n	8007104 <UART_WaitOnFlagUntilTimeout+0x32>
 80070fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007100:	2b00      	cmp	r3, #0
 8007102:	d13e      	bne.n	8007182 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800710c:	e853 3f00 	ldrex	r3, [r3]
 8007110:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007114:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007118:	667b      	str	r3, [r7, #100]	; 0x64
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007122:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007124:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007126:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007128:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800712a:	e841 2300 	strex	r3, r2, [r1]
 800712e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1e6      	bne.n	8007104 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	3308      	adds	r3, #8
 800713c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007140:	e853 3f00 	ldrex	r3, [r3]
 8007144:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007148:	f023 0301 	bic.w	r3, r3, #1
 800714c:	663b      	str	r3, [r7, #96]	; 0x60
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	3308      	adds	r3, #8
 8007154:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007156:	64ba      	str	r2, [r7, #72]	; 0x48
 8007158:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800715c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800715e:	e841 2300 	strex	r3, r2, [r1]
 8007162:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1e5      	bne.n	8007136 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2220      	movs	r2, #32
 800716e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2220      	movs	r2, #32
 8007174:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e067      	b.n	8007252 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b00      	cmp	r3, #0
 800718e:	d04f      	beq.n	8007230 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800719a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800719e:	d147      	bne.n	8007230 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071a8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	e853 3f00 	ldrex	r3, [r3]
 80071b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	461a      	mov	r2, r3
 80071c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071c8:	637b      	str	r3, [r7, #52]	; 0x34
 80071ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071d0:	e841 2300 	strex	r3, r2, [r1]
 80071d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e6      	bne.n	80071aa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3308      	adds	r3, #8
 80071e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	e853 3f00 	ldrex	r3, [r3]
 80071ea:	613b      	str	r3, [r7, #16]
   return(result);
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f023 0301 	bic.w	r3, r3, #1
 80071f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	3308      	adds	r3, #8
 80071fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80071fc:	623a      	str	r2, [r7, #32]
 80071fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007200:	69f9      	ldr	r1, [r7, #28]
 8007202:	6a3a      	ldr	r2, [r7, #32]
 8007204:	e841 2300 	strex	r3, r2, [r1]
 8007208:	61bb      	str	r3, [r7, #24]
   return(result);
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1e5      	bne.n	80071dc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2220      	movs	r2, #32
 8007214:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2220      	movs	r2, #32
 800721a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2220      	movs	r2, #32
 8007220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e010      	b.n	8007252 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	69da      	ldr	r2, [r3, #28]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	4013      	ands	r3, r2
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	429a      	cmp	r2, r3
 800723e:	bf0c      	ite	eq
 8007240:	2301      	moveq	r3, #1
 8007242:	2300      	movne	r3, #0
 8007244:	b2db      	uxtb	r3, r3
 8007246:	461a      	mov	r2, r3
 8007248:	79fb      	ldrb	r3, [r7, #7]
 800724a:	429a      	cmp	r2, r3
 800724c:	f43f af4a 	beq.w	80070e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3770      	adds	r7, #112	; 0x70
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800725a:	b480      	push	{r7}
 800725c:	b095      	sub	sp, #84	; 0x54
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800726a:	e853 3f00 	ldrex	r3, [r3]
 800726e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007272:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	461a      	mov	r2, r3
 800727e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007280:	643b      	str	r3, [r7, #64]	; 0x40
 8007282:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007284:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007286:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007288:	e841 2300 	strex	r3, r2, [r1]
 800728c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800728e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1e6      	bne.n	8007262 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	3308      	adds	r3, #8
 800729a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729c:	6a3b      	ldr	r3, [r7, #32]
 800729e:	e853 3f00 	ldrex	r3, [r3]
 80072a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	f023 0301 	bic.w	r3, r3, #1
 80072aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	3308      	adds	r3, #8
 80072b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072bc:	e841 2300 	strex	r3, r2, [r1]
 80072c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1e5      	bne.n	8007294 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d118      	bne.n	8007302 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	e853 3f00 	ldrex	r3, [r3]
 80072dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	f023 0310 	bic.w	r3, r3, #16
 80072e4:	647b      	str	r3, [r7, #68]	; 0x44
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	461a      	mov	r2, r3
 80072ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072ee:	61bb      	str	r3, [r7, #24]
 80072f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f2:	6979      	ldr	r1, [r7, #20]
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	e841 2300 	strex	r3, r2, [r1]
 80072fa:	613b      	str	r3, [r7, #16]
   return(result);
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1e6      	bne.n	80072d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2220      	movs	r2, #32
 8007306:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007314:	bf00      	nop
 8007316:	3754      	adds	r7, #84	; 0x54
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f7ff fb0e 	bl	8006960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007344:	bf00      	nop
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b088      	sub	sp, #32
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	e853 3f00 	ldrex	r3, [r3]
 8007360:	60bb      	str	r3, [r7, #8]
   return(result);
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007368:	61fb      	str	r3, [r7, #28]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	61bb      	str	r3, [r7, #24]
 8007374:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007376:	6979      	ldr	r1, [r7, #20]
 8007378:	69ba      	ldr	r2, [r7, #24]
 800737a:	e841 2300 	strex	r3, r2, [r1]
 800737e:	613b      	str	r3, [r7, #16]
   return(result);
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e6      	bne.n	8007354 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2220      	movs	r2, #32
 800738a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7ff fada 	bl	800694c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007398:	bf00      	nop
 800739a:	3720      	adds	r7, #32
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <__errno>:
 80073b4:	4b01      	ldr	r3, [pc, #4]	; (80073bc <__errno+0x8>)
 80073b6:	6818      	ldr	r0, [r3, #0]
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	20000034 	.word	0x20000034

080073c0 <__libc_init_array>:
 80073c0:	b570      	push	{r4, r5, r6, lr}
 80073c2:	4d0d      	ldr	r5, [pc, #52]	; (80073f8 <__libc_init_array+0x38>)
 80073c4:	4c0d      	ldr	r4, [pc, #52]	; (80073fc <__libc_init_array+0x3c>)
 80073c6:	1b64      	subs	r4, r4, r5
 80073c8:	10a4      	asrs	r4, r4, #2
 80073ca:	2600      	movs	r6, #0
 80073cc:	42a6      	cmp	r6, r4
 80073ce:	d109      	bne.n	80073e4 <__libc_init_array+0x24>
 80073d0:	4d0b      	ldr	r5, [pc, #44]	; (8007400 <__libc_init_array+0x40>)
 80073d2:	4c0c      	ldr	r4, [pc, #48]	; (8007404 <__libc_init_array+0x44>)
 80073d4:	f003 ffd2 	bl	800b37c <_init>
 80073d8:	1b64      	subs	r4, r4, r5
 80073da:	10a4      	asrs	r4, r4, #2
 80073dc:	2600      	movs	r6, #0
 80073de:	42a6      	cmp	r6, r4
 80073e0:	d105      	bne.n	80073ee <__libc_init_array+0x2e>
 80073e2:	bd70      	pop	{r4, r5, r6, pc}
 80073e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073e8:	4798      	blx	r3
 80073ea:	3601      	adds	r6, #1
 80073ec:	e7ee      	b.n	80073cc <__libc_init_array+0xc>
 80073ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80073f2:	4798      	blx	r3
 80073f4:	3601      	adds	r6, #1
 80073f6:	e7f2      	b.n	80073de <__libc_init_array+0x1e>
 80073f8:	08010010 	.word	0x08010010
 80073fc:	08010010 	.word	0x08010010
 8007400:	08010010 	.word	0x08010010
 8007404:	08010014 	.word	0x08010014

08007408 <memcpy>:
 8007408:	440a      	add	r2, r1
 800740a:	4291      	cmp	r1, r2
 800740c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007410:	d100      	bne.n	8007414 <memcpy+0xc>
 8007412:	4770      	bx	lr
 8007414:	b510      	push	{r4, lr}
 8007416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800741a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800741e:	4291      	cmp	r1, r2
 8007420:	d1f9      	bne.n	8007416 <memcpy+0xe>
 8007422:	bd10      	pop	{r4, pc}

08007424 <memmove>:
 8007424:	4288      	cmp	r0, r1
 8007426:	b510      	push	{r4, lr}
 8007428:	eb01 0402 	add.w	r4, r1, r2
 800742c:	d902      	bls.n	8007434 <memmove+0x10>
 800742e:	4284      	cmp	r4, r0
 8007430:	4623      	mov	r3, r4
 8007432:	d807      	bhi.n	8007444 <memmove+0x20>
 8007434:	1e43      	subs	r3, r0, #1
 8007436:	42a1      	cmp	r1, r4
 8007438:	d008      	beq.n	800744c <memmove+0x28>
 800743a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800743e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007442:	e7f8      	b.n	8007436 <memmove+0x12>
 8007444:	4402      	add	r2, r0
 8007446:	4601      	mov	r1, r0
 8007448:	428a      	cmp	r2, r1
 800744a:	d100      	bne.n	800744e <memmove+0x2a>
 800744c:	bd10      	pop	{r4, pc}
 800744e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007452:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007456:	e7f7      	b.n	8007448 <memmove+0x24>

08007458 <memset>:
 8007458:	4402      	add	r2, r0
 800745a:	4603      	mov	r3, r0
 800745c:	4293      	cmp	r3, r2
 800745e:	d100      	bne.n	8007462 <memset+0xa>
 8007460:	4770      	bx	lr
 8007462:	f803 1b01 	strb.w	r1, [r3], #1
 8007466:	e7f9      	b.n	800745c <memset+0x4>

08007468 <__cvt>:
 8007468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800746c:	ec55 4b10 	vmov	r4, r5, d0
 8007470:	2d00      	cmp	r5, #0
 8007472:	460e      	mov	r6, r1
 8007474:	4619      	mov	r1, r3
 8007476:	462b      	mov	r3, r5
 8007478:	bfbb      	ittet	lt
 800747a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800747e:	461d      	movlt	r5, r3
 8007480:	2300      	movge	r3, #0
 8007482:	232d      	movlt	r3, #45	; 0x2d
 8007484:	700b      	strb	r3, [r1, #0]
 8007486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007488:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800748c:	4691      	mov	r9, r2
 800748e:	f023 0820 	bic.w	r8, r3, #32
 8007492:	bfbc      	itt	lt
 8007494:	4622      	movlt	r2, r4
 8007496:	4614      	movlt	r4, r2
 8007498:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800749c:	d005      	beq.n	80074aa <__cvt+0x42>
 800749e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80074a2:	d100      	bne.n	80074a6 <__cvt+0x3e>
 80074a4:	3601      	adds	r6, #1
 80074a6:	2102      	movs	r1, #2
 80074a8:	e000      	b.n	80074ac <__cvt+0x44>
 80074aa:	2103      	movs	r1, #3
 80074ac:	ab03      	add	r3, sp, #12
 80074ae:	9301      	str	r3, [sp, #4]
 80074b0:	ab02      	add	r3, sp, #8
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	ec45 4b10 	vmov	d0, r4, r5
 80074b8:	4653      	mov	r3, sl
 80074ba:	4632      	mov	r2, r6
 80074bc:	f000 fd18 	bl	8007ef0 <_dtoa_r>
 80074c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80074c4:	4607      	mov	r7, r0
 80074c6:	d102      	bne.n	80074ce <__cvt+0x66>
 80074c8:	f019 0f01 	tst.w	r9, #1
 80074cc:	d022      	beq.n	8007514 <__cvt+0xac>
 80074ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074d2:	eb07 0906 	add.w	r9, r7, r6
 80074d6:	d110      	bne.n	80074fa <__cvt+0x92>
 80074d8:	783b      	ldrb	r3, [r7, #0]
 80074da:	2b30      	cmp	r3, #48	; 0x30
 80074dc:	d10a      	bne.n	80074f4 <__cvt+0x8c>
 80074de:	2200      	movs	r2, #0
 80074e0:	2300      	movs	r3, #0
 80074e2:	4620      	mov	r0, r4
 80074e4:	4629      	mov	r1, r5
 80074e6:	f7f9 faef 	bl	8000ac8 <__aeabi_dcmpeq>
 80074ea:	b918      	cbnz	r0, 80074f4 <__cvt+0x8c>
 80074ec:	f1c6 0601 	rsb	r6, r6, #1
 80074f0:	f8ca 6000 	str.w	r6, [sl]
 80074f4:	f8da 3000 	ldr.w	r3, [sl]
 80074f8:	4499      	add	r9, r3
 80074fa:	2200      	movs	r2, #0
 80074fc:	2300      	movs	r3, #0
 80074fe:	4620      	mov	r0, r4
 8007500:	4629      	mov	r1, r5
 8007502:	f7f9 fae1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007506:	b108      	cbz	r0, 800750c <__cvt+0xa4>
 8007508:	f8cd 900c 	str.w	r9, [sp, #12]
 800750c:	2230      	movs	r2, #48	; 0x30
 800750e:	9b03      	ldr	r3, [sp, #12]
 8007510:	454b      	cmp	r3, r9
 8007512:	d307      	bcc.n	8007524 <__cvt+0xbc>
 8007514:	9b03      	ldr	r3, [sp, #12]
 8007516:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007518:	1bdb      	subs	r3, r3, r7
 800751a:	4638      	mov	r0, r7
 800751c:	6013      	str	r3, [r2, #0]
 800751e:	b004      	add	sp, #16
 8007520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007524:	1c59      	adds	r1, r3, #1
 8007526:	9103      	str	r1, [sp, #12]
 8007528:	701a      	strb	r2, [r3, #0]
 800752a:	e7f0      	b.n	800750e <__cvt+0xa6>

0800752c <__exponent>:
 800752c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800752e:	4603      	mov	r3, r0
 8007530:	2900      	cmp	r1, #0
 8007532:	bfb8      	it	lt
 8007534:	4249      	neglt	r1, r1
 8007536:	f803 2b02 	strb.w	r2, [r3], #2
 800753a:	bfb4      	ite	lt
 800753c:	222d      	movlt	r2, #45	; 0x2d
 800753e:	222b      	movge	r2, #43	; 0x2b
 8007540:	2909      	cmp	r1, #9
 8007542:	7042      	strb	r2, [r0, #1]
 8007544:	dd2a      	ble.n	800759c <__exponent+0x70>
 8007546:	f10d 0407 	add.w	r4, sp, #7
 800754a:	46a4      	mov	ip, r4
 800754c:	270a      	movs	r7, #10
 800754e:	46a6      	mov	lr, r4
 8007550:	460a      	mov	r2, r1
 8007552:	fb91 f6f7 	sdiv	r6, r1, r7
 8007556:	fb07 1516 	mls	r5, r7, r6, r1
 800755a:	3530      	adds	r5, #48	; 0x30
 800755c:	2a63      	cmp	r2, #99	; 0x63
 800755e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007562:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007566:	4631      	mov	r1, r6
 8007568:	dcf1      	bgt.n	800754e <__exponent+0x22>
 800756a:	3130      	adds	r1, #48	; 0x30
 800756c:	f1ae 0502 	sub.w	r5, lr, #2
 8007570:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007574:	1c44      	adds	r4, r0, #1
 8007576:	4629      	mov	r1, r5
 8007578:	4561      	cmp	r1, ip
 800757a:	d30a      	bcc.n	8007592 <__exponent+0x66>
 800757c:	f10d 0209 	add.w	r2, sp, #9
 8007580:	eba2 020e 	sub.w	r2, r2, lr
 8007584:	4565      	cmp	r5, ip
 8007586:	bf88      	it	hi
 8007588:	2200      	movhi	r2, #0
 800758a:	4413      	add	r3, r2
 800758c:	1a18      	subs	r0, r3, r0
 800758e:	b003      	add	sp, #12
 8007590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007592:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007596:	f804 2f01 	strb.w	r2, [r4, #1]!
 800759a:	e7ed      	b.n	8007578 <__exponent+0x4c>
 800759c:	2330      	movs	r3, #48	; 0x30
 800759e:	3130      	adds	r1, #48	; 0x30
 80075a0:	7083      	strb	r3, [r0, #2]
 80075a2:	70c1      	strb	r1, [r0, #3]
 80075a4:	1d03      	adds	r3, r0, #4
 80075a6:	e7f1      	b.n	800758c <__exponent+0x60>

080075a8 <_printf_float>:
 80075a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ac:	ed2d 8b02 	vpush	{d8}
 80075b0:	b08d      	sub	sp, #52	; 0x34
 80075b2:	460c      	mov	r4, r1
 80075b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80075b8:	4616      	mov	r6, r2
 80075ba:	461f      	mov	r7, r3
 80075bc:	4605      	mov	r5, r0
 80075be:	f001 fb7b 	bl	8008cb8 <_localeconv_r>
 80075c2:	f8d0 a000 	ldr.w	sl, [r0]
 80075c6:	4650      	mov	r0, sl
 80075c8:	f7f8 fe02 	bl	80001d0 <strlen>
 80075cc:	2300      	movs	r3, #0
 80075ce:	930a      	str	r3, [sp, #40]	; 0x28
 80075d0:	6823      	ldr	r3, [r4, #0]
 80075d2:	9305      	str	r3, [sp, #20]
 80075d4:	f8d8 3000 	ldr.w	r3, [r8]
 80075d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80075dc:	3307      	adds	r3, #7
 80075de:	f023 0307 	bic.w	r3, r3, #7
 80075e2:	f103 0208 	add.w	r2, r3, #8
 80075e6:	f8c8 2000 	str.w	r2, [r8]
 80075ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80075f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80075f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80075fa:	9307      	str	r3, [sp, #28]
 80075fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8007600:	ee08 0a10 	vmov	s16, r0
 8007604:	4b9f      	ldr	r3, [pc, #636]	; (8007884 <_printf_float+0x2dc>)
 8007606:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800760a:	f04f 32ff 	mov.w	r2, #4294967295
 800760e:	f7f9 fa8d 	bl	8000b2c <__aeabi_dcmpun>
 8007612:	bb88      	cbnz	r0, 8007678 <_printf_float+0xd0>
 8007614:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007618:	4b9a      	ldr	r3, [pc, #616]	; (8007884 <_printf_float+0x2dc>)
 800761a:	f04f 32ff 	mov.w	r2, #4294967295
 800761e:	f7f9 fa67 	bl	8000af0 <__aeabi_dcmple>
 8007622:	bb48      	cbnz	r0, 8007678 <_printf_float+0xd0>
 8007624:	2200      	movs	r2, #0
 8007626:	2300      	movs	r3, #0
 8007628:	4640      	mov	r0, r8
 800762a:	4649      	mov	r1, r9
 800762c:	f7f9 fa56 	bl	8000adc <__aeabi_dcmplt>
 8007630:	b110      	cbz	r0, 8007638 <_printf_float+0x90>
 8007632:	232d      	movs	r3, #45	; 0x2d
 8007634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007638:	4b93      	ldr	r3, [pc, #588]	; (8007888 <_printf_float+0x2e0>)
 800763a:	4894      	ldr	r0, [pc, #592]	; (800788c <_printf_float+0x2e4>)
 800763c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007640:	bf94      	ite	ls
 8007642:	4698      	movls	r8, r3
 8007644:	4680      	movhi	r8, r0
 8007646:	2303      	movs	r3, #3
 8007648:	6123      	str	r3, [r4, #16]
 800764a:	9b05      	ldr	r3, [sp, #20]
 800764c:	f023 0204 	bic.w	r2, r3, #4
 8007650:	6022      	str	r2, [r4, #0]
 8007652:	f04f 0900 	mov.w	r9, #0
 8007656:	9700      	str	r7, [sp, #0]
 8007658:	4633      	mov	r3, r6
 800765a:	aa0b      	add	r2, sp, #44	; 0x2c
 800765c:	4621      	mov	r1, r4
 800765e:	4628      	mov	r0, r5
 8007660:	f000 f9d8 	bl	8007a14 <_printf_common>
 8007664:	3001      	adds	r0, #1
 8007666:	f040 8090 	bne.w	800778a <_printf_float+0x1e2>
 800766a:	f04f 30ff 	mov.w	r0, #4294967295
 800766e:	b00d      	add	sp, #52	; 0x34
 8007670:	ecbd 8b02 	vpop	{d8}
 8007674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007678:	4642      	mov	r2, r8
 800767a:	464b      	mov	r3, r9
 800767c:	4640      	mov	r0, r8
 800767e:	4649      	mov	r1, r9
 8007680:	f7f9 fa54 	bl	8000b2c <__aeabi_dcmpun>
 8007684:	b140      	cbz	r0, 8007698 <_printf_float+0xf0>
 8007686:	464b      	mov	r3, r9
 8007688:	2b00      	cmp	r3, #0
 800768a:	bfbc      	itt	lt
 800768c:	232d      	movlt	r3, #45	; 0x2d
 800768e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007692:	487f      	ldr	r0, [pc, #508]	; (8007890 <_printf_float+0x2e8>)
 8007694:	4b7f      	ldr	r3, [pc, #508]	; (8007894 <_printf_float+0x2ec>)
 8007696:	e7d1      	b.n	800763c <_printf_float+0x94>
 8007698:	6863      	ldr	r3, [r4, #4]
 800769a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800769e:	9206      	str	r2, [sp, #24]
 80076a0:	1c5a      	adds	r2, r3, #1
 80076a2:	d13f      	bne.n	8007724 <_printf_float+0x17c>
 80076a4:	2306      	movs	r3, #6
 80076a6:	6063      	str	r3, [r4, #4]
 80076a8:	9b05      	ldr	r3, [sp, #20]
 80076aa:	6861      	ldr	r1, [r4, #4]
 80076ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80076b0:	2300      	movs	r3, #0
 80076b2:	9303      	str	r3, [sp, #12]
 80076b4:	ab0a      	add	r3, sp, #40	; 0x28
 80076b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80076ba:	ab09      	add	r3, sp, #36	; 0x24
 80076bc:	ec49 8b10 	vmov	d0, r8, r9
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	6022      	str	r2, [r4, #0]
 80076c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80076c8:	4628      	mov	r0, r5
 80076ca:	f7ff fecd 	bl	8007468 <__cvt>
 80076ce:	9b06      	ldr	r3, [sp, #24]
 80076d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076d2:	2b47      	cmp	r3, #71	; 0x47
 80076d4:	4680      	mov	r8, r0
 80076d6:	d108      	bne.n	80076ea <_printf_float+0x142>
 80076d8:	1cc8      	adds	r0, r1, #3
 80076da:	db02      	blt.n	80076e2 <_printf_float+0x13a>
 80076dc:	6863      	ldr	r3, [r4, #4]
 80076de:	4299      	cmp	r1, r3
 80076e0:	dd41      	ble.n	8007766 <_printf_float+0x1be>
 80076e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80076e6:	fa5f fb8b 	uxtb.w	fp, fp
 80076ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80076ee:	d820      	bhi.n	8007732 <_printf_float+0x18a>
 80076f0:	3901      	subs	r1, #1
 80076f2:	465a      	mov	r2, fp
 80076f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80076f8:	9109      	str	r1, [sp, #36]	; 0x24
 80076fa:	f7ff ff17 	bl	800752c <__exponent>
 80076fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007700:	1813      	adds	r3, r2, r0
 8007702:	2a01      	cmp	r2, #1
 8007704:	4681      	mov	r9, r0
 8007706:	6123      	str	r3, [r4, #16]
 8007708:	dc02      	bgt.n	8007710 <_printf_float+0x168>
 800770a:	6822      	ldr	r2, [r4, #0]
 800770c:	07d2      	lsls	r2, r2, #31
 800770e:	d501      	bpl.n	8007714 <_printf_float+0x16c>
 8007710:	3301      	adds	r3, #1
 8007712:	6123      	str	r3, [r4, #16]
 8007714:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007718:	2b00      	cmp	r3, #0
 800771a:	d09c      	beq.n	8007656 <_printf_float+0xae>
 800771c:	232d      	movs	r3, #45	; 0x2d
 800771e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007722:	e798      	b.n	8007656 <_printf_float+0xae>
 8007724:	9a06      	ldr	r2, [sp, #24]
 8007726:	2a47      	cmp	r2, #71	; 0x47
 8007728:	d1be      	bne.n	80076a8 <_printf_float+0x100>
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1bc      	bne.n	80076a8 <_printf_float+0x100>
 800772e:	2301      	movs	r3, #1
 8007730:	e7b9      	b.n	80076a6 <_printf_float+0xfe>
 8007732:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007736:	d118      	bne.n	800776a <_printf_float+0x1c2>
 8007738:	2900      	cmp	r1, #0
 800773a:	6863      	ldr	r3, [r4, #4]
 800773c:	dd0b      	ble.n	8007756 <_printf_float+0x1ae>
 800773e:	6121      	str	r1, [r4, #16]
 8007740:	b913      	cbnz	r3, 8007748 <_printf_float+0x1a0>
 8007742:	6822      	ldr	r2, [r4, #0]
 8007744:	07d0      	lsls	r0, r2, #31
 8007746:	d502      	bpl.n	800774e <_printf_float+0x1a6>
 8007748:	3301      	adds	r3, #1
 800774a:	440b      	add	r3, r1
 800774c:	6123      	str	r3, [r4, #16]
 800774e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007750:	f04f 0900 	mov.w	r9, #0
 8007754:	e7de      	b.n	8007714 <_printf_float+0x16c>
 8007756:	b913      	cbnz	r3, 800775e <_printf_float+0x1b6>
 8007758:	6822      	ldr	r2, [r4, #0]
 800775a:	07d2      	lsls	r2, r2, #31
 800775c:	d501      	bpl.n	8007762 <_printf_float+0x1ba>
 800775e:	3302      	adds	r3, #2
 8007760:	e7f4      	b.n	800774c <_printf_float+0x1a4>
 8007762:	2301      	movs	r3, #1
 8007764:	e7f2      	b.n	800774c <_printf_float+0x1a4>
 8007766:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800776a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800776c:	4299      	cmp	r1, r3
 800776e:	db05      	blt.n	800777c <_printf_float+0x1d4>
 8007770:	6823      	ldr	r3, [r4, #0]
 8007772:	6121      	str	r1, [r4, #16]
 8007774:	07d8      	lsls	r0, r3, #31
 8007776:	d5ea      	bpl.n	800774e <_printf_float+0x1a6>
 8007778:	1c4b      	adds	r3, r1, #1
 800777a:	e7e7      	b.n	800774c <_printf_float+0x1a4>
 800777c:	2900      	cmp	r1, #0
 800777e:	bfd4      	ite	le
 8007780:	f1c1 0202 	rsble	r2, r1, #2
 8007784:	2201      	movgt	r2, #1
 8007786:	4413      	add	r3, r2
 8007788:	e7e0      	b.n	800774c <_printf_float+0x1a4>
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	055a      	lsls	r2, r3, #21
 800778e:	d407      	bmi.n	80077a0 <_printf_float+0x1f8>
 8007790:	6923      	ldr	r3, [r4, #16]
 8007792:	4642      	mov	r2, r8
 8007794:	4631      	mov	r1, r6
 8007796:	4628      	mov	r0, r5
 8007798:	47b8      	blx	r7
 800779a:	3001      	adds	r0, #1
 800779c:	d12c      	bne.n	80077f8 <_printf_float+0x250>
 800779e:	e764      	b.n	800766a <_printf_float+0xc2>
 80077a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80077a4:	f240 80e0 	bls.w	8007968 <_printf_float+0x3c0>
 80077a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077ac:	2200      	movs	r2, #0
 80077ae:	2300      	movs	r3, #0
 80077b0:	f7f9 f98a 	bl	8000ac8 <__aeabi_dcmpeq>
 80077b4:	2800      	cmp	r0, #0
 80077b6:	d034      	beq.n	8007822 <_printf_float+0x27a>
 80077b8:	4a37      	ldr	r2, [pc, #220]	; (8007898 <_printf_float+0x2f0>)
 80077ba:	2301      	movs	r3, #1
 80077bc:	4631      	mov	r1, r6
 80077be:	4628      	mov	r0, r5
 80077c0:	47b8      	blx	r7
 80077c2:	3001      	adds	r0, #1
 80077c4:	f43f af51 	beq.w	800766a <_printf_float+0xc2>
 80077c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077cc:	429a      	cmp	r2, r3
 80077ce:	db02      	blt.n	80077d6 <_printf_float+0x22e>
 80077d0:	6823      	ldr	r3, [r4, #0]
 80077d2:	07d8      	lsls	r0, r3, #31
 80077d4:	d510      	bpl.n	80077f8 <_printf_float+0x250>
 80077d6:	ee18 3a10 	vmov	r3, s16
 80077da:	4652      	mov	r2, sl
 80077dc:	4631      	mov	r1, r6
 80077de:	4628      	mov	r0, r5
 80077e0:	47b8      	blx	r7
 80077e2:	3001      	adds	r0, #1
 80077e4:	f43f af41 	beq.w	800766a <_printf_float+0xc2>
 80077e8:	f04f 0800 	mov.w	r8, #0
 80077ec:	f104 091a 	add.w	r9, r4, #26
 80077f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077f2:	3b01      	subs	r3, #1
 80077f4:	4543      	cmp	r3, r8
 80077f6:	dc09      	bgt.n	800780c <_printf_float+0x264>
 80077f8:	6823      	ldr	r3, [r4, #0]
 80077fa:	079b      	lsls	r3, r3, #30
 80077fc:	f100 8105 	bmi.w	8007a0a <_printf_float+0x462>
 8007800:	68e0      	ldr	r0, [r4, #12]
 8007802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007804:	4298      	cmp	r0, r3
 8007806:	bfb8      	it	lt
 8007808:	4618      	movlt	r0, r3
 800780a:	e730      	b.n	800766e <_printf_float+0xc6>
 800780c:	2301      	movs	r3, #1
 800780e:	464a      	mov	r2, r9
 8007810:	4631      	mov	r1, r6
 8007812:	4628      	mov	r0, r5
 8007814:	47b8      	blx	r7
 8007816:	3001      	adds	r0, #1
 8007818:	f43f af27 	beq.w	800766a <_printf_float+0xc2>
 800781c:	f108 0801 	add.w	r8, r8, #1
 8007820:	e7e6      	b.n	80077f0 <_printf_float+0x248>
 8007822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007824:	2b00      	cmp	r3, #0
 8007826:	dc39      	bgt.n	800789c <_printf_float+0x2f4>
 8007828:	4a1b      	ldr	r2, [pc, #108]	; (8007898 <_printf_float+0x2f0>)
 800782a:	2301      	movs	r3, #1
 800782c:	4631      	mov	r1, r6
 800782e:	4628      	mov	r0, r5
 8007830:	47b8      	blx	r7
 8007832:	3001      	adds	r0, #1
 8007834:	f43f af19 	beq.w	800766a <_printf_float+0xc2>
 8007838:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800783c:	4313      	orrs	r3, r2
 800783e:	d102      	bne.n	8007846 <_printf_float+0x29e>
 8007840:	6823      	ldr	r3, [r4, #0]
 8007842:	07d9      	lsls	r1, r3, #31
 8007844:	d5d8      	bpl.n	80077f8 <_printf_float+0x250>
 8007846:	ee18 3a10 	vmov	r3, s16
 800784a:	4652      	mov	r2, sl
 800784c:	4631      	mov	r1, r6
 800784e:	4628      	mov	r0, r5
 8007850:	47b8      	blx	r7
 8007852:	3001      	adds	r0, #1
 8007854:	f43f af09 	beq.w	800766a <_printf_float+0xc2>
 8007858:	f04f 0900 	mov.w	r9, #0
 800785c:	f104 0a1a 	add.w	sl, r4, #26
 8007860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007862:	425b      	negs	r3, r3
 8007864:	454b      	cmp	r3, r9
 8007866:	dc01      	bgt.n	800786c <_printf_float+0x2c4>
 8007868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800786a:	e792      	b.n	8007792 <_printf_float+0x1ea>
 800786c:	2301      	movs	r3, #1
 800786e:	4652      	mov	r2, sl
 8007870:	4631      	mov	r1, r6
 8007872:	4628      	mov	r0, r5
 8007874:	47b8      	blx	r7
 8007876:	3001      	adds	r0, #1
 8007878:	f43f aef7 	beq.w	800766a <_printf_float+0xc2>
 800787c:	f109 0901 	add.w	r9, r9, #1
 8007880:	e7ee      	b.n	8007860 <_printf_float+0x2b8>
 8007882:	bf00      	nop
 8007884:	7fefffff 	.word	0x7fefffff
 8007888:	0800fa58 	.word	0x0800fa58
 800788c:	0800fa5c 	.word	0x0800fa5c
 8007890:	0800fa64 	.word	0x0800fa64
 8007894:	0800fa60 	.word	0x0800fa60
 8007898:	0800fa68 	.word	0x0800fa68
 800789c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800789e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078a0:	429a      	cmp	r2, r3
 80078a2:	bfa8      	it	ge
 80078a4:	461a      	movge	r2, r3
 80078a6:	2a00      	cmp	r2, #0
 80078a8:	4691      	mov	r9, r2
 80078aa:	dc37      	bgt.n	800791c <_printf_float+0x374>
 80078ac:	f04f 0b00 	mov.w	fp, #0
 80078b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078b4:	f104 021a 	add.w	r2, r4, #26
 80078b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078ba:	9305      	str	r3, [sp, #20]
 80078bc:	eba3 0309 	sub.w	r3, r3, r9
 80078c0:	455b      	cmp	r3, fp
 80078c2:	dc33      	bgt.n	800792c <_printf_float+0x384>
 80078c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078c8:	429a      	cmp	r2, r3
 80078ca:	db3b      	blt.n	8007944 <_printf_float+0x39c>
 80078cc:	6823      	ldr	r3, [r4, #0]
 80078ce:	07da      	lsls	r2, r3, #31
 80078d0:	d438      	bmi.n	8007944 <_printf_float+0x39c>
 80078d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078d4:	9a05      	ldr	r2, [sp, #20]
 80078d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078d8:	1a9a      	subs	r2, r3, r2
 80078da:	eba3 0901 	sub.w	r9, r3, r1
 80078de:	4591      	cmp	r9, r2
 80078e0:	bfa8      	it	ge
 80078e2:	4691      	movge	r9, r2
 80078e4:	f1b9 0f00 	cmp.w	r9, #0
 80078e8:	dc35      	bgt.n	8007956 <_printf_float+0x3ae>
 80078ea:	f04f 0800 	mov.w	r8, #0
 80078ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078f2:	f104 0a1a 	add.w	sl, r4, #26
 80078f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078fa:	1a9b      	subs	r3, r3, r2
 80078fc:	eba3 0309 	sub.w	r3, r3, r9
 8007900:	4543      	cmp	r3, r8
 8007902:	f77f af79 	ble.w	80077f8 <_printf_float+0x250>
 8007906:	2301      	movs	r3, #1
 8007908:	4652      	mov	r2, sl
 800790a:	4631      	mov	r1, r6
 800790c:	4628      	mov	r0, r5
 800790e:	47b8      	blx	r7
 8007910:	3001      	adds	r0, #1
 8007912:	f43f aeaa 	beq.w	800766a <_printf_float+0xc2>
 8007916:	f108 0801 	add.w	r8, r8, #1
 800791a:	e7ec      	b.n	80078f6 <_printf_float+0x34e>
 800791c:	4613      	mov	r3, r2
 800791e:	4631      	mov	r1, r6
 8007920:	4642      	mov	r2, r8
 8007922:	4628      	mov	r0, r5
 8007924:	47b8      	blx	r7
 8007926:	3001      	adds	r0, #1
 8007928:	d1c0      	bne.n	80078ac <_printf_float+0x304>
 800792a:	e69e      	b.n	800766a <_printf_float+0xc2>
 800792c:	2301      	movs	r3, #1
 800792e:	4631      	mov	r1, r6
 8007930:	4628      	mov	r0, r5
 8007932:	9205      	str	r2, [sp, #20]
 8007934:	47b8      	blx	r7
 8007936:	3001      	adds	r0, #1
 8007938:	f43f ae97 	beq.w	800766a <_printf_float+0xc2>
 800793c:	9a05      	ldr	r2, [sp, #20]
 800793e:	f10b 0b01 	add.w	fp, fp, #1
 8007942:	e7b9      	b.n	80078b8 <_printf_float+0x310>
 8007944:	ee18 3a10 	vmov	r3, s16
 8007948:	4652      	mov	r2, sl
 800794a:	4631      	mov	r1, r6
 800794c:	4628      	mov	r0, r5
 800794e:	47b8      	blx	r7
 8007950:	3001      	adds	r0, #1
 8007952:	d1be      	bne.n	80078d2 <_printf_float+0x32a>
 8007954:	e689      	b.n	800766a <_printf_float+0xc2>
 8007956:	9a05      	ldr	r2, [sp, #20]
 8007958:	464b      	mov	r3, r9
 800795a:	4442      	add	r2, r8
 800795c:	4631      	mov	r1, r6
 800795e:	4628      	mov	r0, r5
 8007960:	47b8      	blx	r7
 8007962:	3001      	adds	r0, #1
 8007964:	d1c1      	bne.n	80078ea <_printf_float+0x342>
 8007966:	e680      	b.n	800766a <_printf_float+0xc2>
 8007968:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800796a:	2a01      	cmp	r2, #1
 800796c:	dc01      	bgt.n	8007972 <_printf_float+0x3ca>
 800796e:	07db      	lsls	r3, r3, #31
 8007970:	d538      	bpl.n	80079e4 <_printf_float+0x43c>
 8007972:	2301      	movs	r3, #1
 8007974:	4642      	mov	r2, r8
 8007976:	4631      	mov	r1, r6
 8007978:	4628      	mov	r0, r5
 800797a:	47b8      	blx	r7
 800797c:	3001      	adds	r0, #1
 800797e:	f43f ae74 	beq.w	800766a <_printf_float+0xc2>
 8007982:	ee18 3a10 	vmov	r3, s16
 8007986:	4652      	mov	r2, sl
 8007988:	4631      	mov	r1, r6
 800798a:	4628      	mov	r0, r5
 800798c:	47b8      	blx	r7
 800798e:	3001      	adds	r0, #1
 8007990:	f43f ae6b 	beq.w	800766a <_printf_float+0xc2>
 8007994:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007998:	2200      	movs	r2, #0
 800799a:	2300      	movs	r3, #0
 800799c:	f7f9 f894 	bl	8000ac8 <__aeabi_dcmpeq>
 80079a0:	b9d8      	cbnz	r0, 80079da <_printf_float+0x432>
 80079a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079a4:	f108 0201 	add.w	r2, r8, #1
 80079a8:	3b01      	subs	r3, #1
 80079aa:	4631      	mov	r1, r6
 80079ac:	4628      	mov	r0, r5
 80079ae:	47b8      	blx	r7
 80079b0:	3001      	adds	r0, #1
 80079b2:	d10e      	bne.n	80079d2 <_printf_float+0x42a>
 80079b4:	e659      	b.n	800766a <_printf_float+0xc2>
 80079b6:	2301      	movs	r3, #1
 80079b8:	4652      	mov	r2, sl
 80079ba:	4631      	mov	r1, r6
 80079bc:	4628      	mov	r0, r5
 80079be:	47b8      	blx	r7
 80079c0:	3001      	adds	r0, #1
 80079c2:	f43f ae52 	beq.w	800766a <_printf_float+0xc2>
 80079c6:	f108 0801 	add.w	r8, r8, #1
 80079ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079cc:	3b01      	subs	r3, #1
 80079ce:	4543      	cmp	r3, r8
 80079d0:	dcf1      	bgt.n	80079b6 <_printf_float+0x40e>
 80079d2:	464b      	mov	r3, r9
 80079d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80079d8:	e6dc      	b.n	8007794 <_printf_float+0x1ec>
 80079da:	f04f 0800 	mov.w	r8, #0
 80079de:	f104 0a1a 	add.w	sl, r4, #26
 80079e2:	e7f2      	b.n	80079ca <_printf_float+0x422>
 80079e4:	2301      	movs	r3, #1
 80079e6:	4642      	mov	r2, r8
 80079e8:	e7df      	b.n	80079aa <_printf_float+0x402>
 80079ea:	2301      	movs	r3, #1
 80079ec:	464a      	mov	r2, r9
 80079ee:	4631      	mov	r1, r6
 80079f0:	4628      	mov	r0, r5
 80079f2:	47b8      	blx	r7
 80079f4:	3001      	adds	r0, #1
 80079f6:	f43f ae38 	beq.w	800766a <_printf_float+0xc2>
 80079fa:	f108 0801 	add.w	r8, r8, #1
 80079fe:	68e3      	ldr	r3, [r4, #12]
 8007a00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a02:	1a5b      	subs	r3, r3, r1
 8007a04:	4543      	cmp	r3, r8
 8007a06:	dcf0      	bgt.n	80079ea <_printf_float+0x442>
 8007a08:	e6fa      	b.n	8007800 <_printf_float+0x258>
 8007a0a:	f04f 0800 	mov.w	r8, #0
 8007a0e:	f104 0919 	add.w	r9, r4, #25
 8007a12:	e7f4      	b.n	80079fe <_printf_float+0x456>

08007a14 <_printf_common>:
 8007a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a18:	4616      	mov	r6, r2
 8007a1a:	4699      	mov	r9, r3
 8007a1c:	688a      	ldr	r2, [r1, #8]
 8007a1e:	690b      	ldr	r3, [r1, #16]
 8007a20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a24:	4293      	cmp	r3, r2
 8007a26:	bfb8      	it	lt
 8007a28:	4613      	movlt	r3, r2
 8007a2a:	6033      	str	r3, [r6, #0]
 8007a2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a30:	4607      	mov	r7, r0
 8007a32:	460c      	mov	r4, r1
 8007a34:	b10a      	cbz	r2, 8007a3a <_printf_common+0x26>
 8007a36:	3301      	adds	r3, #1
 8007a38:	6033      	str	r3, [r6, #0]
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	0699      	lsls	r1, r3, #26
 8007a3e:	bf42      	ittt	mi
 8007a40:	6833      	ldrmi	r3, [r6, #0]
 8007a42:	3302      	addmi	r3, #2
 8007a44:	6033      	strmi	r3, [r6, #0]
 8007a46:	6825      	ldr	r5, [r4, #0]
 8007a48:	f015 0506 	ands.w	r5, r5, #6
 8007a4c:	d106      	bne.n	8007a5c <_printf_common+0x48>
 8007a4e:	f104 0a19 	add.w	sl, r4, #25
 8007a52:	68e3      	ldr	r3, [r4, #12]
 8007a54:	6832      	ldr	r2, [r6, #0]
 8007a56:	1a9b      	subs	r3, r3, r2
 8007a58:	42ab      	cmp	r3, r5
 8007a5a:	dc26      	bgt.n	8007aaa <_printf_common+0x96>
 8007a5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a60:	1e13      	subs	r3, r2, #0
 8007a62:	6822      	ldr	r2, [r4, #0]
 8007a64:	bf18      	it	ne
 8007a66:	2301      	movne	r3, #1
 8007a68:	0692      	lsls	r2, r2, #26
 8007a6a:	d42b      	bmi.n	8007ac4 <_printf_common+0xb0>
 8007a6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a70:	4649      	mov	r1, r9
 8007a72:	4638      	mov	r0, r7
 8007a74:	47c0      	blx	r8
 8007a76:	3001      	adds	r0, #1
 8007a78:	d01e      	beq.n	8007ab8 <_printf_common+0xa4>
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	68e5      	ldr	r5, [r4, #12]
 8007a7e:	6832      	ldr	r2, [r6, #0]
 8007a80:	f003 0306 	and.w	r3, r3, #6
 8007a84:	2b04      	cmp	r3, #4
 8007a86:	bf08      	it	eq
 8007a88:	1aad      	subeq	r5, r5, r2
 8007a8a:	68a3      	ldr	r3, [r4, #8]
 8007a8c:	6922      	ldr	r2, [r4, #16]
 8007a8e:	bf0c      	ite	eq
 8007a90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a94:	2500      	movne	r5, #0
 8007a96:	4293      	cmp	r3, r2
 8007a98:	bfc4      	itt	gt
 8007a9a:	1a9b      	subgt	r3, r3, r2
 8007a9c:	18ed      	addgt	r5, r5, r3
 8007a9e:	2600      	movs	r6, #0
 8007aa0:	341a      	adds	r4, #26
 8007aa2:	42b5      	cmp	r5, r6
 8007aa4:	d11a      	bne.n	8007adc <_printf_common+0xc8>
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	e008      	b.n	8007abc <_printf_common+0xa8>
 8007aaa:	2301      	movs	r3, #1
 8007aac:	4652      	mov	r2, sl
 8007aae:	4649      	mov	r1, r9
 8007ab0:	4638      	mov	r0, r7
 8007ab2:	47c0      	blx	r8
 8007ab4:	3001      	adds	r0, #1
 8007ab6:	d103      	bne.n	8007ac0 <_printf_common+0xac>
 8007ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8007abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ac0:	3501      	adds	r5, #1
 8007ac2:	e7c6      	b.n	8007a52 <_printf_common+0x3e>
 8007ac4:	18e1      	adds	r1, r4, r3
 8007ac6:	1c5a      	adds	r2, r3, #1
 8007ac8:	2030      	movs	r0, #48	; 0x30
 8007aca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ace:	4422      	add	r2, r4
 8007ad0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ad4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ad8:	3302      	adds	r3, #2
 8007ada:	e7c7      	b.n	8007a6c <_printf_common+0x58>
 8007adc:	2301      	movs	r3, #1
 8007ade:	4622      	mov	r2, r4
 8007ae0:	4649      	mov	r1, r9
 8007ae2:	4638      	mov	r0, r7
 8007ae4:	47c0      	blx	r8
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	d0e6      	beq.n	8007ab8 <_printf_common+0xa4>
 8007aea:	3601      	adds	r6, #1
 8007aec:	e7d9      	b.n	8007aa2 <_printf_common+0x8e>
	...

08007af0 <_printf_i>:
 8007af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007af4:	7e0f      	ldrb	r7, [r1, #24]
 8007af6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007af8:	2f78      	cmp	r7, #120	; 0x78
 8007afa:	4691      	mov	r9, r2
 8007afc:	4680      	mov	r8, r0
 8007afe:	460c      	mov	r4, r1
 8007b00:	469a      	mov	sl, r3
 8007b02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b06:	d807      	bhi.n	8007b18 <_printf_i+0x28>
 8007b08:	2f62      	cmp	r7, #98	; 0x62
 8007b0a:	d80a      	bhi.n	8007b22 <_printf_i+0x32>
 8007b0c:	2f00      	cmp	r7, #0
 8007b0e:	f000 80d8 	beq.w	8007cc2 <_printf_i+0x1d2>
 8007b12:	2f58      	cmp	r7, #88	; 0x58
 8007b14:	f000 80a3 	beq.w	8007c5e <_printf_i+0x16e>
 8007b18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b20:	e03a      	b.n	8007b98 <_printf_i+0xa8>
 8007b22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b26:	2b15      	cmp	r3, #21
 8007b28:	d8f6      	bhi.n	8007b18 <_printf_i+0x28>
 8007b2a:	a101      	add	r1, pc, #4	; (adr r1, 8007b30 <_printf_i+0x40>)
 8007b2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b30:	08007b89 	.word	0x08007b89
 8007b34:	08007b9d 	.word	0x08007b9d
 8007b38:	08007b19 	.word	0x08007b19
 8007b3c:	08007b19 	.word	0x08007b19
 8007b40:	08007b19 	.word	0x08007b19
 8007b44:	08007b19 	.word	0x08007b19
 8007b48:	08007b9d 	.word	0x08007b9d
 8007b4c:	08007b19 	.word	0x08007b19
 8007b50:	08007b19 	.word	0x08007b19
 8007b54:	08007b19 	.word	0x08007b19
 8007b58:	08007b19 	.word	0x08007b19
 8007b5c:	08007ca9 	.word	0x08007ca9
 8007b60:	08007bcd 	.word	0x08007bcd
 8007b64:	08007c8b 	.word	0x08007c8b
 8007b68:	08007b19 	.word	0x08007b19
 8007b6c:	08007b19 	.word	0x08007b19
 8007b70:	08007ccb 	.word	0x08007ccb
 8007b74:	08007b19 	.word	0x08007b19
 8007b78:	08007bcd 	.word	0x08007bcd
 8007b7c:	08007b19 	.word	0x08007b19
 8007b80:	08007b19 	.word	0x08007b19
 8007b84:	08007c93 	.word	0x08007c93
 8007b88:	682b      	ldr	r3, [r5, #0]
 8007b8a:	1d1a      	adds	r2, r3, #4
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	602a      	str	r2, [r5, #0]
 8007b90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e0a3      	b.n	8007ce4 <_printf_i+0x1f4>
 8007b9c:	6820      	ldr	r0, [r4, #0]
 8007b9e:	6829      	ldr	r1, [r5, #0]
 8007ba0:	0606      	lsls	r6, r0, #24
 8007ba2:	f101 0304 	add.w	r3, r1, #4
 8007ba6:	d50a      	bpl.n	8007bbe <_printf_i+0xce>
 8007ba8:	680e      	ldr	r6, [r1, #0]
 8007baa:	602b      	str	r3, [r5, #0]
 8007bac:	2e00      	cmp	r6, #0
 8007bae:	da03      	bge.n	8007bb8 <_printf_i+0xc8>
 8007bb0:	232d      	movs	r3, #45	; 0x2d
 8007bb2:	4276      	negs	r6, r6
 8007bb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bb8:	485e      	ldr	r0, [pc, #376]	; (8007d34 <_printf_i+0x244>)
 8007bba:	230a      	movs	r3, #10
 8007bbc:	e019      	b.n	8007bf2 <_printf_i+0x102>
 8007bbe:	680e      	ldr	r6, [r1, #0]
 8007bc0:	602b      	str	r3, [r5, #0]
 8007bc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007bc6:	bf18      	it	ne
 8007bc8:	b236      	sxthne	r6, r6
 8007bca:	e7ef      	b.n	8007bac <_printf_i+0xbc>
 8007bcc:	682b      	ldr	r3, [r5, #0]
 8007bce:	6820      	ldr	r0, [r4, #0]
 8007bd0:	1d19      	adds	r1, r3, #4
 8007bd2:	6029      	str	r1, [r5, #0]
 8007bd4:	0601      	lsls	r1, r0, #24
 8007bd6:	d501      	bpl.n	8007bdc <_printf_i+0xec>
 8007bd8:	681e      	ldr	r6, [r3, #0]
 8007bda:	e002      	b.n	8007be2 <_printf_i+0xf2>
 8007bdc:	0646      	lsls	r6, r0, #25
 8007bde:	d5fb      	bpl.n	8007bd8 <_printf_i+0xe8>
 8007be0:	881e      	ldrh	r6, [r3, #0]
 8007be2:	4854      	ldr	r0, [pc, #336]	; (8007d34 <_printf_i+0x244>)
 8007be4:	2f6f      	cmp	r7, #111	; 0x6f
 8007be6:	bf0c      	ite	eq
 8007be8:	2308      	moveq	r3, #8
 8007bea:	230a      	movne	r3, #10
 8007bec:	2100      	movs	r1, #0
 8007bee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007bf2:	6865      	ldr	r5, [r4, #4]
 8007bf4:	60a5      	str	r5, [r4, #8]
 8007bf6:	2d00      	cmp	r5, #0
 8007bf8:	bfa2      	ittt	ge
 8007bfa:	6821      	ldrge	r1, [r4, #0]
 8007bfc:	f021 0104 	bicge.w	r1, r1, #4
 8007c00:	6021      	strge	r1, [r4, #0]
 8007c02:	b90e      	cbnz	r6, 8007c08 <_printf_i+0x118>
 8007c04:	2d00      	cmp	r5, #0
 8007c06:	d04d      	beq.n	8007ca4 <_printf_i+0x1b4>
 8007c08:	4615      	mov	r5, r2
 8007c0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c0e:	fb03 6711 	mls	r7, r3, r1, r6
 8007c12:	5dc7      	ldrb	r7, [r0, r7]
 8007c14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c18:	4637      	mov	r7, r6
 8007c1a:	42bb      	cmp	r3, r7
 8007c1c:	460e      	mov	r6, r1
 8007c1e:	d9f4      	bls.n	8007c0a <_printf_i+0x11a>
 8007c20:	2b08      	cmp	r3, #8
 8007c22:	d10b      	bne.n	8007c3c <_printf_i+0x14c>
 8007c24:	6823      	ldr	r3, [r4, #0]
 8007c26:	07de      	lsls	r6, r3, #31
 8007c28:	d508      	bpl.n	8007c3c <_printf_i+0x14c>
 8007c2a:	6923      	ldr	r3, [r4, #16]
 8007c2c:	6861      	ldr	r1, [r4, #4]
 8007c2e:	4299      	cmp	r1, r3
 8007c30:	bfde      	ittt	le
 8007c32:	2330      	movle	r3, #48	; 0x30
 8007c34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c3c:	1b52      	subs	r2, r2, r5
 8007c3e:	6122      	str	r2, [r4, #16]
 8007c40:	f8cd a000 	str.w	sl, [sp]
 8007c44:	464b      	mov	r3, r9
 8007c46:	aa03      	add	r2, sp, #12
 8007c48:	4621      	mov	r1, r4
 8007c4a:	4640      	mov	r0, r8
 8007c4c:	f7ff fee2 	bl	8007a14 <_printf_common>
 8007c50:	3001      	adds	r0, #1
 8007c52:	d14c      	bne.n	8007cee <_printf_i+0x1fe>
 8007c54:	f04f 30ff 	mov.w	r0, #4294967295
 8007c58:	b004      	add	sp, #16
 8007c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c5e:	4835      	ldr	r0, [pc, #212]	; (8007d34 <_printf_i+0x244>)
 8007c60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007c64:	6829      	ldr	r1, [r5, #0]
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c6c:	6029      	str	r1, [r5, #0]
 8007c6e:	061d      	lsls	r5, r3, #24
 8007c70:	d514      	bpl.n	8007c9c <_printf_i+0x1ac>
 8007c72:	07df      	lsls	r7, r3, #31
 8007c74:	bf44      	itt	mi
 8007c76:	f043 0320 	orrmi.w	r3, r3, #32
 8007c7a:	6023      	strmi	r3, [r4, #0]
 8007c7c:	b91e      	cbnz	r6, 8007c86 <_printf_i+0x196>
 8007c7e:	6823      	ldr	r3, [r4, #0]
 8007c80:	f023 0320 	bic.w	r3, r3, #32
 8007c84:	6023      	str	r3, [r4, #0]
 8007c86:	2310      	movs	r3, #16
 8007c88:	e7b0      	b.n	8007bec <_printf_i+0xfc>
 8007c8a:	6823      	ldr	r3, [r4, #0]
 8007c8c:	f043 0320 	orr.w	r3, r3, #32
 8007c90:	6023      	str	r3, [r4, #0]
 8007c92:	2378      	movs	r3, #120	; 0x78
 8007c94:	4828      	ldr	r0, [pc, #160]	; (8007d38 <_printf_i+0x248>)
 8007c96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c9a:	e7e3      	b.n	8007c64 <_printf_i+0x174>
 8007c9c:	0659      	lsls	r1, r3, #25
 8007c9e:	bf48      	it	mi
 8007ca0:	b2b6      	uxthmi	r6, r6
 8007ca2:	e7e6      	b.n	8007c72 <_printf_i+0x182>
 8007ca4:	4615      	mov	r5, r2
 8007ca6:	e7bb      	b.n	8007c20 <_printf_i+0x130>
 8007ca8:	682b      	ldr	r3, [r5, #0]
 8007caa:	6826      	ldr	r6, [r4, #0]
 8007cac:	6961      	ldr	r1, [r4, #20]
 8007cae:	1d18      	adds	r0, r3, #4
 8007cb0:	6028      	str	r0, [r5, #0]
 8007cb2:	0635      	lsls	r5, r6, #24
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	d501      	bpl.n	8007cbc <_printf_i+0x1cc>
 8007cb8:	6019      	str	r1, [r3, #0]
 8007cba:	e002      	b.n	8007cc2 <_printf_i+0x1d2>
 8007cbc:	0670      	lsls	r0, r6, #25
 8007cbe:	d5fb      	bpl.n	8007cb8 <_printf_i+0x1c8>
 8007cc0:	8019      	strh	r1, [r3, #0]
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	6123      	str	r3, [r4, #16]
 8007cc6:	4615      	mov	r5, r2
 8007cc8:	e7ba      	b.n	8007c40 <_printf_i+0x150>
 8007cca:	682b      	ldr	r3, [r5, #0]
 8007ccc:	1d1a      	adds	r2, r3, #4
 8007cce:	602a      	str	r2, [r5, #0]
 8007cd0:	681d      	ldr	r5, [r3, #0]
 8007cd2:	6862      	ldr	r2, [r4, #4]
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	f7f8 fa82 	bl	80001e0 <memchr>
 8007cdc:	b108      	cbz	r0, 8007ce2 <_printf_i+0x1f2>
 8007cde:	1b40      	subs	r0, r0, r5
 8007ce0:	6060      	str	r0, [r4, #4]
 8007ce2:	6863      	ldr	r3, [r4, #4]
 8007ce4:	6123      	str	r3, [r4, #16]
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cec:	e7a8      	b.n	8007c40 <_printf_i+0x150>
 8007cee:	6923      	ldr	r3, [r4, #16]
 8007cf0:	462a      	mov	r2, r5
 8007cf2:	4649      	mov	r1, r9
 8007cf4:	4640      	mov	r0, r8
 8007cf6:	47d0      	blx	sl
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	d0ab      	beq.n	8007c54 <_printf_i+0x164>
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	079b      	lsls	r3, r3, #30
 8007d00:	d413      	bmi.n	8007d2a <_printf_i+0x23a>
 8007d02:	68e0      	ldr	r0, [r4, #12]
 8007d04:	9b03      	ldr	r3, [sp, #12]
 8007d06:	4298      	cmp	r0, r3
 8007d08:	bfb8      	it	lt
 8007d0a:	4618      	movlt	r0, r3
 8007d0c:	e7a4      	b.n	8007c58 <_printf_i+0x168>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	4632      	mov	r2, r6
 8007d12:	4649      	mov	r1, r9
 8007d14:	4640      	mov	r0, r8
 8007d16:	47d0      	blx	sl
 8007d18:	3001      	adds	r0, #1
 8007d1a:	d09b      	beq.n	8007c54 <_printf_i+0x164>
 8007d1c:	3501      	adds	r5, #1
 8007d1e:	68e3      	ldr	r3, [r4, #12]
 8007d20:	9903      	ldr	r1, [sp, #12]
 8007d22:	1a5b      	subs	r3, r3, r1
 8007d24:	42ab      	cmp	r3, r5
 8007d26:	dcf2      	bgt.n	8007d0e <_printf_i+0x21e>
 8007d28:	e7eb      	b.n	8007d02 <_printf_i+0x212>
 8007d2a:	2500      	movs	r5, #0
 8007d2c:	f104 0619 	add.w	r6, r4, #25
 8007d30:	e7f5      	b.n	8007d1e <_printf_i+0x22e>
 8007d32:	bf00      	nop
 8007d34:	0800fa6a 	.word	0x0800fa6a
 8007d38:	0800fa7b 	.word	0x0800fa7b

08007d3c <iprintf>:
 8007d3c:	b40f      	push	{r0, r1, r2, r3}
 8007d3e:	4b0a      	ldr	r3, [pc, #40]	; (8007d68 <iprintf+0x2c>)
 8007d40:	b513      	push	{r0, r1, r4, lr}
 8007d42:	681c      	ldr	r4, [r3, #0]
 8007d44:	b124      	cbz	r4, 8007d50 <iprintf+0x14>
 8007d46:	69a3      	ldr	r3, [r4, #24]
 8007d48:	b913      	cbnz	r3, 8007d50 <iprintf+0x14>
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	f000 ff16 	bl	8008b7c <__sinit>
 8007d50:	ab05      	add	r3, sp, #20
 8007d52:	9a04      	ldr	r2, [sp, #16]
 8007d54:	68a1      	ldr	r1, [r4, #8]
 8007d56:	9301      	str	r3, [sp, #4]
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f001 fdbd 	bl	80098d8 <_vfiprintf_r>
 8007d5e:	b002      	add	sp, #8
 8007d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d64:	b004      	add	sp, #16
 8007d66:	4770      	bx	lr
 8007d68:	20000034 	.word	0x20000034

08007d6c <sniprintf>:
 8007d6c:	b40c      	push	{r2, r3}
 8007d6e:	b530      	push	{r4, r5, lr}
 8007d70:	4b17      	ldr	r3, [pc, #92]	; (8007dd0 <sniprintf+0x64>)
 8007d72:	1e0c      	subs	r4, r1, #0
 8007d74:	681d      	ldr	r5, [r3, #0]
 8007d76:	b09d      	sub	sp, #116	; 0x74
 8007d78:	da08      	bge.n	8007d8c <sniprintf+0x20>
 8007d7a:	238b      	movs	r3, #139	; 0x8b
 8007d7c:	602b      	str	r3, [r5, #0]
 8007d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d82:	b01d      	add	sp, #116	; 0x74
 8007d84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d88:	b002      	add	sp, #8
 8007d8a:	4770      	bx	lr
 8007d8c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007d90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007d94:	bf14      	ite	ne
 8007d96:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007d9a:	4623      	moveq	r3, r4
 8007d9c:	9304      	str	r3, [sp, #16]
 8007d9e:	9307      	str	r3, [sp, #28]
 8007da0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007da4:	9002      	str	r0, [sp, #8]
 8007da6:	9006      	str	r0, [sp, #24]
 8007da8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007dac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007dae:	ab21      	add	r3, sp, #132	; 0x84
 8007db0:	a902      	add	r1, sp, #8
 8007db2:	4628      	mov	r0, r5
 8007db4:	9301      	str	r3, [sp, #4]
 8007db6:	f001 fc65 	bl	8009684 <_svfiprintf_r>
 8007dba:	1c43      	adds	r3, r0, #1
 8007dbc:	bfbc      	itt	lt
 8007dbe:	238b      	movlt	r3, #139	; 0x8b
 8007dc0:	602b      	strlt	r3, [r5, #0]
 8007dc2:	2c00      	cmp	r4, #0
 8007dc4:	d0dd      	beq.n	8007d82 <sniprintf+0x16>
 8007dc6:	9b02      	ldr	r3, [sp, #8]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	701a      	strb	r2, [r3, #0]
 8007dcc:	e7d9      	b.n	8007d82 <sniprintf+0x16>
 8007dce:	bf00      	nop
 8007dd0:	20000034 	.word	0x20000034

08007dd4 <quorem>:
 8007dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd8:	6903      	ldr	r3, [r0, #16]
 8007dda:	690c      	ldr	r4, [r1, #16]
 8007ddc:	42a3      	cmp	r3, r4
 8007dde:	4607      	mov	r7, r0
 8007de0:	f2c0 8081 	blt.w	8007ee6 <quorem+0x112>
 8007de4:	3c01      	subs	r4, #1
 8007de6:	f101 0814 	add.w	r8, r1, #20
 8007dea:	f100 0514 	add.w	r5, r0, #20
 8007dee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007df2:	9301      	str	r3, [sp, #4]
 8007df4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007df8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e08:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e0c:	d331      	bcc.n	8007e72 <quorem+0x9e>
 8007e0e:	f04f 0e00 	mov.w	lr, #0
 8007e12:	4640      	mov	r0, r8
 8007e14:	46ac      	mov	ip, r5
 8007e16:	46f2      	mov	sl, lr
 8007e18:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e1c:	b293      	uxth	r3, r2
 8007e1e:	fb06 e303 	mla	r3, r6, r3, lr
 8007e22:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	ebaa 0303 	sub.w	r3, sl, r3
 8007e2c:	f8dc a000 	ldr.w	sl, [ip]
 8007e30:	0c12      	lsrs	r2, r2, #16
 8007e32:	fa13 f38a 	uxtah	r3, r3, sl
 8007e36:	fb06 e202 	mla	r2, r6, r2, lr
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	9b00      	ldr	r3, [sp, #0]
 8007e3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e42:	b292      	uxth	r2, r2
 8007e44:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007e48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e4c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007e50:	4581      	cmp	r9, r0
 8007e52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e56:	f84c 3b04 	str.w	r3, [ip], #4
 8007e5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007e5e:	d2db      	bcs.n	8007e18 <quorem+0x44>
 8007e60:	f855 300b 	ldr.w	r3, [r5, fp]
 8007e64:	b92b      	cbnz	r3, 8007e72 <quorem+0x9e>
 8007e66:	9b01      	ldr	r3, [sp, #4]
 8007e68:	3b04      	subs	r3, #4
 8007e6a:	429d      	cmp	r5, r3
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	d32e      	bcc.n	8007ece <quorem+0xfa>
 8007e70:	613c      	str	r4, [r7, #16]
 8007e72:	4638      	mov	r0, r7
 8007e74:	f001 f9b2 	bl	80091dc <__mcmp>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	db24      	blt.n	8007ec6 <quorem+0xf2>
 8007e7c:	3601      	adds	r6, #1
 8007e7e:	4628      	mov	r0, r5
 8007e80:	f04f 0c00 	mov.w	ip, #0
 8007e84:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e88:	f8d0 e000 	ldr.w	lr, [r0]
 8007e8c:	b293      	uxth	r3, r2
 8007e8e:	ebac 0303 	sub.w	r3, ip, r3
 8007e92:	0c12      	lsrs	r2, r2, #16
 8007e94:	fa13 f38e 	uxtah	r3, r3, lr
 8007e98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007e9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ea6:	45c1      	cmp	r9, r8
 8007ea8:	f840 3b04 	str.w	r3, [r0], #4
 8007eac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007eb0:	d2e8      	bcs.n	8007e84 <quorem+0xb0>
 8007eb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007eb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007eba:	b922      	cbnz	r2, 8007ec6 <quorem+0xf2>
 8007ebc:	3b04      	subs	r3, #4
 8007ebe:	429d      	cmp	r5, r3
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	d30a      	bcc.n	8007eda <quorem+0x106>
 8007ec4:	613c      	str	r4, [r7, #16]
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	b003      	add	sp, #12
 8007eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ece:	6812      	ldr	r2, [r2, #0]
 8007ed0:	3b04      	subs	r3, #4
 8007ed2:	2a00      	cmp	r2, #0
 8007ed4:	d1cc      	bne.n	8007e70 <quorem+0x9c>
 8007ed6:	3c01      	subs	r4, #1
 8007ed8:	e7c7      	b.n	8007e6a <quorem+0x96>
 8007eda:	6812      	ldr	r2, [r2, #0]
 8007edc:	3b04      	subs	r3, #4
 8007ede:	2a00      	cmp	r2, #0
 8007ee0:	d1f0      	bne.n	8007ec4 <quorem+0xf0>
 8007ee2:	3c01      	subs	r4, #1
 8007ee4:	e7eb      	b.n	8007ebe <quorem+0xea>
 8007ee6:	2000      	movs	r0, #0
 8007ee8:	e7ee      	b.n	8007ec8 <quorem+0xf4>
 8007eea:	0000      	movs	r0, r0
 8007eec:	0000      	movs	r0, r0
	...

08007ef0 <_dtoa_r>:
 8007ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef4:	ed2d 8b04 	vpush	{d8-d9}
 8007ef8:	ec57 6b10 	vmov	r6, r7, d0
 8007efc:	b093      	sub	sp, #76	; 0x4c
 8007efe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f04:	9106      	str	r1, [sp, #24]
 8007f06:	ee10 aa10 	vmov	sl, s0
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	9209      	str	r2, [sp, #36]	; 0x24
 8007f0e:	930c      	str	r3, [sp, #48]	; 0x30
 8007f10:	46bb      	mov	fp, r7
 8007f12:	b975      	cbnz	r5, 8007f32 <_dtoa_r+0x42>
 8007f14:	2010      	movs	r0, #16
 8007f16:	f000 fed7 	bl	8008cc8 <malloc>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	6260      	str	r0, [r4, #36]	; 0x24
 8007f1e:	b920      	cbnz	r0, 8007f2a <_dtoa_r+0x3a>
 8007f20:	4ba7      	ldr	r3, [pc, #668]	; (80081c0 <_dtoa_r+0x2d0>)
 8007f22:	21ea      	movs	r1, #234	; 0xea
 8007f24:	48a7      	ldr	r0, [pc, #668]	; (80081c4 <_dtoa_r+0x2d4>)
 8007f26:	f001 ff2d 	bl	8009d84 <__assert_func>
 8007f2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f2e:	6005      	str	r5, [r0, #0]
 8007f30:	60c5      	str	r5, [r0, #12]
 8007f32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f34:	6819      	ldr	r1, [r3, #0]
 8007f36:	b151      	cbz	r1, 8007f4e <_dtoa_r+0x5e>
 8007f38:	685a      	ldr	r2, [r3, #4]
 8007f3a:	604a      	str	r2, [r1, #4]
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	4093      	lsls	r3, r2
 8007f40:	608b      	str	r3, [r1, #8]
 8007f42:	4620      	mov	r0, r4
 8007f44:	f000 ff08 	bl	8008d58 <_Bfree>
 8007f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	601a      	str	r2, [r3, #0]
 8007f4e:	1e3b      	subs	r3, r7, #0
 8007f50:	bfaa      	itet	ge
 8007f52:	2300      	movge	r3, #0
 8007f54:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007f58:	f8c8 3000 	strge.w	r3, [r8]
 8007f5c:	4b9a      	ldr	r3, [pc, #616]	; (80081c8 <_dtoa_r+0x2d8>)
 8007f5e:	bfbc      	itt	lt
 8007f60:	2201      	movlt	r2, #1
 8007f62:	f8c8 2000 	strlt.w	r2, [r8]
 8007f66:	ea33 030b 	bics.w	r3, r3, fp
 8007f6a:	d11b      	bne.n	8007fa4 <_dtoa_r+0xb4>
 8007f6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f6e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f72:	6013      	str	r3, [r2, #0]
 8007f74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f78:	4333      	orrs	r3, r6
 8007f7a:	f000 8592 	beq.w	8008aa2 <_dtoa_r+0xbb2>
 8007f7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f80:	b963      	cbnz	r3, 8007f9c <_dtoa_r+0xac>
 8007f82:	4b92      	ldr	r3, [pc, #584]	; (80081cc <_dtoa_r+0x2dc>)
 8007f84:	e022      	b.n	8007fcc <_dtoa_r+0xdc>
 8007f86:	4b92      	ldr	r3, [pc, #584]	; (80081d0 <_dtoa_r+0x2e0>)
 8007f88:	9301      	str	r3, [sp, #4]
 8007f8a:	3308      	adds	r3, #8
 8007f8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f8e:	6013      	str	r3, [r2, #0]
 8007f90:	9801      	ldr	r0, [sp, #4]
 8007f92:	b013      	add	sp, #76	; 0x4c
 8007f94:	ecbd 8b04 	vpop	{d8-d9}
 8007f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f9c:	4b8b      	ldr	r3, [pc, #556]	; (80081cc <_dtoa_r+0x2dc>)
 8007f9e:	9301      	str	r3, [sp, #4]
 8007fa0:	3303      	adds	r3, #3
 8007fa2:	e7f3      	b.n	8007f8c <_dtoa_r+0x9c>
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	4650      	mov	r0, sl
 8007faa:	4659      	mov	r1, fp
 8007fac:	f7f8 fd8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fb0:	ec4b ab19 	vmov	d9, sl, fp
 8007fb4:	4680      	mov	r8, r0
 8007fb6:	b158      	cbz	r0, 8007fd0 <_dtoa_r+0xe0>
 8007fb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fba:	2301      	movs	r3, #1
 8007fbc:	6013      	str	r3, [r2, #0]
 8007fbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 856b 	beq.w	8008a9c <_dtoa_r+0xbac>
 8007fc6:	4883      	ldr	r0, [pc, #524]	; (80081d4 <_dtoa_r+0x2e4>)
 8007fc8:	6018      	str	r0, [r3, #0]
 8007fca:	1e43      	subs	r3, r0, #1
 8007fcc:	9301      	str	r3, [sp, #4]
 8007fce:	e7df      	b.n	8007f90 <_dtoa_r+0xa0>
 8007fd0:	ec4b ab10 	vmov	d0, sl, fp
 8007fd4:	aa10      	add	r2, sp, #64	; 0x40
 8007fd6:	a911      	add	r1, sp, #68	; 0x44
 8007fd8:	4620      	mov	r0, r4
 8007fda:	f001 f9a5 	bl	8009328 <__d2b>
 8007fde:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007fe2:	ee08 0a10 	vmov	s16, r0
 8007fe6:	2d00      	cmp	r5, #0
 8007fe8:	f000 8084 	beq.w	80080f4 <_dtoa_r+0x204>
 8007fec:	ee19 3a90 	vmov	r3, s19
 8007ff0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ff4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007ff8:	4656      	mov	r6, sl
 8007ffa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007ffe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008002:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008006:	4b74      	ldr	r3, [pc, #464]	; (80081d8 <_dtoa_r+0x2e8>)
 8008008:	2200      	movs	r2, #0
 800800a:	4630      	mov	r0, r6
 800800c:	4639      	mov	r1, r7
 800800e:	f7f8 f93b 	bl	8000288 <__aeabi_dsub>
 8008012:	a365      	add	r3, pc, #404	; (adr r3, 80081a8 <_dtoa_r+0x2b8>)
 8008014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008018:	f7f8 faee 	bl	80005f8 <__aeabi_dmul>
 800801c:	a364      	add	r3, pc, #400	; (adr r3, 80081b0 <_dtoa_r+0x2c0>)
 800801e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008022:	f7f8 f933 	bl	800028c <__adddf3>
 8008026:	4606      	mov	r6, r0
 8008028:	4628      	mov	r0, r5
 800802a:	460f      	mov	r7, r1
 800802c:	f7f8 fa7a 	bl	8000524 <__aeabi_i2d>
 8008030:	a361      	add	r3, pc, #388	; (adr r3, 80081b8 <_dtoa_r+0x2c8>)
 8008032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008036:	f7f8 fadf 	bl	80005f8 <__aeabi_dmul>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	4630      	mov	r0, r6
 8008040:	4639      	mov	r1, r7
 8008042:	f7f8 f923 	bl	800028c <__adddf3>
 8008046:	4606      	mov	r6, r0
 8008048:	460f      	mov	r7, r1
 800804a:	f7f8 fd85 	bl	8000b58 <__aeabi_d2iz>
 800804e:	2200      	movs	r2, #0
 8008050:	9000      	str	r0, [sp, #0]
 8008052:	2300      	movs	r3, #0
 8008054:	4630      	mov	r0, r6
 8008056:	4639      	mov	r1, r7
 8008058:	f7f8 fd40 	bl	8000adc <__aeabi_dcmplt>
 800805c:	b150      	cbz	r0, 8008074 <_dtoa_r+0x184>
 800805e:	9800      	ldr	r0, [sp, #0]
 8008060:	f7f8 fa60 	bl	8000524 <__aeabi_i2d>
 8008064:	4632      	mov	r2, r6
 8008066:	463b      	mov	r3, r7
 8008068:	f7f8 fd2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800806c:	b910      	cbnz	r0, 8008074 <_dtoa_r+0x184>
 800806e:	9b00      	ldr	r3, [sp, #0]
 8008070:	3b01      	subs	r3, #1
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	9b00      	ldr	r3, [sp, #0]
 8008076:	2b16      	cmp	r3, #22
 8008078:	d85a      	bhi.n	8008130 <_dtoa_r+0x240>
 800807a:	9a00      	ldr	r2, [sp, #0]
 800807c:	4b57      	ldr	r3, [pc, #348]	; (80081dc <_dtoa_r+0x2ec>)
 800807e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008086:	ec51 0b19 	vmov	r0, r1, d9
 800808a:	f7f8 fd27 	bl	8000adc <__aeabi_dcmplt>
 800808e:	2800      	cmp	r0, #0
 8008090:	d050      	beq.n	8008134 <_dtoa_r+0x244>
 8008092:	9b00      	ldr	r3, [sp, #0]
 8008094:	3b01      	subs	r3, #1
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	2300      	movs	r3, #0
 800809a:	930b      	str	r3, [sp, #44]	; 0x2c
 800809c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800809e:	1b5d      	subs	r5, r3, r5
 80080a0:	1e6b      	subs	r3, r5, #1
 80080a2:	9305      	str	r3, [sp, #20]
 80080a4:	bf45      	ittet	mi
 80080a6:	f1c5 0301 	rsbmi	r3, r5, #1
 80080aa:	9304      	strmi	r3, [sp, #16]
 80080ac:	2300      	movpl	r3, #0
 80080ae:	2300      	movmi	r3, #0
 80080b0:	bf4c      	ite	mi
 80080b2:	9305      	strmi	r3, [sp, #20]
 80080b4:	9304      	strpl	r3, [sp, #16]
 80080b6:	9b00      	ldr	r3, [sp, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	db3d      	blt.n	8008138 <_dtoa_r+0x248>
 80080bc:	9b05      	ldr	r3, [sp, #20]
 80080be:	9a00      	ldr	r2, [sp, #0]
 80080c0:	920a      	str	r2, [sp, #40]	; 0x28
 80080c2:	4413      	add	r3, r2
 80080c4:	9305      	str	r3, [sp, #20]
 80080c6:	2300      	movs	r3, #0
 80080c8:	9307      	str	r3, [sp, #28]
 80080ca:	9b06      	ldr	r3, [sp, #24]
 80080cc:	2b09      	cmp	r3, #9
 80080ce:	f200 8089 	bhi.w	80081e4 <_dtoa_r+0x2f4>
 80080d2:	2b05      	cmp	r3, #5
 80080d4:	bfc4      	itt	gt
 80080d6:	3b04      	subgt	r3, #4
 80080d8:	9306      	strgt	r3, [sp, #24]
 80080da:	9b06      	ldr	r3, [sp, #24]
 80080dc:	f1a3 0302 	sub.w	r3, r3, #2
 80080e0:	bfcc      	ite	gt
 80080e2:	2500      	movgt	r5, #0
 80080e4:	2501      	movle	r5, #1
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	f200 8087 	bhi.w	80081fa <_dtoa_r+0x30a>
 80080ec:	e8df f003 	tbb	[pc, r3]
 80080f0:	59383a2d 	.word	0x59383a2d
 80080f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80080f8:	441d      	add	r5, r3
 80080fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80080fe:	2b20      	cmp	r3, #32
 8008100:	bfc1      	itttt	gt
 8008102:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008106:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800810a:	fa0b f303 	lslgt.w	r3, fp, r3
 800810e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008112:	bfda      	itte	le
 8008114:	f1c3 0320 	rsble	r3, r3, #32
 8008118:	fa06 f003 	lslle.w	r0, r6, r3
 800811c:	4318      	orrgt	r0, r3
 800811e:	f7f8 f9f1 	bl	8000504 <__aeabi_ui2d>
 8008122:	2301      	movs	r3, #1
 8008124:	4606      	mov	r6, r0
 8008126:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800812a:	3d01      	subs	r5, #1
 800812c:	930e      	str	r3, [sp, #56]	; 0x38
 800812e:	e76a      	b.n	8008006 <_dtoa_r+0x116>
 8008130:	2301      	movs	r3, #1
 8008132:	e7b2      	b.n	800809a <_dtoa_r+0x1aa>
 8008134:	900b      	str	r0, [sp, #44]	; 0x2c
 8008136:	e7b1      	b.n	800809c <_dtoa_r+0x1ac>
 8008138:	9b04      	ldr	r3, [sp, #16]
 800813a:	9a00      	ldr	r2, [sp, #0]
 800813c:	1a9b      	subs	r3, r3, r2
 800813e:	9304      	str	r3, [sp, #16]
 8008140:	4253      	negs	r3, r2
 8008142:	9307      	str	r3, [sp, #28]
 8008144:	2300      	movs	r3, #0
 8008146:	930a      	str	r3, [sp, #40]	; 0x28
 8008148:	e7bf      	b.n	80080ca <_dtoa_r+0x1da>
 800814a:	2300      	movs	r3, #0
 800814c:	9308      	str	r3, [sp, #32]
 800814e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008150:	2b00      	cmp	r3, #0
 8008152:	dc55      	bgt.n	8008200 <_dtoa_r+0x310>
 8008154:	2301      	movs	r3, #1
 8008156:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800815a:	461a      	mov	r2, r3
 800815c:	9209      	str	r2, [sp, #36]	; 0x24
 800815e:	e00c      	b.n	800817a <_dtoa_r+0x28a>
 8008160:	2301      	movs	r3, #1
 8008162:	e7f3      	b.n	800814c <_dtoa_r+0x25c>
 8008164:	2300      	movs	r3, #0
 8008166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008168:	9308      	str	r3, [sp, #32]
 800816a:	9b00      	ldr	r3, [sp, #0]
 800816c:	4413      	add	r3, r2
 800816e:	9302      	str	r3, [sp, #8]
 8008170:	3301      	adds	r3, #1
 8008172:	2b01      	cmp	r3, #1
 8008174:	9303      	str	r3, [sp, #12]
 8008176:	bfb8      	it	lt
 8008178:	2301      	movlt	r3, #1
 800817a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800817c:	2200      	movs	r2, #0
 800817e:	6042      	str	r2, [r0, #4]
 8008180:	2204      	movs	r2, #4
 8008182:	f102 0614 	add.w	r6, r2, #20
 8008186:	429e      	cmp	r6, r3
 8008188:	6841      	ldr	r1, [r0, #4]
 800818a:	d93d      	bls.n	8008208 <_dtoa_r+0x318>
 800818c:	4620      	mov	r0, r4
 800818e:	f000 fda3 	bl	8008cd8 <_Balloc>
 8008192:	9001      	str	r0, [sp, #4]
 8008194:	2800      	cmp	r0, #0
 8008196:	d13b      	bne.n	8008210 <_dtoa_r+0x320>
 8008198:	4b11      	ldr	r3, [pc, #68]	; (80081e0 <_dtoa_r+0x2f0>)
 800819a:	4602      	mov	r2, r0
 800819c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80081a0:	e6c0      	b.n	8007f24 <_dtoa_r+0x34>
 80081a2:	2301      	movs	r3, #1
 80081a4:	e7df      	b.n	8008166 <_dtoa_r+0x276>
 80081a6:	bf00      	nop
 80081a8:	636f4361 	.word	0x636f4361
 80081ac:	3fd287a7 	.word	0x3fd287a7
 80081b0:	8b60c8b3 	.word	0x8b60c8b3
 80081b4:	3fc68a28 	.word	0x3fc68a28
 80081b8:	509f79fb 	.word	0x509f79fb
 80081bc:	3fd34413 	.word	0x3fd34413
 80081c0:	0800fa99 	.word	0x0800fa99
 80081c4:	0800fab0 	.word	0x0800fab0
 80081c8:	7ff00000 	.word	0x7ff00000
 80081cc:	0800fa95 	.word	0x0800fa95
 80081d0:	0800fa8c 	.word	0x0800fa8c
 80081d4:	0800fa69 	.word	0x0800fa69
 80081d8:	3ff80000 	.word	0x3ff80000
 80081dc:	0800fc00 	.word	0x0800fc00
 80081e0:	0800fb0b 	.word	0x0800fb0b
 80081e4:	2501      	movs	r5, #1
 80081e6:	2300      	movs	r3, #0
 80081e8:	9306      	str	r3, [sp, #24]
 80081ea:	9508      	str	r5, [sp, #32]
 80081ec:	f04f 33ff 	mov.w	r3, #4294967295
 80081f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80081f4:	2200      	movs	r2, #0
 80081f6:	2312      	movs	r3, #18
 80081f8:	e7b0      	b.n	800815c <_dtoa_r+0x26c>
 80081fa:	2301      	movs	r3, #1
 80081fc:	9308      	str	r3, [sp, #32]
 80081fe:	e7f5      	b.n	80081ec <_dtoa_r+0x2fc>
 8008200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008202:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008206:	e7b8      	b.n	800817a <_dtoa_r+0x28a>
 8008208:	3101      	adds	r1, #1
 800820a:	6041      	str	r1, [r0, #4]
 800820c:	0052      	lsls	r2, r2, #1
 800820e:	e7b8      	b.n	8008182 <_dtoa_r+0x292>
 8008210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008212:	9a01      	ldr	r2, [sp, #4]
 8008214:	601a      	str	r2, [r3, #0]
 8008216:	9b03      	ldr	r3, [sp, #12]
 8008218:	2b0e      	cmp	r3, #14
 800821a:	f200 809d 	bhi.w	8008358 <_dtoa_r+0x468>
 800821e:	2d00      	cmp	r5, #0
 8008220:	f000 809a 	beq.w	8008358 <_dtoa_r+0x468>
 8008224:	9b00      	ldr	r3, [sp, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	dd32      	ble.n	8008290 <_dtoa_r+0x3a0>
 800822a:	4ab7      	ldr	r2, [pc, #732]	; (8008508 <_dtoa_r+0x618>)
 800822c:	f003 030f 	and.w	r3, r3, #15
 8008230:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008234:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008238:	9b00      	ldr	r3, [sp, #0]
 800823a:	05d8      	lsls	r0, r3, #23
 800823c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008240:	d516      	bpl.n	8008270 <_dtoa_r+0x380>
 8008242:	4bb2      	ldr	r3, [pc, #712]	; (800850c <_dtoa_r+0x61c>)
 8008244:	ec51 0b19 	vmov	r0, r1, d9
 8008248:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800824c:	f7f8 fafe 	bl	800084c <__aeabi_ddiv>
 8008250:	f007 070f 	and.w	r7, r7, #15
 8008254:	4682      	mov	sl, r0
 8008256:	468b      	mov	fp, r1
 8008258:	2503      	movs	r5, #3
 800825a:	4eac      	ldr	r6, [pc, #688]	; (800850c <_dtoa_r+0x61c>)
 800825c:	b957      	cbnz	r7, 8008274 <_dtoa_r+0x384>
 800825e:	4642      	mov	r2, r8
 8008260:	464b      	mov	r3, r9
 8008262:	4650      	mov	r0, sl
 8008264:	4659      	mov	r1, fp
 8008266:	f7f8 faf1 	bl	800084c <__aeabi_ddiv>
 800826a:	4682      	mov	sl, r0
 800826c:	468b      	mov	fp, r1
 800826e:	e028      	b.n	80082c2 <_dtoa_r+0x3d2>
 8008270:	2502      	movs	r5, #2
 8008272:	e7f2      	b.n	800825a <_dtoa_r+0x36a>
 8008274:	07f9      	lsls	r1, r7, #31
 8008276:	d508      	bpl.n	800828a <_dtoa_r+0x39a>
 8008278:	4640      	mov	r0, r8
 800827a:	4649      	mov	r1, r9
 800827c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008280:	f7f8 f9ba 	bl	80005f8 <__aeabi_dmul>
 8008284:	3501      	adds	r5, #1
 8008286:	4680      	mov	r8, r0
 8008288:	4689      	mov	r9, r1
 800828a:	107f      	asrs	r7, r7, #1
 800828c:	3608      	adds	r6, #8
 800828e:	e7e5      	b.n	800825c <_dtoa_r+0x36c>
 8008290:	f000 809b 	beq.w	80083ca <_dtoa_r+0x4da>
 8008294:	9b00      	ldr	r3, [sp, #0]
 8008296:	4f9d      	ldr	r7, [pc, #628]	; (800850c <_dtoa_r+0x61c>)
 8008298:	425e      	negs	r6, r3
 800829a:	4b9b      	ldr	r3, [pc, #620]	; (8008508 <_dtoa_r+0x618>)
 800829c:	f006 020f 	and.w	r2, r6, #15
 80082a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	ec51 0b19 	vmov	r0, r1, d9
 80082ac:	f7f8 f9a4 	bl	80005f8 <__aeabi_dmul>
 80082b0:	1136      	asrs	r6, r6, #4
 80082b2:	4682      	mov	sl, r0
 80082b4:	468b      	mov	fp, r1
 80082b6:	2300      	movs	r3, #0
 80082b8:	2502      	movs	r5, #2
 80082ba:	2e00      	cmp	r6, #0
 80082bc:	d17a      	bne.n	80083b4 <_dtoa_r+0x4c4>
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1d3      	bne.n	800826a <_dtoa_r+0x37a>
 80082c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 8082 	beq.w	80083ce <_dtoa_r+0x4de>
 80082ca:	4b91      	ldr	r3, [pc, #580]	; (8008510 <_dtoa_r+0x620>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	4650      	mov	r0, sl
 80082d0:	4659      	mov	r1, fp
 80082d2:	f7f8 fc03 	bl	8000adc <__aeabi_dcmplt>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	d079      	beq.n	80083ce <_dtoa_r+0x4de>
 80082da:	9b03      	ldr	r3, [sp, #12]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d076      	beq.n	80083ce <_dtoa_r+0x4de>
 80082e0:	9b02      	ldr	r3, [sp, #8]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	dd36      	ble.n	8008354 <_dtoa_r+0x464>
 80082e6:	9b00      	ldr	r3, [sp, #0]
 80082e8:	4650      	mov	r0, sl
 80082ea:	4659      	mov	r1, fp
 80082ec:	1e5f      	subs	r7, r3, #1
 80082ee:	2200      	movs	r2, #0
 80082f0:	4b88      	ldr	r3, [pc, #544]	; (8008514 <_dtoa_r+0x624>)
 80082f2:	f7f8 f981 	bl	80005f8 <__aeabi_dmul>
 80082f6:	9e02      	ldr	r6, [sp, #8]
 80082f8:	4682      	mov	sl, r0
 80082fa:	468b      	mov	fp, r1
 80082fc:	3501      	adds	r5, #1
 80082fe:	4628      	mov	r0, r5
 8008300:	f7f8 f910 	bl	8000524 <__aeabi_i2d>
 8008304:	4652      	mov	r2, sl
 8008306:	465b      	mov	r3, fp
 8008308:	f7f8 f976 	bl	80005f8 <__aeabi_dmul>
 800830c:	4b82      	ldr	r3, [pc, #520]	; (8008518 <_dtoa_r+0x628>)
 800830e:	2200      	movs	r2, #0
 8008310:	f7f7 ffbc 	bl	800028c <__adddf3>
 8008314:	46d0      	mov	r8, sl
 8008316:	46d9      	mov	r9, fp
 8008318:	4682      	mov	sl, r0
 800831a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800831e:	2e00      	cmp	r6, #0
 8008320:	d158      	bne.n	80083d4 <_dtoa_r+0x4e4>
 8008322:	4b7e      	ldr	r3, [pc, #504]	; (800851c <_dtoa_r+0x62c>)
 8008324:	2200      	movs	r2, #0
 8008326:	4640      	mov	r0, r8
 8008328:	4649      	mov	r1, r9
 800832a:	f7f7 ffad 	bl	8000288 <__aeabi_dsub>
 800832e:	4652      	mov	r2, sl
 8008330:	465b      	mov	r3, fp
 8008332:	4680      	mov	r8, r0
 8008334:	4689      	mov	r9, r1
 8008336:	f7f8 fbef 	bl	8000b18 <__aeabi_dcmpgt>
 800833a:	2800      	cmp	r0, #0
 800833c:	f040 8295 	bne.w	800886a <_dtoa_r+0x97a>
 8008340:	4652      	mov	r2, sl
 8008342:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008346:	4640      	mov	r0, r8
 8008348:	4649      	mov	r1, r9
 800834a:	f7f8 fbc7 	bl	8000adc <__aeabi_dcmplt>
 800834e:	2800      	cmp	r0, #0
 8008350:	f040 8289 	bne.w	8008866 <_dtoa_r+0x976>
 8008354:	ec5b ab19 	vmov	sl, fp, d9
 8008358:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800835a:	2b00      	cmp	r3, #0
 800835c:	f2c0 8148 	blt.w	80085f0 <_dtoa_r+0x700>
 8008360:	9a00      	ldr	r2, [sp, #0]
 8008362:	2a0e      	cmp	r2, #14
 8008364:	f300 8144 	bgt.w	80085f0 <_dtoa_r+0x700>
 8008368:	4b67      	ldr	r3, [pc, #412]	; (8008508 <_dtoa_r+0x618>)
 800836a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800836e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008374:	2b00      	cmp	r3, #0
 8008376:	f280 80d5 	bge.w	8008524 <_dtoa_r+0x634>
 800837a:	9b03      	ldr	r3, [sp, #12]
 800837c:	2b00      	cmp	r3, #0
 800837e:	f300 80d1 	bgt.w	8008524 <_dtoa_r+0x634>
 8008382:	f040 826f 	bne.w	8008864 <_dtoa_r+0x974>
 8008386:	4b65      	ldr	r3, [pc, #404]	; (800851c <_dtoa_r+0x62c>)
 8008388:	2200      	movs	r2, #0
 800838a:	4640      	mov	r0, r8
 800838c:	4649      	mov	r1, r9
 800838e:	f7f8 f933 	bl	80005f8 <__aeabi_dmul>
 8008392:	4652      	mov	r2, sl
 8008394:	465b      	mov	r3, fp
 8008396:	f7f8 fbb5 	bl	8000b04 <__aeabi_dcmpge>
 800839a:	9e03      	ldr	r6, [sp, #12]
 800839c:	4637      	mov	r7, r6
 800839e:	2800      	cmp	r0, #0
 80083a0:	f040 8245 	bne.w	800882e <_dtoa_r+0x93e>
 80083a4:	9d01      	ldr	r5, [sp, #4]
 80083a6:	2331      	movs	r3, #49	; 0x31
 80083a8:	f805 3b01 	strb.w	r3, [r5], #1
 80083ac:	9b00      	ldr	r3, [sp, #0]
 80083ae:	3301      	adds	r3, #1
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	e240      	b.n	8008836 <_dtoa_r+0x946>
 80083b4:	07f2      	lsls	r2, r6, #31
 80083b6:	d505      	bpl.n	80083c4 <_dtoa_r+0x4d4>
 80083b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083bc:	f7f8 f91c 	bl	80005f8 <__aeabi_dmul>
 80083c0:	3501      	adds	r5, #1
 80083c2:	2301      	movs	r3, #1
 80083c4:	1076      	asrs	r6, r6, #1
 80083c6:	3708      	adds	r7, #8
 80083c8:	e777      	b.n	80082ba <_dtoa_r+0x3ca>
 80083ca:	2502      	movs	r5, #2
 80083cc:	e779      	b.n	80082c2 <_dtoa_r+0x3d2>
 80083ce:	9f00      	ldr	r7, [sp, #0]
 80083d0:	9e03      	ldr	r6, [sp, #12]
 80083d2:	e794      	b.n	80082fe <_dtoa_r+0x40e>
 80083d4:	9901      	ldr	r1, [sp, #4]
 80083d6:	4b4c      	ldr	r3, [pc, #304]	; (8008508 <_dtoa_r+0x618>)
 80083d8:	4431      	add	r1, r6
 80083da:	910d      	str	r1, [sp, #52]	; 0x34
 80083dc:	9908      	ldr	r1, [sp, #32]
 80083de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80083e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80083e6:	2900      	cmp	r1, #0
 80083e8:	d043      	beq.n	8008472 <_dtoa_r+0x582>
 80083ea:	494d      	ldr	r1, [pc, #308]	; (8008520 <_dtoa_r+0x630>)
 80083ec:	2000      	movs	r0, #0
 80083ee:	f7f8 fa2d 	bl	800084c <__aeabi_ddiv>
 80083f2:	4652      	mov	r2, sl
 80083f4:	465b      	mov	r3, fp
 80083f6:	f7f7 ff47 	bl	8000288 <__aeabi_dsub>
 80083fa:	9d01      	ldr	r5, [sp, #4]
 80083fc:	4682      	mov	sl, r0
 80083fe:	468b      	mov	fp, r1
 8008400:	4649      	mov	r1, r9
 8008402:	4640      	mov	r0, r8
 8008404:	f7f8 fba8 	bl	8000b58 <__aeabi_d2iz>
 8008408:	4606      	mov	r6, r0
 800840a:	f7f8 f88b 	bl	8000524 <__aeabi_i2d>
 800840e:	4602      	mov	r2, r0
 8008410:	460b      	mov	r3, r1
 8008412:	4640      	mov	r0, r8
 8008414:	4649      	mov	r1, r9
 8008416:	f7f7 ff37 	bl	8000288 <__aeabi_dsub>
 800841a:	3630      	adds	r6, #48	; 0x30
 800841c:	f805 6b01 	strb.w	r6, [r5], #1
 8008420:	4652      	mov	r2, sl
 8008422:	465b      	mov	r3, fp
 8008424:	4680      	mov	r8, r0
 8008426:	4689      	mov	r9, r1
 8008428:	f7f8 fb58 	bl	8000adc <__aeabi_dcmplt>
 800842c:	2800      	cmp	r0, #0
 800842e:	d163      	bne.n	80084f8 <_dtoa_r+0x608>
 8008430:	4642      	mov	r2, r8
 8008432:	464b      	mov	r3, r9
 8008434:	4936      	ldr	r1, [pc, #216]	; (8008510 <_dtoa_r+0x620>)
 8008436:	2000      	movs	r0, #0
 8008438:	f7f7 ff26 	bl	8000288 <__aeabi_dsub>
 800843c:	4652      	mov	r2, sl
 800843e:	465b      	mov	r3, fp
 8008440:	f7f8 fb4c 	bl	8000adc <__aeabi_dcmplt>
 8008444:	2800      	cmp	r0, #0
 8008446:	f040 80b5 	bne.w	80085b4 <_dtoa_r+0x6c4>
 800844a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800844c:	429d      	cmp	r5, r3
 800844e:	d081      	beq.n	8008354 <_dtoa_r+0x464>
 8008450:	4b30      	ldr	r3, [pc, #192]	; (8008514 <_dtoa_r+0x624>)
 8008452:	2200      	movs	r2, #0
 8008454:	4650      	mov	r0, sl
 8008456:	4659      	mov	r1, fp
 8008458:	f7f8 f8ce 	bl	80005f8 <__aeabi_dmul>
 800845c:	4b2d      	ldr	r3, [pc, #180]	; (8008514 <_dtoa_r+0x624>)
 800845e:	4682      	mov	sl, r0
 8008460:	468b      	mov	fp, r1
 8008462:	4640      	mov	r0, r8
 8008464:	4649      	mov	r1, r9
 8008466:	2200      	movs	r2, #0
 8008468:	f7f8 f8c6 	bl	80005f8 <__aeabi_dmul>
 800846c:	4680      	mov	r8, r0
 800846e:	4689      	mov	r9, r1
 8008470:	e7c6      	b.n	8008400 <_dtoa_r+0x510>
 8008472:	4650      	mov	r0, sl
 8008474:	4659      	mov	r1, fp
 8008476:	f7f8 f8bf 	bl	80005f8 <__aeabi_dmul>
 800847a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800847c:	9d01      	ldr	r5, [sp, #4]
 800847e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008480:	4682      	mov	sl, r0
 8008482:	468b      	mov	fp, r1
 8008484:	4649      	mov	r1, r9
 8008486:	4640      	mov	r0, r8
 8008488:	f7f8 fb66 	bl	8000b58 <__aeabi_d2iz>
 800848c:	4606      	mov	r6, r0
 800848e:	f7f8 f849 	bl	8000524 <__aeabi_i2d>
 8008492:	3630      	adds	r6, #48	; 0x30
 8008494:	4602      	mov	r2, r0
 8008496:	460b      	mov	r3, r1
 8008498:	4640      	mov	r0, r8
 800849a:	4649      	mov	r1, r9
 800849c:	f7f7 fef4 	bl	8000288 <__aeabi_dsub>
 80084a0:	f805 6b01 	strb.w	r6, [r5], #1
 80084a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084a6:	429d      	cmp	r5, r3
 80084a8:	4680      	mov	r8, r0
 80084aa:	4689      	mov	r9, r1
 80084ac:	f04f 0200 	mov.w	r2, #0
 80084b0:	d124      	bne.n	80084fc <_dtoa_r+0x60c>
 80084b2:	4b1b      	ldr	r3, [pc, #108]	; (8008520 <_dtoa_r+0x630>)
 80084b4:	4650      	mov	r0, sl
 80084b6:	4659      	mov	r1, fp
 80084b8:	f7f7 fee8 	bl	800028c <__adddf3>
 80084bc:	4602      	mov	r2, r0
 80084be:	460b      	mov	r3, r1
 80084c0:	4640      	mov	r0, r8
 80084c2:	4649      	mov	r1, r9
 80084c4:	f7f8 fb28 	bl	8000b18 <__aeabi_dcmpgt>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	d173      	bne.n	80085b4 <_dtoa_r+0x6c4>
 80084cc:	4652      	mov	r2, sl
 80084ce:	465b      	mov	r3, fp
 80084d0:	4913      	ldr	r1, [pc, #76]	; (8008520 <_dtoa_r+0x630>)
 80084d2:	2000      	movs	r0, #0
 80084d4:	f7f7 fed8 	bl	8000288 <__aeabi_dsub>
 80084d8:	4602      	mov	r2, r0
 80084da:	460b      	mov	r3, r1
 80084dc:	4640      	mov	r0, r8
 80084de:	4649      	mov	r1, r9
 80084e0:	f7f8 fafc 	bl	8000adc <__aeabi_dcmplt>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	f43f af35 	beq.w	8008354 <_dtoa_r+0x464>
 80084ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80084ec:	1e6b      	subs	r3, r5, #1
 80084ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80084f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80084f4:	2b30      	cmp	r3, #48	; 0x30
 80084f6:	d0f8      	beq.n	80084ea <_dtoa_r+0x5fa>
 80084f8:	9700      	str	r7, [sp, #0]
 80084fa:	e049      	b.n	8008590 <_dtoa_r+0x6a0>
 80084fc:	4b05      	ldr	r3, [pc, #20]	; (8008514 <_dtoa_r+0x624>)
 80084fe:	f7f8 f87b 	bl	80005f8 <__aeabi_dmul>
 8008502:	4680      	mov	r8, r0
 8008504:	4689      	mov	r9, r1
 8008506:	e7bd      	b.n	8008484 <_dtoa_r+0x594>
 8008508:	0800fc00 	.word	0x0800fc00
 800850c:	0800fbd8 	.word	0x0800fbd8
 8008510:	3ff00000 	.word	0x3ff00000
 8008514:	40240000 	.word	0x40240000
 8008518:	401c0000 	.word	0x401c0000
 800851c:	40140000 	.word	0x40140000
 8008520:	3fe00000 	.word	0x3fe00000
 8008524:	9d01      	ldr	r5, [sp, #4]
 8008526:	4656      	mov	r6, sl
 8008528:	465f      	mov	r7, fp
 800852a:	4642      	mov	r2, r8
 800852c:	464b      	mov	r3, r9
 800852e:	4630      	mov	r0, r6
 8008530:	4639      	mov	r1, r7
 8008532:	f7f8 f98b 	bl	800084c <__aeabi_ddiv>
 8008536:	f7f8 fb0f 	bl	8000b58 <__aeabi_d2iz>
 800853a:	4682      	mov	sl, r0
 800853c:	f7f7 fff2 	bl	8000524 <__aeabi_i2d>
 8008540:	4642      	mov	r2, r8
 8008542:	464b      	mov	r3, r9
 8008544:	f7f8 f858 	bl	80005f8 <__aeabi_dmul>
 8008548:	4602      	mov	r2, r0
 800854a:	460b      	mov	r3, r1
 800854c:	4630      	mov	r0, r6
 800854e:	4639      	mov	r1, r7
 8008550:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008554:	f7f7 fe98 	bl	8000288 <__aeabi_dsub>
 8008558:	f805 6b01 	strb.w	r6, [r5], #1
 800855c:	9e01      	ldr	r6, [sp, #4]
 800855e:	9f03      	ldr	r7, [sp, #12]
 8008560:	1bae      	subs	r6, r5, r6
 8008562:	42b7      	cmp	r7, r6
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	d135      	bne.n	80085d6 <_dtoa_r+0x6e6>
 800856a:	f7f7 fe8f 	bl	800028c <__adddf3>
 800856e:	4642      	mov	r2, r8
 8008570:	464b      	mov	r3, r9
 8008572:	4606      	mov	r6, r0
 8008574:	460f      	mov	r7, r1
 8008576:	f7f8 facf 	bl	8000b18 <__aeabi_dcmpgt>
 800857a:	b9d0      	cbnz	r0, 80085b2 <_dtoa_r+0x6c2>
 800857c:	4642      	mov	r2, r8
 800857e:	464b      	mov	r3, r9
 8008580:	4630      	mov	r0, r6
 8008582:	4639      	mov	r1, r7
 8008584:	f7f8 faa0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008588:	b110      	cbz	r0, 8008590 <_dtoa_r+0x6a0>
 800858a:	f01a 0f01 	tst.w	sl, #1
 800858e:	d110      	bne.n	80085b2 <_dtoa_r+0x6c2>
 8008590:	4620      	mov	r0, r4
 8008592:	ee18 1a10 	vmov	r1, s16
 8008596:	f000 fbdf 	bl	8008d58 <_Bfree>
 800859a:	2300      	movs	r3, #0
 800859c:	9800      	ldr	r0, [sp, #0]
 800859e:	702b      	strb	r3, [r5, #0]
 80085a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085a2:	3001      	adds	r0, #1
 80085a4:	6018      	str	r0, [r3, #0]
 80085a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f43f acf1 	beq.w	8007f90 <_dtoa_r+0xa0>
 80085ae:	601d      	str	r5, [r3, #0]
 80085b0:	e4ee      	b.n	8007f90 <_dtoa_r+0xa0>
 80085b2:	9f00      	ldr	r7, [sp, #0]
 80085b4:	462b      	mov	r3, r5
 80085b6:	461d      	mov	r5, r3
 80085b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085bc:	2a39      	cmp	r2, #57	; 0x39
 80085be:	d106      	bne.n	80085ce <_dtoa_r+0x6de>
 80085c0:	9a01      	ldr	r2, [sp, #4]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d1f7      	bne.n	80085b6 <_dtoa_r+0x6c6>
 80085c6:	9901      	ldr	r1, [sp, #4]
 80085c8:	2230      	movs	r2, #48	; 0x30
 80085ca:	3701      	adds	r7, #1
 80085cc:	700a      	strb	r2, [r1, #0]
 80085ce:	781a      	ldrb	r2, [r3, #0]
 80085d0:	3201      	adds	r2, #1
 80085d2:	701a      	strb	r2, [r3, #0]
 80085d4:	e790      	b.n	80084f8 <_dtoa_r+0x608>
 80085d6:	4ba6      	ldr	r3, [pc, #664]	; (8008870 <_dtoa_r+0x980>)
 80085d8:	2200      	movs	r2, #0
 80085da:	f7f8 f80d 	bl	80005f8 <__aeabi_dmul>
 80085de:	2200      	movs	r2, #0
 80085e0:	2300      	movs	r3, #0
 80085e2:	4606      	mov	r6, r0
 80085e4:	460f      	mov	r7, r1
 80085e6:	f7f8 fa6f 	bl	8000ac8 <__aeabi_dcmpeq>
 80085ea:	2800      	cmp	r0, #0
 80085ec:	d09d      	beq.n	800852a <_dtoa_r+0x63a>
 80085ee:	e7cf      	b.n	8008590 <_dtoa_r+0x6a0>
 80085f0:	9a08      	ldr	r2, [sp, #32]
 80085f2:	2a00      	cmp	r2, #0
 80085f4:	f000 80d7 	beq.w	80087a6 <_dtoa_r+0x8b6>
 80085f8:	9a06      	ldr	r2, [sp, #24]
 80085fa:	2a01      	cmp	r2, #1
 80085fc:	f300 80ba 	bgt.w	8008774 <_dtoa_r+0x884>
 8008600:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008602:	2a00      	cmp	r2, #0
 8008604:	f000 80b2 	beq.w	800876c <_dtoa_r+0x87c>
 8008608:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800860c:	9e07      	ldr	r6, [sp, #28]
 800860e:	9d04      	ldr	r5, [sp, #16]
 8008610:	9a04      	ldr	r2, [sp, #16]
 8008612:	441a      	add	r2, r3
 8008614:	9204      	str	r2, [sp, #16]
 8008616:	9a05      	ldr	r2, [sp, #20]
 8008618:	2101      	movs	r1, #1
 800861a:	441a      	add	r2, r3
 800861c:	4620      	mov	r0, r4
 800861e:	9205      	str	r2, [sp, #20]
 8008620:	f000 fc52 	bl	8008ec8 <__i2b>
 8008624:	4607      	mov	r7, r0
 8008626:	2d00      	cmp	r5, #0
 8008628:	dd0c      	ble.n	8008644 <_dtoa_r+0x754>
 800862a:	9b05      	ldr	r3, [sp, #20]
 800862c:	2b00      	cmp	r3, #0
 800862e:	dd09      	ble.n	8008644 <_dtoa_r+0x754>
 8008630:	42ab      	cmp	r3, r5
 8008632:	9a04      	ldr	r2, [sp, #16]
 8008634:	bfa8      	it	ge
 8008636:	462b      	movge	r3, r5
 8008638:	1ad2      	subs	r2, r2, r3
 800863a:	9204      	str	r2, [sp, #16]
 800863c:	9a05      	ldr	r2, [sp, #20]
 800863e:	1aed      	subs	r5, r5, r3
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	9305      	str	r3, [sp, #20]
 8008644:	9b07      	ldr	r3, [sp, #28]
 8008646:	b31b      	cbz	r3, 8008690 <_dtoa_r+0x7a0>
 8008648:	9b08      	ldr	r3, [sp, #32]
 800864a:	2b00      	cmp	r3, #0
 800864c:	f000 80af 	beq.w	80087ae <_dtoa_r+0x8be>
 8008650:	2e00      	cmp	r6, #0
 8008652:	dd13      	ble.n	800867c <_dtoa_r+0x78c>
 8008654:	4639      	mov	r1, r7
 8008656:	4632      	mov	r2, r6
 8008658:	4620      	mov	r0, r4
 800865a:	f000 fcf5 	bl	8009048 <__pow5mult>
 800865e:	ee18 2a10 	vmov	r2, s16
 8008662:	4601      	mov	r1, r0
 8008664:	4607      	mov	r7, r0
 8008666:	4620      	mov	r0, r4
 8008668:	f000 fc44 	bl	8008ef4 <__multiply>
 800866c:	ee18 1a10 	vmov	r1, s16
 8008670:	4680      	mov	r8, r0
 8008672:	4620      	mov	r0, r4
 8008674:	f000 fb70 	bl	8008d58 <_Bfree>
 8008678:	ee08 8a10 	vmov	s16, r8
 800867c:	9b07      	ldr	r3, [sp, #28]
 800867e:	1b9a      	subs	r2, r3, r6
 8008680:	d006      	beq.n	8008690 <_dtoa_r+0x7a0>
 8008682:	ee18 1a10 	vmov	r1, s16
 8008686:	4620      	mov	r0, r4
 8008688:	f000 fcde 	bl	8009048 <__pow5mult>
 800868c:	ee08 0a10 	vmov	s16, r0
 8008690:	2101      	movs	r1, #1
 8008692:	4620      	mov	r0, r4
 8008694:	f000 fc18 	bl	8008ec8 <__i2b>
 8008698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800869a:	2b00      	cmp	r3, #0
 800869c:	4606      	mov	r6, r0
 800869e:	f340 8088 	ble.w	80087b2 <_dtoa_r+0x8c2>
 80086a2:	461a      	mov	r2, r3
 80086a4:	4601      	mov	r1, r0
 80086a6:	4620      	mov	r0, r4
 80086a8:	f000 fcce 	bl	8009048 <__pow5mult>
 80086ac:	9b06      	ldr	r3, [sp, #24]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	4606      	mov	r6, r0
 80086b2:	f340 8081 	ble.w	80087b8 <_dtoa_r+0x8c8>
 80086b6:	f04f 0800 	mov.w	r8, #0
 80086ba:	6933      	ldr	r3, [r6, #16]
 80086bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80086c0:	6918      	ldr	r0, [r3, #16]
 80086c2:	f000 fbb1 	bl	8008e28 <__hi0bits>
 80086c6:	f1c0 0020 	rsb	r0, r0, #32
 80086ca:	9b05      	ldr	r3, [sp, #20]
 80086cc:	4418      	add	r0, r3
 80086ce:	f010 001f 	ands.w	r0, r0, #31
 80086d2:	f000 8092 	beq.w	80087fa <_dtoa_r+0x90a>
 80086d6:	f1c0 0320 	rsb	r3, r0, #32
 80086da:	2b04      	cmp	r3, #4
 80086dc:	f340 808a 	ble.w	80087f4 <_dtoa_r+0x904>
 80086e0:	f1c0 001c 	rsb	r0, r0, #28
 80086e4:	9b04      	ldr	r3, [sp, #16]
 80086e6:	4403      	add	r3, r0
 80086e8:	9304      	str	r3, [sp, #16]
 80086ea:	9b05      	ldr	r3, [sp, #20]
 80086ec:	4403      	add	r3, r0
 80086ee:	4405      	add	r5, r0
 80086f0:	9305      	str	r3, [sp, #20]
 80086f2:	9b04      	ldr	r3, [sp, #16]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	dd07      	ble.n	8008708 <_dtoa_r+0x818>
 80086f8:	ee18 1a10 	vmov	r1, s16
 80086fc:	461a      	mov	r2, r3
 80086fe:	4620      	mov	r0, r4
 8008700:	f000 fcfc 	bl	80090fc <__lshift>
 8008704:	ee08 0a10 	vmov	s16, r0
 8008708:	9b05      	ldr	r3, [sp, #20]
 800870a:	2b00      	cmp	r3, #0
 800870c:	dd05      	ble.n	800871a <_dtoa_r+0x82a>
 800870e:	4631      	mov	r1, r6
 8008710:	461a      	mov	r2, r3
 8008712:	4620      	mov	r0, r4
 8008714:	f000 fcf2 	bl	80090fc <__lshift>
 8008718:	4606      	mov	r6, r0
 800871a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800871c:	2b00      	cmp	r3, #0
 800871e:	d06e      	beq.n	80087fe <_dtoa_r+0x90e>
 8008720:	ee18 0a10 	vmov	r0, s16
 8008724:	4631      	mov	r1, r6
 8008726:	f000 fd59 	bl	80091dc <__mcmp>
 800872a:	2800      	cmp	r0, #0
 800872c:	da67      	bge.n	80087fe <_dtoa_r+0x90e>
 800872e:	9b00      	ldr	r3, [sp, #0]
 8008730:	3b01      	subs	r3, #1
 8008732:	ee18 1a10 	vmov	r1, s16
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	220a      	movs	r2, #10
 800873a:	2300      	movs	r3, #0
 800873c:	4620      	mov	r0, r4
 800873e:	f000 fb2d 	bl	8008d9c <__multadd>
 8008742:	9b08      	ldr	r3, [sp, #32]
 8008744:	ee08 0a10 	vmov	s16, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	f000 81b1 	beq.w	8008ab0 <_dtoa_r+0xbc0>
 800874e:	2300      	movs	r3, #0
 8008750:	4639      	mov	r1, r7
 8008752:	220a      	movs	r2, #10
 8008754:	4620      	mov	r0, r4
 8008756:	f000 fb21 	bl	8008d9c <__multadd>
 800875a:	9b02      	ldr	r3, [sp, #8]
 800875c:	2b00      	cmp	r3, #0
 800875e:	4607      	mov	r7, r0
 8008760:	f300 808e 	bgt.w	8008880 <_dtoa_r+0x990>
 8008764:	9b06      	ldr	r3, [sp, #24]
 8008766:	2b02      	cmp	r3, #2
 8008768:	dc51      	bgt.n	800880e <_dtoa_r+0x91e>
 800876a:	e089      	b.n	8008880 <_dtoa_r+0x990>
 800876c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800876e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008772:	e74b      	b.n	800860c <_dtoa_r+0x71c>
 8008774:	9b03      	ldr	r3, [sp, #12]
 8008776:	1e5e      	subs	r6, r3, #1
 8008778:	9b07      	ldr	r3, [sp, #28]
 800877a:	42b3      	cmp	r3, r6
 800877c:	bfbf      	itttt	lt
 800877e:	9b07      	ldrlt	r3, [sp, #28]
 8008780:	9607      	strlt	r6, [sp, #28]
 8008782:	1af2      	sublt	r2, r6, r3
 8008784:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008786:	bfb6      	itet	lt
 8008788:	189b      	addlt	r3, r3, r2
 800878a:	1b9e      	subge	r6, r3, r6
 800878c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800878e:	9b03      	ldr	r3, [sp, #12]
 8008790:	bfb8      	it	lt
 8008792:	2600      	movlt	r6, #0
 8008794:	2b00      	cmp	r3, #0
 8008796:	bfb7      	itett	lt
 8008798:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800879c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80087a0:	1a9d      	sublt	r5, r3, r2
 80087a2:	2300      	movlt	r3, #0
 80087a4:	e734      	b.n	8008610 <_dtoa_r+0x720>
 80087a6:	9e07      	ldr	r6, [sp, #28]
 80087a8:	9d04      	ldr	r5, [sp, #16]
 80087aa:	9f08      	ldr	r7, [sp, #32]
 80087ac:	e73b      	b.n	8008626 <_dtoa_r+0x736>
 80087ae:	9a07      	ldr	r2, [sp, #28]
 80087b0:	e767      	b.n	8008682 <_dtoa_r+0x792>
 80087b2:	9b06      	ldr	r3, [sp, #24]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	dc18      	bgt.n	80087ea <_dtoa_r+0x8fa>
 80087b8:	f1ba 0f00 	cmp.w	sl, #0
 80087bc:	d115      	bne.n	80087ea <_dtoa_r+0x8fa>
 80087be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80087c2:	b993      	cbnz	r3, 80087ea <_dtoa_r+0x8fa>
 80087c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80087c8:	0d1b      	lsrs	r3, r3, #20
 80087ca:	051b      	lsls	r3, r3, #20
 80087cc:	b183      	cbz	r3, 80087f0 <_dtoa_r+0x900>
 80087ce:	9b04      	ldr	r3, [sp, #16]
 80087d0:	3301      	adds	r3, #1
 80087d2:	9304      	str	r3, [sp, #16]
 80087d4:	9b05      	ldr	r3, [sp, #20]
 80087d6:	3301      	adds	r3, #1
 80087d8:	9305      	str	r3, [sp, #20]
 80087da:	f04f 0801 	mov.w	r8, #1
 80087de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f47f af6a 	bne.w	80086ba <_dtoa_r+0x7ca>
 80087e6:	2001      	movs	r0, #1
 80087e8:	e76f      	b.n	80086ca <_dtoa_r+0x7da>
 80087ea:	f04f 0800 	mov.w	r8, #0
 80087ee:	e7f6      	b.n	80087de <_dtoa_r+0x8ee>
 80087f0:	4698      	mov	r8, r3
 80087f2:	e7f4      	b.n	80087de <_dtoa_r+0x8ee>
 80087f4:	f43f af7d 	beq.w	80086f2 <_dtoa_r+0x802>
 80087f8:	4618      	mov	r0, r3
 80087fa:	301c      	adds	r0, #28
 80087fc:	e772      	b.n	80086e4 <_dtoa_r+0x7f4>
 80087fe:	9b03      	ldr	r3, [sp, #12]
 8008800:	2b00      	cmp	r3, #0
 8008802:	dc37      	bgt.n	8008874 <_dtoa_r+0x984>
 8008804:	9b06      	ldr	r3, [sp, #24]
 8008806:	2b02      	cmp	r3, #2
 8008808:	dd34      	ble.n	8008874 <_dtoa_r+0x984>
 800880a:	9b03      	ldr	r3, [sp, #12]
 800880c:	9302      	str	r3, [sp, #8]
 800880e:	9b02      	ldr	r3, [sp, #8]
 8008810:	b96b      	cbnz	r3, 800882e <_dtoa_r+0x93e>
 8008812:	4631      	mov	r1, r6
 8008814:	2205      	movs	r2, #5
 8008816:	4620      	mov	r0, r4
 8008818:	f000 fac0 	bl	8008d9c <__multadd>
 800881c:	4601      	mov	r1, r0
 800881e:	4606      	mov	r6, r0
 8008820:	ee18 0a10 	vmov	r0, s16
 8008824:	f000 fcda 	bl	80091dc <__mcmp>
 8008828:	2800      	cmp	r0, #0
 800882a:	f73f adbb 	bgt.w	80083a4 <_dtoa_r+0x4b4>
 800882e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008830:	9d01      	ldr	r5, [sp, #4]
 8008832:	43db      	mvns	r3, r3
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	f04f 0800 	mov.w	r8, #0
 800883a:	4631      	mov	r1, r6
 800883c:	4620      	mov	r0, r4
 800883e:	f000 fa8b 	bl	8008d58 <_Bfree>
 8008842:	2f00      	cmp	r7, #0
 8008844:	f43f aea4 	beq.w	8008590 <_dtoa_r+0x6a0>
 8008848:	f1b8 0f00 	cmp.w	r8, #0
 800884c:	d005      	beq.n	800885a <_dtoa_r+0x96a>
 800884e:	45b8      	cmp	r8, r7
 8008850:	d003      	beq.n	800885a <_dtoa_r+0x96a>
 8008852:	4641      	mov	r1, r8
 8008854:	4620      	mov	r0, r4
 8008856:	f000 fa7f 	bl	8008d58 <_Bfree>
 800885a:	4639      	mov	r1, r7
 800885c:	4620      	mov	r0, r4
 800885e:	f000 fa7b 	bl	8008d58 <_Bfree>
 8008862:	e695      	b.n	8008590 <_dtoa_r+0x6a0>
 8008864:	2600      	movs	r6, #0
 8008866:	4637      	mov	r7, r6
 8008868:	e7e1      	b.n	800882e <_dtoa_r+0x93e>
 800886a:	9700      	str	r7, [sp, #0]
 800886c:	4637      	mov	r7, r6
 800886e:	e599      	b.n	80083a4 <_dtoa_r+0x4b4>
 8008870:	40240000 	.word	0x40240000
 8008874:	9b08      	ldr	r3, [sp, #32]
 8008876:	2b00      	cmp	r3, #0
 8008878:	f000 80ca 	beq.w	8008a10 <_dtoa_r+0xb20>
 800887c:	9b03      	ldr	r3, [sp, #12]
 800887e:	9302      	str	r3, [sp, #8]
 8008880:	2d00      	cmp	r5, #0
 8008882:	dd05      	ble.n	8008890 <_dtoa_r+0x9a0>
 8008884:	4639      	mov	r1, r7
 8008886:	462a      	mov	r2, r5
 8008888:	4620      	mov	r0, r4
 800888a:	f000 fc37 	bl	80090fc <__lshift>
 800888e:	4607      	mov	r7, r0
 8008890:	f1b8 0f00 	cmp.w	r8, #0
 8008894:	d05b      	beq.n	800894e <_dtoa_r+0xa5e>
 8008896:	6879      	ldr	r1, [r7, #4]
 8008898:	4620      	mov	r0, r4
 800889a:	f000 fa1d 	bl	8008cd8 <_Balloc>
 800889e:	4605      	mov	r5, r0
 80088a0:	b928      	cbnz	r0, 80088ae <_dtoa_r+0x9be>
 80088a2:	4b87      	ldr	r3, [pc, #540]	; (8008ac0 <_dtoa_r+0xbd0>)
 80088a4:	4602      	mov	r2, r0
 80088a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80088aa:	f7ff bb3b 	b.w	8007f24 <_dtoa_r+0x34>
 80088ae:	693a      	ldr	r2, [r7, #16]
 80088b0:	3202      	adds	r2, #2
 80088b2:	0092      	lsls	r2, r2, #2
 80088b4:	f107 010c 	add.w	r1, r7, #12
 80088b8:	300c      	adds	r0, #12
 80088ba:	f7fe fda5 	bl	8007408 <memcpy>
 80088be:	2201      	movs	r2, #1
 80088c0:	4629      	mov	r1, r5
 80088c2:	4620      	mov	r0, r4
 80088c4:	f000 fc1a 	bl	80090fc <__lshift>
 80088c8:	9b01      	ldr	r3, [sp, #4]
 80088ca:	f103 0901 	add.w	r9, r3, #1
 80088ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80088d2:	4413      	add	r3, r2
 80088d4:	9305      	str	r3, [sp, #20]
 80088d6:	f00a 0301 	and.w	r3, sl, #1
 80088da:	46b8      	mov	r8, r7
 80088dc:	9304      	str	r3, [sp, #16]
 80088de:	4607      	mov	r7, r0
 80088e0:	4631      	mov	r1, r6
 80088e2:	ee18 0a10 	vmov	r0, s16
 80088e6:	f7ff fa75 	bl	8007dd4 <quorem>
 80088ea:	4641      	mov	r1, r8
 80088ec:	9002      	str	r0, [sp, #8]
 80088ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80088f2:	ee18 0a10 	vmov	r0, s16
 80088f6:	f000 fc71 	bl	80091dc <__mcmp>
 80088fa:	463a      	mov	r2, r7
 80088fc:	9003      	str	r0, [sp, #12]
 80088fe:	4631      	mov	r1, r6
 8008900:	4620      	mov	r0, r4
 8008902:	f000 fc87 	bl	8009214 <__mdiff>
 8008906:	68c2      	ldr	r2, [r0, #12]
 8008908:	f109 3bff 	add.w	fp, r9, #4294967295
 800890c:	4605      	mov	r5, r0
 800890e:	bb02      	cbnz	r2, 8008952 <_dtoa_r+0xa62>
 8008910:	4601      	mov	r1, r0
 8008912:	ee18 0a10 	vmov	r0, s16
 8008916:	f000 fc61 	bl	80091dc <__mcmp>
 800891a:	4602      	mov	r2, r0
 800891c:	4629      	mov	r1, r5
 800891e:	4620      	mov	r0, r4
 8008920:	9207      	str	r2, [sp, #28]
 8008922:	f000 fa19 	bl	8008d58 <_Bfree>
 8008926:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800892a:	ea43 0102 	orr.w	r1, r3, r2
 800892e:	9b04      	ldr	r3, [sp, #16]
 8008930:	430b      	orrs	r3, r1
 8008932:	464d      	mov	r5, r9
 8008934:	d10f      	bne.n	8008956 <_dtoa_r+0xa66>
 8008936:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800893a:	d02a      	beq.n	8008992 <_dtoa_r+0xaa2>
 800893c:	9b03      	ldr	r3, [sp, #12]
 800893e:	2b00      	cmp	r3, #0
 8008940:	dd02      	ble.n	8008948 <_dtoa_r+0xa58>
 8008942:	9b02      	ldr	r3, [sp, #8]
 8008944:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008948:	f88b a000 	strb.w	sl, [fp]
 800894c:	e775      	b.n	800883a <_dtoa_r+0x94a>
 800894e:	4638      	mov	r0, r7
 8008950:	e7ba      	b.n	80088c8 <_dtoa_r+0x9d8>
 8008952:	2201      	movs	r2, #1
 8008954:	e7e2      	b.n	800891c <_dtoa_r+0xa2c>
 8008956:	9b03      	ldr	r3, [sp, #12]
 8008958:	2b00      	cmp	r3, #0
 800895a:	db04      	blt.n	8008966 <_dtoa_r+0xa76>
 800895c:	9906      	ldr	r1, [sp, #24]
 800895e:	430b      	orrs	r3, r1
 8008960:	9904      	ldr	r1, [sp, #16]
 8008962:	430b      	orrs	r3, r1
 8008964:	d122      	bne.n	80089ac <_dtoa_r+0xabc>
 8008966:	2a00      	cmp	r2, #0
 8008968:	ddee      	ble.n	8008948 <_dtoa_r+0xa58>
 800896a:	ee18 1a10 	vmov	r1, s16
 800896e:	2201      	movs	r2, #1
 8008970:	4620      	mov	r0, r4
 8008972:	f000 fbc3 	bl	80090fc <__lshift>
 8008976:	4631      	mov	r1, r6
 8008978:	ee08 0a10 	vmov	s16, r0
 800897c:	f000 fc2e 	bl	80091dc <__mcmp>
 8008980:	2800      	cmp	r0, #0
 8008982:	dc03      	bgt.n	800898c <_dtoa_r+0xa9c>
 8008984:	d1e0      	bne.n	8008948 <_dtoa_r+0xa58>
 8008986:	f01a 0f01 	tst.w	sl, #1
 800898a:	d0dd      	beq.n	8008948 <_dtoa_r+0xa58>
 800898c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008990:	d1d7      	bne.n	8008942 <_dtoa_r+0xa52>
 8008992:	2339      	movs	r3, #57	; 0x39
 8008994:	f88b 3000 	strb.w	r3, [fp]
 8008998:	462b      	mov	r3, r5
 800899a:	461d      	mov	r5, r3
 800899c:	3b01      	subs	r3, #1
 800899e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80089a2:	2a39      	cmp	r2, #57	; 0x39
 80089a4:	d071      	beq.n	8008a8a <_dtoa_r+0xb9a>
 80089a6:	3201      	adds	r2, #1
 80089a8:	701a      	strb	r2, [r3, #0]
 80089aa:	e746      	b.n	800883a <_dtoa_r+0x94a>
 80089ac:	2a00      	cmp	r2, #0
 80089ae:	dd07      	ble.n	80089c0 <_dtoa_r+0xad0>
 80089b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80089b4:	d0ed      	beq.n	8008992 <_dtoa_r+0xaa2>
 80089b6:	f10a 0301 	add.w	r3, sl, #1
 80089ba:	f88b 3000 	strb.w	r3, [fp]
 80089be:	e73c      	b.n	800883a <_dtoa_r+0x94a>
 80089c0:	9b05      	ldr	r3, [sp, #20]
 80089c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80089c6:	4599      	cmp	r9, r3
 80089c8:	d047      	beq.n	8008a5a <_dtoa_r+0xb6a>
 80089ca:	ee18 1a10 	vmov	r1, s16
 80089ce:	2300      	movs	r3, #0
 80089d0:	220a      	movs	r2, #10
 80089d2:	4620      	mov	r0, r4
 80089d4:	f000 f9e2 	bl	8008d9c <__multadd>
 80089d8:	45b8      	cmp	r8, r7
 80089da:	ee08 0a10 	vmov	s16, r0
 80089de:	f04f 0300 	mov.w	r3, #0
 80089e2:	f04f 020a 	mov.w	r2, #10
 80089e6:	4641      	mov	r1, r8
 80089e8:	4620      	mov	r0, r4
 80089ea:	d106      	bne.n	80089fa <_dtoa_r+0xb0a>
 80089ec:	f000 f9d6 	bl	8008d9c <__multadd>
 80089f0:	4680      	mov	r8, r0
 80089f2:	4607      	mov	r7, r0
 80089f4:	f109 0901 	add.w	r9, r9, #1
 80089f8:	e772      	b.n	80088e0 <_dtoa_r+0x9f0>
 80089fa:	f000 f9cf 	bl	8008d9c <__multadd>
 80089fe:	4639      	mov	r1, r7
 8008a00:	4680      	mov	r8, r0
 8008a02:	2300      	movs	r3, #0
 8008a04:	220a      	movs	r2, #10
 8008a06:	4620      	mov	r0, r4
 8008a08:	f000 f9c8 	bl	8008d9c <__multadd>
 8008a0c:	4607      	mov	r7, r0
 8008a0e:	e7f1      	b.n	80089f4 <_dtoa_r+0xb04>
 8008a10:	9b03      	ldr	r3, [sp, #12]
 8008a12:	9302      	str	r3, [sp, #8]
 8008a14:	9d01      	ldr	r5, [sp, #4]
 8008a16:	ee18 0a10 	vmov	r0, s16
 8008a1a:	4631      	mov	r1, r6
 8008a1c:	f7ff f9da 	bl	8007dd4 <quorem>
 8008a20:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008a24:	9b01      	ldr	r3, [sp, #4]
 8008a26:	f805 ab01 	strb.w	sl, [r5], #1
 8008a2a:	1aea      	subs	r2, r5, r3
 8008a2c:	9b02      	ldr	r3, [sp, #8]
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	dd09      	ble.n	8008a46 <_dtoa_r+0xb56>
 8008a32:	ee18 1a10 	vmov	r1, s16
 8008a36:	2300      	movs	r3, #0
 8008a38:	220a      	movs	r2, #10
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	f000 f9ae 	bl	8008d9c <__multadd>
 8008a40:	ee08 0a10 	vmov	s16, r0
 8008a44:	e7e7      	b.n	8008a16 <_dtoa_r+0xb26>
 8008a46:	9b02      	ldr	r3, [sp, #8]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	bfc8      	it	gt
 8008a4c:	461d      	movgt	r5, r3
 8008a4e:	9b01      	ldr	r3, [sp, #4]
 8008a50:	bfd8      	it	le
 8008a52:	2501      	movle	r5, #1
 8008a54:	441d      	add	r5, r3
 8008a56:	f04f 0800 	mov.w	r8, #0
 8008a5a:	ee18 1a10 	vmov	r1, s16
 8008a5e:	2201      	movs	r2, #1
 8008a60:	4620      	mov	r0, r4
 8008a62:	f000 fb4b 	bl	80090fc <__lshift>
 8008a66:	4631      	mov	r1, r6
 8008a68:	ee08 0a10 	vmov	s16, r0
 8008a6c:	f000 fbb6 	bl	80091dc <__mcmp>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	dc91      	bgt.n	8008998 <_dtoa_r+0xaa8>
 8008a74:	d102      	bne.n	8008a7c <_dtoa_r+0xb8c>
 8008a76:	f01a 0f01 	tst.w	sl, #1
 8008a7a:	d18d      	bne.n	8008998 <_dtoa_r+0xaa8>
 8008a7c:	462b      	mov	r3, r5
 8008a7e:	461d      	mov	r5, r3
 8008a80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a84:	2a30      	cmp	r2, #48	; 0x30
 8008a86:	d0fa      	beq.n	8008a7e <_dtoa_r+0xb8e>
 8008a88:	e6d7      	b.n	800883a <_dtoa_r+0x94a>
 8008a8a:	9a01      	ldr	r2, [sp, #4]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d184      	bne.n	800899a <_dtoa_r+0xaaa>
 8008a90:	9b00      	ldr	r3, [sp, #0]
 8008a92:	3301      	adds	r3, #1
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	2331      	movs	r3, #49	; 0x31
 8008a98:	7013      	strb	r3, [r2, #0]
 8008a9a:	e6ce      	b.n	800883a <_dtoa_r+0x94a>
 8008a9c:	4b09      	ldr	r3, [pc, #36]	; (8008ac4 <_dtoa_r+0xbd4>)
 8008a9e:	f7ff ba95 	b.w	8007fcc <_dtoa_r+0xdc>
 8008aa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f47f aa6e 	bne.w	8007f86 <_dtoa_r+0x96>
 8008aaa:	4b07      	ldr	r3, [pc, #28]	; (8008ac8 <_dtoa_r+0xbd8>)
 8008aac:	f7ff ba8e 	b.w	8007fcc <_dtoa_r+0xdc>
 8008ab0:	9b02      	ldr	r3, [sp, #8]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	dcae      	bgt.n	8008a14 <_dtoa_r+0xb24>
 8008ab6:	9b06      	ldr	r3, [sp, #24]
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	f73f aea8 	bgt.w	800880e <_dtoa_r+0x91e>
 8008abe:	e7a9      	b.n	8008a14 <_dtoa_r+0xb24>
 8008ac0:	0800fb0b 	.word	0x0800fb0b
 8008ac4:	0800fa68 	.word	0x0800fa68
 8008ac8:	0800fa8c 	.word	0x0800fa8c

08008acc <std>:
 8008acc:	2300      	movs	r3, #0
 8008ace:	b510      	push	{r4, lr}
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	e9c0 3300 	strd	r3, r3, [r0]
 8008ad6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ada:	6083      	str	r3, [r0, #8]
 8008adc:	8181      	strh	r1, [r0, #12]
 8008ade:	6643      	str	r3, [r0, #100]	; 0x64
 8008ae0:	81c2      	strh	r2, [r0, #14]
 8008ae2:	6183      	str	r3, [r0, #24]
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	2208      	movs	r2, #8
 8008ae8:	305c      	adds	r0, #92	; 0x5c
 8008aea:	f7fe fcb5 	bl	8007458 <memset>
 8008aee:	4b05      	ldr	r3, [pc, #20]	; (8008b04 <std+0x38>)
 8008af0:	6263      	str	r3, [r4, #36]	; 0x24
 8008af2:	4b05      	ldr	r3, [pc, #20]	; (8008b08 <std+0x3c>)
 8008af4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008af6:	4b05      	ldr	r3, [pc, #20]	; (8008b0c <std+0x40>)
 8008af8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008afa:	4b05      	ldr	r3, [pc, #20]	; (8008b10 <std+0x44>)
 8008afc:	6224      	str	r4, [r4, #32]
 8008afe:	6323      	str	r3, [r4, #48]	; 0x30
 8008b00:	bd10      	pop	{r4, pc}
 8008b02:	bf00      	nop
 8008b04:	08009b59 	.word	0x08009b59
 8008b08:	08009b7b 	.word	0x08009b7b
 8008b0c:	08009bb3 	.word	0x08009bb3
 8008b10:	08009bd7 	.word	0x08009bd7

08008b14 <_cleanup_r>:
 8008b14:	4901      	ldr	r1, [pc, #4]	; (8008b1c <_cleanup_r+0x8>)
 8008b16:	f000 b8af 	b.w	8008c78 <_fwalk_reent>
 8008b1a:	bf00      	nop
 8008b1c:	08009eed 	.word	0x08009eed

08008b20 <__sfmoreglue>:
 8008b20:	b570      	push	{r4, r5, r6, lr}
 8008b22:	2268      	movs	r2, #104	; 0x68
 8008b24:	1e4d      	subs	r5, r1, #1
 8008b26:	4355      	muls	r5, r2
 8008b28:	460e      	mov	r6, r1
 8008b2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b2e:	f000 fcd9 	bl	80094e4 <_malloc_r>
 8008b32:	4604      	mov	r4, r0
 8008b34:	b140      	cbz	r0, 8008b48 <__sfmoreglue+0x28>
 8008b36:	2100      	movs	r1, #0
 8008b38:	e9c0 1600 	strd	r1, r6, [r0]
 8008b3c:	300c      	adds	r0, #12
 8008b3e:	60a0      	str	r0, [r4, #8]
 8008b40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b44:	f7fe fc88 	bl	8007458 <memset>
 8008b48:	4620      	mov	r0, r4
 8008b4a:	bd70      	pop	{r4, r5, r6, pc}

08008b4c <__sfp_lock_acquire>:
 8008b4c:	4801      	ldr	r0, [pc, #4]	; (8008b54 <__sfp_lock_acquire+0x8>)
 8008b4e:	f000 b8b8 	b.w	8008cc2 <__retarget_lock_acquire_recursive>
 8008b52:	bf00      	nop
 8008b54:	20000839 	.word	0x20000839

08008b58 <__sfp_lock_release>:
 8008b58:	4801      	ldr	r0, [pc, #4]	; (8008b60 <__sfp_lock_release+0x8>)
 8008b5a:	f000 b8b3 	b.w	8008cc4 <__retarget_lock_release_recursive>
 8008b5e:	bf00      	nop
 8008b60:	20000839 	.word	0x20000839

08008b64 <__sinit_lock_acquire>:
 8008b64:	4801      	ldr	r0, [pc, #4]	; (8008b6c <__sinit_lock_acquire+0x8>)
 8008b66:	f000 b8ac 	b.w	8008cc2 <__retarget_lock_acquire_recursive>
 8008b6a:	bf00      	nop
 8008b6c:	2000083a 	.word	0x2000083a

08008b70 <__sinit_lock_release>:
 8008b70:	4801      	ldr	r0, [pc, #4]	; (8008b78 <__sinit_lock_release+0x8>)
 8008b72:	f000 b8a7 	b.w	8008cc4 <__retarget_lock_release_recursive>
 8008b76:	bf00      	nop
 8008b78:	2000083a 	.word	0x2000083a

08008b7c <__sinit>:
 8008b7c:	b510      	push	{r4, lr}
 8008b7e:	4604      	mov	r4, r0
 8008b80:	f7ff fff0 	bl	8008b64 <__sinit_lock_acquire>
 8008b84:	69a3      	ldr	r3, [r4, #24]
 8008b86:	b11b      	cbz	r3, 8008b90 <__sinit+0x14>
 8008b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b8c:	f7ff bff0 	b.w	8008b70 <__sinit_lock_release>
 8008b90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b94:	6523      	str	r3, [r4, #80]	; 0x50
 8008b96:	4b13      	ldr	r3, [pc, #76]	; (8008be4 <__sinit+0x68>)
 8008b98:	4a13      	ldr	r2, [pc, #76]	; (8008be8 <__sinit+0x6c>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b9e:	42a3      	cmp	r3, r4
 8008ba0:	bf04      	itt	eq
 8008ba2:	2301      	moveq	r3, #1
 8008ba4:	61a3      	streq	r3, [r4, #24]
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f000 f820 	bl	8008bec <__sfp>
 8008bac:	6060      	str	r0, [r4, #4]
 8008bae:	4620      	mov	r0, r4
 8008bb0:	f000 f81c 	bl	8008bec <__sfp>
 8008bb4:	60a0      	str	r0, [r4, #8]
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f000 f818 	bl	8008bec <__sfp>
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	60e0      	str	r0, [r4, #12]
 8008bc0:	2104      	movs	r1, #4
 8008bc2:	6860      	ldr	r0, [r4, #4]
 8008bc4:	f7ff ff82 	bl	8008acc <std>
 8008bc8:	68a0      	ldr	r0, [r4, #8]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	2109      	movs	r1, #9
 8008bce:	f7ff ff7d 	bl	8008acc <std>
 8008bd2:	68e0      	ldr	r0, [r4, #12]
 8008bd4:	2202      	movs	r2, #2
 8008bd6:	2112      	movs	r1, #18
 8008bd8:	f7ff ff78 	bl	8008acc <std>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	61a3      	str	r3, [r4, #24]
 8008be0:	e7d2      	b.n	8008b88 <__sinit+0xc>
 8008be2:	bf00      	nop
 8008be4:	0800fa54 	.word	0x0800fa54
 8008be8:	08008b15 	.word	0x08008b15

08008bec <__sfp>:
 8008bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bee:	4607      	mov	r7, r0
 8008bf0:	f7ff ffac 	bl	8008b4c <__sfp_lock_acquire>
 8008bf4:	4b1e      	ldr	r3, [pc, #120]	; (8008c70 <__sfp+0x84>)
 8008bf6:	681e      	ldr	r6, [r3, #0]
 8008bf8:	69b3      	ldr	r3, [r6, #24]
 8008bfa:	b913      	cbnz	r3, 8008c02 <__sfp+0x16>
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	f7ff ffbd 	bl	8008b7c <__sinit>
 8008c02:	3648      	adds	r6, #72	; 0x48
 8008c04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	d503      	bpl.n	8008c14 <__sfp+0x28>
 8008c0c:	6833      	ldr	r3, [r6, #0]
 8008c0e:	b30b      	cbz	r3, 8008c54 <__sfp+0x68>
 8008c10:	6836      	ldr	r6, [r6, #0]
 8008c12:	e7f7      	b.n	8008c04 <__sfp+0x18>
 8008c14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c18:	b9d5      	cbnz	r5, 8008c50 <__sfp+0x64>
 8008c1a:	4b16      	ldr	r3, [pc, #88]	; (8008c74 <__sfp+0x88>)
 8008c1c:	60e3      	str	r3, [r4, #12]
 8008c1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c22:	6665      	str	r5, [r4, #100]	; 0x64
 8008c24:	f000 f84c 	bl	8008cc0 <__retarget_lock_init_recursive>
 8008c28:	f7ff ff96 	bl	8008b58 <__sfp_lock_release>
 8008c2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008c30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008c34:	6025      	str	r5, [r4, #0]
 8008c36:	61a5      	str	r5, [r4, #24]
 8008c38:	2208      	movs	r2, #8
 8008c3a:	4629      	mov	r1, r5
 8008c3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c40:	f7fe fc0a 	bl	8007458 <memset>
 8008c44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c50:	3468      	adds	r4, #104	; 0x68
 8008c52:	e7d9      	b.n	8008c08 <__sfp+0x1c>
 8008c54:	2104      	movs	r1, #4
 8008c56:	4638      	mov	r0, r7
 8008c58:	f7ff ff62 	bl	8008b20 <__sfmoreglue>
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	6030      	str	r0, [r6, #0]
 8008c60:	2800      	cmp	r0, #0
 8008c62:	d1d5      	bne.n	8008c10 <__sfp+0x24>
 8008c64:	f7ff ff78 	bl	8008b58 <__sfp_lock_release>
 8008c68:	230c      	movs	r3, #12
 8008c6a:	603b      	str	r3, [r7, #0]
 8008c6c:	e7ee      	b.n	8008c4c <__sfp+0x60>
 8008c6e:	bf00      	nop
 8008c70:	0800fa54 	.word	0x0800fa54
 8008c74:	ffff0001 	.word	0xffff0001

08008c78 <_fwalk_reent>:
 8008c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c7c:	4606      	mov	r6, r0
 8008c7e:	4688      	mov	r8, r1
 8008c80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c84:	2700      	movs	r7, #0
 8008c86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c8a:	f1b9 0901 	subs.w	r9, r9, #1
 8008c8e:	d505      	bpl.n	8008c9c <_fwalk_reent+0x24>
 8008c90:	6824      	ldr	r4, [r4, #0]
 8008c92:	2c00      	cmp	r4, #0
 8008c94:	d1f7      	bne.n	8008c86 <_fwalk_reent+0xe>
 8008c96:	4638      	mov	r0, r7
 8008c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c9c:	89ab      	ldrh	r3, [r5, #12]
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d907      	bls.n	8008cb2 <_fwalk_reent+0x3a>
 8008ca2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	d003      	beq.n	8008cb2 <_fwalk_reent+0x3a>
 8008caa:	4629      	mov	r1, r5
 8008cac:	4630      	mov	r0, r6
 8008cae:	47c0      	blx	r8
 8008cb0:	4307      	orrs	r7, r0
 8008cb2:	3568      	adds	r5, #104	; 0x68
 8008cb4:	e7e9      	b.n	8008c8a <_fwalk_reent+0x12>
	...

08008cb8 <_localeconv_r>:
 8008cb8:	4800      	ldr	r0, [pc, #0]	; (8008cbc <_localeconv_r+0x4>)
 8008cba:	4770      	bx	lr
 8008cbc:	20000188 	.word	0x20000188

08008cc0 <__retarget_lock_init_recursive>:
 8008cc0:	4770      	bx	lr

08008cc2 <__retarget_lock_acquire_recursive>:
 8008cc2:	4770      	bx	lr

08008cc4 <__retarget_lock_release_recursive>:
 8008cc4:	4770      	bx	lr
	...

08008cc8 <malloc>:
 8008cc8:	4b02      	ldr	r3, [pc, #8]	; (8008cd4 <malloc+0xc>)
 8008cca:	4601      	mov	r1, r0
 8008ccc:	6818      	ldr	r0, [r3, #0]
 8008cce:	f000 bc09 	b.w	80094e4 <_malloc_r>
 8008cd2:	bf00      	nop
 8008cd4:	20000034 	.word	0x20000034

08008cd8 <_Balloc>:
 8008cd8:	b570      	push	{r4, r5, r6, lr}
 8008cda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008cdc:	4604      	mov	r4, r0
 8008cde:	460d      	mov	r5, r1
 8008ce0:	b976      	cbnz	r6, 8008d00 <_Balloc+0x28>
 8008ce2:	2010      	movs	r0, #16
 8008ce4:	f7ff fff0 	bl	8008cc8 <malloc>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	6260      	str	r0, [r4, #36]	; 0x24
 8008cec:	b920      	cbnz	r0, 8008cf8 <_Balloc+0x20>
 8008cee:	4b18      	ldr	r3, [pc, #96]	; (8008d50 <_Balloc+0x78>)
 8008cf0:	4818      	ldr	r0, [pc, #96]	; (8008d54 <_Balloc+0x7c>)
 8008cf2:	2166      	movs	r1, #102	; 0x66
 8008cf4:	f001 f846 	bl	8009d84 <__assert_func>
 8008cf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cfc:	6006      	str	r6, [r0, #0]
 8008cfe:	60c6      	str	r6, [r0, #12]
 8008d00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d02:	68f3      	ldr	r3, [r6, #12]
 8008d04:	b183      	cbz	r3, 8008d28 <_Balloc+0x50>
 8008d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d0e:	b9b8      	cbnz	r0, 8008d40 <_Balloc+0x68>
 8008d10:	2101      	movs	r1, #1
 8008d12:	fa01 f605 	lsl.w	r6, r1, r5
 8008d16:	1d72      	adds	r2, r6, #5
 8008d18:	0092      	lsls	r2, r2, #2
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f000 fb60 	bl	80093e0 <_calloc_r>
 8008d20:	b160      	cbz	r0, 8008d3c <_Balloc+0x64>
 8008d22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d26:	e00e      	b.n	8008d46 <_Balloc+0x6e>
 8008d28:	2221      	movs	r2, #33	; 0x21
 8008d2a:	2104      	movs	r1, #4
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	f000 fb57 	bl	80093e0 <_calloc_r>
 8008d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d34:	60f0      	str	r0, [r6, #12]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1e4      	bne.n	8008d06 <_Balloc+0x2e>
 8008d3c:	2000      	movs	r0, #0
 8008d3e:	bd70      	pop	{r4, r5, r6, pc}
 8008d40:	6802      	ldr	r2, [r0, #0]
 8008d42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d46:	2300      	movs	r3, #0
 8008d48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d4c:	e7f7      	b.n	8008d3e <_Balloc+0x66>
 8008d4e:	bf00      	nop
 8008d50:	0800fa99 	.word	0x0800fa99
 8008d54:	0800fb7c 	.word	0x0800fb7c

08008d58 <_Bfree>:
 8008d58:	b570      	push	{r4, r5, r6, lr}
 8008d5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d5c:	4605      	mov	r5, r0
 8008d5e:	460c      	mov	r4, r1
 8008d60:	b976      	cbnz	r6, 8008d80 <_Bfree+0x28>
 8008d62:	2010      	movs	r0, #16
 8008d64:	f7ff ffb0 	bl	8008cc8 <malloc>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	6268      	str	r0, [r5, #36]	; 0x24
 8008d6c:	b920      	cbnz	r0, 8008d78 <_Bfree+0x20>
 8008d6e:	4b09      	ldr	r3, [pc, #36]	; (8008d94 <_Bfree+0x3c>)
 8008d70:	4809      	ldr	r0, [pc, #36]	; (8008d98 <_Bfree+0x40>)
 8008d72:	218a      	movs	r1, #138	; 0x8a
 8008d74:	f001 f806 	bl	8009d84 <__assert_func>
 8008d78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d7c:	6006      	str	r6, [r0, #0]
 8008d7e:	60c6      	str	r6, [r0, #12]
 8008d80:	b13c      	cbz	r4, 8008d92 <_Bfree+0x3a>
 8008d82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d84:	6862      	ldr	r2, [r4, #4]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d8c:	6021      	str	r1, [r4, #0]
 8008d8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d92:	bd70      	pop	{r4, r5, r6, pc}
 8008d94:	0800fa99 	.word	0x0800fa99
 8008d98:	0800fb7c 	.word	0x0800fb7c

08008d9c <__multadd>:
 8008d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008da0:	690d      	ldr	r5, [r1, #16]
 8008da2:	4607      	mov	r7, r0
 8008da4:	460c      	mov	r4, r1
 8008da6:	461e      	mov	r6, r3
 8008da8:	f101 0c14 	add.w	ip, r1, #20
 8008dac:	2000      	movs	r0, #0
 8008dae:	f8dc 3000 	ldr.w	r3, [ip]
 8008db2:	b299      	uxth	r1, r3
 8008db4:	fb02 6101 	mla	r1, r2, r1, r6
 8008db8:	0c1e      	lsrs	r6, r3, #16
 8008dba:	0c0b      	lsrs	r3, r1, #16
 8008dbc:	fb02 3306 	mla	r3, r2, r6, r3
 8008dc0:	b289      	uxth	r1, r1
 8008dc2:	3001      	adds	r0, #1
 8008dc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008dc8:	4285      	cmp	r5, r0
 8008dca:	f84c 1b04 	str.w	r1, [ip], #4
 8008dce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008dd2:	dcec      	bgt.n	8008dae <__multadd+0x12>
 8008dd4:	b30e      	cbz	r6, 8008e1a <__multadd+0x7e>
 8008dd6:	68a3      	ldr	r3, [r4, #8]
 8008dd8:	42ab      	cmp	r3, r5
 8008dda:	dc19      	bgt.n	8008e10 <__multadd+0x74>
 8008ddc:	6861      	ldr	r1, [r4, #4]
 8008dde:	4638      	mov	r0, r7
 8008de0:	3101      	adds	r1, #1
 8008de2:	f7ff ff79 	bl	8008cd8 <_Balloc>
 8008de6:	4680      	mov	r8, r0
 8008de8:	b928      	cbnz	r0, 8008df6 <__multadd+0x5a>
 8008dea:	4602      	mov	r2, r0
 8008dec:	4b0c      	ldr	r3, [pc, #48]	; (8008e20 <__multadd+0x84>)
 8008dee:	480d      	ldr	r0, [pc, #52]	; (8008e24 <__multadd+0x88>)
 8008df0:	21b5      	movs	r1, #181	; 0xb5
 8008df2:	f000 ffc7 	bl	8009d84 <__assert_func>
 8008df6:	6922      	ldr	r2, [r4, #16]
 8008df8:	3202      	adds	r2, #2
 8008dfa:	f104 010c 	add.w	r1, r4, #12
 8008dfe:	0092      	lsls	r2, r2, #2
 8008e00:	300c      	adds	r0, #12
 8008e02:	f7fe fb01 	bl	8007408 <memcpy>
 8008e06:	4621      	mov	r1, r4
 8008e08:	4638      	mov	r0, r7
 8008e0a:	f7ff ffa5 	bl	8008d58 <_Bfree>
 8008e0e:	4644      	mov	r4, r8
 8008e10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e14:	3501      	adds	r5, #1
 8008e16:	615e      	str	r6, [r3, #20]
 8008e18:	6125      	str	r5, [r4, #16]
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e20:	0800fb0b 	.word	0x0800fb0b
 8008e24:	0800fb7c 	.word	0x0800fb7c

08008e28 <__hi0bits>:
 8008e28:	0c03      	lsrs	r3, r0, #16
 8008e2a:	041b      	lsls	r3, r3, #16
 8008e2c:	b9d3      	cbnz	r3, 8008e64 <__hi0bits+0x3c>
 8008e2e:	0400      	lsls	r0, r0, #16
 8008e30:	2310      	movs	r3, #16
 8008e32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e36:	bf04      	itt	eq
 8008e38:	0200      	lsleq	r0, r0, #8
 8008e3a:	3308      	addeq	r3, #8
 8008e3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e40:	bf04      	itt	eq
 8008e42:	0100      	lsleq	r0, r0, #4
 8008e44:	3304      	addeq	r3, #4
 8008e46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e4a:	bf04      	itt	eq
 8008e4c:	0080      	lsleq	r0, r0, #2
 8008e4e:	3302      	addeq	r3, #2
 8008e50:	2800      	cmp	r0, #0
 8008e52:	db05      	blt.n	8008e60 <__hi0bits+0x38>
 8008e54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008e58:	f103 0301 	add.w	r3, r3, #1
 8008e5c:	bf08      	it	eq
 8008e5e:	2320      	moveq	r3, #32
 8008e60:	4618      	mov	r0, r3
 8008e62:	4770      	bx	lr
 8008e64:	2300      	movs	r3, #0
 8008e66:	e7e4      	b.n	8008e32 <__hi0bits+0xa>

08008e68 <__lo0bits>:
 8008e68:	6803      	ldr	r3, [r0, #0]
 8008e6a:	f013 0207 	ands.w	r2, r3, #7
 8008e6e:	4601      	mov	r1, r0
 8008e70:	d00b      	beq.n	8008e8a <__lo0bits+0x22>
 8008e72:	07da      	lsls	r2, r3, #31
 8008e74:	d423      	bmi.n	8008ebe <__lo0bits+0x56>
 8008e76:	0798      	lsls	r0, r3, #30
 8008e78:	bf49      	itett	mi
 8008e7a:	085b      	lsrmi	r3, r3, #1
 8008e7c:	089b      	lsrpl	r3, r3, #2
 8008e7e:	2001      	movmi	r0, #1
 8008e80:	600b      	strmi	r3, [r1, #0]
 8008e82:	bf5c      	itt	pl
 8008e84:	600b      	strpl	r3, [r1, #0]
 8008e86:	2002      	movpl	r0, #2
 8008e88:	4770      	bx	lr
 8008e8a:	b298      	uxth	r0, r3
 8008e8c:	b9a8      	cbnz	r0, 8008eba <__lo0bits+0x52>
 8008e8e:	0c1b      	lsrs	r3, r3, #16
 8008e90:	2010      	movs	r0, #16
 8008e92:	b2da      	uxtb	r2, r3
 8008e94:	b90a      	cbnz	r2, 8008e9a <__lo0bits+0x32>
 8008e96:	3008      	adds	r0, #8
 8008e98:	0a1b      	lsrs	r3, r3, #8
 8008e9a:	071a      	lsls	r2, r3, #28
 8008e9c:	bf04      	itt	eq
 8008e9e:	091b      	lsreq	r3, r3, #4
 8008ea0:	3004      	addeq	r0, #4
 8008ea2:	079a      	lsls	r2, r3, #30
 8008ea4:	bf04      	itt	eq
 8008ea6:	089b      	lsreq	r3, r3, #2
 8008ea8:	3002      	addeq	r0, #2
 8008eaa:	07da      	lsls	r2, r3, #31
 8008eac:	d403      	bmi.n	8008eb6 <__lo0bits+0x4e>
 8008eae:	085b      	lsrs	r3, r3, #1
 8008eb0:	f100 0001 	add.w	r0, r0, #1
 8008eb4:	d005      	beq.n	8008ec2 <__lo0bits+0x5a>
 8008eb6:	600b      	str	r3, [r1, #0]
 8008eb8:	4770      	bx	lr
 8008eba:	4610      	mov	r0, r2
 8008ebc:	e7e9      	b.n	8008e92 <__lo0bits+0x2a>
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	4770      	bx	lr
 8008ec2:	2020      	movs	r0, #32
 8008ec4:	4770      	bx	lr
	...

08008ec8 <__i2b>:
 8008ec8:	b510      	push	{r4, lr}
 8008eca:	460c      	mov	r4, r1
 8008ecc:	2101      	movs	r1, #1
 8008ece:	f7ff ff03 	bl	8008cd8 <_Balloc>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	b928      	cbnz	r0, 8008ee2 <__i2b+0x1a>
 8008ed6:	4b05      	ldr	r3, [pc, #20]	; (8008eec <__i2b+0x24>)
 8008ed8:	4805      	ldr	r0, [pc, #20]	; (8008ef0 <__i2b+0x28>)
 8008eda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008ede:	f000 ff51 	bl	8009d84 <__assert_func>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	6144      	str	r4, [r0, #20]
 8008ee6:	6103      	str	r3, [r0, #16]
 8008ee8:	bd10      	pop	{r4, pc}
 8008eea:	bf00      	nop
 8008eec:	0800fb0b 	.word	0x0800fb0b
 8008ef0:	0800fb7c 	.word	0x0800fb7c

08008ef4 <__multiply>:
 8008ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef8:	4691      	mov	r9, r2
 8008efa:	690a      	ldr	r2, [r1, #16]
 8008efc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	bfb8      	it	lt
 8008f04:	460b      	movlt	r3, r1
 8008f06:	460c      	mov	r4, r1
 8008f08:	bfbc      	itt	lt
 8008f0a:	464c      	movlt	r4, r9
 8008f0c:	4699      	movlt	r9, r3
 8008f0e:	6927      	ldr	r7, [r4, #16]
 8008f10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008f14:	68a3      	ldr	r3, [r4, #8]
 8008f16:	6861      	ldr	r1, [r4, #4]
 8008f18:	eb07 060a 	add.w	r6, r7, sl
 8008f1c:	42b3      	cmp	r3, r6
 8008f1e:	b085      	sub	sp, #20
 8008f20:	bfb8      	it	lt
 8008f22:	3101      	addlt	r1, #1
 8008f24:	f7ff fed8 	bl	8008cd8 <_Balloc>
 8008f28:	b930      	cbnz	r0, 8008f38 <__multiply+0x44>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	4b44      	ldr	r3, [pc, #272]	; (8009040 <__multiply+0x14c>)
 8008f2e:	4845      	ldr	r0, [pc, #276]	; (8009044 <__multiply+0x150>)
 8008f30:	f240 115d 	movw	r1, #349	; 0x15d
 8008f34:	f000 ff26 	bl	8009d84 <__assert_func>
 8008f38:	f100 0514 	add.w	r5, r0, #20
 8008f3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f40:	462b      	mov	r3, r5
 8008f42:	2200      	movs	r2, #0
 8008f44:	4543      	cmp	r3, r8
 8008f46:	d321      	bcc.n	8008f8c <__multiply+0x98>
 8008f48:	f104 0314 	add.w	r3, r4, #20
 8008f4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008f50:	f109 0314 	add.w	r3, r9, #20
 8008f54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008f58:	9202      	str	r2, [sp, #8]
 8008f5a:	1b3a      	subs	r2, r7, r4
 8008f5c:	3a15      	subs	r2, #21
 8008f5e:	f022 0203 	bic.w	r2, r2, #3
 8008f62:	3204      	adds	r2, #4
 8008f64:	f104 0115 	add.w	r1, r4, #21
 8008f68:	428f      	cmp	r7, r1
 8008f6a:	bf38      	it	cc
 8008f6c:	2204      	movcc	r2, #4
 8008f6e:	9201      	str	r2, [sp, #4]
 8008f70:	9a02      	ldr	r2, [sp, #8]
 8008f72:	9303      	str	r3, [sp, #12]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d80c      	bhi.n	8008f92 <__multiply+0x9e>
 8008f78:	2e00      	cmp	r6, #0
 8008f7a:	dd03      	ble.n	8008f84 <__multiply+0x90>
 8008f7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d05a      	beq.n	800903a <__multiply+0x146>
 8008f84:	6106      	str	r6, [r0, #16]
 8008f86:	b005      	add	sp, #20
 8008f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f8c:	f843 2b04 	str.w	r2, [r3], #4
 8008f90:	e7d8      	b.n	8008f44 <__multiply+0x50>
 8008f92:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f96:	f1ba 0f00 	cmp.w	sl, #0
 8008f9a:	d024      	beq.n	8008fe6 <__multiply+0xf2>
 8008f9c:	f104 0e14 	add.w	lr, r4, #20
 8008fa0:	46a9      	mov	r9, r5
 8008fa2:	f04f 0c00 	mov.w	ip, #0
 8008fa6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008faa:	f8d9 1000 	ldr.w	r1, [r9]
 8008fae:	fa1f fb82 	uxth.w	fp, r2
 8008fb2:	b289      	uxth	r1, r1
 8008fb4:	fb0a 110b 	mla	r1, sl, fp, r1
 8008fb8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008fbc:	f8d9 2000 	ldr.w	r2, [r9]
 8008fc0:	4461      	add	r1, ip
 8008fc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008fc6:	fb0a c20b 	mla	r2, sl, fp, ip
 8008fca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008fce:	b289      	uxth	r1, r1
 8008fd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008fd4:	4577      	cmp	r7, lr
 8008fd6:	f849 1b04 	str.w	r1, [r9], #4
 8008fda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008fde:	d8e2      	bhi.n	8008fa6 <__multiply+0xb2>
 8008fe0:	9a01      	ldr	r2, [sp, #4]
 8008fe2:	f845 c002 	str.w	ip, [r5, r2]
 8008fe6:	9a03      	ldr	r2, [sp, #12]
 8008fe8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008fec:	3304      	adds	r3, #4
 8008fee:	f1b9 0f00 	cmp.w	r9, #0
 8008ff2:	d020      	beq.n	8009036 <__multiply+0x142>
 8008ff4:	6829      	ldr	r1, [r5, #0]
 8008ff6:	f104 0c14 	add.w	ip, r4, #20
 8008ffa:	46ae      	mov	lr, r5
 8008ffc:	f04f 0a00 	mov.w	sl, #0
 8009000:	f8bc b000 	ldrh.w	fp, [ip]
 8009004:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009008:	fb09 220b 	mla	r2, r9, fp, r2
 800900c:	4492      	add	sl, r2
 800900e:	b289      	uxth	r1, r1
 8009010:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009014:	f84e 1b04 	str.w	r1, [lr], #4
 8009018:	f85c 2b04 	ldr.w	r2, [ip], #4
 800901c:	f8be 1000 	ldrh.w	r1, [lr]
 8009020:	0c12      	lsrs	r2, r2, #16
 8009022:	fb09 1102 	mla	r1, r9, r2, r1
 8009026:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800902a:	4567      	cmp	r7, ip
 800902c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009030:	d8e6      	bhi.n	8009000 <__multiply+0x10c>
 8009032:	9a01      	ldr	r2, [sp, #4]
 8009034:	50a9      	str	r1, [r5, r2]
 8009036:	3504      	adds	r5, #4
 8009038:	e79a      	b.n	8008f70 <__multiply+0x7c>
 800903a:	3e01      	subs	r6, #1
 800903c:	e79c      	b.n	8008f78 <__multiply+0x84>
 800903e:	bf00      	nop
 8009040:	0800fb0b 	.word	0x0800fb0b
 8009044:	0800fb7c 	.word	0x0800fb7c

08009048 <__pow5mult>:
 8009048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800904c:	4615      	mov	r5, r2
 800904e:	f012 0203 	ands.w	r2, r2, #3
 8009052:	4606      	mov	r6, r0
 8009054:	460f      	mov	r7, r1
 8009056:	d007      	beq.n	8009068 <__pow5mult+0x20>
 8009058:	4c25      	ldr	r4, [pc, #148]	; (80090f0 <__pow5mult+0xa8>)
 800905a:	3a01      	subs	r2, #1
 800905c:	2300      	movs	r3, #0
 800905e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009062:	f7ff fe9b 	bl	8008d9c <__multadd>
 8009066:	4607      	mov	r7, r0
 8009068:	10ad      	asrs	r5, r5, #2
 800906a:	d03d      	beq.n	80090e8 <__pow5mult+0xa0>
 800906c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800906e:	b97c      	cbnz	r4, 8009090 <__pow5mult+0x48>
 8009070:	2010      	movs	r0, #16
 8009072:	f7ff fe29 	bl	8008cc8 <malloc>
 8009076:	4602      	mov	r2, r0
 8009078:	6270      	str	r0, [r6, #36]	; 0x24
 800907a:	b928      	cbnz	r0, 8009088 <__pow5mult+0x40>
 800907c:	4b1d      	ldr	r3, [pc, #116]	; (80090f4 <__pow5mult+0xac>)
 800907e:	481e      	ldr	r0, [pc, #120]	; (80090f8 <__pow5mult+0xb0>)
 8009080:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009084:	f000 fe7e 	bl	8009d84 <__assert_func>
 8009088:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800908c:	6004      	str	r4, [r0, #0]
 800908e:	60c4      	str	r4, [r0, #12]
 8009090:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009094:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009098:	b94c      	cbnz	r4, 80090ae <__pow5mult+0x66>
 800909a:	f240 2171 	movw	r1, #625	; 0x271
 800909e:	4630      	mov	r0, r6
 80090a0:	f7ff ff12 	bl	8008ec8 <__i2b>
 80090a4:	2300      	movs	r3, #0
 80090a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80090aa:	4604      	mov	r4, r0
 80090ac:	6003      	str	r3, [r0, #0]
 80090ae:	f04f 0900 	mov.w	r9, #0
 80090b2:	07eb      	lsls	r3, r5, #31
 80090b4:	d50a      	bpl.n	80090cc <__pow5mult+0x84>
 80090b6:	4639      	mov	r1, r7
 80090b8:	4622      	mov	r2, r4
 80090ba:	4630      	mov	r0, r6
 80090bc:	f7ff ff1a 	bl	8008ef4 <__multiply>
 80090c0:	4639      	mov	r1, r7
 80090c2:	4680      	mov	r8, r0
 80090c4:	4630      	mov	r0, r6
 80090c6:	f7ff fe47 	bl	8008d58 <_Bfree>
 80090ca:	4647      	mov	r7, r8
 80090cc:	106d      	asrs	r5, r5, #1
 80090ce:	d00b      	beq.n	80090e8 <__pow5mult+0xa0>
 80090d0:	6820      	ldr	r0, [r4, #0]
 80090d2:	b938      	cbnz	r0, 80090e4 <__pow5mult+0x9c>
 80090d4:	4622      	mov	r2, r4
 80090d6:	4621      	mov	r1, r4
 80090d8:	4630      	mov	r0, r6
 80090da:	f7ff ff0b 	bl	8008ef4 <__multiply>
 80090de:	6020      	str	r0, [r4, #0]
 80090e0:	f8c0 9000 	str.w	r9, [r0]
 80090e4:	4604      	mov	r4, r0
 80090e6:	e7e4      	b.n	80090b2 <__pow5mult+0x6a>
 80090e8:	4638      	mov	r0, r7
 80090ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090ee:	bf00      	nop
 80090f0:	0800fcc8 	.word	0x0800fcc8
 80090f4:	0800fa99 	.word	0x0800fa99
 80090f8:	0800fb7c 	.word	0x0800fb7c

080090fc <__lshift>:
 80090fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009100:	460c      	mov	r4, r1
 8009102:	6849      	ldr	r1, [r1, #4]
 8009104:	6923      	ldr	r3, [r4, #16]
 8009106:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800910a:	68a3      	ldr	r3, [r4, #8]
 800910c:	4607      	mov	r7, r0
 800910e:	4691      	mov	r9, r2
 8009110:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009114:	f108 0601 	add.w	r6, r8, #1
 8009118:	42b3      	cmp	r3, r6
 800911a:	db0b      	blt.n	8009134 <__lshift+0x38>
 800911c:	4638      	mov	r0, r7
 800911e:	f7ff fddb 	bl	8008cd8 <_Balloc>
 8009122:	4605      	mov	r5, r0
 8009124:	b948      	cbnz	r0, 800913a <__lshift+0x3e>
 8009126:	4602      	mov	r2, r0
 8009128:	4b2a      	ldr	r3, [pc, #168]	; (80091d4 <__lshift+0xd8>)
 800912a:	482b      	ldr	r0, [pc, #172]	; (80091d8 <__lshift+0xdc>)
 800912c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009130:	f000 fe28 	bl	8009d84 <__assert_func>
 8009134:	3101      	adds	r1, #1
 8009136:	005b      	lsls	r3, r3, #1
 8009138:	e7ee      	b.n	8009118 <__lshift+0x1c>
 800913a:	2300      	movs	r3, #0
 800913c:	f100 0114 	add.w	r1, r0, #20
 8009140:	f100 0210 	add.w	r2, r0, #16
 8009144:	4618      	mov	r0, r3
 8009146:	4553      	cmp	r3, sl
 8009148:	db37      	blt.n	80091ba <__lshift+0xbe>
 800914a:	6920      	ldr	r0, [r4, #16]
 800914c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009150:	f104 0314 	add.w	r3, r4, #20
 8009154:	f019 091f 	ands.w	r9, r9, #31
 8009158:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800915c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009160:	d02f      	beq.n	80091c2 <__lshift+0xc6>
 8009162:	f1c9 0e20 	rsb	lr, r9, #32
 8009166:	468a      	mov	sl, r1
 8009168:	f04f 0c00 	mov.w	ip, #0
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	fa02 f209 	lsl.w	r2, r2, r9
 8009172:	ea42 020c 	orr.w	r2, r2, ip
 8009176:	f84a 2b04 	str.w	r2, [sl], #4
 800917a:	f853 2b04 	ldr.w	r2, [r3], #4
 800917e:	4298      	cmp	r0, r3
 8009180:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009184:	d8f2      	bhi.n	800916c <__lshift+0x70>
 8009186:	1b03      	subs	r3, r0, r4
 8009188:	3b15      	subs	r3, #21
 800918a:	f023 0303 	bic.w	r3, r3, #3
 800918e:	3304      	adds	r3, #4
 8009190:	f104 0215 	add.w	r2, r4, #21
 8009194:	4290      	cmp	r0, r2
 8009196:	bf38      	it	cc
 8009198:	2304      	movcc	r3, #4
 800919a:	f841 c003 	str.w	ip, [r1, r3]
 800919e:	f1bc 0f00 	cmp.w	ip, #0
 80091a2:	d001      	beq.n	80091a8 <__lshift+0xac>
 80091a4:	f108 0602 	add.w	r6, r8, #2
 80091a8:	3e01      	subs	r6, #1
 80091aa:	4638      	mov	r0, r7
 80091ac:	612e      	str	r6, [r5, #16]
 80091ae:	4621      	mov	r1, r4
 80091b0:	f7ff fdd2 	bl	8008d58 <_Bfree>
 80091b4:	4628      	mov	r0, r5
 80091b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80091be:	3301      	adds	r3, #1
 80091c0:	e7c1      	b.n	8009146 <__lshift+0x4a>
 80091c2:	3904      	subs	r1, #4
 80091c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80091c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80091cc:	4298      	cmp	r0, r3
 80091ce:	d8f9      	bhi.n	80091c4 <__lshift+0xc8>
 80091d0:	e7ea      	b.n	80091a8 <__lshift+0xac>
 80091d2:	bf00      	nop
 80091d4:	0800fb0b 	.word	0x0800fb0b
 80091d8:	0800fb7c 	.word	0x0800fb7c

080091dc <__mcmp>:
 80091dc:	b530      	push	{r4, r5, lr}
 80091de:	6902      	ldr	r2, [r0, #16]
 80091e0:	690c      	ldr	r4, [r1, #16]
 80091e2:	1b12      	subs	r2, r2, r4
 80091e4:	d10e      	bne.n	8009204 <__mcmp+0x28>
 80091e6:	f100 0314 	add.w	r3, r0, #20
 80091ea:	3114      	adds	r1, #20
 80091ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80091f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80091f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80091f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80091fc:	42a5      	cmp	r5, r4
 80091fe:	d003      	beq.n	8009208 <__mcmp+0x2c>
 8009200:	d305      	bcc.n	800920e <__mcmp+0x32>
 8009202:	2201      	movs	r2, #1
 8009204:	4610      	mov	r0, r2
 8009206:	bd30      	pop	{r4, r5, pc}
 8009208:	4283      	cmp	r3, r0
 800920a:	d3f3      	bcc.n	80091f4 <__mcmp+0x18>
 800920c:	e7fa      	b.n	8009204 <__mcmp+0x28>
 800920e:	f04f 32ff 	mov.w	r2, #4294967295
 8009212:	e7f7      	b.n	8009204 <__mcmp+0x28>

08009214 <__mdiff>:
 8009214:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009218:	460c      	mov	r4, r1
 800921a:	4606      	mov	r6, r0
 800921c:	4611      	mov	r1, r2
 800921e:	4620      	mov	r0, r4
 8009220:	4690      	mov	r8, r2
 8009222:	f7ff ffdb 	bl	80091dc <__mcmp>
 8009226:	1e05      	subs	r5, r0, #0
 8009228:	d110      	bne.n	800924c <__mdiff+0x38>
 800922a:	4629      	mov	r1, r5
 800922c:	4630      	mov	r0, r6
 800922e:	f7ff fd53 	bl	8008cd8 <_Balloc>
 8009232:	b930      	cbnz	r0, 8009242 <__mdiff+0x2e>
 8009234:	4b3a      	ldr	r3, [pc, #232]	; (8009320 <__mdiff+0x10c>)
 8009236:	4602      	mov	r2, r0
 8009238:	f240 2132 	movw	r1, #562	; 0x232
 800923c:	4839      	ldr	r0, [pc, #228]	; (8009324 <__mdiff+0x110>)
 800923e:	f000 fda1 	bl	8009d84 <__assert_func>
 8009242:	2301      	movs	r3, #1
 8009244:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009248:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800924c:	bfa4      	itt	ge
 800924e:	4643      	movge	r3, r8
 8009250:	46a0      	movge	r8, r4
 8009252:	4630      	mov	r0, r6
 8009254:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009258:	bfa6      	itte	ge
 800925a:	461c      	movge	r4, r3
 800925c:	2500      	movge	r5, #0
 800925e:	2501      	movlt	r5, #1
 8009260:	f7ff fd3a 	bl	8008cd8 <_Balloc>
 8009264:	b920      	cbnz	r0, 8009270 <__mdiff+0x5c>
 8009266:	4b2e      	ldr	r3, [pc, #184]	; (8009320 <__mdiff+0x10c>)
 8009268:	4602      	mov	r2, r0
 800926a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800926e:	e7e5      	b.n	800923c <__mdiff+0x28>
 8009270:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009274:	6926      	ldr	r6, [r4, #16]
 8009276:	60c5      	str	r5, [r0, #12]
 8009278:	f104 0914 	add.w	r9, r4, #20
 800927c:	f108 0514 	add.w	r5, r8, #20
 8009280:	f100 0e14 	add.w	lr, r0, #20
 8009284:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009288:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800928c:	f108 0210 	add.w	r2, r8, #16
 8009290:	46f2      	mov	sl, lr
 8009292:	2100      	movs	r1, #0
 8009294:	f859 3b04 	ldr.w	r3, [r9], #4
 8009298:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800929c:	fa1f f883 	uxth.w	r8, r3
 80092a0:	fa11 f18b 	uxtah	r1, r1, fp
 80092a4:	0c1b      	lsrs	r3, r3, #16
 80092a6:	eba1 0808 	sub.w	r8, r1, r8
 80092aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80092ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80092b2:	fa1f f888 	uxth.w	r8, r8
 80092b6:	1419      	asrs	r1, r3, #16
 80092b8:	454e      	cmp	r6, r9
 80092ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80092be:	f84a 3b04 	str.w	r3, [sl], #4
 80092c2:	d8e7      	bhi.n	8009294 <__mdiff+0x80>
 80092c4:	1b33      	subs	r3, r6, r4
 80092c6:	3b15      	subs	r3, #21
 80092c8:	f023 0303 	bic.w	r3, r3, #3
 80092cc:	3304      	adds	r3, #4
 80092ce:	3415      	adds	r4, #21
 80092d0:	42a6      	cmp	r6, r4
 80092d2:	bf38      	it	cc
 80092d4:	2304      	movcc	r3, #4
 80092d6:	441d      	add	r5, r3
 80092d8:	4473      	add	r3, lr
 80092da:	469e      	mov	lr, r3
 80092dc:	462e      	mov	r6, r5
 80092de:	4566      	cmp	r6, ip
 80092e0:	d30e      	bcc.n	8009300 <__mdiff+0xec>
 80092e2:	f10c 0203 	add.w	r2, ip, #3
 80092e6:	1b52      	subs	r2, r2, r5
 80092e8:	f022 0203 	bic.w	r2, r2, #3
 80092ec:	3d03      	subs	r5, #3
 80092ee:	45ac      	cmp	ip, r5
 80092f0:	bf38      	it	cc
 80092f2:	2200      	movcc	r2, #0
 80092f4:	441a      	add	r2, r3
 80092f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80092fa:	b17b      	cbz	r3, 800931c <__mdiff+0x108>
 80092fc:	6107      	str	r7, [r0, #16]
 80092fe:	e7a3      	b.n	8009248 <__mdiff+0x34>
 8009300:	f856 8b04 	ldr.w	r8, [r6], #4
 8009304:	fa11 f288 	uxtah	r2, r1, r8
 8009308:	1414      	asrs	r4, r2, #16
 800930a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800930e:	b292      	uxth	r2, r2
 8009310:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009314:	f84e 2b04 	str.w	r2, [lr], #4
 8009318:	1421      	asrs	r1, r4, #16
 800931a:	e7e0      	b.n	80092de <__mdiff+0xca>
 800931c:	3f01      	subs	r7, #1
 800931e:	e7ea      	b.n	80092f6 <__mdiff+0xe2>
 8009320:	0800fb0b 	.word	0x0800fb0b
 8009324:	0800fb7c 	.word	0x0800fb7c

08009328 <__d2b>:
 8009328:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800932c:	4689      	mov	r9, r1
 800932e:	2101      	movs	r1, #1
 8009330:	ec57 6b10 	vmov	r6, r7, d0
 8009334:	4690      	mov	r8, r2
 8009336:	f7ff fccf 	bl	8008cd8 <_Balloc>
 800933a:	4604      	mov	r4, r0
 800933c:	b930      	cbnz	r0, 800934c <__d2b+0x24>
 800933e:	4602      	mov	r2, r0
 8009340:	4b25      	ldr	r3, [pc, #148]	; (80093d8 <__d2b+0xb0>)
 8009342:	4826      	ldr	r0, [pc, #152]	; (80093dc <__d2b+0xb4>)
 8009344:	f240 310a 	movw	r1, #778	; 0x30a
 8009348:	f000 fd1c 	bl	8009d84 <__assert_func>
 800934c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009350:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009354:	bb35      	cbnz	r5, 80093a4 <__d2b+0x7c>
 8009356:	2e00      	cmp	r6, #0
 8009358:	9301      	str	r3, [sp, #4]
 800935a:	d028      	beq.n	80093ae <__d2b+0x86>
 800935c:	4668      	mov	r0, sp
 800935e:	9600      	str	r6, [sp, #0]
 8009360:	f7ff fd82 	bl	8008e68 <__lo0bits>
 8009364:	9900      	ldr	r1, [sp, #0]
 8009366:	b300      	cbz	r0, 80093aa <__d2b+0x82>
 8009368:	9a01      	ldr	r2, [sp, #4]
 800936a:	f1c0 0320 	rsb	r3, r0, #32
 800936e:	fa02 f303 	lsl.w	r3, r2, r3
 8009372:	430b      	orrs	r3, r1
 8009374:	40c2      	lsrs	r2, r0
 8009376:	6163      	str	r3, [r4, #20]
 8009378:	9201      	str	r2, [sp, #4]
 800937a:	9b01      	ldr	r3, [sp, #4]
 800937c:	61a3      	str	r3, [r4, #24]
 800937e:	2b00      	cmp	r3, #0
 8009380:	bf14      	ite	ne
 8009382:	2202      	movne	r2, #2
 8009384:	2201      	moveq	r2, #1
 8009386:	6122      	str	r2, [r4, #16]
 8009388:	b1d5      	cbz	r5, 80093c0 <__d2b+0x98>
 800938a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800938e:	4405      	add	r5, r0
 8009390:	f8c9 5000 	str.w	r5, [r9]
 8009394:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009398:	f8c8 0000 	str.w	r0, [r8]
 800939c:	4620      	mov	r0, r4
 800939e:	b003      	add	sp, #12
 80093a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093a8:	e7d5      	b.n	8009356 <__d2b+0x2e>
 80093aa:	6161      	str	r1, [r4, #20]
 80093ac:	e7e5      	b.n	800937a <__d2b+0x52>
 80093ae:	a801      	add	r0, sp, #4
 80093b0:	f7ff fd5a 	bl	8008e68 <__lo0bits>
 80093b4:	9b01      	ldr	r3, [sp, #4]
 80093b6:	6163      	str	r3, [r4, #20]
 80093b8:	2201      	movs	r2, #1
 80093ba:	6122      	str	r2, [r4, #16]
 80093bc:	3020      	adds	r0, #32
 80093be:	e7e3      	b.n	8009388 <__d2b+0x60>
 80093c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80093c8:	f8c9 0000 	str.w	r0, [r9]
 80093cc:	6918      	ldr	r0, [r3, #16]
 80093ce:	f7ff fd2b 	bl	8008e28 <__hi0bits>
 80093d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093d6:	e7df      	b.n	8009398 <__d2b+0x70>
 80093d8:	0800fb0b 	.word	0x0800fb0b
 80093dc:	0800fb7c 	.word	0x0800fb7c

080093e0 <_calloc_r>:
 80093e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093e2:	fba1 2402 	umull	r2, r4, r1, r2
 80093e6:	b94c      	cbnz	r4, 80093fc <_calloc_r+0x1c>
 80093e8:	4611      	mov	r1, r2
 80093ea:	9201      	str	r2, [sp, #4]
 80093ec:	f000 f87a 	bl	80094e4 <_malloc_r>
 80093f0:	9a01      	ldr	r2, [sp, #4]
 80093f2:	4605      	mov	r5, r0
 80093f4:	b930      	cbnz	r0, 8009404 <_calloc_r+0x24>
 80093f6:	4628      	mov	r0, r5
 80093f8:	b003      	add	sp, #12
 80093fa:	bd30      	pop	{r4, r5, pc}
 80093fc:	220c      	movs	r2, #12
 80093fe:	6002      	str	r2, [r0, #0]
 8009400:	2500      	movs	r5, #0
 8009402:	e7f8      	b.n	80093f6 <_calloc_r+0x16>
 8009404:	4621      	mov	r1, r4
 8009406:	f7fe f827 	bl	8007458 <memset>
 800940a:	e7f4      	b.n	80093f6 <_calloc_r+0x16>

0800940c <_free_r>:
 800940c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800940e:	2900      	cmp	r1, #0
 8009410:	d044      	beq.n	800949c <_free_r+0x90>
 8009412:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009416:	9001      	str	r0, [sp, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	f1a1 0404 	sub.w	r4, r1, #4
 800941e:	bfb8      	it	lt
 8009420:	18e4      	addlt	r4, r4, r3
 8009422:	f000 fe3b 	bl	800a09c <__malloc_lock>
 8009426:	4a1e      	ldr	r2, [pc, #120]	; (80094a0 <_free_r+0x94>)
 8009428:	9801      	ldr	r0, [sp, #4]
 800942a:	6813      	ldr	r3, [r2, #0]
 800942c:	b933      	cbnz	r3, 800943c <_free_r+0x30>
 800942e:	6063      	str	r3, [r4, #4]
 8009430:	6014      	str	r4, [r2, #0]
 8009432:	b003      	add	sp, #12
 8009434:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009438:	f000 be36 	b.w	800a0a8 <__malloc_unlock>
 800943c:	42a3      	cmp	r3, r4
 800943e:	d908      	bls.n	8009452 <_free_r+0x46>
 8009440:	6825      	ldr	r5, [r4, #0]
 8009442:	1961      	adds	r1, r4, r5
 8009444:	428b      	cmp	r3, r1
 8009446:	bf01      	itttt	eq
 8009448:	6819      	ldreq	r1, [r3, #0]
 800944a:	685b      	ldreq	r3, [r3, #4]
 800944c:	1949      	addeq	r1, r1, r5
 800944e:	6021      	streq	r1, [r4, #0]
 8009450:	e7ed      	b.n	800942e <_free_r+0x22>
 8009452:	461a      	mov	r2, r3
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	b10b      	cbz	r3, 800945c <_free_r+0x50>
 8009458:	42a3      	cmp	r3, r4
 800945a:	d9fa      	bls.n	8009452 <_free_r+0x46>
 800945c:	6811      	ldr	r1, [r2, #0]
 800945e:	1855      	adds	r5, r2, r1
 8009460:	42a5      	cmp	r5, r4
 8009462:	d10b      	bne.n	800947c <_free_r+0x70>
 8009464:	6824      	ldr	r4, [r4, #0]
 8009466:	4421      	add	r1, r4
 8009468:	1854      	adds	r4, r2, r1
 800946a:	42a3      	cmp	r3, r4
 800946c:	6011      	str	r1, [r2, #0]
 800946e:	d1e0      	bne.n	8009432 <_free_r+0x26>
 8009470:	681c      	ldr	r4, [r3, #0]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	6053      	str	r3, [r2, #4]
 8009476:	4421      	add	r1, r4
 8009478:	6011      	str	r1, [r2, #0]
 800947a:	e7da      	b.n	8009432 <_free_r+0x26>
 800947c:	d902      	bls.n	8009484 <_free_r+0x78>
 800947e:	230c      	movs	r3, #12
 8009480:	6003      	str	r3, [r0, #0]
 8009482:	e7d6      	b.n	8009432 <_free_r+0x26>
 8009484:	6825      	ldr	r5, [r4, #0]
 8009486:	1961      	adds	r1, r4, r5
 8009488:	428b      	cmp	r3, r1
 800948a:	bf04      	itt	eq
 800948c:	6819      	ldreq	r1, [r3, #0]
 800948e:	685b      	ldreq	r3, [r3, #4]
 8009490:	6063      	str	r3, [r4, #4]
 8009492:	bf04      	itt	eq
 8009494:	1949      	addeq	r1, r1, r5
 8009496:	6021      	streq	r1, [r4, #0]
 8009498:	6054      	str	r4, [r2, #4]
 800949a:	e7ca      	b.n	8009432 <_free_r+0x26>
 800949c:	b003      	add	sp, #12
 800949e:	bd30      	pop	{r4, r5, pc}
 80094a0:	2000083c 	.word	0x2000083c

080094a4 <sbrk_aligned>:
 80094a4:	b570      	push	{r4, r5, r6, lr}
 80094a6:	4e0e      	ldr	r6, [pc, #56]	; (80094e0 <sbrk_aligned+0x3c>)
 80094a8:	460c      	mov	r4, r1
 80094aa:	6831      	ldr	r1, [r6, #0]
 80094ac:	4605      	mov	r5, r0
 80094ae:	b911      	cbnz	r1, 80094b6 <sbrk_aligned+0x12>
 80094b0:	f000 fb42 	bl	8009b38 <_sbrk_r>
 80094b4:	6030      	str	r0, [r6, #0]
 80094b6:	4621      	mov	r1, r4
 80094b8:	4628      	mov	r0, r5
 80094ba:	f000 fb3d 	bl	8009b38 <_sbrk_r>
 80094be:	1c43      	adds	r3, r0, #1
 80094c0:	d00a      	beq.n	80094d8 <sbrk_aligned+0x34>
 80094c2:	1cc4      	adds	r4, r0, #3
 80094c4:	f024 0403 	bic.w	r4, r4, #3
 80094c8:	42a0      	cmp	r0, r4
 80094ca:	d007      	beq.n	80094dc <sbrk_aligned+0x38>
 80094cc:	1a21      	subs	r1, r4, r0
 80094ce:	4628      	mov	r0, r5
 80094d0:	f000 fb32 	bl	8009b38 <_sbrk_r>
 80094d4:	3001      	adds	r0, #1
 80094d6:	d101      	bne.n	80094dc <sbrk_aligned+0x38>
 80094d8:	f04f 34ff 	mov.w	r4, #4294967295
 80094dc:	4620      	mov	r0, r4
 80094de:	bd70      	pop	{r4, r5, r6, pc}
 80094e0:	20000840 	.word	0x20000840

080094e4 <_malloc_r>:
 80094e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e8:	1ccd      	adds	r5, r1, #3
 80094ea:	f025 0503 	bic.w	r5, r5, #3
 80094ee:	3508      	adds	r5, #8
 80094f0:	2d0c      	cmp	r5, #12
 80094f2:	bf38      	it	cc
 80094f4:	250c      	movcc	r5, #12
 80094f6:	2d00      	cmp	r5, #0
 80094f8:	4607      	mov	r7, r0
 80094fa:	db01      	blt.n	8009500 <_malloc_r+0x1c>
 80094fc:	42a9      	cmp	r1, r5
 80094fe:	d905      	bls.n	800950c <_malloc_r+0x28>
 8009500:	230c      	movs	r3, #12
 8009502:	603b      	str	r3, [r7, #0]
 8009504:	2600      	movs	r6, #0
 8009506:	4630      	mov	r0, r6
 8009508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800950c:	4e2e      	ldr	r6, [pc, #184]	; (80095c8 <_malloc_r+0xe4>)
 800950e:	f000 fdc5 	bl	800a09c <__malloc_lock>
 8009512:	6833      	ldr	r3, [r6, #0]
 8009514:	461c      	mov	r4, r3
 8009516:	bb34      	cbnz	r4, 8009566 <_malloc_r+0x82>
 8009518:	4629      	mov	r1, r5
 800951a:	4638      	mov	r0, r7
 800951c:	f7ff ffc2 	bl	80094a4 <sbrk_aligned>
 8009520:	1c43      	adds	r3, r0, #1
 8009522:	4604      	mov	r4, r0
 8009524:	d14d      	bne.n	80095c2 <_malloc_r+0xde>
 8009526:	6834      	ldr	r4, [r6, #0]
 8009528:	4626      	mov	r6, r4
 800952a:	2e00      	cmp	r6, #0
 800952c:	d140      	bne.n	80095b0 <_malloc_r+0xcc>
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	4631      	mov	r1, r6
 8009532:	4638      	mov	r0, r7
 8009534:	eb04 0803 	add.w	r8, r4, r3
 8009538:	f000 fafe 	bl	8009b38 <_sbrk_r>
 800953c:	4580      	cmp	r8, r0
 800953e:	d13a      	bne.n	80095b6 <_malloc_r+0xd2>
 8009540:	6821      	ldr	r1, [r4, #0]
 8009542:	3503      	adds	r5, #3
 8009544:	1a6d      	subs	r5, r5, r1
 8009546:	f025 0503 	bic.w	r5, r5, #3
 800954a:	3508      	adds	r5, #8
 800954c:	2d0c      	cmp	r5, #12
 800954e:	bf38      	it	cc
 8009550:	250c      	movcc	r5, #12
 8009552:	4629      	mov	r1, r5
 8009554:	4638      	mov	r0, r7
 8009556:	f7ff ffa5 	bl	80094a4 <sbrk_aligned>
 800955a:	3001      	adds	r0, #1
 800955c:	d02b      	beq.n	80095b6 <_malloc_r+0xd2>
 800955e:	6823      	ldr	r3, [r4, #0]
 8009560:	442b      	add	r3, r5
 8009562:	6023      	str	r3, [r4, #0]
 8009564:	e00e      	b.n	8009584 <_malloc_r+0xa0>
 8009566:	6822      	ldr	r2, [r4, #0]
 8009568:	1b52      	subs	r2, r2, r5
 800956a:	d41e      	bmi.n	80095aa <_malloc_r+0xc6>
 800956c:	2a0b      	cmp	r2, #11
 800956e:	d916      	bls.n	800959e <_malloc_r+0xba>
 8009570:	1961      	adds	r1, r4, r5
 8009572:	42a3      	cmp	r3, r4
 8009574:	6025      	str	r5, [r4, #0]
 8009576:	bf18      	it	ne
 8009578:	6059      	strne	r1, [r3, #4]
 800957a:	6863      	ldr	r3, [r4, #4]
 800957c:	bf08      	it	eq
 800957e:	6031      	streq	r1, [r6, #0]
 8009580:	5162      	str	r2, [r4, r5]
 8009582:	604b      	str	r3, [r1, #4]
 8009584:	4638      	mov	r0, r7
 8009586:	f104 060b 	add.w	r6, r4, #11
 800958a:	f000 fd8d 	bl	800a0a8 <__malloc_unlock>
 800958e:	f026 0607 	bic.w	r6, r6, #7
 8009592:	1d23      	adds	r3, r4, #4
 8009594:	1af2      	subs	r2, r6, r3
 8009596:	d0b6      	beq.n	8009506 <_malloc_r+0x22>
 8009598:	1b9b      	subs	r3, r3, r6
 800959a:	50a3      	str	r3, [r4, r2]
 800959c:	e7b3      	b.n	8009506 <_malloc_r+0x22>
 800959e:	6862      	ldr	r2, [r4, #4]
 80095a0:	42a3      	cmp	r3, r4
 80095a2:	bf0c      	ite	eq
 80095a4:	6032      	streq	r2, [r6, #0]
 80095a6:	605a      	strne	r2, [r3, #4]
 80095a8:	e7ec      	b.n	8009584 <_malloc_r+0xa0>
 80095aa:	4623      	mov	r3, r4
 80095ac:	6864      	ldr	r4, [r4, #4]
 80095ae:	e7b2      	b.n	8009516 <_malloc_r+0x32>
 80095b0:	4634      	mov	r4, r6
 80095b2:	6876      	ldr	r6, [r6, #4]
 80095b4:	e7b9      	b.n	800952a <_malloc_r+0x46>
 80095b6:	230c      	movs	r3, #12
 80095b8:	603b      	str	r3, [r7, #0]
 80095ba:	4638      	mov	r0, r7
 80095bc:	f000 fd74 	bl	800a0a8 <__malloc_unlock>
 80095c0:	e7a1      	b.n	8009506 <_malloc_r+0x22>
 80095c2:	6025      	str	r5, [r4, #0]
 80095c4:	e7de      	b.n	8009584 <_malloc_r+0xa0>
 80095c6:	bf00      	nop
 80095c8:	2000083c 	.word	0x2000083c

080095cc <__ssputs_r>:
 80095cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d0:	688e      	ldr	r6, [r1, #8]
 80095d2:	429e      	cmp	r6, r3
 80095d4:	4682      	mov	sl, r0
 80095d6:	460c      	mov	r4, r1
 80095d8:	4690      	mov	r8, r2
 80095da:	461f      	mov	r7, r3
 80095dc:	d838      	bhi.n	8009650 <__ssputs_r+0x84>
 80095de:	898a      	ldrh	r2, [r1, #12]
 80095e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095e4:	d032      	beq.n	800964c <__ssputs_r+0x80>
 80095e6:	6825      	ldr	r5, [r4, #0]
 80095e8:	6909      	ldr	r1, [r1, #16]
 80095ea:	eba5 0901 	sub.w	r9, r5, r1
 80095ee:	6965      	ldr	r5, [r4, #20]
 80095f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095f8:	3301      	adds	r3, #1
 80095fa:	444b      	add	r3, r9
 80095fc:	106d      	asrs	r5, r5, #1
 80095fe:	429d      	cmp	r5, r3
 8009600:	bf38      	it	cc
 8009602:	461d      	movcc	r5, r3
 8009604:	0553      	lsls	r3, r2, #21
 8009606:	d531      	bpl.n	800966c <__ssputs_r+0xa0>
 8009608:	4629      	mov	r1, r5
 800960a:	f7ff ff6b 	bl	80094e4 <_malloc_r>
 800960e:	4606      	mov	r6, r0
 8009610:	b950      	cbnz	r0, 8009628 <__ssputs_r+0x5c>
 8009612:	230c      	movs	r3, #12
 8009614:	f8ca 3000 	str.w	r3, [sl]
 8009618:	89a3      	ldrh	r3, [r4, #12]
 800961a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800961e:	81a3      	strh	r3, [r4, #12]
 8009620:	f04f 30ff 	mov.w	r0, #4294967295
 8009624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009628:	6921      	ldr	r1, [r4, #16]
 800962a:	464a      	mov	r2, r9
 800962c:	f7fd feec 	bl	8007408 <memcpy>
 8009630:	89a3      	ldrh	r3, [r4, #12]
 8009632:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800963a:	81a3      	strh	r3, [r4, #12]
 800963c:	6126      	str	r6, [r4, #16]
 800963e:	6165      	str	r5, [r4, #20]
 8009640:	444e      	add	r6, r9
 8009642:	eba5 0509 	sub.w	r5, r5, r9
 8009646:	6026      	str	r6, [r4, #0]
 8009648:	60a5      	str	r5, [r4, #8]
 800964a:	463e      	mov	r6, r7
 800964c:	42be      	cmp	r6, r7
 800964e:	d900      	bls.n	8009652 <__ssputs_r+0x86>
 8009650:	463e      	mov	r6, r7
 8009652:	6820      	ldr	r0, [r4, #0]
 8009654:	4632      	mov	r2, r6
 8009656:	4641      	mov	r1, r8
 8009658:	f7fd fee4 	bl	8007424 <memmove>
 800965c:	68a3      	ldr	r3, [r4, #8]
 800965e:	1b9b      	subs	r3, r3, r6
 8009660:	60a3      	str	r3, [r4, #8]
 8009662:	6823      	ldr	r3, [r4, #0]
 8009664:	4433      	add	r3, r6
 8009666:	6023      	str	r3, [r4, #0]
 8009668:	2000      	movs	r0, #0
 800966a:	e7db      	b.n	8009624 <__ssputs_r+0x58>
 800966c:	462a      	mov	r2, r5
 800966e:	f000 fd21 	bl	800a0b4 <_realloc_r>
 8009672:	4606      	mov	r6, r0
 8009674:	2800      	cmp	r0, #0
 8009676:	d1e1      	bne.n	800963c <__ssputs_r+0x70>
 8009678:	6921      	ldr	r1, [r4, #16]
 800967a:	4650      	mov	r0, sl
 800967c:	f7ff fec6 	bl	800940c <_free_r>
 8009680:	e7c7      	b.n	8009612 <__ssputs_r+0x46>
	...

08009684 <_svfiprintf_r>:
 8009684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009688:	4698      	mov	r8, r3
 800968a:	898b      	ldrh	r3, [r1, #12]
 800968c:	061b      	lsls	r3, r3, #24
 800968e:	b09d      	sub	sp, #116	; 0x74
 8009690:	4607      	mov	r7, r0
 8009692:	460d      	mov	r5, r1
 8009694:	4614      	mov	r4, r2
 8009696:	d50e      	bpl.n	80096b6 <_svfiprintf_r+0x32>
 8009698:	690b      	ldr	r3, [r1, #16]
 800969a:	b963      	cbnz	r3, 80096b6 <_svfiprintf_r+0x32>
 800969c:	2140      	movs	r1, #64	; 0x40
 800969e:	f7ff ff21 	bl	80094e4 <_malloc_r>
 80096a2:	6028      	str	r0, [r5, #0]
 80096a4:	6128      	str	r0, [r5, #16]
 80096a6:	b920      	cbnz	r0, 80096b2 <_svfiprintf_r+0x2e>
 80096a8:	230c      	movs	r3, #12
 80096aa:	603b      	str	r3, [r7, #0]
 80096ac:	f04f 30ff 	mov.w	r0, #4294967295
 80096b0:	e0d1      	b.n	8009856 <_svfiprintf_r+0x1d2>
 80096b2:	2340      	movs	r3, #64	; 0x40
 80096b4:	616b      	str	r3, [r5, #20]
 80096b6:	2300      	movs	r3, #0
 80096b8:	9309      	str	r3, [sp, #36]	; 0x24
 80096ba:	2320      	movs	r3, #32
 80096bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80096c4:	2330      	movs	r3, #48	; 0x30
 80096c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009870 <_svfiprintf_r+0x1ec>
 80096ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096ce:	f04f 0901 	mov.w	r9, #1
 80096d2:	4623      	mov	r3, r4
 80096d4:	469a      	mov	sl, r3
 80096d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096da:	b10a      	cbz	r2, 80096e0 <_svfiprintf_r+0x5c>
 80096dc:	2a25      	cmp	r2, #37	; 0x25
 80096de:	d1f9      	bne.n	80096d4 <_svfiprintf_r+0x50>
 80096e0:	ebba 0b04 	subs.w	fp, sl, r4
 80096e4:	d00b      	beq.n	80096fe <_svfiprintf_r+0x7a>
 80096e6:	465b      	mov	r3, fp
 80096e8:	4622      	mov	r2, r4
 80096ea:	4629      	mov	r1, r5
 80096ec:	4638      	mov	r0, r7
 80096ee:	f7ff ff6d 	bl	80095cc <__ssputs_r>
 80096f2:	3001      	adds	r0, #1
 80096f4:	f000 80aa 	beq.w	800984c <_svfiprintf_r+0x1c8>
 80096f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096fa:	445a      	add	r2, fp
 80096fc:	9209      	str	r2, [sp, #36]	; 0x24
 80096fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009702:	2b00      	cmp	r3, #0
 8009704:	f000 80a2 	beq.w	800984c <_svfiprintf_r+0x1c8>
 8009708:	2300      	movs	r3, #0
 800970a:	f04f 32ff 	mov.w	r2, #4294967295
 800970e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009712:	f10a 0a01 	add.w	sl, sl, #1
 8009716:	9304      	str	r3, [sp, #16]
 8009718:	9307      	str	r3, [sp, #28]
 800971a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800971e:	931a      	str	r3, [sp, #104]	; 0x68
 8009720:	4654      	mov	r4, sl
 8009722:	2205      	movs	r2, #5
 8009724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009728:	4851      	ldr	r0, [pc, #324]	; (8009870 <_svfiprintf_r+0x1ec>)
 800972a:	f7f6 fd59 	bl	80001e0 <memchr>
 800972e:	9a04      	ldr	r2, [sp, #16]
 8009730:	b9d8      	cbnz	r0, 800976a <_svfiprintf_r+0xe6>
 8009732:	06d0      	lsls	r0, r2, #27
 8009734:	bf44      	itt	mi
 8009736:	2320      	movmi	r3, #32
 8009738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800973c:	0711      	lsls	r1, r2, #28
 800973e:	bf44      	itt	mi
 8009740:	232b      	movmi	r3, #43	; 0x2b
 8009742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009746:	f89a 3000 	ldrb.w	r3, [sl]
 800974a:	2b2a      	cmp	r3, #42	; 0x2a
 800974c:	d015      	beq.n	800977a <_svfiprintf_r+0xf6>
 800974e:	9a07      	ldr	r2, [sp, #28]
 8009750:	4654      	mov	r4, sl
 8009752:	2000      	movs	r0, #0
 8009754:	f04f 0c0a 	mov.w	ip, #10
 8009758:	4621      	mov	r1, r4
 800975a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800975e:	3b30      	subs	r3, #48	; 0x30
 8009760:	2b09      	cmp	r3, #9
 8009762:	d94e      	bls.n	8009802 <_svfiprintf_r+0x17e>
 8009764:	b1b0      	cbz	r0, 8009794 <_svfiprintf_r+0x110>
 8009766:	9207      	str	r2, [sp, #28]
 8009768:	e014      	b.n	8009794 <_svfiprintf_r+0x110>
 800976a:	eba0 0308 	sub.w	r3, r0, r8
 800976e:	fa09 f303 	lsl.w	r3, r9, r3
 8009772:	4313      	orrs	r3, r2
 8009774:	9304      	str	r3, [sp, #16]
 8009776:	46a2      	mov	sl, r4
 8009778:	e7d2      	b.n	8009720 <_svfiprintf_r+0x9c>
 800977a:	9b03      	ldr	r3, [sp, #12]
 800977c:	1d19      	adds	r1, r3, #4
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	9103      	str	r1, [sp, #12]
 8009782:	2b00      	cmp	r3, #0
 8009784:	bfbb      	ittet	lt
 8009786:	425b      	neglt	r3, r3
 8009788:	f042 0202 	orrlt.w	r2, r2, #2
 800978c:	9307      	strge	r3, [sp, #28]
 800978e:	9307      	strlt	r3, [sp, #28]
 8009790:	bfb8      	it	lt
 8009792:	9204      	strlt	r2, [sp, #16]
 8009794:	7823      	ldrb	r3, [r4, #0]
 8009796:	2b2e      	cmp	r3, #46	; 0x2e
 8009798:	d10c      	bne.n	80097b4 <_svfiprintf_r+0x130>
 800979a:	7863      	ldrb	r3, [r4, #1]
 800979c:	2b2a      	cmp	r3, #42	; 0x2a
 800979e:	d135      	bne.n	800980c <_svfiprintf_r+0x188>
 80097a0:	9b03      	ldr	r3, [sp, #12]
 80097a2:	1d1a      	adds	r2, r3, #4
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	9203      	str	r2, [sp, #12]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	bfb8      	it	lt
 80097ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80097b0:	3402      	adds	r4, #2
 80097b2:	9305      	str	r3, [sp, #20]
 80097b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009880 <_svfiprintf_r+0x1fc>
 80097b8:	7821      	ldrb	r1, [r4, #0]
 80097ba:	2203      	movs	r2, #3
 80097bc:	4650      	mov	r0, sl
 80097be:	f7f6 fd0f 	bl	80001e0 <memchr>
 80097c2:	b140      	cbz	r0, 80097d6 <_svfiprintf_r+0x152>
 80097c4:	2340      	movs	r3, #64	; 0x40
 80097c6:	eba0 000a 	sub.w	r0, r0, sl
 80097ca:	fa03 f000 	lsl.w	r0, r3, r0
 80097ce:	9b04      	ldr	r3, [sp, #16]
 80097d0:	4303      	orrs	r3, r0
 80097d2:	3401      	adds	r4, #1
 80097d4:	9304      	str	r3, [sp, #16]
 80097d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097da:	4826      	ldr	r0, [pc, #152]	; (8009874 <_svfiprintf_r+0x1f0>)
 80097dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097e0:	2206      	movs	r2, #6
 80097e2:	f7f6 fcfd 	bl	80001e0 <memchr>
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d038      	beq.n	800985c <_svfiprintf_r+0x1d8>
 80097ea:	4b23      	ldr	r3, [pc, #140]	; (8009878 <_svfiprintf_r+0x1f4>)
 80097ec:	bb1b      	cbnz	r3, 8009836 <_svfiprintf_r+0x1b2>
 80097ee:	9b03      	ldr	r3, [sp, #12]
 80097f0:	3307      	adds	r3, #7
 80097f2:	f023 0307 	bic.w	r3, r3, #7
 80097f6:	3308      	adds	r3, #8
 80097f8:	9303      	str	r3, [sp, #12]
 80097fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097fc:	4433      	add	r3, r6
 80097fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009800:	e767      	b.n	80096d2 <_svfiprintf_r+0x4e>
 8009802:	fb0c 3202 	mla	r2, ip, r2, r3
 8009806:	460c      	mov	r4, r1
 8009808:	2001      	movs	r0, #1
 800980a:	e7a5      	b.n	8009758 <_svfiprintf_r+0xd4>
 800980c:	2300      	movs	r3, #0
 800980e:	3401      	adds	r4, #1
 8009810:	9305      	str	r3, [sp, #20]
 8009812:	4619      	mov	r1, r3
 8009814:	f04f 0c0a 	mov.w	ip, #10
 8009818:	4620      	mov	r0, r4
 800981a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800981e:	3a30      	subs	r2, #48	; 0x30
 8009820:	2a09      	cmp	r2, #9
 8009822:	d903      	bls.n	800982c <_svfiprintf_r+0x1a8>
 8009824:	2b00      	cmp	r3, #0
 8009826:	d0c5      	beq.n	80097b4 <_svfiprintf_r+0x130>
 8009828:	9105      	str	r1, [sp, #20]
 800982a:	e7c3      	b.n	80097b4 <_svfiprintf_r+0x130>
 800982c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009830:	4604      	mov	r4, r0
 8009832:	2301      	movs	r3, #1
 8009834:	e7f0      	b.n	8009818 <_svfiprintf_r+0x194>
 8009836:	ab03      	add	r3, sp, #12
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	462a      	mov	r2, r5
 800983c:	4b0f      	ldr	r3, [pc, #60]	; (800987c <_svfiprintf_r+0x1f8>)
 800983e:	a904      	add	r1, sp, #16
 8009840:	4638      	mov	r0, r7
 8009842:	f7fd feb1 	bl	80075a8 <_printf_float>
 8009846:	1c42      	adds	r2, r0, #1
 8009848:	4606      	mov	r6, r0
 800984a:	d1d6      	bne.n	80097fa <_svfiprintf_r+0x176>
 800984c:	89ab      	ldrh	r3, [r5, #12]
 800984e:	065b      	lsls	r3, r3, #25
 8009850:	f53f af2c 	bmi.w	80096ac <_svfiprintf_r+0x28>
 8009854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009856:	b01d      	add	sp, #116	; 0x74
 8009858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800985c:	ab03      	add	r3, sp, #12
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	462a      	mov	r2, r5
 8009862:	4b06      	ldr	r3, [pc, #24]	; (800987c <_svfiprintf_r+0x1f8>)
 8009864:	a904      	add	r1, sp, #16
 8009866:	4638      	mov	r0, r7
 8009868:	f7fe f942 	bl	8007af0 <_printf_i>
 800986c:	e7eb      	b.n	8009846 <_svfiprintf_r+0x1c2>
 800986e:	bf00      	nop
 8009870:	0800fcd4 	.word	0x0800fcd4
 8009874:	0800fcde 	.word	0x0800fcde
 8009878:	080075a9 	.word	0x080075a9
 800987c:	080095cd 	.word	0x080095cd
 8009880:	0800fcda 	.word	0x0800fcda

08009884 <__sfputc_r>:
 8009884:	6893      	ldr	r3, [r2, #8]
 8009886:	3b01      	subs	r3, #1
 8009888:	2b00      	cmp	r3, #0
 800988a:	b410      	push	{r4}
 800988c:	6093      	str	r3, [r2, #8]
 800988e:	da08      	bge.n	80098a2 <__sfputc_r+0x1e>
 8009890:	6994      	ldr	r4, [r2, #24]
 8009892:	42a3      	cmp	r3, r4
 8009894:	db01      	blt.n	800989a <__sfputc_r+0x16>
 8009896:	290a      	cmp	r1, #10
 8009898:	d103      	bne.n	80098a2 <__sfputc_r+0x1e>
 800989a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800989e:	f000 b99f 	b.w	8009be0 <__swbuf_r>
 80098a2:	6813      	ldr	r3, [r2, #0]
 80098a4:	1c58      	adds	r0, r3, #1
 80098a6:	6010      	str	r0, [r2, #0]
 80098a8:	7019      	strb	r1, [r3, #0]
 80098aa:	4608      	mov	r0, r1
 80098ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <__sfputs_r>:
 80098b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b4:	4606      	mov	r6, r0
 80098b6:	460f      	mov	r7, r1
 80098b8:	4614      	mov	r4, r2
 80098ba:	18d5      	adds	r5, r2, r3
 80098bc:	42ac      	cmp	r4, r5
 80098be:	d101      	bne.n	80098c4 <__sfputs_r+0x12>
 80098c0:	2000      	movs	r0, #0
 80098c2:	e007      	b.n	80098d4 <__sfputs_r+0x22>
 80098c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098c8:	463a      	mov	r2, r7
 80098ca:	4630      	mov	r0, r6
 80098cc:	f7ff ffda 	bl	8009884 <__sfputc_r>
 80098d0:	1c43      	adds	r3, r0, #1
 80098d2:	d1f3      	bne.n	80098bc <__sfputs_r+0xa>
 80098d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098d8 <_vfiprintf_r>:
 80098d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098dc:	460d      	mov	r5, r1
 80098de:	b09d      	sub	sp, #116	; 0x74
 80098e0:	4614      	mov	r4, r2
 80098e2:	4698      	mov	r8, r3
 80098e4:	4606      	mov	r6, r0
 80098e6:	b118      	cbz	r0, 80098f0 <_vfiprintf_r+0x18>
 80098e8:	6983      	ldr	r3, [r0, #24]
 80098ea:	b90b      	cbnz	r3, 80098f0 <_vfiprintf_r+0x18>
 80098ec:	f7ff f946 	bl	8008b7c <__sinit>
 80098f0:	4b89      	ldr	r3, [pc, #548]	; (8009b18 <_vfiprintf_r+0x240>)
 80098f2:	429d      	cmp	r5, r3
 80098f4:	d11b      	bne.n	800992e <_vfiprintf_r+0x56>
 80098f6:	6875      	ldr	r5, [r6, #4]
 80098f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098fa:	07d9      	lsls	r1, r3, #31
 80098fc:	d405      	bmi.n	800990a <_vfiprintf_r+0x32>
 80098fe:	89ab      	ldrh	r3, [r5, #12]
 8009900:	059a      	lsls	r2, r3, #22
 8009902:	d402      	bmi.n	800990a <_vfiprintf_r+0x32>
 8009904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009906:	f7ff f9dc 	bl	8008cc2 <__retarget_lock_acquire_recursive>
 800990a:	89ab      	ldrh	r3, [r5, #12]
 800990c:	071b      	lsls	r3, r3, #28
 800990e:	d501      	bpl.n	8009914 <_vfiprintf_r+0x3c>
 8009910:	692b      	ldr	r3, [r5, #16]
 8009912:	b9eb      	cbnz	r3, 8009950 <_vfiprintf_r+0x78>
 8009914:	4629      	mov	r1, r5
 8009916:	4630      	mov	r0, r6
 8009918:	f000 f9c6 	bl	8009ca8 <__swsetup_r>
 800991c:	b1c0      	cbz	r0, 8009950 <_vfiprintf_r+0x78>
 800991e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009920:	07dc      	lsls	r4, r3, #31
 8009922:	d50e      	bpl.n	8009942 <_vfiprintf_r+0x6a>
 8009924:	f04f 30ff 	mov.w	r0, #4294967295
 8009928:	b01d      	add	sp, #116	; 0x74
 800992a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800992e:	4b7b      	ldr	r3, [pc, #492]	; (8009b1c <_vfiprintf_r+0x244>)
 8009930:	429d      	cmp	r5, r3
 8009932:	d101      	bne.n	8009938 <_vfiprintf_r+0x60>
 8009934:	68b5      	ldr	r5, [r6, #8]
 8009936:	e7df      	b.n	80098f8 <_vfiprintf_r+0x20>
 8009938:	4b79      	ldr	r3, [pc, #484]	; (8009b20 <_vfiprintf_r+0x248>)
 800993a:	429d      	cmp	r5, r3
 800993c:	bf08      	it	eq
 800993e:	68f5      	ldreq	r5, [r6, #12]
 8009940:	e7da      	b.n	80098f8 <_vfiprintf_r+0x20>
 8009942:	89ab      	ldrh	r3, [r5, #12]
 8009944:	0598      	lsls	r0, r3, #22
 8009946:	d4ed      	bmi.n	8009924 <_vfiprintf_r+0x4c>
 8009948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800994a:	f7ff f9bb 	bl	8008cc4 <__retarget_lock_release_recursive>
 800994e:	e7e9      	b.n	8009924 <_vfiprintf_r+0x4c>
 8009950:	2300      	movs	r3, #0
 8009952:	9309      	str	r3, [sp, #36]	; 0x24
 8009954:	2320      	movs	r3, #32
 8009956:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800995a:	f8cd 800c 	str.w	r8, [sp, #12]
 800995e:	2330      	movs	r3, #48	; 0x30
 8009960:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009b24 <_vfiprintf_r+0x24c>
 8009964:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009968:	f04f 0901 	mov.w	r9, #1
 800996c:	4623      	mov	r3, r4
 800996e:	469a      	mov	sl, r3
 8009970:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009974:	b10a      	cbz	r2, 800997a <_vfiprintf_r+0xa2>
 8009976:	2a25      	cmp	r2, #37	; 0x25
 8009978:	d1f9      	bne.n	800996e <_vfiprintf_r+0x96>
 800997a:	ebba 0b04 	subs.w	fp, sl, r4
 800997e:	d00b      	beq.n	8009998 <_vfiprintf_r+0xc0>
 8009980:	465b      	mov	r3, fp
 8009982:	4622      	mov	r2, r4
 8009984:	4629      	mov	r1, r5
 8009986:	4630      	mov	r0, r6
 8009988:	f7ff ff93 	bl	80098b2 <__sfputs_r>
 800998c:	3001      	adds	r0, #1
 800998e:	f000 80aa 	beq.w	8009ae6 <_vfiprintf_r+0x20e>
 8009992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009994:	445a      	add	r2, fp
 8009996:	9209      	str	r2, [sp, #36]	; 0x24
 8009998:	f89a 3000 	ldrb.w	r3, [sl]
 800999c:	2b00      	cmp	r3, #0
 800999e:	f000 80a2 	beq.w	8009ae6 <_vfiprintf_r+0x20e>
 80099a2:	2300      	movs	r3, #0
 80099a4:	f04f 32ff 	mov.w	r2, #4294967295
 80099a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099ac:	f10a 0a01 	add.w	sl, sl, #1
 80099b0:	9304      	str	r3, [sp, #16]
 80099b2:	9307      	str	r3, [sp, #28]
 80099b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099b8:	931a      	str	r3, [sp, #104]	; 0x68
 80099ba:	4654      	mov	r4, sl
 80099bc:	2205      	movs	r2, #5
 80099be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099c2:	4858      	ldr	r0, [pc, #352]	; (8009b24 <_vfiprintf_r+0x24c>)
 80099c4:	f7f6 fc0c 	bl	80001e0 <memchr>
 80099c8:	9a04      	ldr	r2, [sp, #16]
 80099ca:	b9d8      	cbnz	r0, 8009a04 <_vfiprintf_r+0x12c>
 80099cc:	06d1      	lsls	r1, r2, #27
 80099ce:	bf44      	itt	mi
 80099d0:	2320      	movmi	r3, #32
 80099d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099d6:	0713      	lsls	r3, r2, #28
 80099d8:	bf44      	itt	mi
 80099da:	232b      	movmi	r3, #43	; 0x2b
 80099dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099e0:	f89a 3000 	ldrb.w	r3, [sl]
 80099e4:	2b2a      	cmp	r3, #42	; 0x2a
 80099e6:	d015      	beq.n	8009a14 <_vfiprintf_r+0x13c>
 80099e8:	9a07      	ldr	r2, [sp, #28]
 80099ea:	4654      	mov	r4, sl
 80099ec:	2000      	movs	r0, #0
 80099ee:	f04f 0c0a 	mov.w	ip, #10
 80099f2:	4621      	mov	r1, r4
 80099f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099f8:	3b30      	subs	r3, #48	; 0x30
 80099fa:	2b09      	cmp	r3, #9
 80099fc:	d94e      	bls.n	8009a9c <_vfiprintf_r+0x1c4>
 80099fe:	b1b0      	cbz	r0, 8009a2e <_vfiprintf_r+0x156>
 8009a00:	9207      	str	r2, [sp, #28]
 8009a02:	e014      	b.n	8009a2e <_vfiprintf_r+0x156>
 8009a04:	eba0 0308 	sub.w	r3, r0, r8
 8009a08:	fa09 f303 	lsl.w	r3, r9, r3
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	9304      	str	r3, [sp, #16]
 8009a10:	46a2      	mov	sl, r4
 8009a12:	e7d2      	b.n	80099ba <_vfiprintf_r+0xe2>
 8009a14:	9b03      	ldr	r3, [sp, #12]
 8009a16:	1d19      	adds	r1, r3, #4
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	9103      	str	r1, [sp, #12]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	bfbb      	ittet	lt
 8009a20:	425b      	neglt	r3, r3
 8009a22:	f042 0202 	orrlt.w	r2, r2, #2
 8009a26:	9307      	strge	r3, [sp, #28]
 8009a28:	9307      	strlt	r3, [sp, #28]
 8009a2a:	bfb8      	it	lt
 8009a2c:	9204      	strlt	r2, [sp, #16]
 8009a2e:	7823      	ldrb	r3, [r4, #0]
 8009a30:	2b2e      	cmp	r3, #46	; 0x2e
 8009a32:	d10c      	bne.n	8009a4e <_vfiprintf_r+0x176>
 8009a34:	7863      	ldrb	r3, [r4, #1]
 8009a36:	2b2a      	cmp	r3, #42	; 0x2a
 8009a38:	d135      	bne.n	8009aa6 <_vfiprintf_r+0x1ce>
 8009a3a:	9b03      	ldr	r3, [sp, #12]
 8009a3c:	1d1a      	adds	r2, r3, #4
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	9203      	str	r2, [sp, #12]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	bfb8      	it	lt
 8009a46:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a4a:	3402      	adds	r4, #2
 8009a4c:	9305      	str	r3, [sp, #20]
 8009a4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009b34 <_vfiprintf_r+0x25c>
 8009a52:	7821      	ldrb	r1, [r4, #0]
 8009a54:	2203      	movs	r2, #3
 8009a56:	4650      	mov	r0, sl
 8009a58:	f7f6 fbc2 	bl	80001e0 <memchr>
 8009a5c:	b140      	cbz	r0, 8009a70 <_vfiprintf_r+0x198>
 8009a5e:	2340      	movs	r3, #64	; 0x40
 8009a60:	eba0 000a 	sub.w	r0, r0, sl
 8009a64:	fa03 f000 	lsl.w	r0, r3, r0
 8009a68:	9b04      	ldr	r3, [sp, #16]
 8009a6a:	4303      	orrs	r3, r0
 8009a6c:	3401      	adds	r4, #1
 8009a6e:	9304      	str	r3, [sp, #16]
 8009a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a74:	482c      	ldr	r0, [pc, #176]	; (8009b28 <_vfiprintf_r+0x250>)
 8009a76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a7a:	2206      	movs	r2, #6
 8009a7c:	f7f6 fbb0 	bl	80001e0 <memchr>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d03f      	beq.n	8009b04 <_vfiprintf_r+0x22c>
 8009a84:	4b29      	ldr	r3, [pc, #164]	; (8009b2c <_vfiprintf_r+0x254>)
 8009a86:	bb1b      	cbnz	r3, 8009ad0 <_vfiprintf_r+0x1f8>
 8009a88:	9b03      	ldr	r3, [sp, #12]
 8009a8a:	3307      	adds	r3, #7
 8009a8c:	f023 0307 	bic.w	r3, r3, #7
 8009a90:	3308      	adds	r3, #8
 8009a92:	9303      	str	r3, [sp, #12]
 8009a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a96:	443b      	add	r3, r7
 8009a98:	9309      	str	r3, [sp, #36]	; 0x24
 8009a9a:	e767      	b.n	800996c <_vfiprintf_r+0x94>
 8009a9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009aa0:	460c      	mov	r4, r1
 8009aa2:	2001      	movs	r0, #1
 8009aa4:	e7a5      	b.n	80099f2 <_vfiprintf_r+0x11a>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	3401      	adds	r4, #1
 8009aaa:	9305      	str	r3, [sp, #20]
 8009aac:	4619      	mov	r1, r3
 8009aae:	f04f 0c0a 	mov.w	ip, #10
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ab8:	3a30      	subs	r2, #48	; 0x30
 8009aba:	2a09      	cmp	r2, #9
 8009abc:	d903      	bls.n	8009ac6 <_vfiprintf_r+0x1ee>
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d0c5      	beq.n	8009a4e <_vfiprintf_r+0x176>
 8009ac2:	9105      	str	r1, [sp, #20]
 8009ac4:	e7c3      	b.n	8009a4e <_vfiprintf_r+0x176>
 8009ac6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009aca:	4604      	mov	r4, r0
 8009acc:	2301      	movs	r3, #1
 8009ace:	e7f0      	b.n	8009ab2 <_vfiprintf_r+0x1da>
 8009ad0:	ab03      	add	r3, sp, #12
 8009ad2:	9300      	str	r3, [sp, #0]
 8009ad4:	462a      	mov	r2, r5
 8009ad6:	4b16      	ldr	r3, [pc, #88]	; (8009b30 <_vfiprintf_r+0x258>)
 8009ad8:	a904      	add	r1, sp, #16
 8009ada:	4630      	mov	r0, r6
 8009adc:	f7fd fd64 	bl	80075a8 <_printf_float>
 8009ae0:	4607      	mov	r7, r0
 8009ae2:	1c78      	adds	r0, r7, #1
 8009ae4:	d1d6      	bne.n	8009a94 <_vfiprintf_r+0x1bc>
 8009ae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ae8:	07d9      	lsls	r1, r3, #31
 8009aea:	d405      	bmi.n	8009af8 <_vfiprintf_r+0x220>
 8009aec:	89ab      	ldrh	r3, [r5, #12]
 8009aee:	059a      	lsls	r2, r3, #22
 8009af0:	d402      	bmi.n	8009af8 <_vfiprintf_r+0x220>
 8009af2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009af4:	f7ff f8e6 	bl	8008cc4 <__retarget_lock_release_recursive>
 8009af8:	89ab      	ldrh	r3, [r5, #12]
 8009afa:	065b      	lsls	r3, r3, #25
 8009afc:	f53f af12 	bmi.w	8009924 <_vfiprintf_r+0x4c>
 8009b00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b02:	e711      	b.n	8009928 <_vfiprintf_r+0x50>
 8009b04:	ab03      	add	r3, sp, #12
 8009b06:	9300      	str	r3, [sp, #0]
 8009b08:	462a      	mov	r2, r5
 8009b0a:	4b09      	ldr	r3, [pc, #36]	; (8009b30 <_vfiprintf_r+0x258>)
 8009b0c:	a904      	add	r1, sp, #16
 8009b0e:	4630      	mov	r0, r6
 8009b10:	f7fd ffee 	bl	8007af0 <_printf_i>
 8009b14:	e7e4      	b.n	8009ae0 <_vfiprintf_r+0x208>
 8009b16:	bf00      	nop
 8009b18:	0800fb3c 	.word	0x0800fb3c
 8009b1c:	0800fb5c 	.word	0x0800fb5c
 8009b20:	0800fb1c 	.word	0x0800fb1c
 8009b24:	0800fcd4 	.word	0x0800fcd4
 8009b28:	0800fcde 	.word	0x0800fcde
 8009b2c:	080075a9 	.word	0x080075a9
 8009b30:	080098b3 	.word	0x080098b3
 8009b34:	0800fcda 	.word	0x0800fcda

08009b38 <_sbrk_r>:
 8009b38:	b538      	push	{r3, r4, r5, lr}
 8009b3a:	4d06      	ldr	r5, [pc, #24]	; (8009b54 <_sbrk_r+0x1c>)
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	4604      	mov	r4, r0
 8009b40:	4608      	mov	r0, r1
 8009b42:	602b      	str	r3, [r5, #0]
 8009b44:	f7f7 fedc 	bl	8001900 <_sbrk>
 8009b48:	1c43      	adds	r3, r0, #1
 8009b4a:	d102      	bne.n	8009b52 <_sbrk_r+0x1a>
 8009b4c:	682b      	ldr	r3, [r5, #0]
 8009b4e:	b103      	cbz	r3, 8009b52 <_sbrk_r+0x1a>
 8009b50:	6023      	str	r3, [r4, #0]
 8009b52:	bd38      	pop	{r3, r4, r5, pc}
 8009b54:	20000844 	.word	0x20000844

08009b58 <__sread>:
 8009b58:	b510      	push	{r4, lr}
 8009b5a:	460c      	mov	r4, r1
 8009b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b60:	f000 fad8 	bl	800a114 <_read_r>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	bfab      	itete	ge
 8009b68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b6a:	89a3      	ldrhlt	r3, [r4, #12]
 8009b6c:	181b      	addge	r3, r3, r0
 8009b6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b72:	bfac      	ite	ge
 8009b74:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b76:	81a3      	strhlt	r3, [r4, #12]
 8009b78:	bd10      	pop	{r4, pc}

08009b7a <__swrite>:
 8009b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b7e:	461f      	mov	r7, r3
 8009b80:	898b      	ldrh	r3, [r1, #12]
 8009b82:	05db      	lsls	r3, r3, #23
 8009b84:	4605      	mov	r5, r0
 8009b86:	460c      	mov	r4, r1
 8009b88:	4616      	mov	r6, r2
 8009b8a:	d505      	bpl.n	8009b98 <__swrite+0x1e>
 8009b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b90:	2302      	movs	r3, #2
 8009b92:	2200      	movs	r2, #0
 8009b94:	f000 f9f8 	bl	8009f88 <_lseek_r>
 8009b98:	89a3      	ldrh	r3, [r4, #12]
 8009b9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ba2:	81a3      	strh	r3, [r4, #12]
 8009ba4:	4632      	mov	r2, r6
 8009ba6:	463b      	mov	r3, r7
 8009ba8:	4628      	mov	r0, r5
 8009baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bae:	f000 b869 	b.w	8009c84 <_write_r>

08009bb2 <__sseek>:
 8009bb2:	b510      	push	{r4, lr}
 8009bb4:	460c      	mov	r4, r1
 8009bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bba:	f000 f9e5 	bl	8009f88 <_lseek_r>
 8009bbe:	1c43      	adds	r3, r0, #1
 8009bc0:	89a3      	ldrh	r3, [r4, #12]
 8009bc2:	bf15      	itete	ne
 8009bc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009bc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009bca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009bce:	81a3      	strheq	r3, [r4, #12]
 8009bd0:	bf18      	it	ne
 8009bd2:	81a3      	strhne	r3, [r4, #12]
 8009bd4:	bd10      	pop	{r4, pc}

08009bd6 <__sclose>:
 8009bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bda:	f000 b8f1 	b.w	8009dc0 <_close_r>
	...

08009be0 <__swbuf_r>:
 8009be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009be2:	460e      	mov	r6, r1
 8009be4:	4614      	mov	r4, r2
 8009be6:	4605      	mov	r5, r0
 8009be8:	b118      	cbz	r0, 8009bf2 <__swbuf_r+0x12>
 8009bea:	6983      	ldr	r3, [r0, #24]
 8009bec:	b90b      	cbnz	r3, 8009bf2 <__swbuf_r+0x12>
 8009bee:	f7fe ffc5 	bl	8008b7c <__sinit>
 8009bf2:	4b21      	ldr	r3, [pc, #132]	; (8009c78 <__swbuf_r+0x98>)
 8009bf4:	429c      	cmp	r4, r3
 8009bf6:	d12b      	bne.n	8009c50 <__swbuf_r+0x70>
 8009bf8:	686c      	ldr	r4, [r5, #4]
 8009bfa:	69a3      	ldr	r3, [r4, #24]
 8009bfc:	60a3      	str	r3, [r4, #8]
 8009bfe:	89a3      	ldrh	r3, [r4, #12]
 8009c00:	071a      	lsls	r2, r3, #28
 8009c02:	d52f      	bpl.n	8009c64 <__swbuf_r+0x84>
 8009c04:	6923      	ldr	r3, [r4, #16]
 8009c06:	b36b      	cbz	r3, 8009c64 <__swbuf_r+0x84>
 8009c08:	6923      	ldr	r3, [r4, #16]
 8009c0a:	6820      	ldr	r0, [r4, #0]
 8009c0c:	1ac0      	subs	r0, r0, r3
 8009c0e:	6963      	ldr	r3, [r4, #20]
 8009c10:	b2f6      	uxtb	r6, r6
 8009c12:	4283      	cmp	r3, r0
 8009c14:	4637      	mov	r7, r6
 8009c16:	dc04      	bgt.n	8009c22 <__swbuf_r+0x42>
 8009c18:	4621      	mov	r1, r4
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	f000 f966 	bl	8009eec <_fflush_r>
 8009c20:	bb30      	cbnz	r0, 8009c70 <__swbuf_r+0x90>
 8009c22:	68a3      	ldr	r3, [r4, #8]
 8009c24:	3b01      	subs	r3, #1
 8009c26:	60a3      	str	r3, [r4, #8]
 8009c28:	6823      	ldr	r3, [r4, #0]
 8009c2a:	1c5a      	adds	r2, r3, #1
 8009c2c:	6022      	str	r2, [r4, #0]
 8009c2e:	701e      	strb	r6, [r3, #0]
 8009c30:	6963      	ldr	r3, [r4, #20]
 8009c32:	3001      	adds	r0, #1
 8009c34:	4283      	cmp	r3, r0
 8009c36:	d004      	beq.n	8009c42 <__swbuf_r+0x62>
 8009c38:	89a3      	ldrh	r3, [r4, #12]
 8009c3a:	07db      	lsls	r3, r3, #31
 8009c3c:	d506      	bpl.n	8009c4c <__swbuf_r+0x6c>
 8009c3e:	2e0a      	cmp	r6, #10
 8009c40:	d104      	bne.n	8009c4c <__swbuf_r+0x6c>
 8009c42:	4621      	mov	r1, r4
 8009c44:	4628      	mov	r0, r5
 8009c46:	f000 f951 	bl	8009eec <_fflush_r>
 8009c4a:	b988      	cbnz	r0, 8009c70 <__swbuf_r+0x90>
 8009c4c:	4638      	mov	r0, r7
 8009c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c50:	4b0a      	ldr	r3, [pc, #40]	; (8009c7c <__swbuf_r+0x9c>)
 8009c52:	429c      	cmp	r4, r3
 8009c54:	d101      	bne.n	8009c5a <__swbuf_r+0x7a>
 8009c56:	68ac      	ldr	r4, [r5, #8]
 8009c58:	e7cf      	b.n	8009bfa <__swbuf_r+0x1a>
 8009c5a:	4b09      	ldr	r3, [pc, #36]	; (8009c80 <__swbuf_r+0xa0>)
 8009c5c:	429c      	cmp	r4, r3
 8009c5e:	bf08      	it	eq
 8009c60:	68ec      	ldreq	r4, [r5, #12]
 8009c62:	e7ca      	b.n	8009bfa <__swbuf_r+0x1a>
 8009c64:	4621      	mov	r1, r4
 8009c66:	4628      	mov	r0, r5
 8009c68:	f000 f81e 	bl	8009ca8 <__swsetup_r>
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	d0cb      	beq.n	8009c08 <__swbuf_r+0x28>
 8009c70:	f04f 37ff 	mov.w	r7, #4294967295
 8009c74:	e7ea      	b.n	8009c4c <__swbuf_r+0x6c>
 8009c76:	bf00      	nop
 8009c78:	0800fb3c 	.word	0x0800fb3c
 8009c7c:	0800fb5c 	.word	0x0800fb5c
 8009c80:	0800fb1c 	.word	0x0800fb1c

08009c84 <_write_r>:
 8009c84:	b538      	push	{r3, r4, r5, lr}
 8009c86:	4d07      	ldr	r5, [pc, #28]	; (8009ca4 <_write_r+0x20>)
 8009c88:	4604      	mov	r4, r0
 8009c8a:	4608      	mov	r0, r1
 8009c8c:	4611      	mov	r1, r2
 8009c8e:	2200      	movs	r2, #0
 8009c90:	602a      	str	r2, [r5, #0]
 8009c92:	461a      	mov	r2, r3
 8009c94:	f7f7 fde3 	bl	800185e <_write>
 8009c98:	1c43      	adds	r3, r0, #1
 8009c9a:	d102      	bne.n	8009ca2 <_write_r+0x1e>
 8009c9c:	682b      	ldr	r3, [r5, #0]
 8009c9e:	b103      	cbz	r3, 8009ca2 <_write_r+0x1e>
 8009ca0:	6023      	str	r3, [r4, #0]
 8009ca2:	bd38      	pop	{r3, r4, r5, pc}
 8009ca4:	20000844 	.word	0x20000844

08009ca8 <__swsetup_r>:
 8009ca8:	4b32      	ldr	r3, [pc, #200]	; (8009d74 <__swsetup_r+0xcc>)
 8009caa:	b570      	push	{r4, r5, r6, lr}
 8009cac:	681d      	ldr	r5, [r3, #0]
 8009cae:	4606      	mov	r6, r0
 8009cb0:	460c      	mov	r4, r1
 8009cb2:	b125      	cbz	r5, 8009cbe <__swsetup_r+0x16>
 8009cb4:	69ab      	ldr	r3, [r5, #24]
 8009cb6:	b913      	cbnz	r3, 8009cbe <__swsetup_r+0x16>
 8009cb8:	4628      	mov	r0, r5
 8009cba:	f7fe ff5f 	bl	8008b7c <__sinit>
 8009cbe:	4b2e      	ldr	r3, [pc, #184]	; (8009d78 <__swsetup_r+0xd0>)
 8009cc0:	429c      	cmp	r4, r3
 8009cc2:	d10f      	bne.n	8009ce4 <__swsetup_r+0x3c>
 8009cc4:	686c      	ldr	r4, [r5, #4]
 8009cc6:	89a3      	ldrh	r3, [r4, #12]
 8009cc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ccc:	0719      	lsls	r1, r3, #28
 8009cce:	d42c      	bmi.n	8009d2a <__swsetup_r+0x82>
 8009cd0:	06dd      	lsls	r5, r3, #27
 8009cd2:	d411      	bmi.n	8009cf8 <__swsetup_r+0x50>
 8009cd4:	2309      	movs	r3, #9
 8009cd6:	6033      	str	r3, [r6, #0]
 8009cd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009cdc:	81a3      	strh	r3, [r4, #12]
 8009cde:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce2:	e03e      	b.n	8009d62 <__swsetup_r+0xba>
 8009ce4:	4b25      	ldr	r3, [pc, #148]	; (8009d7c <__swsetup_r+0xd4>)
 8009ce6:	429c      	cmp	r4, r3
 8009ce8:	d101      	bne.n	8009cee <__swsetup_r+0x46>
 8009cea:	68ac      	ldr	r4, [r5, #8]
 8009cec:	e7eb      	b.n	8009cc6 <__swsetup_r+0x1e>
 8009cee:	4b24      	ldr	r3, [pc, #144]	; (8009d80 <__swsetup_r+0xd8>)
 8009cf0:	429c      	cmp	r4, r3
 8009cf2:	bf08      	it	eq
 8009cf4:	68ec      	ldreq	r4, [r5, #12]
 8009cf6:	e7e6      	b.n	8009cc6 <__swsetup_r+0x1e>
 8009cf8:	0758      	lsls	r0, r3, #29
 8009cfa:	d512      	bpl.n	8009d22 <__swsetup_r+0x7a>
 8009cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cfe:	b141      	cbz	r1, 8009d12 <__swsetup_r+0x6a>
 8009d00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d04:	4299      	cmp	r1, r3
 8009d06:	d002      	beq.n	8009d0e <__swsetup_r+0x66>
 8009d08:	4630      	mov	r0, r6
 8009d0a:	f7ff fb7f 	bl	800940c <_free_r>
 8009d0e:	2300      	movs	r3, #0
 8009d10:	6363      	str	r3, [r4, #52]	; 0x34
 8009d12:	89a3      	ldrh	r3, [r4, #12]
 8009d14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d18:	81a3      	strh	r3, [r4, #12]
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	6063      	str	r3, [r4, #4]
 8009d1e:	6923      	ldr	r3, [r4, #16]
 8009d20:	6023      	str	r3, [r4, #0]
 8009d22:	89a3      	ldrh	r3, [r4, #12]
 8009d24:	f043 0308 	orr.w	r3, r3, #8
 8009d28:	81a3      	strh	r3, [r4, #12]
 8009d2a:	6923      	ldr	r3, [r4, #16]
 8009d2c:	b94b      	cbnz	r3, 8009d42 <__swsetup_r+0x9a>
 8009d2e:	89a3      	ldrh	r3, [r4, #12]
 8009d30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d38:	d003      	beq.n	8009d42 <__swsetup_r+0x9a>
 8009d3a:	4621      	mov	r1, r4
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	f000 f95b 	bl	8009ff8 <__smakebuf_r>
 8009d42:	89a0      	ldrh	r0, [r4, #12]
 8009d44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d48:	f010 0301 	ands.w	r3, r0, #1
 8009d4c:	d00a      	beq.n	8009d64 <__swsetup_r+0xbc>
 8009d4e:	2300      	movs	r3, #0
 8009d50:	60a3      	str	r3, [r4, #8]
 8009d52:	6963      	ldr	r3, [r4, #20]
 8009d54:	425b      	negs	r3, r3
 8009d56:	61a3      	str	r3, [r4, #24]
 8009d58:	6923      	ldr	r3, [r4, #16]
 8009d5a:	b943      	cbnz	r3, 8009d6e <__swsetup_r+0xc6>
 8009d5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d60:	d1ba      	bne.n	8009cd8 <__swsetup_r+0x30>
 8009d62:	bd70      	pop	{r4, r5, r6, pc}
 8009d64:	0781      	lsls	r1, r0, #30
 8009d66:	bf58      	it	pl
 8009d68:	6963      	ldrpl	r3, [r4, #20]
 8009d6a:	60a3      	str	r3, [r4, #8]
 8009d6c:	e7f4      	b.n	8009d58 <__swsetup_r+0xb0>
 8009d6e:	2000      	movs	r0, #0
 8009d70:	e7f7      	b.n	8009d62 <__swsetup_r+0xba>
 8009d72:	bf00      	nop
 8009d74:	20000034 	.word	0x20000034
 8009d78:	0800fb3c 	.word	0x0800fb3c
 8009d7c:	0800fb5c 	.word	0x0800fb5c
 8009d80:	0800fb1c 	.word	0x0800fb1c

08009d84 <__assert_func>:
 8009d84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d86:	4614      	mov	r4, r2
 8009d88:	461a      	mov	r2, r3
 8009d8a:	4b09      	ldr	r3, [pc, #36]	; (8009db0 <__assert_func+0x2c>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4605      	mov	r5, r0
 8009d90:	68d8      	ldr	r0, [r3, #12]
 8009d92:	b14c      	cbz	r4, 8009da8 <__assert_func+0x24>
 8009d94:	4b07      	ldr	r3, [pc, #28]	; (8009db4 <__assert_func+0x30>)
 8009d96:	9100      	str	r1, [sp, #0]
 8009d98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d9c:	4906      	ldr	r1, [pc, #24]	; (8009db8 <__assert_func+0x34>)
 8009d9e:	462b      	mov	r3, r5
 8009da0:	f000 f8e0 	bl	8009f64 <fiprintf>
 8009da4:	f000 f9d5 	bl	800a152 <abort>
 8009da8:	4b04      	ldr	r3, [pc, #16]	; (8009dbc <__assert_func+0x38>)
 8009daa:	461c      	mov	r4, r3
 8009dac:	e7f3      	b.n	8009d96 <__assert_func+0x12>
 8009dae:	bf00      	nop
 8009db0:	20000034 	.word	0x20000034
 8009db4:	0800fce5 	.word	0x0800fce5
 8009db8:	0800fcf2 	.word	0x0800fcf2
 8009dbc:	0800fd20 	.word	0x0800fd20

08009dc0 <_close_r>:
 8009dc0:	b538      	push	{r3, r4, r5, lr}
 8009dc2:	4d06      	ldr	r5, [pc, #24]	; (8009ddc <_close_r+0x1c>)
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	4604      	mov	r4, r0
 8009dc8:	4608      	mov	r0, r1
 8009dca:	602b      	str	r3, [r5, #0]
 8009dcc:	f7f7 fd63 	bl	8001896 <_close>
 8009dd0:	1c43      	adds	r3, r0, #1
 8009dd2:	d102      	bne.n	8009dda <_close_r+0x1a>
 8009dd4:	682b      	ldr	r3, [r5, #0]
 8009dd6:	b103      	cbz	r3, 8009dda <_close_r+0x1a>
 8009dd8:	6023      	str	r3, [r4, #0]
 8009dda:	bd38      	pop	{r3, r4, r5, pc}
 8009ddc:	20000844 	.word	0x20000844

08009de0 <__sflush_r>:
 8009de0:	898a      	ldrh	r2, [r1, #12]
 8009de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009de6:	4605      	mov	r5, r0
 8009de8:	0710      	lsls	r0, r2, #28
 8009dea:	460c      	mov	r4, r1
 8009dec:	d458      	bmi.n	8009ea0 <__sflush_r+0xc0>
 8009dee:	684b      	ldr	r3, [r1, #4]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	dc05      	bgt.n	8009e00 <__sflush_r+0x20>
 8009df4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	dc02      	bgt.n	8009e00 <__sflush_r+0x20>
 8009dfa:	2000      	movs	r0, #0
 8009dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e02:	2e00      	cmp	r6, #0
 8009e04:	d0f9      	beq.n	8009dfa <__sflush_r+0x1a>
 8009e06:	2300      	movs	r3, #0
 8009e08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e0c:	682f      	ldr	r7, [r5, #0]
 8009e0e:	602b      	str	r3, [r5, #0]
 8009e10:	d032      	beq.n	8009e78 <__sflush_r+0x98>
 8009e12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e14:	89a3      	ldrh	r3, [r4, #12]
 8009e16:	075a      	lsls	r2, r3, #29
 8009e18:	d505      	bpl.n	8009e26 <__sflush_r+0x46>
 8009e1a:	6863      	ldr	r3, [r4, #4]
 8009e1c:	1ac0      	subs	r0, r0, r3
 8009e1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e20:	b10b      	cbz	r3, 8009e26 <__sflush_r+0x46>
 8009e22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e24:	1ac0      	subs	r0, r0, r3
 8009e26:	2300      	movs	r3, #0
 8009e28:	4602      	mov	r2, r0
 8009e2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e2c:	6a21      	ldr	r1, [r4, #32]
 8009e2e:	4628      	mov	r0, r5
 8009e30:	47b0      	blx	r6
 8009e32:	1c43      	adds	r3, r0, #1
 8009e34:	89a3      	ldrh	r3, [r4, #12]
 8009e36:	d106      	bne.n	8009e46 <__sflush_r+0x66>
 8009e38:	6829      	ldr	r1, [r5, #0]
 8009e3a:	291d      	cmp	r1, #29
 8009e3c:	d82c      	bhi.n	8009e98 <__sflush_r+0xb8>
 8009e3e:	4a2a      	ldr	r2, [pc, #168]	; (8009ee8 <__sflush_r+0x108>)
 8009e40:	40ca      	lsrs	r2, r1
 8009e42:	07d6      	lsls	r6, r2, #31
 8009e44:	d528      	bpl.n	8009e98 <__sflush_r+0xb8>
 8009e46:	2200      	movs	r2, #0
 8009e48:	6062      	str	r2, [r4, #4]
 8009e4a:	04d9      	lsls	r1, r3, #19
 8009e4c:	6922      	ldr	r2, [r4, #16]
 8009e4e:	6022      	str	r2, [r4, #0]
 8009e50:	d504      	bpl.n	8009e5c <__sflush_r+0x7c>
 8009e52:	1c42      	adds	r2, r0, #1
 8009e54:	d101      	bne.n	8009e5a <__sflush_r+0x7a>
 8009e56:	682b      	ldr	r3, [r5, #0]
 8009e58:	b903      	cbnz	r3, 8009e5c <__sflush_r+0x7c>
 8009e5a:	6560      	str	r0, [r4, #84]	; 0x54
 8009e5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e5e:	602f      	str	r7, [r5, #0]
 8009e60:	2900      	cmp	r1, #0
 8009e62:	d0ca      	beq.n	8009dfa <__sflush_r+0x1a>
 8009e64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e68:	4299      	cmp	r1, r3
 8009e6a:	d002      	beq.n	8009e72 <__sflush_r+0x92>
 8009e6c:	4628      	mov	r0, r5
 8009e6e:	f7ff facd 	bl	800940c <_free_r>
 8009e72:	2000      	movs	r0, #0
 8009e74:	6360      	str	r0, [r4, #52]	; 0x34
 8009e76:	e7c1      	b.n	8009dfc <__sflush_r+0x1c>
 8009e78:	6a21      	ldr	r1, [r4, #32]
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	47b0      	blx	r6
 8009e80:	1c41      	adds	r1, r0, #1
 8009e82:	d1c7      	bne.n	8009e14 <__sflush_r+0x34>
 8009e84:	682b      	ldr	r3, [r5, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d0c4      	beq.n	8009e14 <__sflush_r+0x34>
 8009e8a:	2b1d      	cmp	r3, #29
 8009e8c:	d001      	beq.n	8009e92 <__sflush_r+0xb2>
 8009e8e:	2b16      	cmp	r3, #22
 8009e90:	d101      	bne.n	8009e96 <__sflush_r+0xb6>
 8009e92:	602f      	str	r7, [r5, #0]
 8009e94:	e7b1      	b.n	8009dfa <__sflush_r+0x1a>
 8009e96:	89a3      	ldrh	r3, [r4, #12]
 8009e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e9c:	81a3      	strh	r3, [r4, #12]
 8009e9e:	e7ad      	b.n	8009dfc <__sflush_r+0x1c>
 8009ea0:	690f      	ldr	r7, [r1, #16]
 8009ea2:	2f00      	cmp	r7, #0
 8009ea4:	d0a9      	beq.n	8009dfa <__sflush_r+0x1a>
 8009ea6:	0793      	lsls	r3, r2, #30
 8009ea8:	680e      	ldr	r6, [r1, #0]
 8009eaa:	bf08      	it	eq
 8009eac:	694b      	ldreq	r3, [r1, #20]
 8009eae:	600f      	str	r7, [r1, #0]
 8009eb0:	bf18      	it	ne
 8009eb2:	2300      	movne	r3, #0
 8009eb4:	eba6 0807 	sub.w	r8, r6, r7
 8009eb8:	608b      	str	r3, [r1, #8]
 8009eba:	f1b8 0f00 	cmp.w	r8, #0
 8009ebe:	dd9c      	ble.n	8009dfa <__sflush_r+0x1a>
 8009ec0:	6a21      	ldr	r1, [r4, #32]
 8009ec2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ec4:	4643      	mov	r3, r8
 8009ec6:	463a      	mov	r2, r7
 8009ec8:	4628      	mov	r0, r5
 8009eca:	47b0      	blx	r6
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	dc06      	bgt.n	8009ede <__sflush_r+0xfe>
 8009ed0:	89a3      	ldrh	r3, [r4, #12]
 8009ed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ed6:	81a3      	strh	r3, [r4, #12]
 8009ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8009edc:	e78e      	b.n	8009dfc <__sflush_r+0x1c>
 8009ede:	4407      	add	r7, r0
 8009ee0:	eba8 0800 	sub.w	r8, r8, r0
 8009ee4:	e7e9      	b.n	8009eba <__sflush_r+0xda>
 8009ee6:	bf00      	nop
 8009ee8:	20400001 	.word	0x20400001

08009eec <_fflush_r>:
 8009eec:	b538      	push	{r3, r4, r5, lr}
 8009eee:	690b      	ldr	r3, [r1, #16]
 8009ef0:	4605      	mov	r5, r0
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	b913      	cbnz	r3, 8009efc <_fflush_r+0x10>
 8009ef6:	2500      	movs	r5, #0
 8009ef8:	4628      	mov	r0, r5
 8009efa:	bd38      	pop	{r3, r4, r5, pc}
 8009efc:	b118      	cbz	r0, 8009f06 <_fflush_r+0x1a>
 8009efe:	6983      	ldr	r3, [r0, #24]
 8009f00:	b90b      	cbnz	r3, 8009f06 <_fflush_r+0x1a>
 8009f02:	f7fe fe3b 	bl	8008b7c <__sinit>
 8009f06:	4b14      	ldr	r3, [pc, #80]	; (8009f58 <_fflush_r+0x6c>)
 8009f08:	429c      	cmp	r4, r3
 8009f0a:	d11b      	bne.n	8009f44 <_fflush_r+0x58>
 8009f0c:	686c      	ldr	r4, [r5, #4]
 8009f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d0ef      	beq.n	8009ef6 <_fflush_r+0xa>
 8009f16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f18:	07d0      	lsls	r0, r2, #31
 8009f1a:	d404      	bmi.n	8009f26 <_fflush_r+0x3a>
 8009f1c:	0599      	lsls	r1, r3, #22
 8009f1e:	d402      	bmi.n	8009f26 <_fflush_r+0x3a>
 8009f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f22:	f7fe fece 	bl	8008cc2 <__retarget_lock_acquire_recursive>
 8009f26:	4628      	mov	r0, r5
 8009f28:	4621      	mov	r1, r4
 8009f2a:	f7ff ff59 	bl	8009de0 <__sflush_r>
 8009f2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f30:	07da      	lsls	r2, r3, #31
 8009f32:	4605      	mov	r5, r0
 8009f34:	d4e0      	bmi.n	8009ef8 <_fflush_r+0xc>
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	059b      	lsls	r3, r3, #22
 8009f3a:	d4dd      	bmi.n	8009ef8 <_fflush_r+0xc>
 8009f3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f3e:	f7fe fec1 	bl	8008cc4 <__retarget_lock_release_recursive>
 8009f42:	e7d9      	b.n	8009ef8 <_fflush_r+0xc>
 8009f44:	4b05      	ldr	r3, [pc, #20]	; (8009f5c <_fflush_r+0x70>)
 8009f46:	429c      	cmp	r4, r3
 8009f48:	d101      	bne.n	8009f4e <_fflush_r+0x62>
 8009f4a:	68ac      	ldr	r4, [r5, #8]
 8009f4c:	e7df      	b.n	8009f0e <_fflush_r+0x22>
 8009f4e:	4b04      	ldr	r3, [pc, #16]	; (8009f60 <_fflush_r+0x74>)
 8009f50:	429c      	cmp	r4, r3
 8009f52:	bf08      	it	eq
 8009f54:	68ec      	ldreq	r4, [r5, #12]
 8009f56:	e7da      	b.n	8009f0e <_fflush_r+0x22>
 8009f58:	0800fb3c 	.word	0x0800fb3c
 8009f5c:	0800fb5c 	.word	0x0800fb5c
 8009f60:	0800fb1c 	.word	0x0800fb1c

08009f64 <fiprintf>:
 8009f64:	b40e      	push	{r1, r2, r3}
 8009f66:	b503      	push	{r0, r1, lr}
 8009f68:	4601      	mov	r1, r0
 8009f6a:	ab03      	add	r3, sp, #12
 8009f6c:	4805      	ldr	r0, [pc, #20]	; (8009f84 <fiprintf+0x20>)
 8009f6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f72:	6800      	ldr	r0, [r0, #0]
 8009f74:	9301      	str	r3, [sp, #4]
 8009f76:	f7ff fcaf 	bl	80098d8 <_vfiprintf_r>
 8009f7a:	b002      	add	sp, #8
 8009f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f80:	b003      	add	sp, #12
 8009f82:	4770      	bx	lr
 8009f84:	20000034 	.word	0x20000034

08009f88 <_lseek_r>:
 8009f88:	b538      	push	{r3, r4, r5, lr}
 8009f8a:	4d07      	ldr	r5, [pc, #28]	; (8009fa8 <_lseek_r+0x20>)
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	4608      	mov	r0, r1
 8009f90:	4611      	mov	r1, r2
 8009f92:	2200      	movs	r2, #0
 8009f94:	602a      	str	r2, [r5, #0]
 8009f96:	461a      	mov	r2, r3
 8009f98:	f7f7 fca4 	bl	80018e4 <_lseek>
 8009f9c:	1c43      	adds	r3, r0, #1
 8009f9e:	d102      	bne.n	8009fa6 <_lseek_r+0x1e>
 8009fa0:	682b      	ldr	r3, [r5, #0]
 8009fa2:	b103      	cbz	r3, 8009fa6 <_lseek_r+0x1e>
 8009fa4:	6023      	str	r3, [r4, #0]
 8009fa6:	bd38      	pop	{r3, r4, r5, pc}
 8009fa8:	20000844 	.word	0x20000844

08009fac <__swhatbuf_r>:
 8009fac:	b570      	push	{r4, r5, r6, lr}
 8009fae:	460e      	mov	r6, r1
 8009fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fb4:	2900      	cmp	r1, #0
 8009fb6:	b096      	sub	sp, #88	; 0x58
 8009fb8:	4614      	mov	r4, r2
 8009fba:	461d      	mov	r5, r3
 8009fbc:	da08      	bge.n	8009fd0 <__swhatbuf_r+0x24>
 8009fbe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	602a      	str	r2, [r5, #0]
 8009fc6:	061a      	lsls	r2, r3, #24
 8009fc8:	d410      	bmi.n	8009fec <__swhatbuf_r+0x40>
 8009fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fce:	e00e      	b.n	8009fee <__swhatbuf_r+0x42>
 8009fd0:	466a      	mov	r2, sp
 8009fd2:	f000 f8c5 	bl	800a160 <_fstat_r>
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	dbf1      	blt.n	8009fbe <__swhatbuf_r+0x12>
 8009fda:	9a01      	ldr	r2, [sp, #4]
 8009fdc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009fe0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009fe4:	425a      	negs	r2, r3
 8009fe6:	415a      	adcs	r2, r3
 8009fe8:	602a      	str	r2, [r5, #0]
 8009fea:	e7ee      	b.n	8009fca <__swhatbuf_r+0x1e>
 8009fec:	2340      	movs	r3, #64	; 0x40
 8009fee:	2000      	movs	r0, #0
 8009ff0:	6023      	str	r3, [r4, #0]
 8009ff2:	b016      	add	sp, #88	; 0x58
 8009ff4:	bd70      	pop	{r4, r5, r6, pc}
	...

08009ff8 <__smakebuf_r>:
 8009ff8:	898b      	ldrh	r3, [r1, #12]
 8009ffa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ffc:	079d      	lsls	r5, r3, #30
 8009ffe:	4606      	mov	r6, r0
 800a000:	460c      	mov	r4, r1
 800a002:	d507      	bpl.n	800a014 <__smakebuf_r+0x1c>
 800a004:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	6123      	str	r3, [r4, #16]
 800a00c:	2301      	movs	r3, #1
 800a00e:	6163      	str	r3, [r4, #20]
 800a010:	b002      	add	sp, #8
 800a012:	bd70      	pop	{r4, r5, r6, pc}
 800a014:	ab01      	add	r3, sp, #4
 800a016:	466a      	mov	r2, sp
 800a018:	f7ff ffc8 	bl	8009fac <__swhatbuf_r>
 800a01c:	9900      	ldr	r1, [sp, #0]
 800a01e:	4605      	mov	r5, r0
 800a020:	4630      	mov	r0, r6
 800a022:	f7ff fa5f 	bl	80094e4 <_malloc_r>
 800a026:	b948      	cbnz	r0, 800a03c <__smakebuf_r+0x44>
 800a028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a02c:	059a      	lsls	r2, r3, #22
 800a02e:	d4ef      	bmi.n	800a010 <__smakebuf_r+0x18>
 800a030:	f023 0303 	bic.w	r3, r3, #3
 800a034:	f043 0302 	orr.w	r3, r3, #2
 800a038:	81a3      	strh	r3, [r4, #12]
 800a03a:	e7e3      	b.n	800a004 <__smakebuf_r+0xc>
 800a03c:	4b0d      	ldr	r3, [pc, #52]	; (800a074 <__smakebuf_r+0x7c>)
 800a03e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a040:	89a3      	ldrh	r3, [r4, #12]
 800a042:	6020      	str	r0, [r4, #0]
 800a044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a048:	81a3      	strh	r3, [r4, #12]
 800a04a:	9b00      	ldr	r3, [sp, #0]
 800a04c:	6163      	str	r3, [r4, #20]
 800a04e:	9b01      	ldr	r3, [sp, #4]
 800a050:	6120      	str	r0, [r4, #16]
 800a052:	b15b      	cbz	r3, 800a06c <__smakebuf_r+0x74>
 800a054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a058:	4630      	mov	r0, r6
 800a05a:	f000 f893 	bl	800a184 <_isatty_r>
 800a05e:	b128      	cbz	r0, 800a06c <__smakebuf_r+0x74>
 800a060:	89a3      	ldrh	r3, [r4, #12]
 800a062:	f023 0303 	bic.w	r3, r3, #3
 800a066:	f043 0301 	orr.w	r3, r3, #1
 800a06a:	81a3      	strh	r3, [r4, #12]
 800a06c:	89a0      	ldrh	r0, [r4, #12]
 800a06e:	4305      	orrs	r5, r0
 800a070:	81a5      	strh	r5, [r4, #12]
 800a072:	e7cd      	b.n	800a010 <__smakebuf_r+0x18>
 800a074:	08008b15 	.word	0x08008b15

0800a078 <__ascii_mbtowc>:
 800a078:	b082      	sub	sp, #8
 800a07a:	b901      	cbnz	r1, 800a07e <__ascii_mbtowc+0x6>
 800a07c:	a901      	add	r1, sp, #4
 800a07e:	b142      	cbz	r2, 800a092 <__ascii_mbtowc+0x1a>
 800a080:	b14b      	cbz	r3, 800a096 <__ascii_mbtowc+0x1e>
 800a082:	7813      	ldrb	r3, [r2, #0]
 800a084:	600b      	str	r3, [r1, #0]
 800a086:	7812      	ldrb	r2, [r2, #0]
 800a088:	1e10      	subs	r0, r2, #0
 800a08a:	bf18      	it	ne
 800a08c:	2001      	movne	r0, #1
 800a08e:	b002      	add	sp, #8
 800a090:	4770      	bx	lr
 800a092:	4610      	mov	r0, r2
 800a094:	e7fb      	b.n	800a08e <__ascii_mbtowc+0x16>
 800a096:	f06f 0001 	mvn.w	r0, #1
 800a09a:	e7f8      	b.n	800a08e <__ascii_mbtowc+0x16>

0800a09c <__malloc_lock>:
 800a09c:	4801      	ldr	r0, [pc, #4]	; (800a0a4 <__malloc_lock+0x8>)
 800a09e:	f7fe be10 	b.w	8008cc2 <__retarget_lock_acquire_recursive>
 800a0a2:	bf00      	nop
 800a0a4:	20000838 	.word	0x20000838

0800a0a8 <__malloc_unlock>:
 800a0a8:	4801      	ldr	r0, [pc, #4]	; (800a0b0 <__malloc_unlock+0x8>)
 800a0aa:	f7fe be0b 	b.w	8008cc4 <__retarget_lock_release_recursive>
 800a0ae:	bf00      	nop
 800a0b0:	20000838 	.word	0x20000838

0800a0b4 <_realloc_r>:
 800a0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b8:	4680      	mov	r8, r0
 800a0ba:	4614      	mov	r4, r2
 800a0bc:	460e      	mov	r6, r1
 800a0be:	b921      	cbnz	r1, 800a0ca <_realloc_r+0x16>
 800a0c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0c4:	4611      	mov	r1, r2
 800a0c6:	f7ff ba0d 	b.w	80094e4 <_malloc_r>
 800a0ca:	b92a      	cbnz	r2, 800a0d8 <_realloc_r+0x24>
 800a0cc:	f7ff f99e 	bl	800940c <_free_r>
 800a0d0:	4625      	mov	r5, r4
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0d8:	f000 f864 	bl	800a1a4 <_malloc_usable_size_r>
 800a0dc:	4284      	cmp	r4, r0
 800a0de:	4607      	mov	r7, r0
 800a0e0:	d802      	bhi.n	800a0e8 <_realloc_r+0x34>
 800a0e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a0e6:	d812      	bhi.n	800a10e <_realloc_r+0x5a>
 800a0e8:	4621      	mov	r1, r4
 800a0ea:	4640      	mov	r0, r8
 800a0ec:	f7ff f9fa 	bl	80094e4 <_malloc_r>
 800a0f0:	4605      	mov	r5, r0
 800a0f2:	2800      	cmp	r0, #0
 800a0f4:	d0ed      	beq.n	800a0d2 <_realloc_r+0x1e>
 800a0f6:	42bc      	cmp	r4, r7
 800a0f8:	4622      	mov	r2, r4
 800a0fa:	4631      	mov	r1, r6
 800a0fc:	bf28      	it	cs
 800a0fe:	463a      	movcs	r2, r7
 800a100:	f7fd f982 	bl	8007408 <memcpy>
 800a104:	4631      	mov	r1, r6
 800a106:	4640      	mov	r0, r8
 800a108:	f7ff f980 	bl	800940c <_free_r>
 800a10c:	e7e1      	b.n	800a0d2 <_realloc_r+0x1e>
 800a10e:	4635      	mov	r5, r6
 800a110:	e7df      	b.n	800a0d2 <_realloc_r+0x1e>
	...

0800a114 <_read_r>:
 800a114:	b538      	push	{r3, r4, r5, lr}
 800a116:	4d07      	ldr	r5, [pc, #28]	; (800a134 <_read_r+0x20>)
 800a118:	4604      	mov	r4, r0
 800a11a:	4608      	mov	r0, r1
 800a11c:	4611      	mov	r1, r2
 800a11e:	2200      	movs	r2, #0
 800a120:	602a      	str	r2, [r5, #0]
 800a122:	461a      	mov	r2, r3
 800a124:	f7f7 fb7e 	bl	8001824 <_read>
 800a128:	1c43      	adds	r3, r0, #1
 800a12a:	d102      	bne.n	800a132 <_read_r+0x1e>
 800a12c:	682b      	ldr	r3, [r5, #0]
 800a12e:	b103      	cbz	r3, 800a132 <_read_r+0x1e>
 800a130:	6023      	str	r3, [r4, #0]
 800a132:	bd38      	pop	{r3, r4, r5, pc}
 800a134:	20000844 	.word	0x20000844

0800a138 <__ascii_wctomb>:
 800a138:	b149      	cbz	r1, 800a14e <__ascii_wctomb+0x16>
 800a13a:	2aff      	cmp	r2, #255	; 0xff
 800a13c:	bf85      	ittet	hi
 800a13e:	238a      	movhi	r3, #138	; 0x8a
 800a140:	6003      	strhi	r3, [r0, #0]
 800a142:	700a      	strbls	r2, [r1, #0]
 800a144:	f04f 30ff 	movhi.w	r0, #4294967295
 800a148:	bf98      	it	ls
 800a14a:	2001      	movls	r0, #1
 800a14c:	4770      	bx	lr
 800a14e:	4608      	mov	r0, r1
 800a150:	4770      	bx	lr

0800a152 <abort>:
 800a152:	b508      	push	{r3, lr}
 800a154:	2006      	movs	r0, #6
 800a156:	f000 f855 	bl	800a204 <raise>
 800a15a:	2001      	movs	r0, #1
 800a15c:	f7f7 fb58 	bl	8001810 <_exit>

0800a160 <_fstat_r>:
 800a160:	b538      	push	{r3, r4, r5, lr}
 800a162:	4d07      	ldr	r5, [pc, #28]	; (800a180 <_fstat_r+0x20>)
 800a164:	2300      	movs	r3, #0
 800a166:	4604      	mov	r4, r0
 800a168:	4608      	mov	r0, r1
 800a16a:	4611      	mov	r1, r2
 800a16c:	602b      	str	r3, [r5, #0]
 800a16e:	f7f7 fb9e 	bl	80018ae <_fstat>
 800a172:	1c43      	adds	r3, r0, #1
 800a174:	d102      	bne.n	800a17c <_fstat_r+0x1c>
 800a176:	682b      	ldr	r3, [r5, #0]
 800a178:	b103      	cbz	r3, 800a17c <_fstat_r+0x1c>
 800a17a:	6023      	str	r3, [r4, #0]
 800a17c:	bd38      	pop	{r3, r4, r5, pc}
 800a17e:	bf00      	nop
 800a180:	20000844 	.word	0x20000844

0800a184 <_isatty_r>:
 800a184:	b538      	push	{r3, r4, r5, lr}
 800a186:	4d06      	ldr	r5, [pc, #24]	; (800a1a0 <_isatty_r+0x1c>)
 800a188:	2300      	movs	r3, #0
 800a18a:	4604      	mov	r4, r0
 800a18c:	4608      	mov	r0, r1
 800a18e:	602b      	str	r3, [r5, #0]
 800a190:	f7f7 fb9d 	bl	80018ce <_isatty>
 800a194:	1c43      	adds	r3, r0, #1
 800a196:	d102      	bne.n	800a19e <_isatty_r+0x1a>
 800a198:	682b      	ldr	r3, [r5, #0]
 800a19a:	b103      	cbz	r3, 800a19e <_isatty_r+0x1a>
 800a19c:	6023      	str	r3, [r4, #0]
 800a19e:	bd38      	pop	{r3, r4, r5, pc}
 800a1a0:	20000844 	.word	0x20000844

0800a1a4 <_malloc_usable_size_r>:
 800a1a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1a8:	1f18      	subs	r0, r3, #4
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	bfbc      	itt	lt
 800a1ae:	580b      	ldrlt	r3, [r1, r0]
 800a1b0:	18c0      	addlt	r0, r0, r3
 800a1b2:	4770      	bx	lr

0800a1b4 <_raise_r>:
 800a1b4:	291f      	cmp	r1, #31
 800a1b6:	b538      	push	{r3, r4, r5, lr}
 800a1b8:	4604      	mov	r4, r0
 800a1ba:	460d      	mov	r5, r1
 800a1bc:	d904      	bls.n	800a1c8 <_raise_r+0x14>
 800a1be:	2316      	movs	r3, #22
 800a1c0:	6003      	str	r3, [r0, #0]
 800a1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c6:	bd38      	pop	{r3, r4, r5, pc}
 800a1c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a1ca:	b112      	cbz	r2, 800a1d2 <_raise_r+0x1e>
 800a1cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1d0:	b94b      	cbnz	r3, 800a1e6 <_raise_r+0x32>
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	f000 f830 	bl	800a238 <_getpid_r>
 800a1d8:	462a      	mov	r2, r5
 800a1da:	4601      	mov	r1, r0
 800a1dc:	4620      	mov	r0, r4
 800a1de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1e2:	f000 b817 	b.w	800a214 <_kill_r>
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d00a      	beq.n	800a200 <_raise_r+0x4c>
 800a1ea:	1c59      	adds	r1, r3, #1
 800a1ec:	d103      	bne.n	800a1f6 <_raise_r+0x42>
 800a1ee:	2316      	movs	r3, #22
 800a1f0:	6003      	str	r3, [r0, #0]
 800a1f2:	2001      	movs	r0, #1
 800a1f4:	e7e7      	b.n	800a1c6 <_raise_r+0x12>
 800a1f6:	2400      	movs	r4, #0
 800a1f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	4798      	blx	r3
 800a200:	2000      	movs	r0, #0
 800a202:	e7e0      	b.n	800a1c6 <_raise_r+0x12>

0800a204 <raise>:
 800a204:	4b02      	ldr	r3, [pc, #8]	; (800a210 <raise+0xc>)
 800a206:	4601      	mov	r1, r0
 800a208:	6818      	ldr	r0, [r3, #0]
 800a20a:	f7ff bfd3 	b.w	800a1b4 <_raise_r>
 800a20e:	bf00      	nop
 800a210:	20000034 	.word	0x20000034

0800a214 <_kill_r>:
 800a214:	b538      	push	{r3, r4, r5, lr}
 800a216:	4d07      	ldr	r5, [pc, #28]	; (800a234 <_kill_r+0x20>)
 800a218:	2300      	movs	r3, #0
 800a21a:	4604      	mov	r4, r0
 800a21c:	4608      	mov	r0, r1
 800a21e:	4611      	mov	r1, r2
 800a220:	602b      	str	r3, [r5, #0]
 800a222:	f7f7 fae5 	bl	80017f0 <_kill>
 800a226:	1c43      	adds	r3, r0, #1
 800a228:	d102      	bne.n	800a230 <_kill_r+0x1c>
 800a22a:	682b      	ldr	r3, [r5, #0]
 800a22c:	b103      	cbz	r3, 800a230 <_kill_r+0x1c>
 800a22e:	6023      	str	r3, [r4, #0]
 800a230:	bd38      	pop	{r3, r4, r5, pc}
 800a232:	bf00      	nop
 800a234:	20000844 	.word	0x20000844

0800a238 <_getpid_r>:
 800a238:	f7f7 bad2 	b.w	80017e0 <_getpid>
 800a23c:	0000      	movs	r0, r0
	...

0800a240 <cos>:
 800a240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a242:	ec53 2b10 	vmov	r2, r3, d0
 800a246:	4826      	ldr	r0, [pc, #152]	; (800a2e0 <cos+0xa0>)
 800a248:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a24c:	4281      	cmp	r1, r0
 800a24e:	dc06      	bgt.n	800a25e <cos+0x1e>
 800a250:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a2d8 <cos+0x98>
 800a254:	b005      	add	sp, #20
 800a256:	f85d eb04 	ldr.w	lr, [sp], #4
 800a25a:	f000 baa9 	b.w	800a7b0 <__kernel_cos>
 800a25e:	4821      	ldr	r0, [pc, #132]	; (800a2e4 <cos+0xa4>)
 800a260:	4281      	cmp	r1, r0
 800a262:	dd09      	ble.n	800a278 <cos+0x38>
 800a264:	ee10 0a10 	vmov	r0, s0
 800a268:	4619      	mov	r1, r3
 800a26a:	f7f6 f80d 	bl	8000288 <__aeabi_dsub>
 800a26e:	ec41 0b10 	vmov	d0, r0, r1
 800a272:	b005      	add	sp, #20
 800a274:	f85d fb04 	ldr.w	pc, [sp], #4
 800a278:	4668      	mov	r0, sp
 800a27a:	f000 f88d 	bl	800a398 <__ieee754_rem_pio2>
 800a27e:	f000 0003 	and.w	r0, r0, #3
 800a282:	2801      	cmp	r0, #1
 800a284:	d00b      	beq.n	800a29e <cos+0x5e>
 800a286:	2802      	cmp	r0, #2
 800a288:	d016      	beq.n	800a2b8 <cos+0x78>
 800a28a:	b9e0      	cbnz	r0, 800a2c6 <cos+0x86>
 800a28c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a290:	ed9d 0b00 	vldr	d0, [sp]
 800a294:	f000 fa8c 	bl	800a7b0 <__kernel_cos>
 800a298:	ec51 0b10 	vmov	r0, r1, d0
 800a29c:	e7e7      	b.n	800a26e <cos+0x2e>
 800a29e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a2a2:	ed9d 0b00 	vldr	d0, [sp]
 800a2a6:	f000 fe9b 	bl	800afe0 <__kernel_sin>
 800a2aa:	ec53 2b10 	vmov	r2, r3, d0
 800a2ae:	ee10 0a10 	vmov	r0, s0
 800a2b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a2b6:	e7da      	b.n	800a26e <cos+0x2e>
 800a2b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a2bc:	ed9d 0b00 	vldr	d0, [sp]
 800a2c0:	f000 fa76 	bl	800a7b0 <__kernel_cos>
 800a2c4:	e7f1      	b.n	800a2aa <cos+0x6a>
 800a2c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a2ca:	ed9d 0b00 	vldr	d0, [sp]
 800a2ce:	2001      	movs	r0, #1
 800a2d0:	f000 fe86 	bl	800afe0 <__kernel_sin>
 800a2d4:	e7e0      	b.n	800a298 <cos+0x58>
 800a2d6:	bf00      	nop
	...
 800a2e0:	3fe921fb 	.word	0x3fe921fb
 800a2e4:	7fefffff 	.word	0x7fefffff

0800a2e8 <sin>:
 800a2e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2ea:	ec53 2b10 	vmov	r2, r3, d0
 800a2ee:	4828      	ldr	r0, [pc, #160]	; (800a390 <sin+0xa8>)
 800a2f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a2f4:	4281      	cmp	r1, r0
 800a2f6:	dc07      	bgt.n	800a308 <sin+0x20>
 800a2f8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a388 <sin+0xa0>
 800a2fc:	2000      	movs	r0, #0
 800a2fe:	b005      	add	sp, #20
 800a300:	f85d eb04 	ldr.w	lr, [sp], #4
 800a304:	f000 be6c 	b.w	800afe0 <__kernel_sin>
 800a308:	4822      	ldr	r0, [pc, #136]	; (800a394 <sin+0xac>)
 800a30a:	4281      	cmp	r1, r0
 800a30c:	dd09      	ble.n	800a322 <sin+0x3a>
 800a30e:	ee10 0a10 	vmov	r0, s0
 800a312:	4619      	mov	r1, r3
 800a314:	f7f5 ffb8 	bl	8000288 <__aeabi_dsub>
 800a318:	ec41 0b10 	vmov	d0, r0, r1
 800a31c:	b005      	add	sp, #20
 800a31e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a322:	4668      	mov	r0, sp
 800a324:	f000 f838 	bl	800a398 <__ieee754_rem_pio2>
 800a328:	f000 0003 	and.w	r0, r0, #3
 800a32c:	2801      	cmp	r0, #1
 800a32e:	d00c      	beq.n	800a34a <sin+0x62>
 800a330:	2802      	cmp	r0, #2
 800a332:	d011      	beq.n	800a358 <sin+0x70>
 800a334:	b9f0      	cbnz	r0, 800a374 <sin+0x8c>
 800a336:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a33a:	ed9d 0b00 	vldr	d0, [sp]
 800a33e:	2001      	movs	r0, #1
 800a340:	f000 fe4e 	bl	800afe0 <__kernel_sin>
 800a344:	ec51 0b10 	vmov	r0, r1, d0
 800a348:	e7e6      	b.n	800a318 <sin+0x30>
 800a34a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a34e:	ed9d 0b00 	vldr	d0, [sp]
 800a352:	f000 fa2d 	bl	800a7b0 <__kernel_cos>
 800a356:	e7f5      	b.n	800a344 <sin+0x5c>
 800a358:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a35c:	ed9d 0b00 	vldr	d0, [sp]
 800a360:	2001      	movs	r0, #1
 800a362:	f000 fe3d 	bl	800afe0 <__kernel_sin>
 800a366:	ec53 2b10 	vmov	r2, r3, d0
 800a36a:	ee10 0a10 	vmov	r0, s0
 800a36e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a372:	e7d1      	b.n	800a318 <sin+0x30>
 800a374:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a378:	ed9d 0b00 	vldr	d0, [sp]
 800a37c:	f000 fa18 	bl	800a7b0 <__kernel_cos>
 800a380:	e7f1      	b.n	800a366 <sin+0x7e>
 800a382:	bf00      	nop
 800a384:	f3af 8000 	nop.w
	...
 800a390:	3fe921fb 	.word	0x3fe921fb
 800a394:	7fefffff 	.word	0x7fefffff

0800a398 <__ieee754_rem_pio2>:
 800a398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a39c:	ed2d 8b02 	vpush	{d8}
 800a3a0:	ec55 4b10 	vmov	r4, r5, d0
 800a3a4:	4bca      	ldr	r3, [pc, #808]	; (800a6d0 <__ieee754_rem_pio2+0x338>)
 800a3a6:	b08b      	sub	sp, #44	; 0x2c
 800a3a8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a3ac:	4598      	cmp	r8, r3
 800a3ae:	4682      	mov	sl, r0
 800a3b0:	9502      	str	r5, [sp, #8]
 800a3b2:	dc08      	bgt.n	800a3c6 <__ieee754_rem_pio2+0x2e>
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	ed80 0b00 	vstr	d0, [r0]
 800a3bc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a3c0:	f04f 0b00 	mov.w	fp, #0
 800a3c4:	e028      	b.n	800a418 <__ieee754_rem_pio2+0x80>
 800a3c6:	4bc3      	ldr	r3, [pc, #780]	; (800a6d4 <__ieee754_rem_pio2+0x33c>)
 800a3c8:	4598      	cmp	r8, r3
 800a3ca:	dc78      	bgt.n	800a4be <__ieee754_rem_pio2+0x126>
 800a3cc:	9b02      	ldr	r3, [sp, #8]
 800a3ce:	4ec2      	ldr	r6, [pc, #776]	; (800a6d8 <__ieee754_rem_pio2+0x340>)
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	ee10 0a10 	vmov	r0, s0
 800a3d6:	a3b0      	add	r3, pc, #704	; (adr r3, 800a698 <__ieee754_rem_pio2+0x300>)
 800a3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3dc:	4629      	mov	r1, r5
 800a3de:	dd39      	ble.n	800a454 <__ieee754_rem_pio2+0xbc>
 800a3e0:	f7f5 ff52 	bl	8000288 <__aeabi_dsub>
 800a3e4:	45b0      	cmp	r8, r6
 800a3e6:	4604      	mov	r4, r0
 800a3e8:	460d      	mov	r5, r1
 800a3ea:	d01b      	beq.n	800a424 <__ieee754_rem_pio2+0x8c>
 800a3ec:	a3ac      	add	r3, pc, #688	; (adr r3, 800a6a0 <__ieee754_rem_pio2+0x308>)
 800a3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f2:	f7f5 ff49 	bl	8000288 <__aeabi_dsub>
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	e9ca 2300 	strd	r2, r3, [sl]
 800a3fe:	4620      	mov	r0, r4
 800a400:	4629      	mov	r1, r5
 800a402:	f7f5 ff41 	bl	8000288 <__aeabi_dsub>
 800a406:	a3a6      	add	r3, pc, #664	; (adr r3, 800a6a0 <__ieee754_rem_pio2+0x308>)
 800a408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40c:	f7f5 ff3c 	bl	8000288 <__aeabi_dsub>
 800a410:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a414:	f04f 0b01 	mov.w	fp, #1
 800a418:	4658      	mov	r0, fp
 800a41a:	b00b      	add	sp, #44	; 0x2c
 800a41c:	ecbd 8b02 	vpop	{d8}
 800a420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a424:	a3a0      	add	r3, pc, #640	; (adr r3, 800a6a8 <__ieee754_rem_pio2+0x310>)
 800a426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42a:	f7f5 ff2d 	bl	8000288 <__aeabi_dsub>
 800a42e:	a3a0      	add	r3, pc, #640	; (adr r3, 800a6b0 <__ieee754_rem_pio2+0x318>)
 800a430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a434:	4604      	mov	r4, r0
 800a436:	460d      	mov	r5, r1
 800a438:	f7f5 ff26 	bl	8000288 <__aeabi_dsub>
 800a43c:	4602      	mov	r2, r0
 800a43e:	460b      	mov	r3, r1
 800a440:	e9ca 2300 	strd	r2, r3, [sl]
 800a444:	4620      	mov	r0, r4
 800a446:	4629      	mov	r1, r5
 800a448:	f7f5 ff1e 	bl	8000288 <__aeabi_dsub>
 800a44c:	a398      	add	r3, pc, #608	; (adr r3, 800a6b0 <__ieee754_rem_pio2+0x318>)
 800a44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a452:	e7db      	b.n	800a40c <__ieee754_rem_pio2+0x74>
 800a454:	f7f5 ff1a 	bl	800028c <__adddf3>
 800a458:	45b0      	cmp	r8, r6
 800a45a:	4604      	mov	r4, r0
 800a45c:	460d      	mov	r5, r1
 800a45e:	d016      	beq.n	800a48e <__ieee754_rem_pio2+0xf6>
 800a460:	a38f      	add	r3, pc, #572	; (adr r3, 800a6a0 <__ieee754_rem_pio2+0x308>)
 800a462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a466:	f7f5 ff11 	bl	800028c <__adddf3>
 800a46a:	4602      	mov	r2, r0
 800a46c:	460b      	mov	r3, r1
 800a46e:	e9ca 2300 	strd	r2, r3, [sl]
 800a472:	4620      	mov	r0, r4
 800a474:	4629      	mov	r1, r5
 800a476:	f7f5 ff07 	bl	8000288 <__aeabi_dsub>
 800a47a:	a389      	add	r3, pc, #548	; (adr r3, 800a6a0 <__ieee754_rem_pio2+0x308>)
 800a47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a480:	f7f5 ff04 	bl	800028c <__adddf3>
 800a484:	f04f 3bff 	mov.w	fp, #4294967295
 800a488:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a48c:	e7c4      	b.n	800a418 <__ieee754_rem_pio2+0x80>
 800a48e:	a386      	add	r3, pc, #536	; (adr r3, 800a6a8 <__ieee754_rem_pio2+0x310>)
 800a490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a494:	f7f5 fefa 	bl	800028c <__adddf3>
 800a498:	a385      	add	r3, pc, #532	; (adr r3, 800a6b0 <__ieee754_rem_pio2+0x318>)
 800a49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49e:	4604      	mov	r4, r0
 800a4a0:	460d      	mov	r5, r1
 800a4a2:	f7f5 fef3 	bl	800028c <__adddf3>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	e9ca 2300 	strd	r2, r3, [sl]
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	4629      	mov	r1, r5
 800a4b2:	f7f5 fee9 	bl	8000288 <__aeabi_dsub>
 800a4b6:	a37e      	add	r3, pc, #504	; (adr r3, 800a6b0 <__ieee754_rem_pio2+0x318>)
 800a4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4bc:	e7e0      	b.n	800a480 <__ieee754_rem_pio2+0xe8>
 800a4be:	4b87      	ldr	r3, [pc, #540]	; (800a6dc <__ieee754_rem_pio2+0x344>)
 800a4c0:	4598      	cmp	r8, r3
 800a4c2:	f300 80d9 	bgt.w	800a678 <__ieee754_rem_pio2+0x2e0>
 800a4c6:	f000 fe49 	bl	800b15c <fabs>
 800a4ca:	ec55 4b10 	vmov	r4, r5, d0
 800a4ce:	ee10 0a10 	vmov	r0, s0
 800a4d2:	a379      	add	r3, pc, #484	; (adr r3, 800a6b8 <__ieee754_rem_pio2+0x320>)
 800a4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d8:	4629      	mov	r1, r5
 800a4da:	f7f6 f88d 	bl	80005f8 <__aeabi_dmul>
 800a4de:	4b80      	ldr	r3, [pc, #512]	; (800a6e0 <__ieee754_rem_pio2+0x348>)
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f7f5 fed3 	bl	800028c <__adddf3>
 800a4e6:	f7f6 fb37 	bl	8000b58 <__aeabi_d2iz>
 800a4ea:	4683      	mov	fp, r0
 800a4ec:	f7f6 f81a 	bl	8000524 <__aeabi_i2d>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	ec43 2b18 	vmov	d8, r2, r3
 800a4f8:	a367      	add	r3, pc, #412	; (adr r3, 800a698 <__ieee754_rem_pio2+0x300>)
 800a4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fe:	f7f6 f87b 	bl	80005f8 <__aeabi_dmul>
 800a502:	4602      	mov	r2, r0
 800a504:	460b      	mov	r3, r1
 800a506:	4620      	mov	r0, r4
 800a508:	4629      	mov	r1, r5
 800a50a:	f7f5 febd 	bl	8000288 <__aeabi_dsub>
 800a50e:	a364      	add	r3, pc, #400	; (adr r3, 800a6a0 <__ieee754_rem_pio2+0x308>)
 800a510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a514:	4606      	mov	r6, r0
 800a516:	460f      	mov	r7, r1
 800a518:	ec51 0b18 	vmov	r0, r1, d8
 800a51c:	f7f6 f86c 	bl	80005f8 <__aeabi_dmul>
 800a520:	f1bb 0f1f 	cmp.w	fp, #31
 800a524:	4604      	mov	r4, r0
 800a526:	460d      	mov	r5, r1
 800a528:	dc0d      	bgt.n	800a546 <__ieee754_rem_pio2+0x1ae>
 800a52a:	4b6e      	ldr	r3, [pc, #440]	; (800a6e4 <__ieee754_rem_pio2+0x34c>)
 800a52c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a534:	4543      	cmp	r3, r8
 800a536:	d006      	beq.n	800a546 <__ieee754_rem_pio2+0x1ae>
 800a538:	4622      	mov	r2, r4
 800a53a:	462b      	mov	r3, r5
 800a53c:	4630      	mov	r0, r6
 800a53e:	4639      	mov	r1, r7
 800a540:	f7f5 fea2 	bl	8000288 <__aeabi_dsub>
 800a544:	e00f      	b.n	800a566 <__ieee754_rem_pio2+0x1ce>
 800a546:	462b      	mov	r3, r5
 800a548:	4622      	mov	r2, r4
 800a54a:	4630      	mov	r0, r6
 800a54c:	4639      	mov	r1, r7
 800a54e:	f7f5 fe9b 	bl	8000288 <__aeabi_dsub>
 800a552:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a556:	9303      	str	r3, [sp, #12]
 800a558:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a55c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a560:	f1b8 0f10 	cmp.w	r8, #16
 800a564:	dc02      	bgt.n	800a56c <__ieee754_rem_pio2+0x1d4>
 800a566:	e9ca 0100 	strd	r0, r1, [sl]
 800a56a:	e039      	b.n	800a5e0 <__ieee754_rem_pio2+0x248>
 800a56c:	a34e      	add	r3, pc, #312	; (adr r3, 800a6a8 <__ieee754_rem_pio2+0x310>)
 800a56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a572:	ec51 0b18 	vmov	r0, r1, d8
 800a576:	f7f6 f83f 	bl	80005f8 <__aeabi_dmul>
 800a57a:	4604      	mov	r4, r0
 800a57c:	460d      	mov	r5, r1
 800a57e:	4602      	mov	r2, r0
 800a580:	460b      	mov	r3, r1
 800a582:	4630      	mov	r0, r6
 800a584:	4639      	mov	r1, r7
 800a586:	f7f5 fe7f 	bl	8000288 <__aeabi_dsub>
 800a58a:	4602      	mov	r2, r0
 800a58c:	460b      	mov	r3, r1
 800a58e:	4680      	mov	r8, r0
 800a590:	4689      	mov	r9, r1
 800a592:	4630      	mov	r0, r6
 800a594:	4639      	mov	r1, r7
 800a596:	f7f5 fe77 	bl	8000288 <__aeabi_dsub>
 800a59a:	4622      	mov	r2, r4
 800a59c:	462b      	mov	r3, r5
 800a59e:	f7f5 fe73 	bl	8000288 <__aeabi_dsub>
 800a5a2:	a343      	add	r3, pc, #268	; (adr r3, 800a6b0 <__ieee754_rem_pio2+0x318>)
 800a5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	460d      	mov	r5, r1
 800a5ac:	ec51 0b18 	vmov	r0, r1, d8
 800a5b0:	f7f6 f822 	bl	80005f8 <__aeabi_dmul>
 800a5b4:	4622      	mov	r2, r4
 800a5b6:	462b      	mov	r3, r5
 800a5b8:	f7f5 fe66 	bl	8000288 <__aeabi_dsub>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4604      	mov	r4, r0
 800a5c2:	460d      	mov	r5, r1
 800a5c4:	4640      	mov	r0, r8
 800a5c6:	4649      	mov	r1, r9
 800a5c8:	f7f5 fe5e 	bl	8000288 <__aeabi_dsub>
 800a5cc:	9a03      	ldr	r2, [sp, #12]
 800a5ce:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a5d2:	1ad3      	subs	r3, r2, r3
 800a5d4:	2b31      	cmp	r3, #49	; 0x31
 800a5d6:	dc24      	bgt.n	800a622 <__ieee754_rem_pio2+0x28a>
 800a5d8:	e9ca 0100 	strd	r0, r1, [sl]
 800a5dc:	4646      	mov	r6, r8
 800a5de:	464f      	mov	r7, r9
 800a5e0:	e9da 8900 	ldrd	r8, r9, [sl]
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	4642      	mov	r2, r8
 800a5e8:	464b      	mov	r3, r9
 800a5ea:	4639      	mov	r1, r7
 800a5ec:	f7f5 fe4c 	bl	8000288 <__aeabi_dsub>
 800a5f0:	462b      	mov	r3, r5
 800a5f2:	4622      	mov	r2, r4
 800a5f4:	f7f5 fe48 	bl	8000288 <__aeabi_dsub>
 800a5f8:	9b02      	ldr	r3, [sp, #8]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a600:	f6bf af0a 	bge.w	800a418 <__ieee754_rem_pio2+0x80>
 800a604:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a608:	f8ca 3004 	str.w	r3, [sl, #4]
 800a60c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a610:	f8ca 8000 	str.w	r8, [sl]
 800a614:	f8ca 0008 	str.w	r0, [sl, #8]
 800a618:	f8ca 300c 	str.w	r3, [sl, #12]
 800a61c:	f1cb 0b00 	rsb	fp, fp, #0
 800a620:	e6fa      	b.n	800a418 <__ieee754_rem_pio2+0x80>
 800a622:	a327      	add	r3, pc, #156	; (adr r3, 800a6c0 <__ieee754_rem_pio2+0x328>)
 800a624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a628:	ec51 0b18 	vmov	r0, r1, d8
 800a62c:	f7f5 ffe4 	bl	80005f8 <__aeabi_dmul>
 800a630:	4604      	mov	r4, r0
 800a632:	460d      	mov	r5, r1
 800a634:	4602      	mov	r2, r0
 800a636:	460b      	mov	r3, r1
 800a638:	4640      	mov	r0, r8
 800a63a:	4649      	mov	r1, r9
 800a63c:	f7f5 fe24 	bl	8000288 <__aeabi_dsub>
 800a640:	4602      	mov	r2, r0
 800a642:	460b      	mov	r3, r1
 800a644:	4606      	mov	r6, r0
 800a646:	460f      	mov	r7, r1
 800a648:	4640      	mov	r0, r8
 800a64a:	4649      	mov	r1, r9
 800a64c:	f7f5 fe1c 	bl	8000288 <__aeabi_dsub>
 800a650:	4622      	mov	r2, r4
 800a652:	462b      	mov	r3, r5
 800a654:	f7f5 fe18 	bl	8000288 <__aeabi_dsub>
 800a658:	a31b      	add	r3, pc, #108	; (adr r3, 800a6c8 <__ieee754_rem_pio2+0x330>)
 800a65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65e:	4604      	mov	r4, r0
 800a660:	460d      	mov	r5, r1
 800a662:	ec51 0b18 	vmov	r0, r1, d8
 800a666:	f7f5 ffc7 	bl	80005f8 <__aeabi_dmul>
 800a66a:	4622      	mov	r2, r4
 800a66c:	462b      	mov	r3, r5
 800a66e:	f7f5 fe0b 	bl	8000288 <__aeabi_dsub>
 800a672:	4604      	mov	r4, r0
 800a674:	460d      	mov	r5, r1
 800a676:	e75f      	b.n	800a538 <__ieee754_rem_pio2+0x1a0>
 800a678:	4b1b      	ldr	r3, [pc, #108]	; (800a6e8 <__ieee754_rem_pio2+0x350>)
 800a67a:	4598      	cmp	r8, r3
 800a67c:	dd36      	ble.n	800a6ec <__ieee754_rem_pio2+0x354>
 800a67e:	ee10 2a10 	vmov	r2, s0
 800a682:	462b      	mov	r3, r5
 800a684:	4620      	mov	r0, r4
 800a686:	4629      	mov	r1, r5
 800a688:	f7f5 fdfe 	bl	8000288 <__aeabi_dsub>
 800a68c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a690:	e9ca 0100 	strd	r0, r1, [sl]
 800a694:	e694      	b.n	800a3c0 <__ieee754_rem_pio2+0x28>
 800a696:	bf00      	nop
 800a698:	54400000 	.word	0x54400000
 800a69c:	3ff921fb 	.word	0x3ff921fb
 800a6a0:	1a626331 	.word	0x1a626331
 800a6a4:	3dd0b461 	.word	0x3dd0b461
 800a6a8:	1a600000 	.word	0x1a600000
 800a6ac:	3dd0b461 	.word	0x3dd0b461
 800a6b0:	2e037073 	.word	0x2e037073
 800a6b4:	3ba3198a 	.word	0x3ba3198a
 800a6b8:	6dc9c883 	.word	0x6dc9c883
 800a6bc:	3fe45f30 	.word	0x3fe45f30
 800a6c0:	2e000000 	.word	0x2e000000
 800a6c4:	3ba3198a 	.word	0x3ba3198a
 800a6c8:	252049c1 	.word	0x252049c1
 800a6cc:	397b839a 	.word	0x397b839a
 800a6d0:	3fe921fb 	.word	0x3fe921fb
 800a6d4:	4002d97b 	.word	0x4002d97b
 800a6d8:	3ff921fb 	.word	0x3ff921fb
 800a6dc:	413921fb 	.word	0x413921fb
 800a6e0:	3fe00000 	.word	0x3fe00000
 800a6e4:	0800fe2c 	.word	0x0800fe2c
 800a6e8:	7fefffff 	.word	0x7fefffff
 800a6ec:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a6f0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a6f4:	ee10 0a10 	vmov	r0, s0
 800a6f8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a6fc:	ee10 6a10 	vmov	r6, s0
 800a700:	460f      	mov	r7, r1
 800a702:	f7f6 fa29 	bl	8000b58 <__aeabi_d2iz>
 800a706:	f7f5 ff0d 	bl	8000524 <__aeabi_i2d>
 800a70a:	4602      	mov	r2, r0
 800a70c:	460b      	mov	r3, r1
 800a70e:	4630      	mov	r0, r6
 800a710:	4639      	mov	r1, r7
 800a712:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a716:	f7f5 fdb7 	bl	8000288 <__aeabi_dsub>
 800a71a:	4b23      	ldr	r3, [pc, #140]	; (800a7a8 <__ieee754_rem_pio2+0x410>)
 800a71c:	2200      	movs	r2, #0
 800a71e:	f7f5 ff6b 	bl	80005f8 <__aeabi_dmul>
 800a722:	460f      	mov	r7, r1
 800a724:	4606      	mov	r6, r0
 800a726:	f7f6 fa17 	bl	8000b58 <__aeabi_d2iz>
 800a72a:	f7f5 fefb 	bl	8000524 <__aeabi_i2d>
 800a72e:	4602      	mov	r2, r0
 800a730:	460b      	mov	r3, r1
 800a732:	4630      	mov	r0, r6
 800a734:	4639      	mov	r1, r7
 800a736:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a73a:	f7f5 fda5 	bl	8000288 <__aeabi_dsub>
 800a73e:	4b1a      	ldr	r3, [pc, #104]	; (800a7a8 <__ieee754_rem_pio2+0x410>)
 800a740:	2200      	movs	r2, #0
 800a742:	f7f5 ff59 	bl	80005f8 <__aeabi_dmul>
 800a746:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a74a:	ad04      	add	r5, sp, #16
 800a74c:	f04f 0803 	mov.w	r8, #3
 800a750:	46a9      	mov	r9, r5
 800a752:	2600      	movs	r6, #0
 800a754:	2700      	movs	r7, #0
 800a756:	4632      	mov	r2, r6
 800a758:	463b      	mov	r3, r7
 800a75a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a75e:	46c3      	mov	fp, r8
 800a760:	3d08      	subs	r5, #8
 800a762:	f108 38ff 	add.w	r8, r8, #4294967295
 800a766:	f7f6 f9af 	bl	8000ac8 <__aeabi_dcmpeq>
 800a76a:	2800      	cmp	r0, #0
 800a76c:	d1f3      	bne.n	800a756 <__ieee754_rem_pio2+0x3be>
 800a76e:	4b0f      	ldr	r3, [pc, #60]	; (800a7ac <__ieee754_rem_pio2+0x414>)
 800a770:	9301      	str	r3, [sp, #4]
 800a772:	2302      	movs	r3, #2
 800a774:	9300      	str	r3, [sp, #0]
 800a776:	4622      	mov	r2, r4
 800a778:	465b      	mov	r3, fp
 800a77a:	4651      	mov	r1, sl
 800a77c:	4648      	mov	r0, r9
 800a77e:	f000 f8df 	bl	800a940 <__kernel_rem_pio2>
 800a782:	9b02      	ldr	r3, [sp, #8]
 800a784:	2b00      	cmp	r3, #0
 800a786:	4683      	mov	fp, r0
 800a788:	f6bf ae46 	bge.w	800a418 <__ieee754_rem_pio2+0x80>
 800a78c:	e9da 2100 	ldrd	r2, r1, [sl]
 800a790:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a794:	e9ca 2300 	strd	r2, r3, [sl]
 800a798:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a79c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7a0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a7a4:	e73a      	b.n	800a61c <__ieee754_rem_pio2+0x284>
 800a7a6:	bf00      	nop
 800a7a8:	41700000 	.word	0x41700000
 800a7ac:	0800feac 	.word	0x0800feac

0800a7b0 <__kernel_cos>:
 800a7b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b4:	ec57 6b10 	vmov	r6, r7, d0
 800a7b8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a7bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a7c0:	ed8d 1b00 	vstr	d1, [sp]
 800a7c4:	da07      	bge.n	800a7d6 <__kernel_cos+0x26>
 800a7c6:	ee10 0a10 	vmov	r0, s0
 800a7ca:	4639      	mov	r1, r7
 800a7cc:	f7f6 f9c4 	bl	8000b58 <__aeabi_d2iz>
 800a7d0:	2800      	cmp	r0, #0
 800a7d2:	f000 8088 	beq.w	800a8e6 <__kernel_cos+0x136>
 800a7d6:	4632      	mov	r2, r6
 800a7d8:	463b      	mov	r3, r7
 800a7da:	4630      	mov	r0, r6
 800a7dc:	4639      	mov	r1, r7
 800a7de:	f7f5 ff0b 	bl	80005f8 <__aeabi_dmul>
 800a7e2:	4b51      	ldr	r3, [pc, #324]	; (800a928 <__kernel_cos+0x178>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	4604      	mov	r4, r0
 800a7e8:	460d      	mov	r5, r1
 800a7ea:	f7f5 ff05 	bl	80005f8 <__aeabi_dmul>
 800a7ee:	a340      	add	r3, pc, #256	; (adr r3, 800a8f0 <__kernel_cos+0x140>)
 800a7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f4:	4682      	mov	sl, r0
 800a7f6:	468b      	mov	fp, r1
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	4629      	mov	r1, r5
 800a7fc:	f7f5 fefc 	bl	80005f8 <__aeabi_dmul>
 800a800:	a33d      	add	r3, pc, #244	; (adr r3, 800a8f8 <__kernel_cos+0x148>)
 800a802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a806:	f7f5 fd41 	bl	800028c <__adddf3>
 800a80a:	4622      	mov	r2, r4
 800a80c:	462b      	mov	r3, r5
 800a80e:	f7f5 fef3 	bl	80005f8 <__aeabi_dmul>
 800a812:	a33b      	add	r3, pc, #236	; (adr r3, 800a900 <__kernel_cos+0x150>)
 800a814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a818:	f7f5 fd36 	bl	8000288 <__aeabi_dsub>
 800a81c:	4622      	mov	r2, r4
 800a81e:	462b      	mov	r3, r5
 800a820:	f7f5 feea 	bl	80005f8 <__aeabi_dmul>
 800a824:	a338      	add	r3, pc, #224	; (adr r3, 800a908 <__kernel_cos+0x158>)
 800a826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82a:	f7f5 fd2f 	bl	800028c <__adddf3>
 800a82e:	4622      	mov	r2, r4
 800a830:	462b      	mov	r3, r5
 800a832:	f7f5 fee1 	bl	80005f8 <__aeabi_dmul>
 800a836:	a336      	add	r3, pc, #216	; (adr r3, 800a910 <__kernel_cos+0x160>)
 800a838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83c:	f7f5 fd24 	bl	8000288 <__aeabi_dsub>
 800a840:	4622      	mov	r2, r4
 800a842:	462b      	mov	r3, r5
 800a844:	f7f5 fed8 	bl	80005f8 <__aeabi_dmul>
 800a848:	a333      	add	r3, pc, #204	; (adr r3, 800a918 <__kernel_cos+0x168>)
 800a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84e:	f7f5 fd1d 	bl	800028c <__adddf3>
 800a852:	4622      	mov	r2, r4
 800a854:	462b      	mov	r3, r5
 800a856:	f7f5 fecf 	bl	80005f8 <__aeabi_dmul>
 800a85a:	4622      	mov	r2, r4
 800a85c:	462b      	mov	r3, r5
 800a85e:	f7f5 fecb 	bl	80005f8 <__aeabi_dmul>
 800a862:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a866:	4604      	mov	r4, r0
 800a868:	460d      	mov	r5, r1
 800a86a:	4630      	mov	r0, r6
 800a86c:	4639      	mov	r1, r7
 800a86e:	f7f5 fec3 	bl	80005f8 <__aeabi_dmul>
 800a872:	460b      	mov	r3, r1
 800a874:	4602      	mov	r2, r0
 800a876:	4629      	mov	r1, r5
 800a878:	4620      	mov	r0, r4
 800a87a:	f7f5 fd05 	bl	8000288 <__aeabi_dsub>
 800a87e:	4b2b      	ldr	r3, [pc, #172]	; (800a92c <__kernel_cos+0x17c>)
 800a880:	4598      	cmp	r8, r3
 800a882:	4606      	mov	r6, r0
 800a884:	460f      	mov	r7, r1
 800a886:	dc10      	bgt.n	800a8aa <__kernel_cos+0xfa>
 800a888:	4602      	mov	r2, r0
 800a88a:	460b      	mov	r3, r1
 800a88c:	4650      	mov	r0, sl
 800a88e:	4659      	mov	r1, fp
 800a890:	f7f5 fcfa 	bl	8000288 <__aeabi_dsub>
 800a894:	460b      	mov	r3, r1
 800a896:	4926      	ldr	r1, [pc, #152]	; (800a930 <__kernel_cos+0x180>)
 800a898:	4602      	mov	r2, r0
 800a89a:	2000      	movs	r0, #0
 800a89c:	f7f5 fcf4 	bl	8000288 <__aeabi_dsub>
 800a8a0:	ec41 0b10 	vmov	d0, r0, r1
 800a8a4:	b003      	add	sp, #12
 800a8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8aa:	4b22      	ldr	r3, [pc, #136]	; (800a934 <__kernel_cos+0x184>)
 800a8ac:	4920      	ldr	r1, [pc, #128]	; (800a930 <__kernel_cos+0x180>)
 800a8ae:	4598      	cmp	r8, r3
 800a8b0:	bfcc      	ite	gt
 800a8b2:	4d21      	ldrgt	r5, [pc, #132]	; (800a938 <__kernel_cos+0x188>)
 800a8b4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a8b8:	2400      	movs	r4, #0
 800a8ba:	4622      	mov	r2, r4
 800a8bc:	462b      	mov	r3, r5
 800a8be:	2000      	movs	r0, #0
 800a8c0:	f7f5 fce2 	bl	8000288 <__aeabi_dsub>
 800a8c4:	4622      	mov	r2, r4
 800a8c6:	4680      	mov	r8, r0
 800a8c8:	4689      	mov	r9, r1
 800a8ca:	462b      	mov	r3, r5
 800a8cc:	4650      	mov	r0, sl
 800a8ce:	4659      	mov	r1, fp
 800a8d0:	f7f5 fcda 	bl	8000288 <__aeabi_dsub>
 800a8d4:	4632      	mov	r2, r6
 800a8d6:	463b      	mov	r3, r7
 800a8d8:	f7f5 fcd6 	bl	8000288 <__aeabi_dsub>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	460b      	mov	r3, r1
 800a8e0:	4640      	mov	r0, r8
 800a8e2:	4649      	mov	r1, r9
 800a8e4:	e7da      	b.n	800a89c <__kernel_cos+0xec>
 800a8e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a920 <__kernel_cos+0x170>
 800a8ea:	e7db      	b.n	800a8a4 <__kernel_cos+0xf4>
 800a8ec:	f3af 8000 	nop.w
 800a8f0:	be8838d4 	.word	0xbe8838d4
 800a8f4:	bda8fae9 	.word	0xbda8fae9
 800a8f8:	bdb4b1c4 	.word	0xbdb4b1c4
 800a8fc:	3e21ee9e 	.word	0x3e21ee9e
 800a900:	809c52ad 	.word	0x809c52ad
 800a904:	3e927e4f 	.word	0x3e927e4f
 800a908:	19cb1590 	.word	0x19cb1590
 800a90c:	3efa01a0 	.word	0x3efa01a0
 800a910:	16c15177 	.word	0x16c15177
 800a914:	3f56c16c 	.word	0x3f56c16c
 800a918:	5555554c 	.word	0x5555554c
 800a91c:	3fa55555 	.word	0x3fa55555
 800a920:	00000000 	.word	0x00000000
 800a924:	3ff00000 	.word	0x3ff00000
 800a928:	3fe00000 	.word	0x3fe00000
 800a92c:	3fd33332 	.word	0x3fd33332
 800a930:	3ff00000 	.word	0x3ff00000
 800a934:	3fe90000 	.word	0x3fe90000
 800a938:	3fd20000 	.word	0x3fd20000
 800a93c:	00000000 	.word	0x00000000

0800a940 <__kernel_rem_pio2>:
 800a940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a944:	ed2d 8b02 	vpush	{d8}
 800a948:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a94c:	f112 0f14 	cmn.w	r2, #20
 800a950:	9308      	str	r3, [sp, #32]
 800a952:	9101      	str	r1, [sp, #4]
 800a954:	4bc4      	ldr	r3, [pc, #784]	; (800ac68 <__kernel_rem_pio2+0x328>)
 800a956:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a958:	900b      	str	r0, [sp, #44]	; 0x2c
 800a95a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a95e:	9302      	str	r3, [sp, #8]
 800a960:	9b08      	ldr	r3, [sp, #32]
 800a962:	f103 33ff 	add.w	r3, r3, #4294967295
 800a966:	bfa8      	it	ge
 800a968:	1ed4      	subge	r4, r2, #3
 800a96a:	9306      	str	r3, [sp, #24]
 800a96c:	bfb2      	itee	lt
 800a96e:	2400      	movlt	r4, #0
 800a970:	2318      	movge	r3, #24
 800a972:	fb94 f4f3 	sdivge	r4, r4, r3
 800a976:	f06f 0317 	mvn.w	r3, #23
 800a97a:	fb04 3303 	mla	r3, r4, r3, r3
 800a97e:	eb03 0a02 	add.w	sl, r3, r2
 800a982:	9b02      	ldr	r3, [sp, #8]
 800a984:	9a06      	ldr	r2, [sp, #24]
 800a986:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800ac58 <__kernel_rem_pio2+0x318>
 800a98a:	eb03 0802 	add.w	r8, r3, r2
 800a98e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a990:	1aa7      	subs	r7, r4, r2
 800a992:	ae22      	add	r6, sp, #136	; 0x88
 800a994:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a998:	2500      	movs	r5, #0
 800a99a:	4545      	cmp	r5, r8
 800a99c:	dd13      	ble.n	800a9c6 <__kernel_rem_pio2+0x86>
 800a99e:	9b08      	ldr	r3, [sp, #32]
 800a9a0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800ac58 <__kernel_rem_pio2+0x318>
 800a9a4:	aa22      	add	r2, sp, #136	; 0x88
 800a9a6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a9aa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a9ae:	f04f 0800 	mov.w	r8, #0
 800a9b2:	9b02      	ldr	r3, [sp, #8]
 800a9b4:	4598      	cmp	r8, r3
 800a9b6:	dc2f      	bgt.n	800aa18 <__kernel_rem_pio2+0xd8>
 800a9b8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a9bc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a9c0:	462f      	mov	r7, r5
 800a9c2:	2600      	movs	r6, #0
 800a9c4:	e01b      	b.n	800a9fe <__kernel_rem_pio2+0xbe>
 800a9c6:	42ef      	cmn	r7, r5
 800a9c8:	d407      	bmi.n	800a9da <__kernel_rem_pio2+0x9a>
 800a9ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a9ce:	f7f5 fda9 	bl	8000524 <__aeabi_i2d>
 800a9d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a9d6:	3501      	adds	r5, #1
 800a9d8:	e7df      	b.n	800a99a <__kernel_rem_pio2+0x5a>
 800a9da:	ec51 0b18 	vmov	r0, r1, d8
 800a9de:	e7f8      	b.n	800a9d2 <__kernel_rem_pio2+0x92>
 800a9e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a9e8:	f7f5 fe06 	bl	80005f8 <__aeabi_dmul>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9f4:	f7f5 fc4a 	bl	800028c <__adddf3>
 800a9f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a9fc:	3601      	adds	r6, #1
 800a9fe:	9b06      	ldr	r3, [sp, #24]
 800aa00:	429e      	cmp	r6, r3
 800aa02:	f1a7 0708 	sub.w	r7, r7, #8
 800aa06:	ddeb      	ble.n	800a9e0 <__kernel_rem_pio2+0xa0>
 800aa08:	ed9d 7b04 	vldr	d7, [sp, #16]
 800aa0c:	f108 0801 	add.w	r8, r8, #1
 800aa10:	ecab 7b02 	vstmia	fp!, {d7}
 800aa14:	3508      	adds	r5, #8
 800aa16:	e7cc      	b.n	800a9b2 <__kernel_rem_pio2+0x72>
 800aa18:	9b02      	ldr	r3, [sp, #8]
 800aa1a:	aa0e      	add	r2, sp, #56	; 0x38
 800aa1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aa20:	930d      	str	r3, [sp, #52]	; 0x34
 800aa22:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800aa24:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800aa28:	9c02      	ldr	r4, [sp, #8]
 800aa2a:	930c      	str	r3, [sp, #48]	; 0x30
 800aa2c:	00e3      	lsls	r3, r4, #3
 800aa2e:	930a      	str	r3, [sp, #40]	; 0x28
 800aa30:	ab9a      	add	r3, sp, #616	; 0x268
 800aa32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa36:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800aa3a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800aa3e:	ab72      	add	r3, sp, #456	; 0x1c8
 800aa40:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800aa44:	46c3      	mov	fp, r8
 800aa46:	46a1      	mov	r9, r4
 800aa48:	f1b9 0f00 	cmp.w	r9, #0
 800aa4c:	f1a5 0508 	sub.w	r5, r5, #8
 800aa50:	dc77      	bgt.n	800ab42 <__kernel_rem_pio2+0x202>
 800aa52:	ec47 6b10 	vmov	d0, r6, r7
 800aa56:	4650      	mov	r0, sl
 800aa58:	f000 fc0a 	bl	800b270 <scalbn>
 800aa5c:	ec57 6b10 	vmov	r6, r7, d0
 800aa60:	2200      	movs	r2, #0
 800aa62:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800aa66:	ee10 0a10 	vmov	r0, s0
 800aa6a:	4639      	mov	r1, r7
 800aa6c:	f7f5 fdc4 	bl	80005f8 <__aeabi_dmul>
 800aa70:	ec41 0b10 	vmov	d0, r0, r1
 800aa74:	f000 fb7c 	bl	800b170 <floor>
 800aa78:	4b7c      	ldr	r3, [pc, #496]	; (800ac6c <__kernel_rem_pio2+0x32c>)
 800aa7a:	ec51 0b10 	vmov	r0, r1, d0
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f7f5 fdba 	bl	80005f8 <__aeabi_dmul>
 800aa84:	4602      	mov	r2, r0
 800aa86:	460b      	mov	r3, r1
 800aa88:	4630      	mov	r0, r6
 800aa8a:	4639      	mov	r1, r7
 800aa8c:	f7f5 fbfc 	bl	8000288 <__aeabi_dsub>
 800aa90:	460f      	mov	r7, r1
 800aa92:	4606      	mov	r6, r0
 800aa94:	f7f6 f860 	bl	8000b58 <__aeabi_d2iz>
 800aa98:	9004      	str	r0, [sp, #16]
 800aa9a:	f7f5 fd43 	bl	8000524 <__aeabi_i2d>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	4639      	mov	r1, r7
 800aaa6:	f7f5 fbef 	bl	8000288 <__aeabi_dsub>
 800aaaa:	f1ba 0f00 	cmp.w	sl, #0
 800aaae:	4606      	mov	r6, r0
 800aab0:	460f      	mov	r7, r1
 800aab2:	dd6d      	ble.n	800ab90 <__kernel_rem_pio2+0x250>
 800aab4:	1e62      	subs	r2, r4, #1
 800aab6:	ab0e      	add	r3, sp, #56	; 0x38
 800aab8:	9d04      	ldr	r5, [sp, #16]
 800aaba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800aabe:	f1ca 0118 	rsb	r1, sl, #24
 800aac2:	fa40 f301 	asr.w	r3, r0, r1
 800aac6:	441d      	add	r5, r3
 800aac8:	408b      	lsls	r3, r1
 800aaca:	1ac0      	subs	r0, r0, r3
 800aacc:	ab0e      	add	r3, sp, #56	; 0x38
 800aace:	9504      	str	r5, [sp, #16]
 800aad0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800aad4:	f1ca 0317 	rsb	r3, sl, #23
 800aad8:	fa40 fb03 	asr.w	fp, r0, r3
 800aadc:	f1bb 0f00 	cmp.w	fp, #0
 800aae0:	dd65      	ble.n	800abae <__kernel_rem_pio2+0x26e>
 800aae2:	9b04      	ldr	r3, [sp, #16]
 800aae4:	2200      	movs	r2, #0
 800aae6:	3301      	adds	r3, #1
 800aae8:	9304      	str	r3, [sp, #16]
 800aaea:	4615      	mov	r5, r2
 800aaec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800aaf0:	4294      	cmp	r4, r2
 800aaf2:	f300 809c 	bgt.w	800ac2e <__kernel_rem_pio2+0x2ee>
 800aaf6:	f1ba 0f00 	cmp.w	sl, #0
 800aafa:	dd07      	ble.n	800ab0c <__kernel_rem_pio2+0x1cc>
 800aafc:	f1ba 0f01 	cmp.w	sl, #1
 800ab00:	f000 80c0 	beq.w	800ac84 <__kernel_rem_pio2+0x344>
 800ab04:	f1ba 0f02 	cmp.w	sl, #2
 800ab08:	f000 80c6 	beq.w	800ac98 <__kernel_rem_pio2+0x358>
 800ab0c:	f1bb 0f02 	cmp.w	fp, #2
 800ab10:	d14d      	bne.n	800abae <__kernel_rem_pio2+0x26e>
 800ab12:	4632      	mov	r2, r6
 800ab14:	463b      	mov	r3, r7
 800ab16:	4956      	ldr	r1, [pc, #344]	; (800ac70 <__kernel_rem_pio2+0x330>)
 800ab18:	2000      	movs	r0, #0
 800ab1a:	f7f5 fbb5 	bl	8000288 <__aeabi_dsub>
 800ab1e:	4606      	mov	r6, r0
 800ab20:	460f      	mov	r7, r1
 800ab22:	2d00      	cmp	r5, #0
 800ab24:	d043      	beq.n	800abae <__kernel_rem_pio2+0x26e>
 800ab26:	4650      	mov	r0, sl
 800ab28:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800ac60 <__kernel_rem_pio2+0x320>
 800ab2c:	f000 fba0 	bl	800b270 <scalbn>
 800ab30:	4630      	mov	r0, r6
 800ab32:	4639      	mov	r1, r7
 800ab34:	ec53 2b10 	vmov	r2, r3, d0
 800ab38:	f7f5 fba6 	bl	8000288 <__aeabi_dsub>
 800ab3c:	4606      	mov	r6, r0
 800ab3e:	460f      	mov	r7, r1
 800ab40:	e035      	b.n	800abae <__kernel_rem_pio2+0x26e>
 800ab42:	4b4c      	ldr	r3, [pc, #304]	; (800ac74 <__kernel_rem_pio2+0x334>)
 800ab44:	2200      	movs	r2, #0
 800ab46:	4630      	mov	r0, r6
 800ab48:	4639      	mov	r1, r7
 800ab4a:	f7f5 fd55 	bl	80005f8 <__aeabi_dmul>
 800ab4e:	f7f6 f803 	bl	8000b58 <__aeabi_d2iz>
 800ab52:	f7f5 fce7 	bl	8000524 <__aeabi_i2d>
 800ab56:	4602      	mov	r2, r0
 800ab58:	460b      	mov	r3, r1
 800ab5a:	ec43 2b18 	vmov	d8, r2, r3
 800ab5e:	4b46      	ldr	r3, [pc, #280]	; (800ac78 <__kernel_rem_pio2+0x338>)
 800ab60:	2200      	movs	r2, #0
 800ab62:	f7f5 fd49 	bl	80005f8 <__aeabi_dmul>
 800ab66:	4602      	mov	r2, r0
 800ab68:	460b      	mov	r3, r1
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	4639      	mov	r1, r7
 800ab6e:	f7f5 fb8b 	bl	8000288 <__aeabi_dsub>
 800ab72:	f7f5 fff1 	bl	8000b58 <__aeabi_d2iz>
 800ab76:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab7a:	f84b 0b04 	str.w	r0, [fp], #4
 800ab7e:	ec51 0b18 	vmov	r0, r1, d8
 800ab82:	f7f5 fb83 	bl	800028c <__adddf3>
 800ab86:	f109 39ff 	add.w	r9, r9, #4294967295
 800ab8a:	4606      	mov	r6, r0
 800ab8c:	460f      	mov	r7, r1
 800ab8e:	e75b      	b.n	800aa48 <__kernel_rem_pio2+0x108>
 800ab90:	d106      	bne.n	800aba0 <__kernel_rem_pio2+0x260>
 800ab92:	1e63      	subs	r3, r4, #1
 800ab94:	aa0e      	add	r2, sp, #56	; 0x38
 800ab96:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ab9a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800ab9e:	e79d      	b.n	800aadc <__kernel_rem_pio2+0x19c>
 800aba0:	4b36      	ldr	r3, [pc, #216]	; (800ac7c <__kernel_rem_pio2+0x33c>)
 800aba2:	2200      	movs	r2, #0
 800aba4:	f7f5 ffae 	bl	8000b04 <__aeabi_dcmpge>
 800aba8:	2800      	cmp	r0, #0
 800abaa:	d13d      	bne.n	800ac28 <__kernel_rem_pio2+0x2e8>
 800abac:	4683      	mov	fp, r0
 800abae:	2200      	movs	r2, #0
 800abb0:	2300      	movs	r3, #0
 800abb2:	4630      	mov	r0, r6
 800abb4:	4639      	mov	r1, r7
 800abb6:	f7f5 ff87 	bl	8000ac8 <__aeabi_dcmpeq>
 800abba:	2800      	cmp	r0, #0
 800abbc:	f000 80c0 	beq.w	800ad40 <__kernel_rem_pio2+0x400>
 800abc0:	1e65      	subs	r5, r4, #1
 800abc2:	462b      	mov	r3, r5
 800abc4:	2200      	movs	r2, #0
 800abc6:	9902      	ldr	r1, [sp, #8]
 800abc8:	428b      	cmp	r3, r1
 800abca:	da6c      	bge.n	800aca6 <__kernel_rem_pio2+0x366>
 800abcc:	2a00      	cmp	r2, #0
 800abce:	f000 8089 	beq.w	800ace4 <__kernel_rem_pio2+0x3a4>
 800abd2:	ab0e      	add	r3, sp, #56	; 0x38
 800abd4:	f1aa 0a18 	sub.w	sl, sl, #24
 800abd8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	f000 80ad 	beq.w	800ad3c <__kernel_rem_pio2+0x3fc>
 800abe2:	4650      	mov	r0, sl
 800abe4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800ac60 <__kernel_rem_pio2+0x320>
 800abe8:	f000 fb42 	bl	800b270 <scalbn>
 800abec:	ab9a      	add	r3, sp, #616	; 0x268
 800abee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800abf2:	ec57 6b10 	vmov	r6, r7, d0
 800abf6:	00ec      	lsls	r4, r5, #3
 800abf8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800abfc:	46aa      	mov	sl, r5
 800abfe:	f1ba 0f00 	cmp.w	sl, #0
 800ac02:	f280 80d6 	bge.w	800adb2 <__kernel_rem_pio2+0x472>
 800ac06:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800ac58 <__kernel_rem_pio2+0x318>
 800ac0a:	462e      	mov	r6, r5
 800ac0c:	2e00      	cmp	r6, #0
 800ac0e:	f2c0 8104 	blt.w	800ae1a <__kernel_rem_pio2+0x4da>
 800ac12:	ab72      	add	r3, sp, #456	; 0x1c8
 800ac14:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ac18:	f8df a064 	ldr.w	sl, [pc, #100]	; 800ac80 <__kernel_rem_pio2+0x340>
 800ac1c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800ac20:	f04f 0800 	mov.w	r8, #0
 800ac24:	1baf      	subs	r7, r5, r6
 800ac26:	e0ea      	b.n	800adfe <__kernel_rem_pio2+0x4be>
 800ac28:	f04f 0b02 	mov.w	fp, #2
 800ac2c:	e759      	b.n	800aae2 <__kernel_rem_pio2+0x1a2>
 800ac2e:	f8d8 3000 	ldr.w	r3, [r8]
 800ac32:	b955      	cbnz	r5, 800ac4a <__kernel_rem_pio2+0x30a>
 800ac34:	b123      	cbz	r3, 800ac40 <__kernel_rem_pio2+0x300>
 800ac36:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ac3a:	f8c8 3000 	str.w	r3, [r8]
 800ac3e:	2301      	movs	r3, #1
 800ac40:	3201      	adds	r2, #1
 800ac42:	f108 0804 	add.w	r8, r8, #4
 800ac46:	461d      	mov	r5, r3
 800ac48:	e752      	b.n	800aaf0 <__kernel_rem_pio2+0x1b0>
 800ac4a:	1acb      	subs	r3, r1, r3
 800ac4c:	f8c8 3000 	str.w	r3, [r8]
 800ac50:	462b      	mov	r3, r5
 800ac52:	e7f5      	b.n	800ac40 <__kernel_rem_pio2+0x300>
 800ac54:	f3af 8000 	nop.w
	...
 800ac64:	3ff00000 	.word	0x3ff00000
 800ac68:	0800fff8 	.word	0x0800fff8
 800ac6c:	40200000 	.word	0x40200000
 800ac70:	3ff00000 	.word	0x3ff00000
 800ac74:	3e700000 	.word	0x3e700000
 800ac78:	41700000 	.word	0x41700000
 800ac7c:	3fe00000 	.word	0x3fe00000
 800ac80:	0800ffb8 	.word	0x0800ffb8
 800ac84:	1e62      	subs	r2, r4, #1
 800ac86:	ab0e      	add	r3, sp, #56	; 0x38
 800ac88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac8c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ac90:	a90e      	add	r1, sp, #56	; 0x38
 800ac92:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ac96:	e739      	b.n	800ab0c <__kernel_rem_pio2+0x1cc>
 800ac98:	1e62      	subs	r2, r4, #1
 800ac9a:	ab0e      	add	r3, sp, #56	; 0x38
 800ac9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aca0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800aca4:	e7f4      	b.n	800ac90 <__kernel_rem_pio2+0x350>
 800aca6:	a90e      	add	r1, sp, #56	; 0x38
 800aca8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800acac:	3b01      	subs	r3, #1
 800acae:	430a      	orrs	r2, r1
 800acb0:	e789      	b.n	800abc6 <__kernel_rem_pio2+0x286>
 800acb2:	3301      	adds	r3, #1
 800acb4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800acb8:	2900      	cmp	r1, #0
 800acba:	d0fa      	beq.n	800acb2 <__kernel_rem_pio2+0x372>
 800acbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acbe:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800acc2:	446a      	add	r2, sp
 800acc4:	3a98      	subs	r2, #152	; 0x98
 800acc6:	920a      	str	r2, [sp, #40]	; 0x28
 800acc8:	9a08      	ldr	r2, [sp, #32]
 800acca:	18e3      	adds	r3, r4, r3
 800accc:	18a5      	adds	r5, r4, r2
 800acce:	aa22      	add	r2, sp, #136	; 0x88
 800acd0:	f104 0801 	add.w	r8, r4, #1
 800acd4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800acd8:	9304      	str	r3, [sp, #16]
 800acda:	9b04      	ldr	r3, [sp, #16]
 800acdc:	4543      	cmp	r3, r8
 800acde:	da04      	bge.n	800acea <__kernel_rem_pio2+0x3aa>
 800ace0:	461c      	mov	r4, r3
 800ace2:	e6a3      	b.n	800aa2c <__kernel_rem_pio2+0xec>
 800ace4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ace6:	2301      	movs	r3, #1
 800ace8:	e7e4      	b.n	800acb4 <__kernel_rem_pio2+0x374>
 800acea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800acf0:	f7f5 fc18 	bl	8000524 <__aeabi_i2d>
 800acf4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800acf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acfa:	46ab      	mov	fp, r5
 800acfc:	461c      	mov	r4, r3
 800acfe:	f04f 0900 	mov.w	r9, #0
 800ad02:	2600      	movs	r6, #0
 800ad04:	2700      	movs	r7, #0
 800ad06:	9b06      	ldr	r3, [sp, #24]
 800ad08:	4599      	cmp	r9, r3
 800ad0a:	dd06      	ble.n	800ad1a <__kernel_rem_pio2+0x3da>
 800ad0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad0e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ad12:	f108 0801 	add.w	r8, r8, #1
 800ad16:	930a      	str	r3, [sp, #40]	; 0x28
 800ad18:	e7df      	b.n	800acda <__kernel_rem_pio2+0x39a>
 800ad1a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ad1e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ad22:	f7f5 fc69 	bl	80005f8 <__aeabi_dmul>
 800ad26:	4602      	mov	r2, r0
 800ad28:	460b      	mov	r3, r1
 800ad2a:	4630      	mov	r0, r6
 800ad2c:	4639      	mov	r1, r7
 800ad2e:	f7f5 faad 	bl	800028c <__adddf3>
 800ad32:	f109 0901 	add.w	r9, r9, #1
 800ad36:	4606      	mov	r6, r0
 800ad38:	460f      	mov	r7, r1
 800ad3a:	e7e4      	b.n	800ad06 <__kernel_rem_pio2+0x3c6>
 800ad3c:	3d01      	subs	r5, #1
 800ad3e:	e748      	b.n	800abd2 <__kernel_rem_pio2+0x292>
 800ad40:	ec47 6b10 	vmov	d0, r6, r7
 800ad44:	f1ca 0000 	rsb	r0, sl, #0
 800ad48:	f000 fa92 	bl	800b270 <scalbn>
 800ad4c:	ec57 6b10 	vmov	r6, r7, d0
 800ad50:	4ba0      	ldr	r3, [pc, #640]	; (800afd4 <__kernel_rem_pio2+0x694>)
 800ad52:	ee10 0a10 	vmov	r0, s0
 800ad56:	2200      	movs	r2, #0
 800ad58:	4639      	mov	r1, r7
 800ad5a:	f7f5 fed3 	bl	8000b04 <__aeabi_dcmpge>
 800ad5e:	b1f8      	cbz	r0, 800ada0 <__kernel_rem_pio2+0x460>
 800ad60:	4b9d      	ldr	r3, [pc, #628]	; (800afd8 <__kernel_rem_pio2+0x698>)
 800ad62:	2200      	movs	r2, #0
 800ad64:	4630      	mov	r0, r6
 800ad66:	4639      	mov	r1, r7
 800ad68:	f7f5 fc46 	bl	80005f8 <__aeabi_dmul>
 800ad6c:	f7f5 fef4 	bl	8000b58 <__aeabi_d2iz>
 800ad70:	4680      	mov	r8, r0
 800ad72:	f7f5 fbd7 	bl	8000524 <__aeabi_i2d>
 800ad76:	4b97      	ldr	r3, [pc, #604]	; (800afd4 <__kernel_rem_pio2+0x694>)
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f7f5 fc3d 	bl	80005f8 <__aeabi_dmul>
 800ad7e:	460b      	mov	r3, r1
 800ad80:	4602      	mov	r2, r0
 800ad82:	4639      	mov	r1, r7
 800ad84:	4630      	mov	r0, r6
 800ad86:	f7f5 fa7f 	bl	8000288 <__aeabi_dsub>
 800ad8a:	f7f5 fee5 	bl	8000b58 <__aeabi_d2iz>
 800ad8e:	1c65      	adds	r5, r4, #1
 800ad90:	ab0e      	add	r3, sp, #56	; 0x38
 800ad92:	f10a 0a18 	add.w	sl, sl, #24
 800ad96:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ad9a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ad9e:	e720      	b.n	800abe2 <__kernel_rem_pio2+0x2a2>
 800ada0:	4630      	mov	r0, r6
 800ada2:	4639      	mov	r1, r7
 800ada4:	f7f5 fed8 	bl	8000b58 <__aeabi_d2iz>
 800ada8:	ab0e      	add	r3, sp, #56	; 0x38
 800adaa:	4625      	mov	r5, r4
 800adac:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800adb0:	e717      	b.n	800abe2 <__kernel_rem_pio2+0x2a2>
 800adb2:	ab0e      	add	r3, sp, #56	; 0x38
 800adb4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800adb8:	f7f5 fbb4 	bl	8000524 <__aeabi_i2d>
 800adbc:	4632      	mov	r2, r6
 800adbe:	463b      	mov	r3, r7
 800adc0:	f7f5 fc1a 	bl	80005f8 <__aeabi_dmul>
 800adc4:	4b84      	ldr	r3, [pc, #528]	; (800afd8 <__kernel_rem_pio2+0x698>)
 800adc6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800adca:	2200      	movs	r2, #0
 800adcc:	4630      	mov	r0, r6
 800adce:	4639      	mov	r1, r7
 800add0:	f7f5 fc12 	bl	80005f8 <__aeabi_dmul>
 800add4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800add8:	4606      	mov	r6, r0
 800adda:	460f      	mov	r7, r1
 800addc:	e70f      	b.n	800abfe <__kernel_rem_pio2+0x2be>
 800adde:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ade2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ade6:	f7f5 fc07 	bl	80005f8 <__aeabi_dmul>
 800adea:	4602      	mov	r2, r0
 800adec:	460b      	mov	r3, r1
 800adee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800adf2:	f7f5 fa4b 	bl	800028c <__adddf3>
 800adf6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800adfa:	f108 0801 	add.w	r8, r8, #1
 800adfe:	9b02      	ldr	r3, [sp, #8]
 800ae00:	4598      	cmp	r8, r3
 800ae02:	dc01      	bgt.n	800ae08 <__kernel_rem_pio2+0x4c8>
 800ae04:	45b8      	cmp	r8, r7
 800ae06:	ddea      	ble.n	800adde <__kernel_rem_pio2+0x49e>
 800ae08:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ae0c:	ab4a      	add	r3, sp, #296	; 0x128
 800ae0e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ae12:	ed87 7b00 	vstr	d7, [r7]
 800ae16:	3e01      	subs	r6, #1
 800ae18:	e6f8      	b.n	800ac0c <__kernel_rem_pio2+0x2cc>
 800ae1a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ae1c:	2b02      	cmp	r3, #2
 800ae1e:	dc0b      	bgt.n	800ae38 <__kernel_rem_pio2+0x4f8>
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	dc35      	bgt.n	800ae90 <__kernel_rem_pio2+0x550>
 800ae24:	d059      	beq.n	800aeda <__kernel_rem_pio2+0x59a>
 800ae26:	9b04      	ldr	r3, [sp, #16]
 800ae28:	f003 0007 	and.w	r0, r3, #7
 800ae2c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ae30:	ecbd 8b02 	vpop	{d8}
 800ae34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae38:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ae3a:	2b03      	cmp	r3, #3
 800ae3c:	d1f3      	bne.n	800ae26 <__kernel_rem_pio2+0x4e6>
 800ae3e:	ab4a      	add	r3, sp, #296	; 0x128
 800ae40:	4423      	add	r3, r4
 800ae42:	9306      	str	r3, [sp, #24]
 800ae44:	461c      	mov	r4, r3
 800ae46:	469a      	mov	sl, r3
 800ae48:	9502      	str	r5, [sp, #8]
 800ae4a:	9b02      	ldr	r3, [sp, #8]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	f1aa 0a08 	sub.w	sl, sl, #8
 800ae52:	dc6b      	bgt.n	800af2c <__kernel_rem_pio2+0x5ec>
 800ae54:	46aa      	mov	sl, r5
 800ae56:	f1ba 0f01 	cmp.w	sl, #1
 800ae5a:	f1a4 0408 	sub.w	r4, r4, #8
 800ae5e:	f300 8085 	bgt.w	800af6c <__kernel_rem_pio2+0x62c>
 800ae62:	9c06      	ldr	r4, [sp, #24]
 800ae64:	2000      	movs	r0, #0
 800ae66:	3408      	adds	r4, #8
 800ae68:	2100      	movs	r1, #0
 800ae6a:	2d01      	cmp	r5, #1
 800ae6c:	f300 809d 	bgt.w	800afaa <__kernel_rem_pio2+0x66a>
 800ae70:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ae74:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800ae78:	f1bb 0f00 	cmp.w	fp, #0
 800ae7c:	f040 809b 	bne.w	800afb6 <__kernel_rem_pio2+0x676>
 800ae80:	9b01      	ldr	r3, [sp, #4]
 800ae82:	e9c3 5600 	strd	r5, r6, [r3]
 800ae86:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ae8a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ae8e:	e7ca      	b.n	800ae26 <__kernel_rem_pio2+0x4e6>
 800ae90:	3408      	adds	r4, #8
 800ae92:	ab4a      	add	r3, sp, #296	; 0x128
 800ae94:	441c      	add	r4, r3
 800ae96:	462e      	mov	r6, r5
 800ae98:	2000      	movs	r0, #0
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	2e00      	cmp	r6, #0
 800ae9e:	da36      	bge.n	800af0e <__kernel_rem_pio2+0x5ce>
 800aea0:	f1bb 0f00 	cmp.w	fp, #0
 800aea4:	d039      	beq.n	800af1a <__kernel_rem_pio2+0x5da>
 800aea6:	4602      	mov	r2, r0
 800aea8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aeac:	9c01      	ldr	r4, [sp, #4]
 800aeae:	e9c4 2300 	strd	r2, r3, [r4]
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800aeba:	f7f5 f9e5 	bl	8000288 <__aeabi_dsub>
 800aebe:	ae4c      	add	r6, sp, #304	; 0x130
 800aec0:	2401      	movs	r4, #1
 800aec2:	42a5      	cmp	r5, r4
 800aec4:	da2c      	bge.n	800af20 <__kernel_rem_pio2+0x5e0>
 800aec6:	f1bb 0f00 	cmp.w	fp, #0
 800aeca:	d002      	beq.n	800aed2 <__kernel_rem_pio2+0x592>
 800aecc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aed0:	4619      	mov	r1, r3
 800aed2:	9b01      	ldr	r3, [sp, #4]
 800aed4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800aed8:	e7a5      	b.n	800ae26 <__kernel_rem_pio2+0x4e6>
 800aeda:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800aede:	eb0d 0403 	add.w	r4, sp, r3
 800aee2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800aee6:	2000      	movs	r0, #0
 800aee8:	2100      	movs	r1, #0
 800aeea:	2d00      	cmp	r5, #0
 800aeec:	da09      	bge.n	800af02 <__kernel_rem_pio2+0x5c2>
 800aeee:	f1bb 0f00 	cmp.w	fp, #0
 800aef2:	d002      	beq.n	800aefa <__kernel_rem_pio2+0x5ba>
 800aef4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aef8:	4619      	mov	r1, r3
 800aefa:	9b01      	ldr	r3, [sp, #4]
 800aefc:	e9c3 0100 	strd	r0, r1, [r3]
 800af00:	e791      	b.n	800ae26 <__kernel_rem_pio2+0x4e6>
 800af02:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800af06:	f7f5 f9c1 	bl	800028c <__adddf3>
 800af0a:	3d01      	subs	r5, #1
 800af0c:	e7ed      	b.n	800aeea <__kernel_rem_pio2+0x5aa>
 800af0e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800af12:	f7f5 f9bb 	bl	800028c <__adddf3>
 800af16:	3e01      	subs	r6, #1
 800af18:	e7c0      	b.n	800ae9c <__kernel_rem_pio2+0x55c>
 800af1a:	4602      	mov	r2, r0
 800af1c:	460b      	mov	r3, r1
 800af1e:	e7c5      	b.n	800aeac <__kernel_rem_pio2+0x56c>
 800af20:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800af24:	f7f5 f9b2 	bl	800028c <__adddf3>
 800af28:	3401      	adds	r4, #1
 800af2a:	e7ca      	b.n	800aec2 <__kernel_rem_pio2+0x582>
 800af2c:	e9da 8900 	ldrd	r8, r9, [sl]
 800af30:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800af34:	9b02      	ldr	r3, [sp, #8]
 800af36:	3b01      	subs	r3, #1
 800af38:	9302      	str	r3, [sp, #8]
 800af3a:	4632      	mov	r2, r6
 800af3c:	463b      	mov	r3, r7
 800af3e:	4640      	mov	r0, r8
 800af40:	4649      	mov	r1, r9
 800af42:	f7f5 f9a3 	bl	800028c <__adddf3>
 800af46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800af4a:	4602      	mov	r2, r0
 800af4c:	460b      	mov	r3, r1
 800af4e:	4640      	mov	r0, r8
 800af50:	4649      	mov	r1, r9
 800af52:	f7f5 f999 	bl	8000288 <__aeabi_dsub>
 800af56:	4632      	mov	r2, r6
 800af58:	463b      	mov	r3, r7
 800af5a:	f7f5 f997 	bl	800028c <__adddf3>
 800af5e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800af62:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800af66:	ed8a 7b00 	vstr	d7, [sl]
 800af6a:	e76e      	b.n	800ae4a <__kernel_rem_pio2+0x50a>
 800af6c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800af70:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800af74:	4640      	mov	r0, r8
 800af76:	4632      	mov	r2, r6
 800af78:	463b      	mov	r3, r7
 800af7a:	4649      	mov	r1, r9
 800af7c:	f7f5 f986 	bl	800028c <__adddf3>
 800af80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af84:	4602      	mov	r2, r0
 800af86:	460b      	mov	r3, r1
 800af88:	4640      	mov	r0, r8
 800af8a:	4649      	mov	r1, r9
 800af8c:	f7f5 f97c 	bl	8000288 <__aeabi_dsub>
 800af90:	4632      	mov	r2, r6
 800af92:	463b      	mov	r3, r7
 800af94:	f7f5 f97a 	bl	800028c <__adddf3>
 800af98:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800afa0:	ed84 7b00 	vstr	d7, [r4]
 800afa4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afa8:	e755      	b.n	800ae56 <__kernel_rem_pio2+0x516>
 800afaa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800afae:	f7f5 f96d 	bl	800028c <__adddf3>
 800afb2:	3d01      	subs	r5, #1
 800afb4:	e759      	b.n	800ae6a <__kernel_rem_pio2+0x52a>
 800afb6:	9b01      	ldr	r3, [sp, #4]
 800afb8:	9a01      	ldr	r2, [sp, #4]
 800afba:	601d      	str	r5, [r3, #0]
 800afbc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800afc0:	605c      	str	r4, [r3, #4]
 800afc2:	609f      	str	r7, [r3, #8]
 800afc4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800afc8:	60d3      	str	r3, [r2, #12]
 800afca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800afce:	6110      	str	r0, [r2, #16]
 800afd0:	6153      	str	r3, [r2, #20]
 800afd2:	e728      	b.n	800ae26 <__kernel_rem_pio2+0x4e6>
 800afd4:	41700000 	.word	0x41700000
 800afd8:	3e700000 	.word	0x3e700000
 800afdc:	00000000 	.word	0x00000000

0800afe0 <__kernel_sin>:
 800afe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe4:	ed2d 8b04 	vpush	{d8-d9}
 800afe8:	eeb0 8a41 	vmov.f32	s16, s2
 800afec:	eef0 8a61 	vmov.f32	s17, s3
 800aff0:	ec55 4b10 	vmov	r4, r5, d0
 800aff4:	b083      	sub	sp, #12
 800aff6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800affa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800affe:	9001      	str	r0, [sp, #4]
 800b000:	da06      	bge.n	800b010 <__kernel_sin+0x30>
 800b002:	ee10 0a10 	vmov	r0, s0
 800b006:	4629      	mov	r1, r5
 800b008:	f7f5 fda6 	bl	8000b58 <__aeabi_d2iz>
 800b00c:	2800      	cmp	r0, #0
 800b00e:	d051      	beq.n	800b0b4 <__kernel_sin+0xd4>
 800b010:	4622      	mov	r2, r4
 800b012:	462b      	mov	r3, r5
 800b014:	4620      	mov	r0, r4
 800b016:	4629      	mov	r1, r5
 800b018:	f7f5 faee 	bl	80005f8 <__aeabi_dmul>
 800b01c:	4682      	mov	sl, r0
 800b01e:	468b      	mov	fp, r1
 800b020:	4602      	mov	r2, r0
 800b022:	460b      	mov	r3, r1
 800b024:	4620      	mov	r0, r4
 800b026:	4629      	mov	r1, r5
 800b028:	f7f5 fae6 	bl	80005f8 <__aeabi_dmul>
 800b02c:	a341      	add	r3, pc, #260	; (adr r3, 800b134 <__kernel_sin+0x154>)
 800b02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b032:	4680      	mov	r8, r0
 800b034:	4689      	mov	r9, r1
 800b036:	4650      	mov	r0, sl
 800b038:	4659      	mov	r1, fp
 800b03a:	f7f5 fadd 	bl	80005f8 <__aeabi_dmul>
 800b03e:	a33f      	add	r3, pc, #252	; (adr r3, 800b13c <__kernel_sin+0x15c>)
 800b040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b044:	f7f5 f920 	bl	8000288 <__aeabi_dsub>
 800b048:	4652      	mov	r2, sl
 800b04a:	465b      	mov	r3, fp
 800b04c:	f7f5 fad4 	bl	80005f8 <__aeabi_dmul>
 800b050:	a33c      	add	r3, pc, #240	; (adr r3, 800b144 <__kernel_sin+0x164>)
 800b052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b056:	f7f5 f919 	bl	800028c <__adddf3>
 800b05a:	4652      	mov	r2, sl
 800b05c:	465b      	mov	r3, fp
 800b05e:	f7f5 facb 	bl	80005f8 <__aeabi_dmul>
 800b062:	a33a      	add	r3, pc, #232	; (adr r3, 800b14c <__kernel_sin+0x16c>)
 800b064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b068:	f7f5 f90e 	bl	8000288 <__aeabi_dsub>
 800b06c:	4652      	mov	r2, sl
 800b06e:	465b      	mov	r3, fp
 800b070:	f7f5 fac2 	bl	80005f8 <__aeabi_dmul>
 800b074:	a337      	add	r3, pc, #220	; (adr r3, 800b154 <__kernel_sin+0x174>)
 800b076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07a:	f7f5 f907 	bl	800028c <__adddf3>
 800b07e:	9b01      	ldr	r3, [sp, #4]
 800b080:	4606      	mov	r6, r0
 800b082:	460f      	mov	r7, r1
 800b084:	b9eb      	cbnz	r3, 800b0c2 <__kernel_sin+0xe2>
 800b086:	4602      	mov	r2, r0
 800b088:	460b      	mov	r3, r1
 800b08a:	4650      	mov	r0, sl
 800b08c:	4659      	mov	r1, fp
 800b08e:	f7f5 fab3 	bl	80005f8 <__aeabi_dmul>
 800b092:	a325      	add	r3, pc, #148	; (adr r3, 800b128 <__kernel_sin+0x148>)
 800b094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b098:	f7f5 f8f6 	bl	8000288 <__aeabi_dsub>
 800b09c:	4642      	mov	r2, r8
 800b09e:	464b      	mov	r3, r9
 800b0a0:	f7f5 faaa 	bl	80005f8 <__aeabi_dmul>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	4629      	mov	r1, r5
 800b0ac:	f7f5 f8ee 	bl	800028c <__adddf3>
 800b0b0:	4604      	mov	r4, r0
 800b0b2:	460d      	mov	r5, r1
 800b0b4:	ec45 4b10 	vmov	d0, r4, r5
 800b0b8:	b003      	add	sp, #12
 800b0ba:	ecbd 8b04 	vpop	{d8-d9}
 800b0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0c2:	4b1b      	ldr	r3, [pc, #108]	; (800b130 <__kernel_sin+0x150>)
 800b0c4:	ec51 0b18 	vmov	r0, r1, d8
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f7f5 fa95 	bl	80005f8 <__aeabi_dmul>
 800b0ce:	4632      	mov	r2, r6
 800b0d0:	ec41 0b19 	vmov	d9, r0, r1
 800b0d4:	463b      	mov	r3, r7
 800b0d6:	4640      	mov	r0, r8
 800b0d8:	4649      	mov	r1, r9
 800b0da:	f7f5 fa8d 	bl	80005f8 <__aeabi_dmul>
 800b0de:	4602      	mov	r2, r0
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	ec51 0b19 	vmov	r0, r1, d9
 800b0e6:	f7f5 f8cf 	bl	8000288 <__aeabi_dsub>
 800b0ea:	4652      	mov	r2, sl
 800b0ec:	465b      	mov	r3, fp
 800b0ee:	f7f5 fa83 	bl	80005f8 <__aeabi_dmul>
 800b0f2:	ec53 2b18 	vmov	r2, r3, d8
 800b0f6:	f7f5 f8c7 	bl	8000288 <__aeabi_dsub>
 800b0fa:	a30b      	add	r3, pc, #44	; (adr r3, 800b128 <__kernel_sin+0x148>)
 800b0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b100:	4606      	mov	r6, r0
 800b102:	460f      	mov	r7, r1
 800b104:	4640      	mov	r0, r8
 800b106:	4649      	mov	r1, r9
 800b108:	f7f5 fa76 	bl	80005f8 <__aeabi_dmul>
 800b10c:	4602      	mov	r2, r0
 800b10e:	460b      	mov	r3, r1
 800b110:	4630      	mov	r0, r6
 800b112:	4639      	mov	r1, r7
 800b114:	f7f5 f8ba 	bl	800028c <__adddf3>
 800b118:	4602      	mov	r2, r0
 800b11a:	460b      	mov	r3, r1
 800b11c:	4620      	mov	r0, r4
 800b11e:	4629      	mov	r1, r5
 800b120:	f7f5 f8b2 	bl	8000288 <__aeabi_dsub>
 800b124:	e7c4      	b.n	800b0b0 <__kernel_sin+0xd0>
 800b126:	bf00      	nop
 800b128:	55555549 	.word	0x55555549
 800b12c:	3fc55555 	.word	0x3fc55555
 800b130:	3fe00000 	.word	0x3fe00000
 800b134:	5acfd57c 	.word	0x5acfd57c
 800b138:	3de5d93a 	.word	0x3de5d93a
 800b13c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b140:	3e5ae5e6 	.word	0x3e5ae5e6
 800b144:	57b1fe7d 	.word	0x57b1fe7d
 800b148:	3ec71de3 	.word	0x3ec71de3
 800b14c:	19c161d5 	.word	0x19c161d5
 800b150:	3f2a01a0 	.word	0x3f2a01a0
 800b154:	1110f8a6 	.word	0x1110f8a6
 800b158:	3f811111 	.word	0x3f811111

0800b15c <fabs>:
 800b15c:	ec51 0b10 	vmov	r0, r1, d0
 800b160:	ee10 2a10 	vmov	r2, s0
 800b164:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b168:	ec43 2b10 	vmov	d0, r2, r3
 800b16c:	4770      	bx	lr
	...

0800b170 <floor>:
 800b170:	ec51 0b10 	vmov	r0, r1, d0
 800b174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b178:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b17c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b180:	2e13      	cmp	r6, #19
 800b182:	ee10 5a10 	vmov	r5, s0
 800b186:	ee10 8a10 	vmov	r8, s0
 800b18a:	460c      	mov	r4, r1
 800b18c:	dc32      	bgt.n	800b1f4 <floor+0x84>
 800b18e:	2e00      	cmp	r6, #0
 800b190:	da14      	bge.n	800b1bc <floor+0x4c>
 800b192:	a333      	add	r3, pc, #204	; (adr r3, 800b260 <floor+0xf0>)
 800b194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b198:	f7f5 f878 	bl	800028c <__adddf3>
 800b19c:	2200      	movs	r2, #0
 800b19e:	2300      	movs	r3, #0
 800b1a0:	f7f5 fcba 	bl	8000b18 <__aeabi_dcmpgt>
 800b1a4:	b138      	cbz	r0, 800b1b6 <floor+0x46>
 800b1a6:	2c00      	cmp	r4, #0
 800b1a8:	da57      	bge.n	800b25a <floor+0xea>
 800b1aa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b1ae:	431d      	orrs	r5, r3
 800b1b0:	d001      	beq.n	800b1b6 <floor+0x46>
 800b1b2:	4c2d      	ldr	r4, [pc, #180]	; (800b268 <floor+0xf8>)
 800b1b4:	2500      	movs	r5, #0
 800b1b6:	4621      	mov	r1, r4
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	e025      	b.n	800b208 <floor+0x98>
 800b1bc:	4f2b      	ldr	r7, [pc, #172]	; (800b26c <floor+0xfc>)
 800b1be:	4137      	asrs	r7, r6
 800b1c0:	ea01 0307 	and.w	r3, r1, r7
 800b1c4:	4303      	orrs	r3, r0
 800b1c6:	d01f      	beq.n	800b208 <floor+0x98>
 800b1c8:	a325      	add	r3, pc, #148	; (adr r3, 800b260 <floor+0xf0>)
 800b1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ce:	f7f5 f85d 	bl	800028c <__adddf3>
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	f7f5 fc9f 	bl	8000b18 <__aeabi_dcmpgt>
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	d0eb      	beq.n	800b1b6 <floor+0x46>
 800b1de:	2c00      	cmp	r4, #0
 800b1e0:	bfbe      	ittt	lt
 800b1e2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b1e6:	fa43 f606 	asrlt.w	r6, r3, r6
 800b1ea:	19a4      	addlt	r4, r4, r6
 800b1ec:	ea24 0407 	bic.w	r4, r4, r7
 800b1f0:	2500      	movs	r5, #0
 800b1f2:	e7e0      	b.n	800b1b6 <floor+0x46>
 800b1f4:	2e33      	cmp	r6, #51	; 0x33
 800b1f6:	dd0b      	ble.n	800b210 <floor+0xa0>
 800b1f8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b1fc:	d104      	bne.n	800b208 <floor+0x98>
 800b1fe:	ee10 2a10 	vmov	r2, s0
 800b202:	460b      	mov	r3, r1
 800b204:	f7f5 f842 	bl	800028c <__adddf3>
 800b208:	ec41 0b10 	vmov	d0, r0, r1
 800b20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b210:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b214:	f04f 33ff 	mov.w	r3, #4294967295
 800b218:	fa23 f707 	lsr.w	r7, r3, r7
 800b21c:	4207      	tst	r7, r0
 800b21e:	d0f3      	beq.n	800b208 <floor+0x98>
 800b220:	a30f      	add	r3, pc, #60	; (adr r3, 800b260 <floor+0xf0>)
 800b222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b226:	f7f5 f831 	bl	800028c <__adddf3>
 800b22a:	2200      	movs	r2, #0
 800b22c:	2300      	movs	r3, #0
 800b22e:	f7f5 fc73 	bl	8000b18 <__aeabi_dcmpgt>
 800b232:	2800      	cmp	r0, #0
 800b234:	d0bf      	beq.n	800b1b6 <floor+0x46>
 800b236:	2c00      	cmp	r4, #0
 800b238:	da02      	bge.n	800b240 <floor+0xd0>
 800b23a:	2e14      	cmp	r6, #20
 800b23c:	d103      	bne.n	800b246 <floor+0xd6>
 800b23e:	3401      	adds	r4, #1
 800b240:	ea25 0507 	bic.w	r5, r5, r7
 800b244:	e7b7      	b.n	800b1b6 <floor+0x46>
 800b246:	2301      	movs	r3, #1
 800b248:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b24c:	fa03 f606 	lsl.w	r6, r3, r6
 800b250:	4435      	add	r5, r6
 800b252:	4545      	cmp	r5, r8
 800b254:	bf38      	it	cc
 800b256:	18e4      	addcc	r4, r4, r3
 800b258:	e7f2      	b.n	800b240 <floor+0xd0>
 800b25a:	2500      	movs	r5, #0
 800b25c:	462c      	mov	r4, r5
 800b25e:	e7aa      	b.n	800b1b6 <floor+0x46>
 800b260:	8800759c 	.word	0x8800759c
 800b264:	7e37e43c 	.word	0x7e37e43c
 800b268:	bff00000 	.word	0xbff00000
 800b26c:	000fffff 	.word	0x000fffff

0800b270 <scalbn>:
 800b270:	b570      	push	{r4, r5, r6, lr}
 800b272:	ec55 4b10 	vmov	r4, r5, d0
 800b276:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b27a:	4606      	mov	r6, r0
 800b27c:	462b      	mov	r3, r5
 800b27e:	b99a      	cbnz	r2, 800b2a8 <scalbn+0x38>
 800b280:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b284:	4323      	orrs	r3, r4
 800b286:	d036      	beq.n	800b2f6 <scalbn+0x86>
 800b288:	4b39      	ldr	r3, [pc, #228]	; (800b370 <scalbn+0x100>)
 800b28a:	4629      	mov	r1, r5
 800b28c:	ee10 0a10 	vmov	r0, s0
 800b290:	2200      	movs	r2, #0
 800b292:	f7f5 f9b1 	bl	80005f8 <__aeabi_dmul>
 800b296:	4b37      	ldr	r3, [pc, #220]	; (800b374 <scalbn+0x104>)
 800b298:	429e      	cmp	r6, r3
 800b29a:	4604      	mov	r4, r0
 800b29c:	460d      	mov	r5, r1
 800b29e:	da10      	bge.n	800b2c2 <scalbn+0x52>
 800b2a0:	a32b      	add	r3, pc, #172	; (adr r3, 800b350 <scalbn+0xe0>)
 800b2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a6:	e03a      	b.n	800b31e <scalbn+0xae>
 800b2a8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b2ac:	428a      	cmp	r2, r1
 800b2ae:	d10c      	bne.n	800b2ca <scalbn+0x5a>
 800b2b0:	ee10 2a10 	vmov	r2, s0
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	4629      	mov	r1, r5
 800b2b8:	f7f4 ffe8 	bl	800028c <__adddf3>
 800b2bc:	4604      	mov	r4, r0
 800b2be:	460d      	mov	r5, r1
 800b2c0:	e019      	b.n	800b2f6 <scalbn+0x86>
 800b2c2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	3a36      	subs	r2, #54	; 0x36
 800b2ca:	4432      	add	r2, r6
 800b2cc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b2d0:	428a      	cmp	r2, r1
 800b2d2:	dd08      	ble.n	800b2e6 <scalbn+0x76>
 800b2d4:	2d00      	cmp	r5, #0
 800b2d6:	a120      	add	r1, pc, #128	; (adr r1, 800b358 <scalbn+0xe8>)
 800b2d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2dc:	da1c      	bge.n	800b318 <scalbn+0xa8>
 800b2de:	a120      	add	r1, pc, #128	; (adr r1, 800b360 <scalbn+0xf0>)
 800b2e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2e4:	e018      	b.n	800b318 <scalbn+0xa8>
 800b2e6:	2a00      	cmp	r2, #0
 800b2e8:	dd08      	ble.n	800b2fc <scalbn+0x8c>
 800b2ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b2ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b2f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b2f6:	ec45 4b10 	vmov	d0, r4, r5
 800b2fa:	bd70      	pop	{r4, r5, r6, pc}
 800b2fc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b300:	da19      	bge.n	800b336 <scalbn+0xc6>
 800b302:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b306:	429e      	cmp	r6, r3
 800b308:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b30c:	dd0a      	ble.n	800b324 <scalbn+0xb4>
 800b30e:	a112      	add	r1, pc, #72	; (adr r1, 800b358 <scalbn+0xe8>)
 800b310:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1e2      	bne.n	800b2de <scalbn+0x6e>
 800b318:	a30f      	add	r3, pc, #60	; (adr r3, 800b358 <scalbn+0xe8>)
 800b31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31e:	f7f5 f96b 	bl	80005f8 <__aeabi_dmul>
 800b322:	e7cb      	b.n	800b2bc <scalbn+0x4c>
 800b324:	a10a      	add	r1, pc, #40	; (adr r1, 800b350 <scalbn+0xe0>)
 800b326:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d0b8      	beq.n	800b2a0 <scalbn+0x30>
 800b32e:	a10e      	add	r1, pc, #56	; (adr r1, 800b368 <scalbn+0xf8>)
 800b330:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b334:	e7b4      	b.n	800b2a0 <scalbn+0x30>
 800b336:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b33a:	3236      	adds	r2, #54	; 0x36
 800b33c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b340:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b344:	4620      	mov	r0, r4
 800b346:	4b0c      	ldr	r3, [pc, #48]	; (800b378 <scalbn+0x108>)
 800b348:	2200      	movs	r2, #0
 800b34a:	e7e8      	b.n	800b31e <scalbn+0xae>
 800b34c:	f3af 8000 	nop.w
 800b350:	c2f8f359 	.word	0xc2f8f359
 800b354:	01a56e1f 	.word	0x01a56e1f
 800b358:	8800759c 	.word	0x8800759c
 800b35c:	7e37e43c 	.word	0x7e37e43c
 800b360:	8800759c 	.word	0x8800759c
 800b364:	fe37e43c 	.word	0xfe37e43c
 800b368:	c2f8f359 	.word	0xc2f8f359
 800b36c:	81a56e1f 	.word	0x81a56e1f
 800b370:	43500000 	.word	0x43500000
 800b374:	ffff3cb0 	.word	0xffff3cb0
 800b378:	3c900000 	.word	0x3c900000

0800b37c <_init>:
 800b37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b37e:	bf00      	nop
 800b380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b382:	bc08      	pop	{r3}
 800b384:	469e      	mov	lr, r3
 800b386:	4770      	bx	lr

0800b388 <_fini>:
 800b388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b38a:	bf00      	nop
 800b38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b38e:	bc08      	pop	{r3}
 800b390:	469e      	mov	lr, r3
 800b392:	4770      	bx	lr
