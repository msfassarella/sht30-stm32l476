
prj1_sht30.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009624  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba4  080097b8  080097b8  000197b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a35c  0800a35c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a35c  0800a35c  0001a35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a364  0800a364  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a364  0800a364  0001a364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a368  0800a368  0001a368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a36c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  200001e8  0800a554  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000830  0800a554  00020830  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192bc  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034c2  00000000  00000000  000394d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  0003c998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001430  00000000  00000000  0003df38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000297ed  00000000  00000000  0003f368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a76e  00000000  00000000  00068b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8818  00000000  00000000  000832c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017badb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b40  00000000  00000000  0017bb2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800979c 	.word	0x0800979c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800979c 	.word	0x0800979c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb2:	f001 fa66 	bl	8002382 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb6:	f000 f831 	bl	8000f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eba:	f000 f9a7 	bl	800120c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ebe:	f000 f97f 	bl	80011c0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ec2:	f000 f94d 	bl	8001160 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ec6:	f000 f87b 	bl	8000fc0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000eca:	f000 f8b9 	bl	8001040 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000ece:	f000 f8f7 	bl	80010c0 <MX_TIM2_Init>
//  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  bool pressed = false;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  //int16_t probe_ret;
  uint16_t status_reg;

  ssd1306_Init();
 8000ed6:	f000 ffa9 	bl	8001e2c <ssd1306_Init>
  ssd1306_Fill(Black);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f001 f810 	bl	8001f00 <ssd1306_Fill>
  HAL_TIM_Base_Start_IT(&htim2);
 8000ee0:	480c      	ldr	r0, [pc, #48]	; (8000f14 <main+0x68>)
 8000ee2:	f004 fa3d 	bl	8005360 <HAL_TIM_Base_Start_IT>
  while (1)
  {
	  pressed = button_press_action();
 8000ee6:	f000 f9eb 	bl	80012c0 <button_press_action>
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
	  if (pressed){
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d004      	beq.n	8000efe <main+0x52>
		 HAL_Delay(100);
 8000ef4:	2064      	movs	r0, #100	; 0x64
 8000ef6:	f001 fab9 	bl	800246c <HAL_Delay>
	     //ssd1306_SetCursor(2, 20);
	     //ssd1306_write_i32(umidade,3);
	     //ssd1306_WriteChar('%', Font_7x10, White);
	     //ssd1306_UpdateScreen();

	     update_leitura();
 8000efa:	f000 fa11 	bl	8001320 <update_leitura>
	  }

	  if (flag_update_leitura == 1){
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <main+0x6c>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d1ef      	bne.n	8000ee6 <main+0x3a>
		  update_leitura();
 8000f06:	f000 fa0b 	bl	8001320 <update_leitura>
		  flag_update_leitura = 0;
 8000f0a:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <main+0x6c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
	  pressed = button_press_action();
 8000f10:	e7e9      	b.n	8000ee6 <main+0x3a>
 8000f12:	bf00      	nop
 8000f14:	200002ac 	.word	0x200002ac
 8000f18:	2000040c 	.word	0x2000040c

08000f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b096      	sub	sp, #88	; 0x58
 8000f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	2244      	movs	r2, #68	; 0x44
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f005 ff0e 	bl	8006d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f30:	463b      	mov	r3, r7
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f3e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f42:	f002 fea3 	bl	8003c8c <HAL_PWREx_ControlVoltageScaling>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f4c:	f000 fa2e 	bl	80013ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f50:	2302      	movs	r3, #2
 8000f52:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f58:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f5a:	2310      	movs	r3, #16
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f62:	2302      	movs	r3, #2
 8000f64:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f66:	2301      	movs	r3, #1
 8000f68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000f6a:	2308      	movs	r3, #8
 8000f6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f6e:	2307      	movs	r3, #7
 8000f70:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f72:	2302      	movs	r3, #2
 8000f74:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8000f76:	2308      	movs	r3, #8
 8000f78:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f002 feda 	bl	8003d38 <HAL_RCC_OscConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000f8a:	f000 fa0f 	bl	80013ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8e:	230f      	movs	r3, #15
 8000f90:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f92:	2303      	movs	r3, #3
 8000f94:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f003 faa2 	bl	80044f0 <HAL_RCC_ClockConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fb2:	f000 f9fb 	bl	80013ac <Error_Handler>
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	3758      	adds	r7, #88	; 0x58
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fc6:	4a1c      	ldr	r2, [pc, #112]	; (8001038 <MX_I2C1_Init+0x78>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010131D;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fcc:	4a1b      	ldr	r2, [pc, #108]	; (800103c <MX_I2C1_Init+0x7c>)
 8000fce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <MX_I2C1_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_I2C1_Init+0x74>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_I2C1_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ffa:	480e      	ldr	r0, [pc, #56]	; (8001034 <MX_I2C1_Init+0x74>)
 8000ffc:	f001 ff46 	bl	8002e8c <HAL_I2C_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001006:	f000 f9d1 	bl	80013ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800100a:	2100      	movs	r1, #0
 800100c:	4809      	ldr	r0, [pc, #36]	; (8001034 <MX_I2C1_Init+0x74>)
 800100e:	f002 fd97 	bl	8003b40 <HAL_I2CEx_ConfigAnalogFilter>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001018:	f000 f9c8 	bl	80013ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 2) != HAL_OK)
 800101c:	2102      	movs	r1, #2
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_I2C1_Init+0x74>)
 8001020:	f002 fdd9 	bl	8003bd6 <HAL_I2CEx_ConfigDigitalFilter>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800102a:	f000 f9bf 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000204 	.word	0x20000204
 8001038:	40005400 	.word	0x40005400
 800103c:	2010131d 	.word	0x2010131d

08001040 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001044:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <MX_I2C2_Init+0x74>)
 8001046:	4a1c      	ldr	r2, [pc, #112]	; (80010b8 <MX_I2C2_Init+0x78>)
 8001048:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800104a:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <MX_I2C2_Init+0x74>)
 800104c:	4a1b      	ldr	r2, [pc, #108]	; (80010bc <MX_I2C2_Init+0x7c>)
 800104e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <MX_I2C2_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <MX_I2C2_Init+0x74>)
 8001058:	2201      	movs	r2, #1
 800105a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <MX_I2C2_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_I2C2_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <MX_I2C2_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <MX_I2C2_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_I2C2_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800107a:	480e      	ldr	r0, [pc, #56]	; (80010b4 <MX_I2C2_Init+0x74>)
 800107c:	f001 ff06 	bl	8002e8c <HAL_I2C_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001086:	f000 f991 	bl	80013ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800108a:	2100      	movs	r1, #0
 800108c:	4809      	ldr	r0, [pc, #36]	; (80010b4 <MX_I2C2_Init+0x74>)
 800108e:	f002 fd57 	bl	8003b40 <HAL_I2CEx_ConfigAnalogFilter>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001098:	f000 f988 	bl	80013ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800109c:	2100      	movs	r1, #0
 800109e:	4805      	ldr	r0, [pc, #20]	; (80010b4 <MX_I2C2_Init+0x74>)
 80010a0:	f002 fd99 	bl	8003bd6 <HAL_I2CEx_ConfigDigitalFilter>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80010aa:	f000 f97f 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000258 	.word	0x20000258
 80010b8:	40005800 	.word	0x40005800
 80010bc:	00303d5b 	.word	0x00303d5b

080010c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c6:	f107 0310 	add.w	r3, r7, #16
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010de:	4b1f      	ldr	r3, [pc, #124]	; (800115c <MX_TIM2_Init+0x9c>)
 80010e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80010e6:	4b1d      	ldr	r3, [pc, #116]	; (800115c <MX_TIM2_Init+0x9c>)
 80010e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ee:	4b1b      	ldr	r3, [pc, #108]	; (800115c <MX_TIM2_Init+0x9c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 80010f4:	4b19      	ldr	r3, [pc, #100]	; (800115c <MX_TIM2_Init+0x9c>)
 80010f6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80010fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80010fc:	4b17      	ldr	r3, [pc, #92]	; (800115c <MX_TIM2_Init+0x9c>)
 80010fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001102:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <MX_TIM2_Init+0x9c>)
 8001106:	2280      	movs	r2, #128	; 0x80
 8001108:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800110a:	4814      	ldr	r0, [pc, #80]	; (800115c <MX_TIM2_Init+0x9c>)
 800110c:	f004 f8d0 	bl	80052b0 <HAL_TIM_Base_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001116:	f000 f949 	bl	80013ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800111a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	4619      	mov	r1, r3
 8001126:	480d      	ldr	r0, [pc, #52]	; (800115c <MX_TIM2_Init+0x9c>)
 8001128:	f004 faa9 	bl	800567e <HAL_TIM_ConfigClockSource>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001132:	f000 f93b 	bl	80013ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4619      	mov	r1, r3
 8001142:	4806      	ldr	r0, [pc, #24]	; (800115c <MX_TIM2_Init+0x9c>)
 8001144:	f004 fcc0 	bl	8005ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800114e:	f000 f92d 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	3720      	adds	r7, #32
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200002ac 	.word	0x200002ac

08001160 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001164:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_USART2_UART_Init+0x58>)
 8001166:	4a15      	ldr	r2, [pc, #84]	; (80011bc <MX_USART2_UART_Init+0x5c>)
 8001168:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <MX_USART2_UART_Init+0x58>)
 800116c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001170:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_USART2_UART_Init+0x58>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_USART2_UART_Init+0x58>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_USART2_UART_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_USART2_UART_Init+0x58>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <MX_USART2_UART_Init+0x58>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_USART2_UART_Init+0x58>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <MX_USART2_UART_Init+0x58>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_USART2_UART_Init+0x58>)
 800119e:	2200      	movs	r2, #0
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_USART2_UART_Init+0x58>)
 80011a4:	f004 fd36 	bl	8005c14 <HAL_UART_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011ae:	f000 f8fd 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200002f8 	.word	0x200002f8
 80011bc:	40004400 	.word	0x40004400

080011c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <MX_DMA_Init+0x48>)
 80011c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ca:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <MX_DMA_Init+0x48>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6493      	str	r3, [r2, #72]	; 0x48
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <MX_DMA_Init+0x48>)
 80011d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	2010      	movs	r0, #16
 80011e4:	f001 fa41 	bl	800266a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80011e8:	2010      	movs	r0, #16
 80011ea:	f001 fa5a 	bl	80026a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	2011      	movs	r0, #17
 80011f4:	f001 fa39 	bl	800266a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80011f8:	2011      	movs	r0, #17
 80011fa:	f001 fa52 	bl	80026a2 <HAL_NVIC_EnableIRQ>

}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40021000 	.word	0x40021000

0800120c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001222:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <MX_GPIO_Init+0xac>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	4a24      	ldr	r2, [pc, #144]	; (80012b8 <MX_GPIO_Init+0xac>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122e:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <MX_GPIO_Init+0xac>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <MX_GPIO_Init+0xac>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	4a1e      	ldr	r2, [pc, #120]	; (80012b8 <MX_GPIO_Init+0xac>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <MX_GPIO_Init+0xac>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <MX_GPIO_Init+0xac>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	4a18      	ldr	r2, [pc, #96]	; (80012b8 <MX_GPIO_Init+0xac>)
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125e:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <MX_GPIO_Init+0xac>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	2120      	movs	r1, #32
 800126e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001272:	f001 fdd9 	bl	8002e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800127a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	4619      	mov	r1, r3
 800128a:	480c      	ldr	r0, [pc, #48]	; (80012bc <MX_GPIO_Init+0xb0>)
 800128c:	f001 fc0a 	bl	8002aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8001290:	2320      	movs	r3, #32
 8001292:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	4619      	mov	r1, r3
 80012a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012aa:	f001 fbfb 	bl	8002aa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012ae:	bf00      	nop
 80012b0:	3720      	adds	r7, #32
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000
 80012bc:	48000800 	.word	0x48000800

080012c0 <button_press_action>:

/* USER CODE BEGIN 4 */
bool button_press_action(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
	bool press = false;
 80012c6:	2300      	movs	r3, #0
 80012c8:	71fb      	strb	r3, [r7, #7]

	  if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port,USER_BUTTON_Pin) == GPIO_PIN_SET){
 80012ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ce:	4808      	ldr	r0, [pc, #32]	; (80012f0 <button_press_action+0x30>)
 80012d0:	f001 fd92 	bl	8002df8 <HAL_GPIO_ReadPin>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d102      	bne.n	80012e0 <button_press_action+0x20>
	     //HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
	     press = false;
 80012da:	2300      	movs	r3, #0
 80012dc:	71fb      	strb	r3, [r7, #7]
 80012de:	e001      	b.n	80012e4 <button_press_action+0x24>
	  }
	  else{
		 //HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
		 press = true;
 80012e0:	2301      	movs	r3, #1
 80012e2:	71fb      	strb	r3, [r7, #7]
	  }

	  return press;
 80012e4:	79fb      	ldrb	r3, [r7, #7]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	48000800 	.word	0x48000800

080012f4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
    HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 80012fc:	2120      	movs	r1, #32
 80012fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001302:	f001 fda9 	bl	8002e58 <HAL_GPIO_TogglePin>
    if (flag_update_leitura == 0)
 8001306:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d102      	bne.n	8001314 <HAL_TIM_PeriodElapsedCallback+0x20>
       flag_update_leitura = 1;
 800130e:	4b03      	ldr	r3, [pc, #12]	; (800131c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001310:	2201      	movs	r2, #1
 8001312:	701a      	strb	r2, [r3, #0]
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	2000040c 	.word	0x2000040c

08001320 <update_leitura>:


void update_leitura(void){
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
	 int16_t probe_ret;

	 probe_ret = sht3x_measure(&hi2c1, SHT3X_I2C_ADDR_DFLT << 1);
 8001326:	2188      	movs	r1, #136	; 0x88
 8001328:	481d      	ldr	r0, [pc, #116]	; (80013a0 <update_leitura+0x80>)
 800132a:	f000 fce5 	bl	8001cf8 <sht3x_measure>
 800132e:	4603      	mov	r3, r0
 8001330:	81fb      	strh	r3, [r7, #14]
	 HAL_Delay(100);
 8001332:	2064      	movs	r0, #100	; 0x64
 8001334:	f001 f89a 	bl	800246c <HAL_Delay>
	 int32_t temp, umidade;
	 probe_ret = sht3x_read(&hi2c1, SHT3X_I2C_ADDR_DFLT << 1, &temp, &umidade );
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	f107 0208 	add.w	r2, r7, #8
 800133e:	2188      	movs	r1, #136	; 0x88
 8001340:	4817      	ldr	r0, [pc, #92]	; (80013a0 <update_leitura+0x80>)
 8001342:	f000 fced 	bl	8001d20 <sht3x_read>
 8001346:	4603      	mov	r3, r0
 8001348:	81fb      	strh	r3, [r7, #14]
    printf("probe_ret %04X, %d, %d\n", probe_ret, temp, umidade);
 800134a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4814      	ldr	r0, [pc, #80]	; (80013a4 <update_leitura+0x84>)
 8001354:	f006 f96c 	bl	8007630 <iprintf>

    ssd1306_SetCursor(2, 2);
 8001358:	2102      	movs	r1, #2
 800135a:	2002      	movs	r0, #2
 800135c:	f000 fef8 	bl	8002150 <ssd1306_SetCursor>
    ssd1306_write_i32(temp,3);
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	2103      	movs	r1, #3
 8001364:	4618      	mov	r0, r3
 8001366:	f000 ffbd 	bl	80022e4 <ssd1306_write_i32>
    ssd1306_WriteChar('C', Font_7x10, White);
 800136a:	4a0f      	ldr	r2, [pc, #60]	; (80013a8 <update_leitura+0x88>)
 800136c:	2301      	movs	r3, #1
 800136e:	ca06      	ldmia	r2, {r1, r2}
 8001370:	2043      	movs	r0, #67	; 0x43
 8001372:	f000 fe65 	bl	8002040 <ssd1306_WriteChar>
    ssd1306_SetCursor(2, 20);
 8001376:	2114      	movs	r1, #20
 8001378:	2002      	movs	r0, #2
 800137a:	f000 fee9 	bl	8002150 <ssd1306_SetCursor>
    ssd1306_write_i32(umidade,3);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2103      	movs	r1, #3
 8001382:	4618      	mov	r0, r3
 8001384:	f000 ffae 	bl	80022e4 <ssd1306_write_i32>
    ssd1306_WriteChar('%', Font_7x10, White);
 8001388:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <update_leitura+0x88>)
 800138a:	2301      	movs	r3, #1
 800138c:	ca06      	ldmia	r2, {r1, r2}
 800138e:	2025      	movs	r0, #37	; 0x25
 8001390:	f000 fe56 	bl	8002040 <ssd1306_WriteChar>
    ssd1306_UpdateScreen();
 8001394:	f000 fdd8 	bl	8001f48 <ssd1306_UpdateScreen>
}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000204 	.word	0x20000204
 80013a4:	080097b8 	.word	0x080097b8
 80013a8:	20000008 	.word	0x20000008

080013ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b0:	b672      	cpsid	i
}
 80013b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <Error_Handler+0x8>
	...

080013b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_MspInit+0x50>)
 80013c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c2:	4a11      	ldr	r2, [pc, #68]	; (8001408 <HAL_MspInit+0x50>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6613      	str	r3, [r2, #96]	; 0x60
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <HAL_MspInit+0x50>)
 80013cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <HAL_MspInit+0x50>)
 80013d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013da:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <HAL_MspInit+0x50>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e0:	6593      	str	r3, [r2, #88]	; 0x58
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_MspInit+0x50>)
 80013e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	2005      	movs	r0, #5
 80013f4:	f001 f939 	bl	800266a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80013f8:	2005      	movs	r0, #5
 80013fa:	f001 f952 	bl	80026a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000

0800140c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b0ae      	sub	sp, #184	; 0xb8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	2288      	movs	r2, #136	; 0x88
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f005 fc8d 	bl	8006d4c <memset>
  if(hi2c->Instance==I2C1)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a48      	ldr	r2, [pc, #288]	; (8001558 <HAL_I2C_MspInit+0x14c>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d148      	bne.n	80014ce <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800143c:	2340      	movs	r3, #64	; 0x40
 800143e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001440:	2300      	movs	r3, #0
 8001442:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001444:	f107 031c 	add.w	r3, r7, #28
 8001448:	4618      	mov	r0, r3
 800144a:	f003 fa75 	bl	8004938 <HAL_RCCEx_PeriphCLKConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001454:	f7ff ffaa 	bl	80013ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001458:	4b40      	ldr	r3, [pc, #256]	; (800155c <HAL_I2C_MspInit+0x150>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145c:	4a3f      	ldr	r2, [pc, #252]	; (800155c <HAL_I2C_MspInit+0x150>)
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001464:	4b3d      	ldr	r3, [pc, #244]	; (800155c <HAL_I2C_MspInit+0x150>)
 8001466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	61bb      	str	r3, [r7, #24]
 800146e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001470:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001474:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001478:	2312      	movs	r3, #18
 800147a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800148a:	2304      	movs	r3, #4
 800148c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001490:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001494:	4619      	mov	r1, r3
 8001496:	4832      	ldr	r0, [pc, #200]	; (8001560 <HAL_I2C_MspInit+0x154>)
 8001498:	f001 fb04 	bl	8002aa4 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 800149c:	4b31      	ldr	r3, [pc, #196]	; (8001564 <HAL_I2C_MspInit+0x158>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	4a30      	ldr	r2, [pc, #192]	; (8001564 <HAL_I2C_MspInit+0x158>)
 80014a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a6:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 80014a8:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <HAL_I2C_MspInit+0x158>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	4a2d      	ldr	r2, [pc, #180]	; (8001564 <HAL_I2C_MspInit+0x158>)
 80014ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014b2:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014b4:	4b29      	ldr	r3, [pc, #164]	; (800155c <HAL_I2C_MspInit+0x150>)
 80014b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b8:	4a28      	ldr	r2, [pc, #160]	; (800155c <HAL_I2C_MspInit+0x150>)
 80014ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014be:	6593      	str	r3, [r2, #88]	; 0x58
 80014c0:	4b26      	ldr	r3, [pc, #152]	; (800155c <HAL_I2C_MspInit+0x150>)
 80014c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014cc:	e040      	b.n	8001550 <HAL_I2C_MspInit+0x144>
  else if(hi2c->Instance==I2C2)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a25      	ldr	r2, [pc, #148]	; (8001568 <HAL_I2C_MspInit+0x15c>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d13b      	bne.n	8001550 <HAL_I2C_MspInit+0x144>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80014dc:	2300      	movs	r3, #0
 80014de:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	4618      	mov	r0, r3
 80014e6:	f003 fa27 	bl	8004938 <HAL_RCCEx_PeriphCLKConfig>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <HAL_I2C_MspInit+0xe8>
      Error_Handler();
 80014f0:	f7ff ff5c 	bl	80013ac <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <HAL_I2C_MspInit+0x150>)
 80014f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f8:	4a18      	ldr	r2, [pc, #96]	; (800155c <HAL_I2C_MspInit+0x150>)
 80014fa:	f043 0302 	orr.w	r3, r3, #2
 80014fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <HAL_I2C_MspInit+0x150>)
 8001502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800150c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001510:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001514:	2312      	movs	r3, #18
 8001516:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001520:	2303      	movs	r3, #3
 8001522:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001526:	2304      	movs	r3, #4
 8001528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001530:	4619      	mov	r1, r3
 8001532:	480b      	ldr	r0, [pc, #44]	; (8001560 <HAL_I2C_MspInit+0x154>)
 8001534:	f001 fab6 	bl	8002aa4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_I2C_MspInit+0x150>)
 800153a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <HAL_I2C_MspInit+0x150>)
 800153e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001542:	6593      	str	r3, [r2, #88]	; 0x58
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_I2C_MspInit+0x150>)
 8001546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001548:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
}
 8001550:	bf00      	nop
 8001552:	37b8      	adds	r7, #184	; 0xb8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40005400 	.word	0x40005400
 800155c:	40021000 	.word	0x40021000
 8001560:	48000400 	.word	0x48000400
 8001564:	40010000 	.word	0x40010000
 8001568:	40005800 	.word	0x40005800

0800156c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800157c:	d113      	bne.n	80015a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <HAL_TIM_Base_MspInit+0x44>)
 8001580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001582:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <HAL_TIM_Base_MspInit+0x44>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6593      	str	r3, [r2, #88]	; 0x58
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <HAL_TIM_Base_MspInit+0x44>)
 800158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	201c      	movs	r0, #28
 800159c:	f001 f865 	bl	800266a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015a0:	201c      	movs	r0, #28
 80015a2:	f001 f87e 	bl	80026a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000

080015b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b0ac      	sub	sp, #176	; 0xb0
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2288      	movs	r2, #136	; 0x88
 80015d2:	2100      	movs	r1, #0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f005 fbb9 	bl	8006d4c <memset>
  if(huart->Instance==USART2)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a4f      	ldr	r2, [pc, #316]	; (800171c <HAL_UART_MspInit+0x168>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	f040 8096 	bne.w	8001712 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015e6:	2302      	movs	r3, #2
 80015e8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 f9a0 	bl	8004938 <HAL_RCCEx_PeriphCLKConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015fe:	f7ff fed5 	bl	80013ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001602:	4b47      	ldr	r3, [pc, #284]	; (8001720 <HAL_UART_MspInit+0x16c>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	4a46      	ldr	r2, [pc, #280]	; (8001720 <HAL_UART_MspInit+0x16c>)
 8001608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160c:	6593      	str	r3, [r2, #88]	; 0x58
 800160e:	4b44      	ldr	r3, [pc, #272]	; (8001720 <HAL_UART_MspInit+0x16c>)
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	4b41      	ldr	r3, [pc, #260]	; (8001720 <HAL_UART_MspInit+0x16c>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	4a40      	ldr	r2, [pc, #256]	; (8001720 <HAL_UART_MspInit+0x16c>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001626:	4b3e      	ldr	r3, [pc, #248]	; (8001720 <HAL_UART_MspInit+0x16c>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001632:	230c      	movs	r3, #12
 8001634:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800164a:	2307      	movs	r3, #7
 800164c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001654:	4619      	mov	r1, r3
 8001656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165a:	f001 fa23 	bl	8002aa4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800165e:	4b31      	ldr	r3, [pc, #196]	; (8001724 <HAL_UART_MspInit+0x170>)
 8001660:	4a31      	ldr	r2, [pc, #196]	; (8001728 <HAL_UART_MspInit+0x174>)
 8001662:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001664:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <HAL_UART_MspInit+0x170>)
 8001666:	2202      	movs	r2, #2
 8001668:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800166a:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <HAL_UART_MspInit+0x170>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001670:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <HAL_UART_MspInit+0x170>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001676:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <HAL_UART_MspInit+0x170>)
 8001678:	2280      	movs	r2, #128	; 0x80
 800167a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800167c:	4b29      	ldr	r3, [pc, #164]	; (8001724 <HAL_UART_MspInit+0x170>)
 800167e:	2200      	movs	r2, #0
 8001680:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001682:	4b28      	ldr	r3, [pc, #160]	; (8001724 <HAL_UART_MspInit+0x170>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001688:	4b26      	ldr	r3, [pc, #152]	; (8001724 <HAL_UART_MspInit+0x170>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800168e:	4b25      	ldr	r3, [pc, #148]	; (8001724 <HAL_UART_MspInit+0x170>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001694:	4823      	ldr	r0, [pc, #140]	; (8001724 <HAL_UART_MspInit+0x170>)
 8001696:	f001 f81f 	bl	80026d8 <HAL_DMA_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 80016a0:	f7ff fe84 	bl	80013ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a1f      	ldr	r2, [pc, #124]	; (8001724 <HAL_UART_MspInit+0x170>)
 80016a8:	671a      	str	r2, [r3, #112]	; 0x70
 80016aa:	4a1e      	ldr	r2, [pc, #120]	; (8001724 <HAL_UART_MspInit+0x170>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80016b0:	4b1e      	ldr	r3, [pc, #120]	; (800172c <HAL_UART_MspInit+0x178>)
 80016b2:	4a1f      	ldr	r2, [pc, #124]	; (8001730 <HAL_UART_MspInit+0x17c>)
 80016b4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80016b6:	4b1d      	ldr	r3, [pc, #116]	; (800172c <HAL_UART_MspInit+0x178>)
 80016b8:	2202      	movs	r2, #2
 80016ba:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <HAL_UART_MspInit+0x178>)
 80016be:	2210      	movs	r2, #16
 80016c0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c2:	4b1a      	ldr	r3, [pc, #104]	; (800172c <HAL_UART_MspInit+0x178>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016c8:	4b18      	ldr	r3, [pc, #96]	; (800172c <HAL_UART_MspInit+0x178>)
 80016ca:	2280      	movs	r2, #128	; 0x80
 80016cc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ce:	4b17      	ldr	r3, [pc, #92]	; (800172c <HAL_UART_MspInit+0x178>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016d4:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_UART_MspInit+0x178>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80016da:	4b14      	ldr	r3, [pc, #80]	; (800172c <HAL_UART_MspInit+0x178>)
 80016dc:	2200      	movs	r2, #0
 80016de:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_UART_MspInit+0x178>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80016e6:	4811      	ldr	r0, [pc, #68]	; (800172c <HAL_UART_MspInit+0x178>)
 80016e8:	f000 fff6 	bl	80026d8 <HAL_DMA_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 80016f2:	f7ff fe5b 	bl	80013ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a0c      	ldr	r2, [pc, #48]	; (800172c <HAL_UART_MspInit+0x178>)
 80016fa:	66da      	str	r2, [r3, #108]	; 0x6c
 80016fc:	4a0b      	ldr	r2, [pc, #44]	; (800172c <HAL_UART_MspInit+0x178>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	2026      	movs	r0, #38	; 0x26
 8001708:	f000 ffaf 	bl	800266a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800170c:	2026      	movs	r0, #38	; 0x26
 800170e:	f000 ffc8 	bl	80026a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001712:	bf00      	nop
 8001714:	37b0      	adds	r7, #176	; 0xb0
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40004400 	.word	0x40004400
 8001720:	40021000 	.word	0x40021000
 8001724:	2000037c 	.word	0x2000037c
 8001728:	4002006c 	.word	0x4002006c
 800172c:	200003c4 	.word	0x200003c4
 8001730:	40020080 	.word	0x40020080

08001734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <NMI_Handler+0x4>

0800173a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <HardFault_Handler+0x4>

08001740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <MemManage_Handler+0x4>

08001746 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <BusFault_Handler+0x4>

0800174c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <UsageFault_Handler+0x4>

08001752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001780:	f000 fe54 	bl	800242c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <DMA1_Channel6_IRQHandler+0x10>)
 800179e:	f001 f8d2 	bl	8002946 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	2000037c 	.word	0x2000037c

080017ac <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <DMA1_Channel7_IRQHandler+0x10>)
 80017b2:	f001 f8c8 	bl	8002946 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200003c4 	.word	0x200003c4

080017c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <TIM2_IRQHandler+0x10>)
 80017c6:	f003 fe3b 	bl	8005440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200002ac 	.word	0x200002ac

080017d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <USART2_IRQHandler+0x10>)
 80017da:	f004 fa69 	bl	8005cb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200002f8 	.word	0x200002f8

080017e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return 1;
 80017ec:	2301      	movs	r3, #1
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <_kill>:

int _kill(int pid, int sig)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001802:	f005 fa6b 	bl	8006cdc <__errno>
 8001806:	4603      	mov	r3, r0
 8001808:	2216      	movs	r2, #22
 800180a:	601a      	str	r2, [r3, #0]
  return -1;
 800180c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <_exit>:

void _exit (int status)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001820:	f04f 31ff 	mov.w	r1, #4294967295
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ffe7 	bl	80017f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800182a:	e7fe      	b.n	800182a <_exit+0x12>

0800182c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	e00a      	b.n	8001854 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800183e:	f3af 8000 	nop.w
 8001842:	4601      	mov	r1, r0
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	60ba      	str	r2, [r7, #8]
 800184a:	b2ca      	uxtb	r2, r1
 800184c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	3301      	adds	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	429a      	cmp	r2, r3
 800185a:	dbf0      	blt.n	800183e <_read+0x12>
  }

  return len;
 800185c:	687b      	ldr	r3, [r7, #4]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b086      	sub	sp, #24
 800186a:	af00      	add	r7, sp, #0
 800186c:	60f8      	str	r0, [r7, #12]
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	e009      	b.n	800188c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	60ba      	str	r2, [r7, #8]
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3301      	adds	r3, #1
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	429a      	cmp	r2, r3
 8001892:	dbf1      	blt.n	8001878 <_write+0x12>
  }
  return len;
 8001894:	687b      	ldr	r3, [r7, #4]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <_close>:

int _close(int file)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018c6:	605a      	str	r2, [r3, #4]
  return 0;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <_isatty>:

int _isatty(int file)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018de:	2301      	movs	r3, #1
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001910:	4a14      	ldr	r2, [pc, #80]	; (8001964 <_sbrk+0x5c>)
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <_sbrk+0x60>)
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <_sbrk+0x64>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <_sbrk+0x64>)
 8001926:	4a12      	ldr	r2, [pc, #72]	; (8001970 <_sbrk+0x68>)
 8001928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <_sbrk+0x64>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	429a      	cmp	r2, r3
 8001936:	d207      	bcs.n	8001948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001938:	f005 f9d0 	bl	8006cdc <__errno>
 800193c:	4603      	mov	r3, r0
 800193e:	220c      	movs	r2, #12
 8001940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	e009      	b.n	800195c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194e:	4b07      	ldr	r3, [pc, #28]	; (800196c <_sbrk+0x64>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <_sbrk+0x64>)
 8001958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800195a:	68fb      	ldr	r3, [r7, #12]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20018000 	.word	0x20018000
 8001968:	00000400 	.word	0x00000400
 800196c:	20000410 	.word	0x20000410
 8001970:	20000830 	.word	0x20000830

08001974 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <SystemInit+0x20>)
 800197a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800197e:	4a05      	ldr	r2, [pc, #20]	; (8001994 <SystemInit+0x20>)
 8001980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
HAL_StatusTypeDef sensirion_i2c_read(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t* data, uint16_t count) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af02      	add	r7, sp, #8
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	461a      	mov	r2, r3
 80019a4:	460b      	mov	r3, r1
 80019a6:	72fb      	strb	r3, [r7, #11]
 80019a8:	4613      	mov	r3, r2
 80019aa:	813b      	strh	r3, [r7, #8]
    // IMPLEMENT
	HAL_StatusTypeDef i2c_status_return;

	i2c_status_return = HAL_I2C_Master_Receive(hi2c, address, data, count, DEFAULT_I2C_TIMEOUT);
 80019ac:	7afb      	ldrb	r3, [r7, #11]
 80019ae:	b299      	uxth	r1, r3
 80019b0:	893b      	ldrh	r3, [r7, #8]
 80019b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80019b6:	9200      	str	r2, [sp, #0]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f001 fbea 	bl	8003194 <HAL_I2C_Master_Receive>
 80019c0:	4603      	mov	r3, r0
 80019c2:	75fb      	strb	r3, [r7, #23]
    return i2c_status_return;
 80019c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
HAL_StatusTypeDef sensirion_i2c_write(I2C_HandleTypeDef *hi2c, uint8_t address, const uint8_t* data,
                           uint16_t count) {
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b088      	sub	sp, #32
 80019d2:	af02      	add	r7, sp, #8
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	607a      	str	r2, [r7, #4]
 80019d8:	461a      	mov	r2, r3
 80019da:	460b      	mov	r3, r1
 80019dc:	72fb      	strb	r3, [r7, #11]
 80019de:	4613      	mov	r3, r2
 80019e0:	813b      	strh	r3, [r7, #8]
    // IMPLEMENT
	HAL_StatusTypeDef i2c_status_return;

		/* Start measure  */
	i2c_status_return = HAL_I2C_Master_Transmit(hi2c, address, data, count, DEFAULT_I2C_TIMEOUT);
 80019e2:	7afb      	ldrb	r3, [r7, #11]
 80019e4:	b299      	uxth	r1, r3
 80019e6:	893b      	ldrh	r3, [r7, #8]
 80019e8:	f242 7210 	movw	r2, #10000	; 0x2710
 80019ec:	9200      	str	r2, [sp, #0]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f001 fadb 	bl	8002fac <HAL_I2C_Master_Transmit>
 80019f6:	4603      	mov	r3, r0
 80019f8:	75fb      	strb	r3, [r7, #23]
    return i2c_status_return;
 80019fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <sensirion_common_generate_crc>:

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
    return tmp.float32;
}

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8001a10:	23ff      	movs	r3, #255	; 0xff
 8001a12:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001a14:	2300      	movs	r3, #0
 8001a16:	81fb      	strh	r3, [r7, #14]
 8001a18:	e021      	b.n	8001a5e <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8001a1a:	89fb      	ldrh	r3, [r7, #14]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	4413      	add	r3, r2
 8001a20:	781a      	ldrb	r2, [r3, #0]
 8001a22:	7b7b      	ldrb	r3, [r7, #13]
 8001a24:	4053      	eors	r3, r2
 8001a26:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001a28:	2308      	movs	r3, #8
 8001a2a:	733b      	strb	r3, [r7, #12]
 8001a2c:	e011      	b.n	8001a52 <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 8001a2e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	da07      	bge.n	8001a46 <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8001a36:	7b7b      	ldrb	r3, [r7, #13]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	b25b      	sxtb	r3, r3
 8001a3c:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001a40:	b25b      	sxtb	r3, r3
 8001a42:	737b      	strb	r3, [r7, #13]
 8001a44:	e002      	b.n	8001a4c <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 8001a46:	7b7b      	ldrb	r3, [r7, #13]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001a4c:	7b3b      	ldrb	r3, [r7, #12]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	733b      	strb	r3, [r7, #12]
 8001a52:	7b3b      	ldrb	r3, [r7, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1ea      	bne.n	8001a2e <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001a58:	89fb      	ldrh	r3, [r7, #14]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	81fb      	strh	r3, [r7, #14]
 8001a5e:	89fa      	ldrh	r2, [r7, #14]
 8001a60:	887b      	ldrh	r3, [r7, #2]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d3d9      	bcc.n	8001a1a <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 8001a66:	7b7b      	ldrb	r3, [r7, #13]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
 8001a80:	4613      	mov	r3, r2
 8001a82:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 8001a84:	887b      	ldrh	r3, [r7, #2]
 8001a86:	4619      	mov	r1, r3
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ffbb 	bl	8001a04 <sensirion_common_generate_crc>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	461a      	mov	r2, r3
 8001a92:	787b      	ldrb	r3, [r7, #1]
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d002      	beq.n	8001a9e <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9c:	e000      	b.n	8001aa0 <sensirion_common_check_crc+0x2c>
    return NO_ERROR;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <sensirion_fill_cmd_send_buf>:
    const uint8_t data = 0x06;
    return sensirion_i2c_write(hi2c, 0, &data, (uint16_t)sizeof(data));
}

uint16_t sensirion_fill_cmd_send_buf(uint8_t* buf, uint16_t cmd,
                                     const uint16_t* args, uint8_t num_args) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	817b      	strh	r3, [r7, #10]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	727b      	strb	r3, [r7, #9]
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	82bb      	strh	r3, [r7, #20]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 8001ac0:	897b      	ldrh	r3, [r7, #10]
 8001ac2:	0a1b      	lsrs	r3, r3, #8
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	8abb      	ldrh	r3, [r7, #20]
 8001ac8:	1c59      	adds	r1, r3, #1
 8001aca:	82b9      	strh	r1, [r7, #20]
 8001acc:	4619      	mov	r1, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	440b      	add	r3, r1
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 8001ad6:	8abb      	ldrh	r3, [r7, #20]
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	82ba      	strh	r2, [r7, #20]
 8001adc:	461a      	mov	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	897a      	ldrh	r2, [r7, #10]
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_args; ++i) {
 8001ae8:	2300      	movs	r3, #0
 8001aea:	75fb      	strb	r3, [r7, #23]
 8001aec:	e030      	b.n	8001b50 <sensirion_fill_cmd_send_buf+0xa8>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
 8001aee:	7dfb      	ldrb	r3, [r7, #23]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	0a1b      	lsrs	r3, r3, #8
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	8abb      	ldrh	r3, [r7, #20]
 8001afe:	1c59      	adds	r1, r3, #1
 8001b00:	82b9      	strh	r1, [r7, #20]
 8001b02:	4619      	mov	r1, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	440b      	add	r3, r1
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	701a      	strb	r2, [r3, #0]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
 8001b0c:	7dfb      	ldrb	r3, [r7, #23]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	4413      	add	r3, r2
 8001b14:	881a      	ldrh	r2, [r3, #0]
 8001b16:	8abb      	ldrh	r3, [r7, #20]
 8001b18:	1c59      	adds	r1, r3, #1
 8001b1a:	82b9      	strh	r1, [r7, #20]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	440b      	add	r3, r1
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	701a      	strb	r2, [r3, #0]

        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
 8001b26:	8abb      	ldrh	r3, [r7, #20]
 8001b28:	3b02      	subs	r3, #2
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	2102      	movs	r1, #2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff67 	bl	8001a04 <sensirion_common_generate_crc>
 8001b36:	4603      	mov	r3, r0
 8001b38:	74fb      	strb	r3, [r7, #19]
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
 8001b3a:	8abb      	ldrh	r3, [r7, #20]
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	82ba      	strh	r2, [r7, #20]
 8001b40:	461a      	mov	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4413      	add	r3, r2
 8001b46:	7cfa      	ldrb	r2, [r7, #19]
 8001b48:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_args; ++i) {
 8001b4a:	7dfb      	ldrb	r3, [r7, #23]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	75fb      	strb	r3, [r7, #23]
 8001b50:	7dfa      	ldrb	r2, [r7, #23]
 8001b52:	7a7b      	ldrb	r3, [r7, #9]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d3ca      	bcc.n	8001aee <sensirion_fill_cmd_send_buf+0x46>
    }
    return idx;
 8001b58:	8abb      	ldrh	r3, [r7, #20]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b098      	sub	sp, #96	; 0x60
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	607a      	str	r2, [r7, #4]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	460b      	mov	r3, r1
 8001b70:	72fb      	strb	r3, [r7, #11]
 8001b72:	4613      	mov	r3, r2
 8001b74:	813b      	strh	r3, [r7, #8]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 8001b76:	893b      	ldrh	r3, [r7, #8]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	0052      	lsls	r2, r2, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 8001b82:	f107 0310 	add.w	r3, r7, #16
 8001b86:	657b      	str	r3, [r7, #84]	; 0x54

    ret = sensirion_i2c_read(hi2c, address, buf8, size);
 8001b88:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001b8c:	7af9      	ldrb	r1, [r7, #11]
 8001b8e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f7ff ff01 	bl	8001998 <sensirion_i2c_read>
 8001b96:	4603      	mov	r3, r0
 8001b98:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
    if (ret != NO_ERROR)
 8001b9c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <sensirion_i2c_read_words_as_bytes+0x48>
        return ret;
 8001ba4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001ba8:	e047      	b.n	8001c3a <sensirion_i2c_read_words_as_bytes+0xd8>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001baa:	2300      	movs	r3, #0
 8001bac:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8001bb6:	e039      	b.n	8001c2c <sensirion_i2c_read_words_as_bytes+0xca>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8001bb8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001bbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001bbe:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 8001bc0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001bc8:	4413      	add	r3, r2
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	2102      	movs	r1, #2
 8001bd0:	f7ff ff50 	bl	8001a74 <sensirion_common_check_crc>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
        if (ret != NO_ERROR)
 8001bda:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d002      	beq.n	8001be8 <sensirion_i2c_read_words_as_bytes+0x86>
            return ret;
 8001be2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001be6:	e028      	b.n	8001c3a <sensirion_i2c_read_words_as_bytes+0xd8>

        data[j++] = buf8[i];
 8001be8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001bec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001bee:	441a      	add	r2, r3
 8001bf0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001bf4:	1c59      	adds	r1, r3, #1
 8001bf6:	f8a7 105c 	strh.w	r1, [r7, #92]	; 0x5c
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	440b      	add	r3, r1
 8001c00:	7812      	ldrb	r2, [r2, #0]
 8001c02:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 8001c04:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001c08:	3301      	adds	r3, #1
 8001c0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c0c:	441a      	add	r2, r3
 8001c0e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001c12:	1c59      	adds	r1, r3, #1
 8001c14:	f8a7 105c 	strh.w	r1, [r7, #92]	; 0x5c
 8001c18:	4619      	mov	r1, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	440b      	add	r3, r1
 8001c1e:	7812      	ldrb	r2, [r2, #0]
 8001c20:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001c22:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001c26:	3303      	adds	r3, #3
 8001c28:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001c2c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001c30:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d3bf      	bcc.n	8001bb8 <sensirion_i2c_read_words_as_bytes+0x56>
    }

    return NO_ERROR;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3760      	adds	r7, #96	; 0x60
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(I2C_HandleTypeDef *hi2c, uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	460b      	mov	r3, r1
 8001c50:	72fb      	strb	r3, [r7, #11]
 8001c52:	4613      	mov	r3, r2
 8001c54:	813b      	strh	r3, [r7, #8]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(hi2c, address, (uint8_t*)data_words,
 8001c56:	893b      	ldrh	r3, [r7, #8]
 8001c58:	7af9      	ldrb	r1, [r7, #11]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f7ff ff80 	bl	8001b62 <sensirion_i2c_read_words_as_bytes>
 8001c62:	4603      	mov	r3, r0
 8001c64:	82bb      	strh	r3, [r7, #20]
                                            num_words);
    if (ret != NO_ERROR)
 8001c66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <sensirion_i2c_read_words+0x32>
        return ret;
 8001c6e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c72:	e020      	b.n	8001cb6 <sensirion_i2c_read_words+0x74>

    for (i = 0; i < num_words; ++i) {
 8001c74:	2300      	movs	r3, #0
 8001c76:	75fb      	strb	r3, [r7, #23]
 8001c78:	e017      	b.n	8001caa <sensirion_i2c_read_words+0x68>
        word_bytes = (uint8_t*)&data_words[i];
 8001c7a:	7dfb      	ldrb	r3, [r7, #23]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	b21a      	sxth	r2, r3
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	4313      	orrs	r3, r2
 8001c96:	b219      	sxth	r1, r3
 8001c98:	7dfb      	ldrb	r3, [r7, #23]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	b28a      	uxth	r2, r1
 8001ca2:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 8001ca4:	7dfb      	ldrb	r3, [r7, #23]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	75fb      	strb	r3, [r7, #23]
 8001caa:	7dfb      	ldrb	r3, [r7, #23]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	893a      	ldrh	r2, [r7, #8]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d8e2      	bhi.n	8001c7a <sensirion_i2c_read_words+0x38>
    }

    return NO_ERROR;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(I2C_HandleTypeDef *hi2c, uint8_t address, uint16_t command) {
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b084      	sub	sp, #16
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	70fb      	strb	r3, [r7, #3]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	803b      	strh	r3, [r7, #0]
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
 8001cce:	8839      	ldrh	r1, [r7, #0]
 8001cd0:	f107 000c 	add.w	r0, r7, #12
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f7ff fee6 	bl	8001aa8 <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(hi2c, address, buf, SENSIRION_COMMAND_SIZE);
 8001cdc:	f107 020c 	add.w	r2, r7, #12
 8001ce0:	78f9      	ldrb	r1, [r7, #3]
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff fe72 	bl	80019ce <sensirion_i2c_write>
 8001cea:	4603      	mov	r3, r0
 8001cec:	b21b      	sxth	r3, r3
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <sht3x_measure>:
        ret = sht3x_read(hi2c, addr, temperature, humidity);
    }
    return ret;
}

int16_t sht3x_measure(I2C_HandleTypeDef *hi2c, sht3x_i2c_addr_t addr) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	70fb      	strb	r3, [r7, #3]
    return sensirion_i2c_write_cmd(hi2c, addr, sht3x_cmd_measure);
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <sht3x_measure+0x24>)
 8001d06:	881a      	ldrh	r2, [r3, #0]
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff ffd6 	bl	8001cbe <sensirion_i2c_write_cmd>
 8001d12:	4603      	mov	r3, r0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000004 	.word	0x20000004

08001d20 <sht3x_read>:

int16_t sht3x_read(I2C_HandleTypeDef *hi2c, sht3x_i2c_addr_t addr, int32_t* temperature,
                   int32_t* humidity) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	607a      	str	r2, [r7, #4]
 8001d2a:	603b      	str	r3, [r7, #0]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	72fb      	strb	r3, [r7, #11]
    uint16_t words[2];
    int16_t ret =
        sensirion_i2c_read_words(hi2c, addr, words, SENSIRION_NUM_WORDS(words));
 8001d30:	f107 0210 	add.w	r2, r7, #16
 8001d34:	7af9      	ldrb	r1, [r7, #11]
 8001d36:	2302      	movs	r3, #2
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f7ff ff82 	bl	8001c42 <sensirion_i2c_read_words>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	82fb      	strh	r3, [r7, #22]
    /**
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra: Temperature = 175 * S_T / 2^16 - 45
     * Relative Humidity = * 100 * S_RH / 2^16
     */
    tick_to_temperature(words[0], temperature);
 8001d42:	8a3b      	ldrh	r3, [r7, #16]
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 f80b 	bl	8001d62 <tick_to_temperature>
    tick_to_humidity(words[1], humidity);
 8001d4c:	8a7b      	ldrh	r3, [r7, #18]
 8001d4e:	6839      	ldr	r1, [r7, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 f81d 	bl	8001d90 <tick_to_humidity>

    return ret;
 8001d56:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <tick_to_temperature>:
    tick_to_temperature(rawT, temperature);

    return ret;
}

void tick_to_temperature(uint16_t tick, int32_t* temperature) {
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	6039      	str	r1, [r7, #0]
 8001d6c:	80fb      	strh	r3, [r7, #6]
    *temperature = ((21875 * (int32_t)tick) >> 13) - 45000;
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	f245 5273 	movw	r2, #21875	; 0x5573
 8001d74:	fb02 f303 	mul.w	r3, r2, r3
 8001d78:	135b      	asrs	r3, r3, #13
 8001d7a:	f5a3 432f 	sub.w	r3, r3, #44800	; 0xaf00
 8001d7e:	3bc8      	subs	r3, #200	; 0xc8
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	6013      	str	r3, [r2, #0]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <tick_to_humidity>:

void tick_to_humidity(uint16_t tick, int32_t* humidity) {
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	80fb      	strh	r3, [r7, #6]
    *humidity = ((12500 * (int32_t)tick) >> 13);
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8001da2:	fb02 f303 	mul.w	r3, r2, r3
 8001da6:	135a      	asrs	r2, r3, #13
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	601a      	str	r2, [r3, #0]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af04      	add	r7, sp, #16
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd6:	9302      	str	r3, [sp, #8]
 8001dd8:	2301      	movs	r3, #1
 8001dda:	9301      	str	r3, [sp, #4]
 8001ddc:	1dfb      	adds	r3, r7, #7
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	2301      	movs	r3, #1
 8001de2:	2200      	movs	r2, #0
 8001de4:	2178      	movs	r1, #120	; 0x78
 8001de6:	4803      	ldr	r0, [pc, #12]	; (8001df4 <ssd1306_WriteCommand+0x2c>)
 8001de8:	f001 faca 	bl	8003380 <HAL_I2C_Mem_Write>
}
 8001dec:	bf00      	nop
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000258 	.word	0x20000258

08001df8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af04      	add	r7, sp, #16
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	f04f 32ff 	mov.w	r2, #4294967295
 8001e0a:	9202      	str	r2, [sp, #8]
 8001e0c:	9301      	str	r3, [sp, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	2301      	movs	r3, #1
 8001e14:	2240      	movs	r2, #64	; 0x40
 8001e16:	2178      	movs	r1, #120	; 0x78
 8001e18:	4803      	ldr	r0, [pc, #12]	; (8001e28 <ssd1306_WriteData+0x30>)
 8001e1a:	f001 fab1 	bl	8003380 <HAL_I2C_Mem_Write>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000258 	.word	0x20000258

08001e2c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001e30:	f7ff ffc2 	bl	8001db8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001e34:	2064      	movs	r0, #100	; 0x64
 8001e36:	f000 fb19 	bl	800246c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f000 f9b4 	bl	80021a8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001e40:	2020      	movs	r0, #32
 8001e42:	f7ff ffc1 	bl	8001dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001e46:	2000      	movs	r0, #0
 8001e48:	f7ff ffbe 	bl	8001dc8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001e4c:	20b0      	movs	r0, #176	; 0xb0
 8001e4e:	f7ff ffbb 	bl	8001dc8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001e52:	20c8      	movs	r0, #200	; 0xc8
 8001e54:	f7ff ffb8 	bl	8001dc8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f7ff ffb5 	bl	8001dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001e5e:	2010      	movs	r0, #16
 8001e60:	f7ff ffb2 	bl	8001dc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001e64:	2040      	movs	r0, #64	; 0x40
 8001e66:	f7ff ffaf 	bl	8001dc8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001e6a:	20ff      	movs	r0, #255	; 0xff
 8001e6c:	f000 f988 	bl	8002180 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001e70:	20a1      	movs	r0, #161	; 0xa1
 8001e72:	f7ff ffa9 	bl	8001dc8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001e76:	20a6      	movs	r0, #166	; 0xa6
 8001e78:	f7ff ffa6 	bl	8001dc8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001e7c:	20a8      	movs	r0, #168	; 0xa8
 8001e7e:	f7ff ffa3 	bl	8001dc8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001e82:	203f      	movs	r0, #63	; 0x3f
 8001e84:	f7ff ffa0 	bl	8001dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001e88:	20a4      	movs	r0, #164	; 0xa4
 8001e8a:	f7ff ff9d 	bl	8001dc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001e8e:	20d3      	movs	r0, #211	; 0xd3
 8001e90:	f7ff ff9a 	bl	8001dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001e94:	2000      	movs	r0, #0
 8001e96:	f7ff ff97 	bl	8001dc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001e9a:	20d5      	movs	r0, #213	; 0xd5
 8001e9c:	f7ff ff94 	bl	8001dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001ea0:	20f0      	movs	r0, #240	; 0xf0
 8001ea2:	f7ff ff91 	bl	8001dc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001ea6:	20d9      	movs	r0, #217	; 0xd9
 8001ea8:	f7ff ff8e 	bl	8001dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001eac:	2022      	movs	r0, #34	; 0x22
 8001eae:	f7ff ff8b 	bl	8001dc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001eb2:	20da      	movs	r0, #218	; 0xda
 8001eb4:	f7ff ff88 	bl	8001dc8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001eb8:	2012      	movs	r0, #18
 8001eba:	f7ff ff85 	bl	8001dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001ebe:	20db      	movs	r0, #219	; 0xdb
 8001ec0:	f7ff ff82 	bl	8001dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001ec4:	2020      	movs	r0, #32
 8001ec6:	f7ff ff7f 	bl	8001dc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001eca:	208d      	movs	r0, #141	; 0x8d
 8001ecc:	f7ff ff7c 	bl	8001dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001ed0:	2014      	movs	r0, #20
 8001ed2:	f7ff ff79 	bl	8001dc8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f000 f966 	bl	80021a8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001edc:	2000      	movs	r0, #0
 8001ede:	f000 f80f 	bl	8001f00 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001ee2:	f000 f831 	bl	8001f48 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <ssd1306_Init+0xd0>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001eec:	4b03      	ldr	r3, [pc, #12]	; (8001efc <ssd1306_Init+0xd0>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001ef2:	4b02      	ldr	r3, [pc, #8]	; (8001efc <ssd1306_Init+0xd0>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	711a      	strb	r2, [r3, #4]
}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000814 	.word	0x20000814

08001f00 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	e00d      	b.n	8001f2c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <ssd1306_Fill+0x1a>
 8001f16:	2100      	movs	r1, #0
 8001f18:	e000      	b.n	8001f1c <ssd1306_Fill+0x1c>
 8001f1a:	21ff      	movs	r1, #255	; 0xff
 8001f1c:	4a09      	ldr	r2, [pc, #36]	; (8001f44 <ssd1306_Fill+0x44>)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4413      	add	r3, r2
 8001f22:	460a      	mov	r2, r1
 8001f24:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f32:	d3ed      	bcc.n	8001f10 <ssd1306_Fill+0x10>
    }
}
 8001f34:	bf00      	nop
 8001f36:	bf00      	nop
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000414 	.word	0x20000414

08001f48 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001f4e:	2300      	movs	r3, #0
 8001f50:	71fb      	strb	r3, [r7, #7]
 8001f52:	e016      	b.n	8001f82 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	3b50      	subs	r3, #80	; 0x50
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff ff34 	bl	8001dc8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001f60:	2000      	movs	r0, #0
 8001f62:	f7ff ff31 	bl	8001dc8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001f66:	2010      	movs	r0, #16
 8001f68:	f7ff ff2e 	bl	8001dc8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	01db      	lsls	r3, r3, #7
 8001f70:	4a08      	ldr	r2, [pc, #32]	; (8001f94 <ssd1306_UpdateScreen+0x4c>)
 8001f72:	4413      	add	r3, r2
 8001f74:	2180      	movs	r1, #128	; 0x80
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ff3e 	bl	8001df8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	71fb      	strb	r3, [r7, #7]
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	2b07      	cmp	r3, #7
 8001f86:	d9e5      	bls.n	8001f54 <ssd1306_UpdateScreen+0xc>
    }
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000414 	.word	0x20000414

08001f98 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	71bb      	strb	r3, [r7, #6]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	db3d      	blt.n	800202e <ssd1306_DrawPixel+0x96>
 8001fb2:	79bb      	ldrb	r3, [r7, #6]
 8001fb4:	2b3f      	cmp	r3, #63	; 0x3f
 8001fb6:	d83a      	bhi.n	800202e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001fb8:	797b      	ldrb	r3, [r7, #5]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d11a      	bne.n	8001ff4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001fbe:	79fa      	ldrb	r2, [r7, #7]
 8001fc0:	79bb      	ldrb	r3, [r7, #6]
 8001fc2:	08db      	lsrs	r3, r3, #3
 8001fc4:	b2d8      	uxtb	r0, r3
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	01db      	lsls	r3, r3, #7
 8001fca:	4413      	add	r3, r2
 8001fcc:	4a1b      	ldr	r2, [pc, #108]	; (800203c <ssd1306_DrawPixel+0xa4>)
 8001fce:	5cd3      	ldrb	r3, [r2, r3]
 8001fd0:	b25a      	sxtb	r2, r3
 8001fd2:	79bb      	ldrb	r3, [r7, #6]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	2101      	movs	r1, #1
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	b25b      	sxtb	r3, r3
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	b259      	sxtb	r1, r3
 8001fe4:	79fa      	ldrb	r2, [r7, #7]
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	01db      	lsls	r3, r3, #7
 8001fea:	4413      	add	r3, r2
 8001fec:	b2c9      	uxtb	r1, r1
 8001fee:	4a13      	ldr	r2, [pc, #76]	; (800203c <ssd1306_DrawPixel+0xa4>)
 8001ff0:	54d1      	strb	r1, [r2, r3]
 8001ff2:	e01d      	b.n	8002030 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ff4:	79fa      	ldrb	r2, [r7, #7]
 8001ff6:	79bb      	ldrb	r3, [r7, #6]
 8001ff8:	08db      	lsrs	r3, r3, #3
 8001ffa:	b2d8      	uxtb	r0, r3
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	01db      	lsls	r3, r3, #7
 8002000:	4413      	add	r3, r2
 8002002:	4a0e      	ldr	r2, [pc, #56]	; (800203c <ssd1306_DrawPixel+0xa4>)
 8002004:	5cd3      	ldrb	r3, [r2, r3]
 8002006:	b25a      	sxtb	r2, r3
 8002008:	79bb      	ldrb	r3, [r7, #6]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	2101      	movs	r1, #1
 8002010:	fa01 f303 	lsl.w	r3, r1, r3
 8002014:	b25b      	sxtb	r3, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	b25b      	sxtb	r3, r3
 800201a:	4013      	ands	r3, r2
 800201c:	b259      	sxtb	r1, r3
 800201e:	79fa      	ldrb	r2, [r7, #7]
 8002020:	4603      	mov	r3, r0
 8002022:	01db      	lsls	r3, r3, #7
 8002024:	4413      	add	r3, r2
 8002026:	b2c9      	uxtb	r1, r1
 8002028:	4a04      	ldr	r2, [pc, #16]	; (800203c <ssd1306_DrawPixel+0xa4>)
 800202a:	54d1      	strb	r1, [r2, r3]
 800202c:	e000      	b.n	8002030 <ssd1306_DrawPixel+0x98>
        return;
 800202e:	bf00      	nop
    }
}
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20000414 	.word	0x20000414

08002040 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002040:	b590      	push	{r4, r7, lr}
 8002042:	b089      	sub	sp, #36	; 0x24
 8002044:	af00      	add	r7, sp, #0
 8002046:	4604      	mov	r4, r0
 8002048:	1d38      	adds	r0, r7, #4
 800204a:	e880 0006 	stmia.w	r0, {r1, r2}
 800204e:	461a      	mov	r2, r3
 8002050:	4623      	mov	r3, r4
 8002052:	73fb      	strb	r3, [r7, #15]
 8002054:	4613      	mov	r3, r2
 8002056:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	2b1f      	cmp	r3, #31
 800205c:	d902      	bls.n	8002064 <ssd1306_WriteChar+0x24>
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	2b7e      	cmp	r3, #126	; 0x7e
 8002062:	d901      	bls.n	8002068 <ssd1306_WriteChar+0x28>
        return 0;
 8002064:	2300      	movs	r3, #0
 8002066:	e06d      	b.n	8002144 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002068:	4b38      	ldr	r3, [pc, #224]	; (800214c <ssd1306_WriteChar+0x10c>)
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	793b      	ldrb	r3, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	2b80      	cmp	r3, #128	; 0x80
 8002074:	dc06      	bgt.n	8002084 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002076:	4b35      	ldr	r3, [pc, #212]	; (800214c <ssd1306_WriteChar+0x10c>)
 8002078:	885b      	ldrh	r3, [r3, #2]
 800207a:	461a      	mov	r2, r3
 800207c:	797b      	ldrb	r3, [r7, #5]
 800207e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002080:	2b40      	cmp	r3, #64	; 0x40
 8002082:	dd01      	ble.n	8002088 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002084:	2300      	movs	r3, #0
 8002086:	e05d      	b.n	8002144 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002088:	2300      	movs	r3, #0
 800208a:	61fb      	str	r3, [r7, #28]
 800208c:	e04c      	b.n	8002128 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	3b20      	subs	r3, #32
 8002094:	7979      	ldrb	r1, [r7, #5]
 8002096:	fb01 f303 	mul.w	r3, r1, r3
 800209a:	4619      	mov	r1, r3
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	440b      	add	r3, r1
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4413      	add	r3, r2
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80020a8:	2300      	movs	r3, #0
 80020aa:	61bb      	str	r3, [r7, #24]
 80020ac:	e034      	b.n	8002118 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d012      	beq.n	80020e4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80020be:	4b23      	ldr	r3, [pc, #140]	; (800214c <ssd1306_WriteChar+0x10c>)
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	4413      	add	r3, r2
 80020ca:	b2d8      	uxtb	r0, r3
 80020cc:	4b1f      	ldr	r3, [pc, #124]	; (800214c <ssd1306_WriteChar+0x10c>)
 80020ce:	885b      	ldrh	r3, [r3, #2]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	4413      	add	r3, r2
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	7bba      	ldrb	r2, [r7, #14]
 80020dc:	4619      	mov	r1, r3
 80020de:	f7ff ff5b 	bl	8001f98 <ssd1306_DrawPixel>
 80020e2:	e016      	b.n	8002112 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <ssd1306_WriteChar+0x10c>)
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	4413      	add	r3, r2
 80020f0:	b2d8      	uxtb	r0, r3
 80020f2:	4b16      	ldr	r3, [pc, #88]	; (800214c <ssd1306_WriteChar+0x10c>)
 80020f4:	885b      	ldrh	r3, [r3, #2]
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	b2d9      	uxtb	r1, r3
 8002100:	7bbb      	ldrb	r3, [r7, #14]
 8002102:	2b00      	cmp	r3, #0
 8002104:	bf0c      	ite	eq
 8002106:	2301      	moveq	r3, #1
 8002108:	2300      	movne	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	f7ff ff43 	bl	8001f98 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	3301      	adds	r3, #1
 8002116:	61bb      	str	r3, [r7, #24]
 8002118:	793b      	ldrb	r3, [r7, #4]
 800211a:	461a      	mov	r2, r3
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	4293      	cmp	r3, r2
 8002120:	d3c5      	bcc.n	80020ae <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3301      	adds	r3, #1
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	797b      	ldrb	r3, [r7, #5]
 800212a:	461a      	mov	r2, r3
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	4293      	cmp	r3, r2
 8002130:	d3ad      	bcc.n	800208e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <ssd1306_WriteChar+0x10c>)
 8002134:	881a      	ldrh	r2, [r3, #0]
 8002136:	793b      	ldrb	r3, [r7, #4]
 8002138:	b29b      	uxth	r3, r3
 800213a:	4413      	add	r3, r2
 800213c:	b29a      	uxth	r2, r3
 800213e:	4b03      	ldr	r3, [pc, #12]	; (800214c <ssd1306_WriteChar+0x10c>)
 8002140:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002142:	7bfb      	ldrb	r3, [r7, #15]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3724      	adds	r7, #36	; 0x24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd90      	pop	{r4, r7, pc}
 800214c:	20000814 	.word	0x20000814

08002150 <ssd1306_SetCursor>:
    // Everything ok
    return *str;
}

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	460a      	mov	r2, r1
 800215a:	71fb      	strb	r3, [r7, #7]
 800215c:	4613      	mov	r3, r2
 800215e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	b29a      	uxth	r2, r3
 8002164:	4b05      	ldr	r3, [pc, #20]	; (800217c <ssd1306_SetCursor+0x2c>)
 8002166:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002168:	79bb      	ldrb	r3, [r7, #6]
 800216a:	b29a      	uxth	r2, r3
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <ssd1306_SetCursor+0x2c>)
 800216e:	805a      	strh	r2, [r3, #2]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	20000814 	.word	0x20000814

08002180 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800218a:	2381      	movs	r3, #129	; 0x81
 800218c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fe19 	bl	8001dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fe15 	bl	8001dc8 <ssd1306_WriteCommand>
}
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80021b8:	23af      	movs	r3, #175	; 0xaf
 80021ba:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <ssd1306_SetDisplayOn+0x38>)
 80021be:	2201      	movs	r2, #1
 80021c0:	715a      	strb	r2, [r3, #5]
 80021c2:	e004      	b.n	80021ce <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80021c4:	23ae      	movs	r3, #174	; 0xae
 80021c6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <ssd1306_SetDisplayOn+0x38>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fdf9 	bl	8001dc8 <ssd1306_WriteCommand>
}
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000814 	.word	0x20000814

080021e4 <ssd1306_write_u32>:
#include <stdio.h>
#include "ssd1306.h"
#include "ssd1306_tests.h"


void ssd1306_write_u32(uint32_t vin, uint8_t decimals){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08c      	sub	sp, #48	; 0x30
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	70fb      	strb	r3, [r7, #3]
    uint32_t divisor = 1000000000;
 80021f0:	4b39      	ldr	r3, [pc, #228]	; (80022d8 <ssd1306_write_u32+0xf4>)
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t valor, resto, quociente = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61bb      	str	r3, [r7, #24]
    valor = vin;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t buffer[11];
    uint8_t qnt = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t flag_quociente = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    buffer[10] = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	74bb      	strb	r3, [r7, #18]

	for (int i=0;i<=9;i++){
 800220c:	2300      	movs	r3, #0
 800220e:	623b      	str	r3, [r7, #32]
 8002210:	e034      	b.n	800227c <ssd1306_write_u32+0x98>
		resto = valor%divisor;
 8002212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002216:	fbb3 f2f2 	udiv	r2, r3, r2
 800221a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800221c:	fb01 f202 	mul.w	r2, r1, r2
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	617b      	str	r3, [r7, #20]
		quociente = valor/(divisor);
 8002224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002228:	fbb2 f3f3 	udiv	r3, r2, r3
 800222c:	61bb      	str	r3, [r7, #24]
        buffer[i] = quociente + '0';
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	3330      	adds	r3, #48	; 0x30
 8002234:	b2d9      	uxtb	r1, r3
 8002236:	f107 0208 	add.w	r2, r7, #8
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	4413      	add	r3, r2
 800223e:	460a      	mov	r2, r1
 8002240:	701a      	strb	r2, [r3, #0]
        valor = resto;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	62bb      	str	r3, [r7, #40]	; 0x28
        if (divisor >= 10)
 8002246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002248:	2b09      	cmp	r3, #9
 800224a:	d905      	bls.n	8002258 <ssd1306_write_u32+0x74>
           divisor /= 10;
 800224c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224e:	4a23      	ldr	r2, [pc, #140]	; (80022dc <ssd1306_write_u32+0xf8>)
 8002250:	fba2 2303 	umull	r2, r3, r2, r3
 8002254:	08db      	lsrs	r3, r3, #3
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (quociente)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d002      	beq.n	8002264 <ssd1306_write_u32+0x80>
          flag_quociente = 1;
 800225e:	2301      	movs	r3, #1
 8002260:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        if (flag_quociente)
 8002264:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002268:	2b00      	cmp	r3, #0
 800226a:	d004      	beq.n	8002276 <ssd1306_write_u32+0x92>
        	qnt++;
 800226c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002270:	3301      	adds	r3, #1
 8002272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (int i=0;i<=9;i++){
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	3301      	adds	r3, #1
 800227a:	623b      	str	r3, [r7, #32]
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	2b09      	cmp	r3, #9
 8002280:	ddc7      	ble.n	8002212 <ssd1306_write_u32+0x2e>
	}

	for (int i=qnt; i;i--){
 8002282:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002286:	61fb      	str	r3, [r7, #28]
 8002288:	e01d      	b.n	80022c6 <ssd1306_write_u32+0xe2>
		if (decimals <= qnt){
 800228a:	78fa      	ldrb	r2, [r7, #3]
 800228c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002290:	429a      	cmp	r2, r3
 8002292:	d809      	bhi.n	80022a8 <ssd1306_write_u32+0xc4>
			if (i == decimals){
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	69fa      	ldr	r2, [r7, #28]
 8002298:	429a      	cmp	r2, r3
 800229a:	d105      	bne.n	80022a8 <ssd1306_write_u32+0xc4>
				ssd1306_WriteChar('.', Font_7x10, White);
 800229c:	4a10      	ldr	r2, [pc, #64]	; (80022e0 <ssd1306_write_u32+0xfc>)
 800229e:	2301      	movs	r3, #1
 80022a0:	ca06      	ldmia	r2, {r1, r2}
 80022a2:	202e      	movs	r0, #46	; 0x2e
 80022a4:	f7ff fecc 	bl	8002040 <ssd1306_WriteChar>
			}
		}
		ssd1306_WriteChar(buffer[10 - i], Font_7x10, White);
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f1c3 030a 	rsb	r3, r3, #10
 80022ae:	3330      	adds	r3, #48	; 0x30
 80022b0:	443b      	add	r3, r7
 80022b2:	f813 0c28 	ldrb.w	r0, [r3, #-40]
 80022b6:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <ssd1306_write_u32+0xfc>)
 80022b8:	2301      	movs	r3, #1
 80022ba:	ca06      	ldmia	r2, {r1, r2}
 80022bc:	f7ff fec0 	bl	8002040 <ssd1306_WriteChar>
	for (int i=qnt; i;i--){
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1de      	bne.n	800228a <ssd1306_write_u32+0xa6>

	}
	ssd1306_UpdateScreen();
 80022cc:	f7ff fe3c 	bl	8001f48 <ssd1306_UpdateScreen>

	return;
 80022d0:	bf00      	nop
};
 80022d2:	3730      	adds	r7, #48	; 0x30
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	3b9aca00 	.word	0x3b9aca00
 80022dc:	cccccccd 	.word	0xcccccccd
 80022e0:	20000008 	.word	0x20000008

080022e4 <ssd1306_write_i32>:


void ssd1306_write_i32(int32_t vin, uint8_t decimals){
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	70fb      	strb	r3, [r7, #3]
	uint8_t signal = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	73fb      	strb	r3, [r7, #15]

	if (vin < 0){
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	da04      	bge.n	8002304 <ssd1306_write_i32+0x20>
		signal = 1;
 80022fa:	2301      	movs	r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
		vin *= -1;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	425b      	negs	r3, r3
 8002302:	607b      	str	r3, [r7, #4]
	}

	if (signal){
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <ssd1306_write_i32+0x32>
	   ssd1306_WriteChar('-', Font_7x10, White);
 800230a:	4a08      	ldr	r2, [pc, #32]	; (800232c <ssd1306_write_i32+0x48>)
 800230c:	2301      	movs	r3, #1
 800230e:	ca06      	ldmia	r2, {r1, r2}
 8002310:	202d      	movs	r0, #45	; 0x2d
 8002312:	f7ff fe95 	bl	8002040 <ssd1306_WriteChar>
	}
	ssd1306_write_u32(vin, decimals);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	78fa      	ldrb	r2, [r7, #3]
 800231a:	4611      	mov	r1, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff ff61 	bl	80021e4 <ssd1306_write_u32>

}
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000008 	.word	0x20000008

08002330 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002368 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002334:	f7ff fb1e 	bl	8001974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002338:	480c      	ldr	r0, [pc, #48]	; (800236c <LoopForever+0x6>)
  ldr r1, =_edata
 800233a:	490d      	ldr	r1, [pc, #52]	; (8002370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800233c:	4a0d      	ldr	r2, [pc, #52]	; (8002374 <LoopForever+0xe>)
  movs r3, #0
 800233e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002340:	e002      	b.n	8002348 <LoopCopyDataInit>

08002342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002346:	3304      	adds	r3, #4

08002348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800234a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800234c:	d3f9      	bcc.n	8002342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800234e:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002350:	4c0a      	ldr	r4, [pc, #40]	; (800237c <LoopForever+0x16>)
  movs r3, #0
 8002352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002354:	e001      	b.n	800235a <LoopFillZerobss>

08002356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002358:	3204      	adds	r2, #4

0800235a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800235a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800235c:	d3fb      	bcc.n	8002356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800235e:	f004 fcc3 	bl	8006ce8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002362:	f7fe fda3 	bl	8000eac <main>

08002366 <LoopForever>:

LoopForever:
    b LoopForever
 8002366:	e7fe      	b.n	8002366 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002368:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800236c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002370:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002374:	0800a36c 	.word	0x0800a36c
  ldr r2, =_sbss
 8002378:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800237c:	20000830 	.word	0x20000830

08002380 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002380:	e7fe      	b.n	8002380 <ADC1_2_IRQHandler>

08002382 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800238c:	2003      	movs	r0, #3
 800238e:	f000 f961 	bl	8002654 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002392:	200f      	movs	r0, #15
 8002394:	f000 f80e 	bl	80023b4 <HAL_InitTick>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	71fb      	strb	r3, [r7, #7]
 80023a2:	e001      	b.n	80023a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023a4:	f7ff f808 	bl	80013b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023a8:	79fb      	ldrb	r3, [r7, #7]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023c0:	4b17      	ldr	r3, [pc, #92]	; (8002420 <HAL_InitTick+0x6c>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d023      	beq.n	8002410 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023c8:	4b16      	ldr	r3, [pc, #88]	; (8002424 <HAL_InitTick+0x70>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4b14      	ldr	r3, [pc, #80]	; (8002420 <HAL_InitTick+0x6c>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	4619      	mov	r1, r3
 80023d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023da:	fbb2 f3f3 	udiv	r3, r2, r3
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 f96d 	bl	80026be <HAL_SYSTICK_Config>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10f      	bne.n	800240a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b0f      	cmp	r3, #15
 80023ee:	d809      	bhi.n	8002404 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f0:	2200      	movs	r2, #0
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295
 80023f8:	f000 f937 	bl	800266a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023fc:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <HAL_InitTick+0x74>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	e007      	b.n	8002414 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
 8002408:	e004      	b.n	8002414 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	73fb      	strb	r3, [r7, #15]
 800240e:	e001      	b.n	8002414 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002414:	7bfb      	ldrb	r3, [r7, #15]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000014 	.word	0x20000014
 8002424:	20000000 	.word	0x20000000
 8002428:	20000010 	.word	0x20000010

0800242c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_IncTick+0x20>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_IncTick+0x24>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4413      	add	r3, r2
 800243c:	4a04      	ldr	r2, [pc, #16]	; (8002450 <HAL_IncTick+0x24>)
 800243e:	6013      	str	r3, [r2, #0]
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	20000014 	.word	0x20000014
 8002450:	2000081c 	.word	0x2000081c

08002454 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return uwTick;
 8002458:	4b03      	ldr	r3, [pc, #12]	; (8002468 <HAL_GetTick+0x14>)
 800245a:	681b      	ldr	r3, [r3, #0]
}
 800245c:	4618      	mov	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	2000081c 	.word	0x2000081c

0800246c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002474:	f7ff ffee 	bl	8002454 <HAL_GetTick>
 8002478:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002484:	d005      	beq.n	8002492 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002486:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <HAL_Delay+0x44>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4413      	add	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002492:	bf00      	nop
 8002494:	f7ff ffde 	bl	8002454 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d8f7      	bhi.n	8002494 <HAL_Delay+0x28>
  {
  }
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000014 	.word	0x20000014

080024b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <__NVIC_SetPriorityGrouping+0x44>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024d0:	4013      	ands	r3, r2
 80024d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024e6:	4a04      	ldr	r2, [pc, #16]	; (80024f8 <__NVIC_SetPriorityGrouping+0x44>)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	60d3      	str	r3, [r2, #12]
}
 80024ec:	bf00      	nop
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002500:	4b04      	ldr	r3, [pc, #16]	; (8002514 <__NVIC_GetPriorityGrouping+0x18>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	0a1b      	lsrs	r3, r3, #8
 8002506:	f003 0307 	and.w	r3, r3, #7
}
 800250a:	4618      	mov	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	2b00      	cmp	r3, #0
 8002528:	db0b      	blt.n	8002542 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	f003 021f 	and.w	r2, r3, #31
 8002530:	4907      	ldr	r1, [pc, #28]	; (8002550 <__NVIC_EnableIRQ+0x38>)
 8002532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	2001      	movs	r0, #1
 800253a:	fa00 f202 	lsl.w	r2, r0, r2
 800253e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	e000e100 	.word	0xe000e100

08002554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	6039      	str	r1, [r7, #0]
 800255e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002564:	2b00      	cmp	r3, #0
 8002566:	db0a      	blt.n	800257e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	b2da      	uxtb	r2, r3
 800256c:	490c      	ldr	r1, [pc, #48]	; (80025a0 <__NVIC_SetPriority+0x4c>)
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	0112      	lsls	r2, r2, #4
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	440b      	add	r3, r1
 8002578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800257c:	e00a      	b.n	8002594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	b2da      	uxtb	r2, r3
 8002582:	4908      	ldr	r1, [pc, #32]	; (80025a4 <__NVIC_SetPriority+0x50>)
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	3b04      	subs	r3, #4
 800258c:	0112      	lsls	r2, r2, #4
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	440b      	add	r3, r1
 8002592:	761a      	strb	r2, [r3, #24]
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000e100 	.word	0xe000e100
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b089      	sub	sp, #36	; 0x24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f1c3 0307 	rsb	r3, r3, #7
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	bf28      	it	cs
 80025c6:	2304      	movcs	r3, #4
 80025c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3304      	adds	r3, #4
 80025ce:	2b06      	cmp	r3, #6
 80025d0:	d902      	bls.n	80025d8 <NVIC_EncodePriority+0x30>
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3b03      	subs	r3, #3
 80025d6:	e000      	b.n	80025da <NVIC_EncodePriority+0x32>
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025dc:	f04f 32ff 	mov.w	r2, #4294967295
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43da      	mvns	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	401a      	ands	r2, r3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025f0:	f04f 31ff 	mov.w	r1, #4294967295
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	fa01 f303 	lsl.w	r3, r1, r3
 80025fa:	43d9      	mvns	r1, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002600:	4313      	orrs	r3, r2
         );
}
 8002602:	4618      	mov	r0, r3
 8002604:	3724      	adds	r7, #36	; 0x24
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3b01      	subs	r3, #1
 800261c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002620:	d301      	bcc.n	8002626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002622:	2301      	movs	r3, #1
 8002624:	e00f      	b.n	8002646 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002626:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <SysTick_Config+0x40>)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3b01      	subs	r3, #1
 800262c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800262e:	210f      	movs	r1, #15
 8002630:	f04f 30ff 	mov.w	r0, #4294967295
 8002634:	f7ff ff8e 	bl	8002554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002638:	4b05      	ldr	r3, [pc, #20]	; (8002650 <SysTick_Config+0x40>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800263e:	4b04      	ldr	r3, [pc, #16]	; (8002650 <SysTick_Config+0x40>)
 8002640:	2207      	movs	r2, #7
 8002642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	e000e010 	.word	0xe000e010

08002654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff ff29 	bl	80024b4 <__NVIC_SetPriorityGrouping>
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b086      	sub	sp, #24
 800266e:	af00      	add	r7, sp, #0
 8002670:	4603      	mov	r3, r0
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800267c:	f7ff ff3e 	bl	80024fc <__NVIC_GetPriorityGrouping>
 8002680:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	68b9      	ldr	r1, [r7, #8]
 8002686:	6978      	ldr	r0, [r7, #20]
 8002688:	f7ff ff8e 	bl	80025a8 <NVIC_EncodePriority>
 800268c:	4602      	mov	r2, r0
 800268e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002692:	4611      	mov	r1, r2
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff ff5d 	bl	8002554 <__NVIC_SetPriority>
}
 800269a:	bf00      	nop
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	4603      	mov	r3, r0
 80026aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ff31 	bl	8002518 <__NVIC_EnableIRQ>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff ffa2 	bl	8002610 <SysTick_Config>
 80026cc:	4603      	mov	r3, r0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e098      	b.n	800281c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	461a      	mov	r2, r3
 80026f0:	4b4d      	ldr	r3, [pc, #308]	; (8002828 <HAL_DMA_Init+0x150>)
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d80f      	bhi.n	8002716 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	4b4b      	ldr	r3, [pc, #300]	; (800282c <HAL_DMA_Init+0x154>)
 80026fe:	4413      	add	r3, r2
 8002700:	4a4b      	ldr	r2, [pc, #300]	; (8002830 <HAL_DMA_Init+0x158>)
 8002702:	fba2 2303 	umull	r2, r3, r2, r3
 8002706:	091b      	lsrs	r3, r3, #4
 8002708:	009a      	lsls	r2, r3, #2
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a48      	ldr	r2, [pc, #288]	; (8002834 <HAL_DMA_Init+0x15c>)
 8002712:	641a      	str	r2, [r3, #64]	; 0x40
 8002714:	e00e      	b.n	8002734 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	4b46      	ldr	r3, [pc, #280]	; (8002838 <HAL_DMA_Init+0x160>)
 800271e:	4413      	add	r3, r2
 8002720:	4a43      	ldr	r2, [pc, #268]	; (8002830 <HAL_DMA_Init+0x158>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	009a      	lsls	r2, r3, #2
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a42      	ldr	r2, [pc, #264]	; (800283c <HAL_DMA_Init+0x164>)
 8002732:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800274a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002758:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002764:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002770:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	4313      	orrs	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800278e:	d039      	beq.n	8002804 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	4a27      	ldr	r2, [pc, #156]	; (8002834 <HAL_DMA_Init+0x15c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d11a      	bne.n	80027d0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800279a:	4b29      	ldr	r3, [pc, #164]	; (8002840 <HAL_DMA_Init+0x168>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	f003 031c 	and.w	r3, r3, #28
 80027a6:	210f      	movs	r1, #15
 80027a8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	4924      	ldr	r1, [pc, #144]	; (8002840 <HAL_DMA_Init+0x168>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80027b4:	4b22      	ldr	r3, [pc, #136]	; (8002840 <HAL_DMA_Init+0x168>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6859      	ldr	r1, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	f003 031c 	and.w	r3, r3, #28
 80027c4:	fa01 f303 	lsl.w	r3, r1, r3
 80027c8:	491d      	ldr	r1, [pc, #116]	; (8002840 <HAL_DMA_Init+0x168>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	600b      	str	r3, [r1, #0]
 80027ce:	e019      	b.n	8002804 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80027d0:	4b1c      	ldr	r3, [pc, #112]	; (8002844 <HAL_DMA_Init+0x16c>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d8:	f003 031c 	and.w	r3, r3, #28
 80027dc:	210f      	movs	r1, #15
 80027de:	fa01 f303 	lsl.w	r3, r1, r3
 80027e2:	43db      	mvns	r3, r3
 80027e4:	4917      	ldr	r1, [pc, #92]	; (8002844 <HAL_DMA_Init+0x16c>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80027ea:	4b16      	ldr	r3, [pc, #88]	; (8002844 <HAL_DMA_Init+0x16c>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6859      	ldr	r1, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	f003 031c 	and.w	r3, r3, #28
 80027fa:	fa01 f303 	lsl.w	r3, r1, r3
 80027fe:	4911      	ldr	r1, [pc, #68]	; (8002844 <HAL_DMA_Init+0x16c>)
 8002800:	4313      	orrs	r3, r2
 8002802:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	40020407 	.word	0x40020407
 800282c:	bffdfff8 	.word	0xbffdfff8
 8002830:	cccccccd 	.word	0xcccccccd
 8002834:	40020000 	.word	0x40020000
 8002838:	bffdfbf8 	.word	0xbffdfbf8
 800283c:	40020400 	.word	0x40020400
 8002840:	400200a8 	.word	0x400200a8
 8002844:	400204a8 	.word	0x400204a8

08002848 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d008      	beq.n	8002872 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2204      	movs	r2, #4
 8002864:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e022      	b.n	80028b8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 020e 	bic.w	r2, r2, #14
 8002880:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0201 	bic.w	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	f003 021c 	and.w	r2, r3, #28
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	2101      	movs	r1, #1
 80028a0:	fa01 f202 	lsl.w	r2, r1, r2
 80028a4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d005      	beq.n	80028e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2204      	movs	r2, #4
 80028e0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	73fb      	strb	r3, [r7, #15]
 80028e6:	e029      	b.n	800293c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 020e 	bic.w	r2, r2, #14
 80028f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0201 	bic.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	f003 021c 	and.w	r2, r3, #28
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	2101      	movs	r1, #1
 8002916:	fa01 f202 	lsl.w	r2, r1, r2
 800291a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	4798      	blx	r3
    }
  }
  return status;
 800293c:	7bfb      	ldrb	r3, [r7, #15]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b084      	sub	sp, #16
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	f003 031c 	and.w	r3, r3, #28
 8002966:	2204      	movs	r2, #4
 8002968:	409a      	lsls	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d026      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x7a>
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d021      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	2b00      	cmp	r3, #0
 8002988:	d107      	bne.n	800299a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0204 	bic.w	r2, r2, #4
 8002998:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	f003 021c 	and.w	r2, r3, #28
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	2104      	movs	r1, #4
 80029a8:	fa01 f202 	lsl.w	r2, r1, r2
 80029ac:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d071      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80029be:	e06c      	b.n	8002a9a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c4:	f003 031c 	and.w	r3, r3, #28
 80029c8:	2202      	movs	r2, #2
 80029ca:	409a      	lsls	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d02e      	beq.n	8002a32 <HAL_DMA_IRQHandler+0xec>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d029      	beq.n	8002a32 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0320 	and.w	r3, r3, #32
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10b      	bne.n	8002a04 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 020a 	bic.w	r2, r2, #10
 80029fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a08:	f003 021c 	and.w	r2, r3, #28
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	2102      	movs	r1, #2
 8002a12:	fa01 f202 	lsl.w	r2, r1, r2
 8002a16:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d038      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a30:	e033      	b.n	8002a9a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	f003 031c 	and.w	r3, r3, #28
 8002a3a:	2208      	movs	r2, #8
 8002a3c:	409a      	lsls	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d02a      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x156>
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d025      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 020e 	bic.w	r2, r2, #14
 8002a5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a64:	f003 021c 	and.w	r2, r3, #28
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a72:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d004      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a9a:	bf00      	nop
 8002a9c:	bf00      	nop
}
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ab2:	e17f      	b.n	8002db4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	2101      	movs	r1, #1
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 8171 	beq.w	8002dae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 0303 	and.w	r3, r3, #3
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d005      	beq.n	8002ae4 <HAL_GPIO_Init+0x40>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d130      	bne.n	8002b46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	2203      	movs	r2, #3
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4013      	ands	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4013      	ands	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	091b      	lsrs	r3, r3, #4
 8002b30:	f003 0201 	and.w	r2, r3, #1
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d118      	bne.n	8002b84 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b58:	2201      	movs	r2, #1
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4013      	ands	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	08db      	lsrs	r3, r3, #3
 8002b6e:	f003 0201 	and.w	r2, r3, #1
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d017      	beq.n	8002bc0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d123      	bne.n	8002c14 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	08da      	lsrs	r2, r3, #3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3208      	adds	r2, #8
 8002bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	220f      	movs	r2, #15
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	08da      	lsrs	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3208      	adds	r2, #8
 8002c0e:	6939      	ldr	r1, [r7, #16]
 8002c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	2203      	movs	r2, #3
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0203 	and.w	r2, r3, #3
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80ac 	beq.w	8002dae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c56:	4b5f      	ldr	r3, [pc, #380]	; (8002dd4 <HAL_GPIO_Init+0x330>)
 8002c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c5a:	4a5e      	ldr	r2, [pc, #376]	; (8002dd4 <HAL_GPIO_Init+0x330>)
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	6613      	str	r3, [r2, #96]	; 0x60
 8002c62:	4b5c      	ldr	r3, [pc, #368]	; (8002dd4 <HAL_GPIO_Init+0x330>)
 8002c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c6e:	4a5a      	ldr	r2, [pc, #360]	; (8002dd8 <HAL_GPIO_Init+0x334>)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	089b      	lsrs	r3, r3, #2
 8002c74:	3302      	adds	r3, #2
 8002c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	220f      	movs	r2, #15
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c98:	d025      	beq.n	8002ce6 <HAL_GPIO_Init+0x242>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a4f      	ldr	r2, [pc, #316]	; (8002ddc <HAL_GPIO_Init+0x338>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d01f      	beq.n	8002ce2 <HAL_GPIO_Init+0x23e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a4e      	ldr	r2, [pc, #312]	; (8002de0 <HAL_GPIO_Init+0x33c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d019      	beq.n	8002cde <HAL_GPIO_Init+0x23a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a4d      	ldr	r2, [pc, #308]	; (8002de4 <HAL_GPIO_Init+0x340>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d013      	beq.n	8002cda <HAL_GPIO_Init+0x236>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a4c      	ldr	r2, [pc, #304]	; (8002de8 <HAL_GPIO_Init+0x344>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00d      	beq.n	8002cd6 <HAL_GPIO_Init+0x232>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a4b      	ldr	r2, [pc, #300]	; (8002dec <HAL_GPIO_Init+0x348>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d007      	beq.n	8002cd2 <HAL_GPIO_Init+0x22e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a4a      	ldr	r2, [pc, #296]	; (8002df0 <HAL_GPIO_Init+0x34c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d101      	bne.n	8002cce <HAL_GPIO_Init+0x22a>
 8002cca:	2306      	movs	r3, #6
 8002ccc:	e00c      	b.n	8002ce8 <HAL_GPIO_Init+0x244>
 8002cce:	2307      	movs	r3, #7
 8002cd0:	e00a      	b.n	8002ce8 <HAL_GPIO_Init+0x244>
 8002cd2:	2305      	movs	r3, #5
 8002cd4:	e008      	b.n	8002ce8 <HAL_GPIO_Init+0x244>
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	e006      	b.n	8002ce8 <HAL_GPIO_Init+0x244>
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e004      	b.n	8002ce8 <HAL_GPIO_Init+0x244>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e002      	b.n	8002ce8 <HAL_GPIO_Init+0x244>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <HAL_GPIO_Init+0x244>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	f002 0203 	and.w	r2, r2, #3
 8002cee:	0092      	lsls	r2, r2, #2
 8002cf0:	4093      	lsls	r3, r2
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cf8:	4937      	ldr	r1, [pc, #220]	; (8002dd8 <HAL_GPIO_Init+0x334>)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	089b      	lsrs	r3, r3, #2
 8002cfe:	3302      	adds	r3, #2
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d06:	4b3b      	ldr	r3, [pc, #236]	; (8002df4 <HAL_GPIO_Init+0x350>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4013      	ands	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d2a:	4a32      	ldr	r2, [pc, #200]	; (8002df4 <HAL_GPIO_Init+0x350>)
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d30:	4b30      	ldr	r3, [pc, #192]	; (8002df4 <HAL_GPIO_Init+0x350>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d54:	4a27      	ldr	r2, [pc, #156]	; (8002df4 <HAL_GPIO_Init+0x350>)
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d5a:	4b26      	ldr	r3, [pc, #152]	; (8002df4 <HAL_GPIO_Init+0x350>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4013      	ands	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d7e:	4a1d      	ldr	r2, [pc, #116]	; (8002df4 <HAL_GPIO_Init+0x350>)
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d84:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <HAL_GPIO_Init+0x350>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4013      	ands	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002da8:	4a12      	ldr	r2, [pc, #72]	; (8002df4 <HAL_GPIO_Init+0x350>)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	3301      	adds	r3, #1
 8002db2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	fa22 f303 	lsr.w	r3, r2, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f47f ae78 	bne.w	8002ab4 <HAL_GPIO_Init+0x10>
  }
}
 8002dc4:	bf00      	nop
 8002dc6:	bf00      	nop
 8002dc8:	371c      	adds	r7, #28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40010000 	.word	0x40010000
 8002ddc:	48000400 	.word	0x48000400
 8002de0:	48000800 	.word	0x48000800
 8002de4:	48000c00 	.word	0x48000c00
 8002de8:	48001000 	.word	0x48001000
 8002dec:	48001400 	.word	0x48001400
 8002df0:	48001800 	.word	0x48001800
 8002df4:	40010400 	.word	0x40010400

08002df8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	887b      	ldrh	r3, [r7, #2]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e10:	2301      	movs	r3, #1
 8002e12:	73fb      	strb	r3, [r7, #15]
 8002e14:	e001      	b.n	8002e1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e16:	2300      	movs	r3, #0
 8002e18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	807b      	strh	r3, [r7, #2]
 8002e34:	4613      	mov	r3, r2
 8002e36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e38:	787b      	ldrb	r3, [r7, #1]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e3e:	887a      	ldrh	r2, [r7, #2]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e44:	e002      	b.n	8002e4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e46:	887a      	ldrh	r2, [r7, #2]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e6a:	887a      	ldrh	r2, [r7, #2]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	041a      	lsls	r2, r3, #16
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	43d9      	mvns	r1, r3
 8002e76:	887b      	ldrh	r3, [r7, #2]
 8002e78:	400b      	ands	r3, r1
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	619a      	str	r2, [r3, #24]
}
 8002e80:	bf00      	nop
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e081      	b.n	8002fa2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fe faaa 	bl	800140c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2224      	movs	r2, #36	; 0x24
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002edc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d107      	bne.n	8002f06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	e006      	b.n	8002f14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d104      	bne.n	8002f26 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69d9      	ldr	r1, [r3, #28]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1a      	ldr	r2, [r3, #32]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af02      	add	r7, sp, #8
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	460b      	mov	r3, r1
 8002fba:	817b      	strh	r3, [r7, #10]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	f040 80da 	bne.w	8003182 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_I2C_Master_Transmit+0x30>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e0d3      	b.n	8003184 <HAL_I2C_Master_Transmit+0x1d8>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fe4:	f7ff fa36 	bl	8002454 <HAL_GetTick>
 8002fe8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	2319      	movs	r3, #25
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 fb4e 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e0be      	b.n	8003184 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2221      	movs	r2, #33	; 0x21
 800300a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2210      	movs	r2, #16
 8003012:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	893a      	ldrh	r2, [r7, #8]
 8003026:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003032:	b29b      	uxth	r3, r3
 8003034:	2bff      	cmp	r3, #255	; 0xff
 8003036:	d90e      	bls.n	8003056 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	22ff      	movs	r2, #255	; 0xff
 800303c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003042:	b2da      	uxtb	r2, r3
 8003044:	8979      	ldrh	r1, [r7, #10]
 8003046:	4b51      	ldr	r3, [pc, #324]	; (800318c <HAL_I2C_Master_Transmit+0x1e0>)
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 fd44 	bl	8003adc <I2C_TransferConfig>
 8003054:	e06c      	b.n	8003130 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003064:	b2da      	uxtb	r2, r3
 8003066:	8979      	ldrh	r1, [r7, #10]
 8003068:	4b48      	ldr	r3, [pc, #288]	; (800318c <HAL_I2C_Master_Transmit+0x1e0>)
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 fd33 	bl	8003adc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003076:	e05b      	b.n	8003130 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	6a39      	ldr	r1, [r7, #32]
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 fb4b 	bl	8003718 <I2C_WaitOnTXISFlagUntilTimeout>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e07b      	b.n	8003184 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	781a      	ldrb	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	1c5a      	adds	r2, r3, #1
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d034      	beq.n	8003130 <HAL_I2C_Master_Transmit+0x184>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d130      	bne.n	8003130 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	2200      	movs	r2, #0
 80030d6:	2180      	movs	r1, #128	; 0x80
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 fadd 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e04d      	b.n	8003184 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2bff      	cmp	r3, #255	; 0xff
 80030f0:	d90e      	bls.n	8003110 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	22ff      	movs	r2, #255	; 0xff
 80030f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	8979      	ldrh	r1, [r7, #10]
 8003100:	2300      	movs	r3, #0
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 fce7 	bl	8003adc <I2C_TransferConfig>
 800310e:	e00f      	b.n	8003130 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311e:	b2da      	uxtb	r2, r3
 8003120:	8979      	ldrh	r1, [r7, #10]
 8003122:	2300      	movs	r3, #0
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 fcd6 	bl	8003adc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003134:	b29b      	uxth	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d19e      	bne.n	8003078 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	6a39      	ldr	r1, [r7, #32]
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 fb2a 	bl	8003798 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e01a      	b.n	8003184 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2220      	movs	r2, #32
 8003154:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <HAL_I2C_Master_Transmit+0x1e4>)
 8003162:	400b      	ands	r3, r1
 8003164:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	e000      	b.n	8003184 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003182:	2302      	movs	r3, #2
  }
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	80002000 	.word	0x80002000
 8003190:	fe00e800 	.word	0xfe00e800

08003194 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af02      	add	r7, sp, #8
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	607a      	str	r2, [r7, #4]
 800319e:	461a      	mov	r2, r3
 80031a0:	460b      	mov	r3, r1
 80031a2:	817b      	strh	r3, [r7, #10]
 80031a4:	4613      	mov	r3, r2
 80031a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b20      	cmp	r3, #32
 80031b2:	f040 80db 	bne.w	800336c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_I2C_Master_Receive+0x30>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e0d4      	b.n	800336e <HAL_I2C_Master_Receive+0x1da>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031cc:	f7ff f942 	bl	8002454 <HAL_GetTick>
 80031d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	2319      	movs	r3, #25
 80031d8:	2201      	movs	r2, #1
 80031da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 fa5a 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e0bf      	b.n	800336e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2222      	movs	r2, #34	; 0x22
 80031f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2210      	movs	r2, #16
 80031fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	893a      	ldrh	r2, [r7, #8]
 800320e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321a:	b29b      	uxth	r3, r3
 800321c:	2bff      	cmp	r3, #255	; 0xff
 800321e:	d90e      	bls.n	800323e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	22ff      	movs	r2, #255	; 0xff
 8003224:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322a:	b2da      	uxtb	r2, r3
 800322c:	8979      	ldrh	r1, [r7, #10]
 800322e:	4b52      	ldr	r3, [pc, #328]	; (8003378 <HAL_I2C_Master_Receive+0x1e4>)
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 fc50 	bl	8003adc <I2C_TransferConfig>
 800323c:	e06d      	b.n	800331a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324c:	b2da      	uxtb	r2, r3
 800324e:	8979      	ldrh	r1, [r7, #10]
 8003250:	4b49      	ldr	r3, [pc, #292]	; (8003378 <HAL_I2C_Master_Receive+0x1e4>)
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fc3f 	bl	8003adc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800325e:	e05c      	b.n	800331a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	6a39      	ldr	r1, [r7, #32]
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 fad3 	bl	8003810 <I2C_WaitOnRXNEFlagUntilTimeout>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e07c      	b.n	800336e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d034      	beq.n	800331a <HAL_I2C_Master_Receive+0x186>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d130      	bne.n	800331a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	2200      	movs	r2, #0
 80032c0:	2180      	movs	r1, #128	; 0x80
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f9e8 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e04d      	b.n	800336e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2bff      	cmp	r3, #255	; 0xff
 80032da:	d90e      	bls.n	80032fa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	22ff      	movs	r2, #255	; 0xff
 80032e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	8979      	ldrh	r1, [r7, #10]
 80032ea:	2300      	movs	r3, #0
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 fbf2 	bl	8003adc <I2C_TransferConfig>
 80032f8:	e00f      	b.n	800331a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003308:	b2da      	uxtb	r2, r3
 800330a:	8979      	ldrh	r1, [r7, #10]
 800330c:	2300      	movs	r3, #0
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 fbe1 	bl	8003adc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d19d      	bne.n	8003260 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	6a39      	ldr	r1, [r7, #32]
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 fa35 	bl	8003798 <I2C_WaitOnSTOPFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e01a      	b.n	800336e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2220      	movs	r2, #32
 800333e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6859      	ldr	r1, [r3, #4]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	4b0c      	ldr	r3, [pc, #48]	; (800337c <HAL_I2C_Master_Receive+0x1e8>)
 800334c:	400b      	ands	r3, r1
 800334e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2220      	movs	r2, #32
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003368:	2300      	movs	r3, #0
 800336a:	e000      	b.n	800336e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800336c:	2302      	movs	r3, #2
  }
}
 800336e:	4618      	mov	r0, r3
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	80002400 	.word	0x80002400
 800337c:	fe00e800 	.word	0xfe00e800

08003380 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af02      	add	r7, sp, #8
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	4608      	mov	r0, r1
 800338a:	4611      	mov	r1, r2
 800338c:	461a      	mov	r2, r3
 800338e:	4603      	mov	r3, r0
 8003390:	817b      	strh	r3, [r7, #10]
 8003392:	460b      	mov	r3, r1
 8003394:	813b      	strh	r3, [r7, #8]
 8003396:	4613      	mov	r3, r2
 8003398:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	f040 80f9 	bne.w	800359a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <HAL_I2C_Mem_Write+0x34>
 80033ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d105      	bne.n	80033c0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0ed      	b.n	800359c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_I2C_Mem_Write+0x4e>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e0e6      	b.n	800359c <HAL_I2C_Mem_Write+0x21c>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033d6:	f7ff f83d 	bl	8002454 <HAL_GetTick>
 80033da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	2319      	movs	r3, #25
 80033e2:	2201      	movs	r2, #1
 80033e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 f955 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0d1      	b.n	800359c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2221      	movs	r2, #33	; 0x21
 80033fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2240      	movs	r2, #64	; 0x40
 8003404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a3a      	ldr	r2, [r7, #32]
 8003412:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003418:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003420:	88f8      	ldrh	r0, [r7, #6]
 8003422:	893a      	ldrh	r2, [r7, #8]
 8003424:	8979      	ldrh	r1, [r7, #10]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	9301      	str	r3, [sp, #4]
 800342a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	4603      	mov	r3, r0
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 f8b9 	bl	80035a8 <I2C_RequestMemoryWrite>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0a9      	b.n	800359c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344c:	b29b      	uxth	r3, r3
 800344e:	2bff      	cmp	r3, #255	; 0xff
 8003450:	d90e      	bls.n	8003470 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	22ff      	movs	r2, #255	; 0xff
 8003456:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345c:	b2da      	uxtb	r2, r3
 800345e:	8979      	ldrh	r1, [r7, #10]
 8003460:	2300      	movs	r3, #0
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 fb37 	bl	8003adc <I2C_TransferConfig>
 800346e:	e00f      	b.n	8003490 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347e:	b2da      	uxtb	r2, r3
 8003480:	8979      	ldrh	r1, [r7, #10]
 8003482:	2300      	movs	r3, #0
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 fb26 	bl	8003adc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 f93f 	bl	8003718 <I2C_WaitOnTXISFlagUntilTimeout>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e07b      	b.n	800359c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	781a      	ldrb	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d034      	beq.n	8003548 <HAL_I2C_Mem_Write+0x1c8>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d130      	bne.n	8003548 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ec:	2200      	movs	r2, #0
 80034ee:	2180      	movs	r1, #128	; 0x80
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 f8d1 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e04d      	b.n	800359c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003504:	b29b      	uxth	r3, r3
 8003506:	2bff      	cmp	r3, #255	; 0xff
 8003508:	d90e      	bls.n	8003528 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	22ff      	movs	r2, #255	; 0xff
 800350e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003514:	b2da      	uxtb	r2, r3
 8003516:	8979      	ldrh	r1, [r7, #10]
 8003518:	2300      	movs	r3, #0
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 fadb 	bl	8003adc <I2C_TransferConfig>
 8003526:	e00f      	b.n	8003548 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003536:	b2da      	uxtb	r2, r3
 8003538:	8979      	ldrh	r1, [r7, #10]
 800353a:	2300      	movs	r3, #0
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 faca 	bl	8003adc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d19e      	bne.n	8003490 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f91e 	bl	8003798 <I2C_WaitOnSTOPFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e01a      	b.n	800359c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2220      	movs	r2, #32
 800356c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6859      	ldr	r1, [r3, #4]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <HAL_I2C_Mem_Write+0x224>)
 800357a:	400b      	ands	r3, r1
 800357c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2220      	movs	r2, #32
 8003582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	e000      	b.n	800359c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800359a:	2302      	movs	r3, #2
  }
}
 800359c:	4618      	mov	r0, r3
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	fe00e800 	.word	0xfe00e800

080035a8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	4608      	mov	r0, r1
 80035b2:	4611      	mov	r1, r2
 80035b4:	461a      	mov	r2, r3
 80035b6:	4603      	mov	r3, r0
 80035b8:	817b      	strh	r3, [r7, #10]
 80035ba:	460b      	mov	r3, r1
 80035bc:	813b      	strh	r3, [r7, #8]
 80035be:	4613      	mov	r3, r2
 80035c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	8979      	ldrh	r1, [r7, #10]
 80035c8:	4b20      	ldr	r3, [pc, #128]	; (800364c <I2C_RequestMemoryWrite+0xa4>)
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 fa83 	bl	8003adc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035d6:	69fa      	ldr	r2, [r7, #28]
 80035d8:	69b9      	ldr	r1, [r7, #24]
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 f89c 	bl	8003718 <I2C_WaitOnTXISFlagUntilTimeout>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e02c      	b.n	8003644 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035ea:	88fb      	ldrh	r3, [r7, #6]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d105      	bne.n	80035fc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035f0:	893b      	ldrh	r3, [r7, #8]
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	629a      	str	r2, [r3, #40]	; 0x28
 80035fa:	e015      	b.n	8003628 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80035fc:	893b      	ldrh	r3, [r7, #8]
 80035fe:	0a1b      	lsrs	r3, r3, #8
 8003600:	b29b      	uxth	r3, r3
 8003602:	b2da      	uxtb	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800360a:	69fa      	ldr	r2, [r7, #28]
 800360c:	69b9      	ldr	r1, [r7, #24]
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 f882 	bl	8003718 <I2C_WaitOnTXISFlagUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e012      	b.n	8003644 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800361e:	893b      	ldrh	r3, [r7, #8]
 8003620:	b2da      	uxtb	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2200      	movs	r2, #0
 8003630:	2180      	movs	r1, #128	; 0x80
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f830 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	80002000 	.word	0x80002000

08003650 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b02      	cmp	r3, #2
 8003664:	d103      	bne.n	800366e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2200      	movs	r2, #0
 800366c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b01      	cmp	r3, #1
 800367a:	d007      	beq.n	800368c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	619a      	str	r2, [r3, #24]
  }
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	4613      	mov	r3, r2
 80036a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036a8:	e022      	b.n	80036f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d01e      	beq.n	80036f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b2:	f7fe fecf 	bl	8002454 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d302      	bcc.n	80036c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d113      	bne.n	80036f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036cc:	f043 0220 	orr.w	r2, r3, #32
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e00f      	b.n	8003710 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699a      	ldr	r2, [r3, #24]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	4013      	ands	r3, r2
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	bf0c      	ite	eq
 8003700:	2301      	moveq	r3, #1
 8003702:	2300      	movne	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	461a      	mov	r2, r3
 8003708:	79fb      	ldrb	r3, [r7, #7]
 800370a:	429a      	cmp	r2, r3
 800370c:	d0cd      	beq.n	80036aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003724:	e02c      	b.n	8003780 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f8ea 	bl	8003904 <I2C_IsErrorOccurred>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e02a      	b.n	8003790 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003740:	d01e      	beq.n	8003780 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003742:	f7fe fe87 	bl	8002454 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	429a      	cmp	r2, r3
 8003750:	d302      	bcc.n	8003758 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d113      	bne.n	8003780 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375c:	f043 0220 	orr.w	r2, r3, #32
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e007      	b.n	8003790 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b02      	cmp	r3, #2
 800378c:	d1cb      	bne.n	8003726 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037a4:	e028      	b.n	80037f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	68b9      	ldr	r1, [r7, #8]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 f8aa 	bl	8003904 <I2C_IsErrorOccurred>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e026      	b.n	8003808 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ba:	f7fe fe4b 	bl	8002454 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d302      	bcc.n	80037d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d113      	bne.n	80037f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d4:	f043 0220 	orr.w	r2, r3, #32
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e007      	b.n	8003808 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b20      	cmp	r3, #32
 8003804:	d1cf      	bne.n	80037a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800381c:	e064      	b.n	80038e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	68b9      	ldr	r1, [r7, #8]
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f86e 	bl	8003904 <I2C_IsErrorOccurred>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e062      	b.n	80038f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b20      	cmp	r3, #32
 800383e:	d138      	bne.n	80038b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b04      	cmp	r3, #4
 800384c:	d105      	bne.n	800385a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	e04e      	b.n	80038f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	f003 0310 	and.w	r3, r3, #16
 8003864:	2b10      	cmp	r3, #16
 8003866:	d107      	bne.n	8003878 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2210      	movs	r2, #16
 800386e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2204      	movs	r2, #4
 8003874:	645a      	str	r2, [r3, #68]	; 0x44
 8003876:	e002      	b.n	800387e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2220      	movs	r2, #32
 8003884:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6859      	ldr	r1, [r3, #4]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	4b1b      	ldr	r3, [pc, #108]	; (8003900 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003892:	400b      	ands	r3, r1
 8003894:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2220      	movs	r2, #32
 800389a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e022      	b.n	80038f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b2:	f7fe fdcf 	bl	8002454 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d302      	bcc.n	80038c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10f      	bne.n	80038e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038cc:	f043 0220 	orr.w	r2, r3, #32
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e007      	b.n	80038f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d193      	bne.n	800381e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	fe00e800 	.word	0xfe00e800

08003904 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	; 0x28
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800391e:	2300      	movs	r3, #0
 8003920:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b00      	cmp	r3, #0
 800392e:	d075      	beq.n	8003a1c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2210      	movs	r2, #16
 8003936:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003938:	e056      	b.n	80039e8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003940:	d052      	beq.n	80039e8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003942:	f7fe fd87 	bl	8002454 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	429a      	cmp	r2, r3
 8003950:	d302      	bcc.n	8003958 <I2C_IsErrorOccurred+0x54>
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d147      	bne.n	80039e8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003962:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800396a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800397a:	d12e      	bne.n	80039da <I2C_IsErrorOccurred+0xd6>
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003982:	d02a      	beq.n	80039da <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003984:	7cfb      	ldrb	r3, [r7, #19]
 8003986:	2b20      	cmp	r3, #32
 8003988:	d027      	beq.n	80039da <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003998:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800399a:	f7fe fd5b 	bl	8002454 <HAL_GetTick>
 800399e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039a0:	e01b      	b.n	80039da <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80039a2:	f7fe fd57 	bl	8002454 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b19      	cmp	r3, #25
 80039ae:	d914      	bls.n	80039da <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b4:	f043 0220 	orr.w	r2, r3, #32
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	f003 0320 	and.w	r3, r3, #32
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	d1dc      	bne.n	80039a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	d003      	beq.n	80039fe <I2C_IsErrorOccurred+0xfa>
 80039f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d09d      	beq.n	800393a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80039fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d103      	bne.n	8003a0e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	f043 0304 	orr.w	r3, r3, #4
 8003a14:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00b      	beq.n	8003a46 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00b      	beq.n	8003a68 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	f043 0308 	orr.w	r3, r3, #8
 8003a56:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00b      	beq.n	8003a8a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	f043 0302 	orr.w	r3, r3, #2
 8003a78:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003a8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01c      	beq.n	8003acc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f7ff fddc 	bl	8003650 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6859      	ldr	r1, [r3, #4]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	4b0d      	ldr	r3, [pc, #52]	; (8003ad8 <I2C_IsErrorOccurred+0x1d4>)
 8003aa4:	400b      	ands	r3, r1
 8003aa6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003acc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3728      	adds	r7, #40	; 0x28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	fe00e800 	.word	0xfe00e800

08003adc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	607b      	str	r3, [r7, #4]
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	817b      	strh	r3, [r7, #10]
 8003aea:	4613      	mov	r3, r2
 8003aec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003aee:	897b      	ldrh	r3, [r7, #10]
 8003af0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003af4:	7a7b      	ldrb	r3, [r7, #9]
 8003af6:	041b      	lsls	r3, r3, #16
 8003af8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003afc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b0a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	0d5b      	lsrs	r3, r3, #21
 8003b16:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003b1a:	4b08      	ldr	r3, [pc, #32]	; (8003b3c <I2C_TransferConfig+0x60>)
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	ea02 0103 	and.w	r1, r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b2e:	bf00      	nop
 8003b30:	371c      	adds	r7, #28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	03ff63ff 	.word	0x03ff63ff

08003b40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d138      	bne.n	8003bc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e032      	b.n	8003bca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2224      	movs	r2, #36	; 0x24
 8003b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0201 	bic.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6819      	ldr	r1, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0201 	orr.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	e000      	b.n	8003bca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bc8:	2302      	movs	r3, #2
  }
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b085      	sub	sp, #20
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b20      	cmp	r3, #32
 8003bea:	d139      	bne.n	8003c60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d101      	bne.n	8003bfa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	e033      	b.n	8003c62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2224      	movs	r2, #36	; 0x24
 8003c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0201 	bic.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	021b      	lsls	r3, r3, #8
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0201 	orr.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	e000      	b.n	8003c62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c60:	2302      	movs	r3, #2
  }
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
	...

08003c70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c74:	4b04      	ldr	r3, [pc, #16]	; (8003c88 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40007000 	.word	0x40007000

08003c8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c9a:	d130      	bne.n	8003cfe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c9c:	4b23      	ldr	r3, [pc, #140]	; (8003d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ca8:	d038      	beq.n	8003d1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003caa:	4b20      	ldr	r3, [pc, #128]	; (8003d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cb2:	4a1e      	ldr	r2, [pc, #120]	; (8003d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cba:	4b1d      	ldr	r3, [pc, #116]	; (8003d30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2232      	movs	r2, #50	; 0x32
 8003cc0:	fb02 f303 	mul.w	r3, r2, r3
 8003cc4:	4a1b      	ldr	r2, [pc, #108]	; (8003d34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	0c9b      	lsrs	r3, r3, #18
 8003ccc:	3301      	adds	r3, #1
 8003cce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cd0:	e002      	b.n	8003cd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cd8:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce4:	d102      	bne.n	8003cec <HAL_PWREx_ControlVoltageScaling+0x60>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1f2      	bne.n	8003cd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cec:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf8:	d110      	bne.n	8003d1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e00f      	b.n	8003d1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cfe:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0a:	d007      	beq.n	8003d1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d0c:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d14:	4a05      	ldr	r2, [pc, #20]	; (8003d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40007000 	.word	0x40007000
 8003d30:	20000000 	.word	0x20000000
 8003d34:	431bde83 	.word	0x431bde83

08003d38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e3ca      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d4a:	4b97      	ldr	r3, [pc, #604]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 030c 	and.w	r3, r3, #12
 8003d52:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d54:	4b94      	ldr	r3, [pc, #592]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 80e4 	beq.w	8003f34 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d007      	beq.n	8003d82 <HAL_RCC_OscConfig+0x4a>
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	2b0c      	cmp	r3, #12
 8003d76:	f040 808b 	bne.w	8003e90 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	f040 8087 	bne.w	8003e90 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d82:	4b89      	ldr	r3, [pc, #548]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d005      	beq.n	8003d9a <HAL_RCC_OscConfig+0x62>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e3a2      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1a      	ldr	r2, [r3, #32]
 8003d9e:	4b82      	ldr	r3, [pc, #520]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d004      	beq.n	8003db4 <HAL_RCC_OscConfig+0x7c>
 8003daa:	4b7f      	ldr	r3, [pc, #508]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003db2:	e005      	b.n	8003dc0 <HAL_RCC_OscConfig+0x88>
 8003db4:	4b7c      	ldr	r3, [pc, #496]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dba:	091b      	lsrs	r3, r3, #4
 8003dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d223      	bcs.n	8003e0c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fd55 	bl	8004878 <RCC_SetFlashLatencyFromMSIRange>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e383      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dd8:	4b73      	ldr	r3, [pc, #460]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a72      	ldr	r2, [pc, #456]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003dde:	f043 0308 	orr.w	r3, r3, #8
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	4b70      	ldr	r3, [pc, #448]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	496d      	ldr	r1, [pc, #436]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003df6:	4b6c      	ldr	r3, [pc, #432]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	021b      	lsls	r3, r3, #8
 8003e04:	4968      	ldr	r1, [pc, #416]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	604b      	str	r3, [r1, #4]
 8003e0a:	e025      	b.n	8003e58 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e0c:	4b66      	ldr	r3, [pc, #408]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a65      	ldr	r2, [pc, #404]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003e12:	f043 0308 	orr.w	r3, r3, #8
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	4b63      	ldr	r3, [pc, #396]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	4960      	ldr	r1, [pc, #384]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e2a:	4b5f      	ldr	r3, [pc, #380]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	021b      	lsls	r3, r3, #8
 8003e38:	495b      	ldr	r1, [pc, #364]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d109      	bne.n	8003e58 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fd15 	bl	8004878 <RCC_SetFlashLatencyFromMSIRange>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e343      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e58:	f000 fc4a 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	4b52      	ldr	r3, [pc, #328]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	091b      	lsrs	r3, r3, #4
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	4950      	ldr	r1, [pc, #320]	; (8003fac <HAL_RCC_OscConfig+0x274>)
 8003e6a:	5ccb      	ldrb	r3, [r1, r3]
 8003e6c:	f003 031f 	and.w	r3, r3, #31
 8003e70:	fa22 f303 	lsr.w	r3, r2, r3
 8003e74:	4a4e      	ldr	r2, [pc, #312]	; (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003e76:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e78:	4b4e      	ldr	r3, [pc, #312]	; (8003fb4 <HAL_RCC_OscConfig+0x27c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fe fa99 	bl	80023b4 <HAL_InitTick>
 8003e82:	4603      	mov	r3, r0
 8003e84:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d052      	beq.n	8003f32 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	e327      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d032      	beq.n	8003efe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e98:	4b43      	ldr	r3, [pc, #268]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a42      	ldr	r2, [pc, #264]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ea4:	f7fe fad6 	bl	8002454 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003eac:	f7fe fad2 	bl	8002454 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e310      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ebe:	4b3a      	ldr	r3, [pc, #232]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0f0      	beq.n	8003eac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eca:	4b37      	ldr	r3, [pc, #220]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a36      	ldr	r2, [pc, #216]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003ed0:	f043 0308 	orr.w	r3, r3, #8
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	4b34      	ldr	r3, [pc, #208]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	4931      	ldr	r1, [pc, #196]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ee8:	4b2f      	ldr	r3, [pc, #188]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	021b      	lsls	r3, r3, #8
 8003ef6:	492c      	ldr	r1, [pc, #176]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	604b      	str	r3, [r1, #4]
 8003efc:	e01a      	b.n	8003f34 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003efe:	4b2a      	ldr	r3, [pc, #168]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a29      	ldr	r2, [pc, #164]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003f04:	f023 0301 	bic.w	r3, r3, #1
 8003f08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f0a:	f7fe faa3 	bl	8002454 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f12:	f7fe fa9f 	bl	8002454 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e2dd      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f24:	4b20      	ldr	r3, [pc, #128]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1f0      	bne.n	8003f12 <HAL_RCC_OscConfig+0x1da>
 8003f30:	e000      	b.n	8003f34 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f32:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d074      	beq.n	800402a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d005      	beq.n	8003f52 <HAL_RCC_OscConfig+0x21a>
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	2b0c      	cmp	r3, #12
 8003f4a:	d10e      	bne.n	8003f6a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	d10b      	bne.n	8003f6a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f52:	4b15      	ldr	r3, [pc, #84]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d064      	beq.n	8004028 <HAL_RCC_OscConfig+0x2f0>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d160      	bne.n	8004028 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e2ba      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f72:	d106      	bne.n	8003f82 <HAL_RCC_OscConfig+0x24a>
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a0b      	ldr	r2, [pc, #44]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	e026      	b.n	8003fd0 <HAL_RCC_OscConfig+0x298>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f8a:	d115      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x280>
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a05      	ldr	r2, [pc, #20]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003f92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	4b03      	ldr	r3, [pc, #12]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a02      	ldr	r2, [pc, #8]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa2:	6013      	str	r3, [r2, #0]
 8003fa4:	e014      	b.n	8003fd0 <HAL_RCC_OscConfig+0x298>
 8003fa6:	bf00      	nop
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	080097d0 	.word	0x080097d0
 8003fb0:	20000000 	.word	0x20000000
 8003fb4:	20000010 	.word	0x20000010
 8003fb8:	4ba0      	ldr	r3, [pc, #640]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a9f      	ldr	r2, [pc, #636]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8003fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc2:	6013      	str	r3, [r2, #0]
 8003fc4:	4b9d      	ldr	r3, [pc, #628]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a9c      	ldr	r2, [pc, #624]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8003fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d013      	beq.n	8004000 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd8:	f7fe fa3c 	bl	8002454 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fe0:	f7fe fa38 	bl	8002454 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b64      	cmp	r3, #100	; 0x64
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e276      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ff2:	4b92      	ldr	r3, [pc, #584]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x2a8>
 8003ffe:	e014      	b.n	800402a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004000:	f7fe fa28 	bl	8002454 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004008:	f7fe fa24 	bl	8002454 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b64      	cmp	r3, #100	; 0x64
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e262      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800401a:	4b88      	ldr	r3, [pc, #544]	; (800423c <HAL_RCC_OscConfig+0x504>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f0      	bne.n	8004008 <HAL_RCC_OscConfig+0x2d0>
 8004026:	e000      	b.n	800402a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d060      	beq.n	80040f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	2b04      	cmp	r3, #4
 800403a:	d005      	beq.n	8004048 <HAL_RCC_OscConfig+0x310>
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	2b0c      	cmp	r3, #12
 8004040:	d119      	bne.n	8004076 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2b02      	cmp	r3, #2
 8004046:	d116      	bne.n	8004076 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004048:	4b7c      	ldr	r3, [pc, #496]	; (800423c <HAL_RCC_OscConfig+0x504>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_RCC_OscConfig+0x328>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e23f      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004060:	4b76      	ldr	r3, [pc, #472]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	061b      	lsls	r3, r3, #24
 800406e:	4973      	ldr	r1, [pc, #460]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8004070:	4313      	orrs	r3, r2
 8004072:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004074:	e040      	b.n	80040f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d023      	beq.n	80040c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800407e:	4b6f      	ldr	r3, [pc, #444]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a6e      	ldr	r2, [pc, #440]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8004084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408a:	f7fe f9e3 	bl	8002454 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004092:	f7fe f9df 	bl	8002454 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e21d      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040a4:	4b65      	ldr	r3, [pc, #404]	; (800423c <HAL_RCC_OscConfig+0x504>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b0:	4b62      	ldr	r3, [pc, #392]	; (800423c <HAL_RCC_OscConfig+0x504>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	061b      	lsls	r3, r3, #24
 80040be:	495f      	ldr	r1, [pc, #380]	; (800423c <HAL_RCC_OscConfig+0x504>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	604b      	str	r3, [r1, #4]
 80040c4:	e018      	b.n	80040f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040c6:	4b5d      	ldr	r3, [pc, #372]	; (800423c <HAL_RCC_OscConfig+0x504>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a5c      	ldr	r2, [pc, #368]	; (800423c <HAL_RCC_OscConfig+0x504>)
 80040cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d2:	f7fe f9bf 	bl	8002454 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040da:	f7fe f9bb 	bl	8002454 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e1f9      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040ec:	4b53      	ldr	r3, [pc, #332]	; (800423c <HAL_RCC_OscConfig+0x504>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1f0      	bne.n	80040da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b00      	cmp	r3, #0
 8004102:	d03c      	beq.n	800417e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d01c      	beq.n	8004146 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800410c:	4b4b      	ldr	r3, [pc, #300]	; (800423c <HAL_RCC_OscConfig+0x504>)
 800410e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004112:	4a4a      	ldr	r2, [pc, #296]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800411c:	f7fe f99a 	bl	8002454 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004124:	f7fe f996 	bl	8002454 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e1d4      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004136:	4b41      	ldr	r3, [pc, #260]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8004138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0ef      	beq.n	8004124 <HAL_RCC_OscConfig+0x3ec>
 8004144:	e01b      	b.n	800417e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004146:	4b3d      	ldr	r3, [pc, #244]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8004148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800414c:	4a3b      	ldr	r2, [pc, #236]	; (800423c <HAL_RCC_OscConfig+0x504>)
 800414e:	f023 0301 	bic.w	r3, r3, #1
 8004152:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004156:	f7fe f97d 	bl	8002454 <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800415e:	f7fe f979 	bl	8002454 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e1b7      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004170:	4b32      	ldr	r3, [pc, #200]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8004172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1ef      	bne.n	800415e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0304 	and.w	r3, r3, #4
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 80a6 	beq.w	80042d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800418c:	2300      	movs	r3, #0
 800418e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004190:	4b2a      	ldr	r3, [pc, #168]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8004192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10d      	bne.n	80041b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800419c:	4b27      	ldr	r3, [pc, #156]	; (800423c <HAL_RCC_OscConfig+0x504>)
 800419e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a0:	4a26      	ldr	r2, [pc, #152]	; (800423c <HAL_RCC_OscConfig+0x504>)
 80041a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a6:	6593      	str	r3, [r2, #88]	; 0x58
 80041a8:	4b24      	ldr	r3, [pc, #144]	; (800423c <HAL_RCC_OscConfig+0x504>)
 80041aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b0:	60bb      	str	r3, [r7, #8]
 80041b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041b4:	2301      	movs	r3, #1
 80041b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041b8:	4b21      	ldr	r3, [pc, #132]	; (8004240 <HAL_RCC_OscConfig+0x508>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d118      	bne.n	80041f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041c4:	4b1e      	ldr	r3, [pc, #120]	; (8004240 <HAL_RCC_OscConfig+0x508>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a1d      	ldr	r2, [pc, #116]	; (8004240 <HAL_RCC_OscConfig+0x508>)
 80041ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041d0:	f7fe f940 	bl	8002454 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d8:	f7fe f93c 	bl	8002454 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e17a      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ea:	4b15      	ldr	r3, [pc, #84]	; (8004240 <HAL_RCC_OscConfig+0x508>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d108      	bne.n	8004210 <HAL_RCC_OscConfig+0x4d8>
 80041fe:	4b0f      	ldr	r3, [pc, #60]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8004200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004204:	4a0d      	ldr	r2, [pc, #52]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8004206:	f043 0301 	orr.w	r3, r3, #1
 800420a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800420e:	e029      	b.n	8004264 <HAL_RCC_OscConfig+0x52c>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	2b05      	cmp	r3, #5
 8004216:	d115      	bne.n	8004244 <HAL_RCC_OscConfig+0x50c>
 8004218:	4b08      	ldr	r3, [pc, #32]	; (800423c <HAL_RCC_OscConfig+0x504>)
 800421a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421e:	4a07      	ldr	r2, [pc, #28]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8004220:	f043 0304 	orr.w	r3, r3, #4
 8004224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004228:	4b04      	ldr	r3, [pc, #16]	; (800423c <HAL_RCC_OscConfig+0x504>)
 800422a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422e:	4a03      	ldr	r2, [pc, #12]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8004230:	f043 0301 	orr.w	r3, r3, #1
 8004234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004238:	e014      	b.n	8004264 <HAL_RCC_OscConfig+0x52c>
 800423a:	bf00      	nop
 800423c:	40021000 	.word	0x40021000
 8004240:	40007000 	.word	0x40007000
 8004244:	4b9c      	ldr	r3, [pc, #624]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	4a9b      	ldr	r2, [pc, #620]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 800424c:	f023 0301 	bic.w	r3, r3, #1
 8004250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004254:	4b98      	ldr	r3, [pc, #608]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 8004256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425a:	4a97      	ldr	r2, [pc, #604]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 800425c:	f023 0304 	bic.w	r3, r3, #4
 8004260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d016      	beq.n	800429a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800426c:	f7fe f8f2 	bl	8002454 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004272:	e00a      	b.n	800428a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004274:	f7fe f8ee 	bl	8002454 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004282:	4293      	cmp	r3, r2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e12a      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800428a:	4b8b      	ldr	r3, [pc, #556]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 800428c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0ed      	beq.n	8004274 <HAL_RCC_OscConfig+0x53c>
 8004298:	e015      	b.n	80042c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429a:	f7fe f8db 	bl	8002454 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042a0:	e00a      	b.n	80042b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a2:	f7fe f8d7 	bl	8002454 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e113      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042b8:	4b7f      	ldr	r3, [pc, #508]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1ed      	bne.n	80042a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042c6:	7ffb      	ldrb	r3, [r7, #31]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d105      	bne.n	80042d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042cc:	4b7a      	ldr	r3, [pc, #488]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 80042ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d0:	4a79      	ldr	r2, [pc, #484]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 80042d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042d6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 80fe 	beq.w	80044de <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	f040 80d0 	bne.w	800448c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80042ec:	4b72      	ldr	r3, [pc, #456]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f003 0203 	and.w	r2, r3, #3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d130      	bne.n	8004362 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	3b01      	subs	r3, #1
 800430c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800430e:	429a      	cmp	r2, r3
 8004310:	d127      	bne.n	8004362 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800431e:	429a      	cmp	r2, r3
 8004320:	d11f      	bne.n	8004362 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800432c:	2a07      	cmp	r2, #7
 800432e:	bf14      	ite	ne
 8004330:	2201      	movne	r2, #1
 8004332:	2200      	moveq	r2, #0
 8004334:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004336:	4293      	cmp	r3, r2
 8004338:	d113      	bne.n	8004362 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004344:	085b      	lsrs	r3, r3, #1
 8004346:	3b01      	subs	r3, #1
 8004348:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800434a:	429a      	cmp	r2, r3
 800434c:	d109      	bne.n	8004362 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	085b      	lsrs	r3, r3, #1
 800435a:	3b01      	subs	r3, #1
 800435c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800435e:	429a      	cmp	r2, r3
 8004360:	d06e      	beq.n	8004440 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	2b0c      	cmp	r3, #12
 8004366:	d069      	beq.n	800443c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004368:	4b53      	ldr	r3, [pc, #332]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d105      	bne.n	8004380 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004374:	4b50      	ldr	r3, [pc, #320]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e0ad      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004384:	4b4c      	ldr	r3, [pc, #304]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a4b      	ldr	r2, [pc, #300]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 800438a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800438e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004390:	f7fe f860 	bl	8002454 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004398:	f7fe f85c 	bl	8002454 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e09a      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043aa:	4b43      	ldr	r3, [pc, #268]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043b6:	4b40      	ldr	r3, [pc, #256]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	4b40      	ldr	r3, [pc, #256]	; (80044bc <HAL_RCC_OscConfig+0x784>)
 80043bc:	4013      	ands	r3, r2
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043c6:	3a01      	subs	r2, #1
 80043c8:	0112      	lsls	r2, r2, #4
 80043ca:	4311      	orrs	r1, r2
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043d0:	0212      	lsls	r2, r2, #8
 80043d2:	4311      	orrs	r1, r2
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043d8:	0852      	lsrs	r2, r2, #1
 80043da:	3a01      	subs	r2, #1
 80043dc:	0552      	lsls	r2, r2, #21
 80043de:	4311      	orrs	r1, r2
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80043e4:	0852      	lsrs	r2, r2, #1
 80043e6:	3a01      	subs	r2, #1
 80043e8:	0652      	lsls	r2, r2, #25
 80043ea:	4311      	orrs	r1, r2
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043f0:	0912      	lsrs	r2, r2, #4
 80043f2:	0452      	lsls	r2, r2, #17
 80043f4:	430a      	orrs	r2, r1
 80043f6:	4930      	ldr	r1, [pc, #192]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80043fc:	4b2e      	ldr	r3, [pc, #184]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a2d      	ldr	r2, [pc, #180]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 8004402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004406:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004408:	4b2b      	ldr	r3, [pc, #172]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	4a2a      	ldr	r2, [pc, #168]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 800440e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004412:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004414:	f7fe f81e 	bl	8002454 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800441c:	f7fe f81a 	bl	8002454 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e058      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800442e:	4b22      	ldr	r3, [pc, #136]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0f0      	beq.n	800441c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800443a:	e050      	b.n	80044de <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e04f      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004440:	4b1d      	ldr	r3, [pc, #116]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d148      	bne.n	80044de <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800444c:	4b1a      	ldr	r3, [pc, #104]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a19      	ldr	r2, [pc, #100]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 8004452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004456:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004458:	4b17      	ldr	r3, [pc, #92]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	4a16      	ldr	r2, [pc, #88]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 800445e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004462:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004464:	f7fd fff6 	bl	8002454 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800446c:	f7fd fff2 	bl	8002454 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e030      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800447e:	4b0e      	ldr	r3, [pc, #56]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0f0      	beq.n	800446c <HAL_RCC_OscConfig+0x734>
 800448a:	e028      	b.n	80044de <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2b0c      	cmp	r3, #12
 8004490:	d023      	beq.n	80044da <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004492:	4b09      	ldr	r3, [pc, #36]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a08      	ldr	r2, [pc, #32]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 8004498:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800449c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449e:	f7fd ffd9 	bl	8002454 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044a4:	e00c      	b.n	80044c0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a6:	f7fd ffd5 	bl	8002454 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d905      	bls.n	80044c0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e013      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
 80044b8:	40021000 	.word	0x40021000
 80044bc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044c0:	4b09      	ldr	r3, [pc, #36]	; (80044e8 <HAL_RCC_OscConfig+0x7b0>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1ec      	bne.n	80044a6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80044cc:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <HAL_RCC_OscConfig+0x7b0>)
 80044ce:	68da      	ldr	r2, [r3, #12]
 80044d0:	4905      	ldr	r1, [pc, #20]	; (80044e8 <HAL_RCC_OscConfig+0x7b0>)
 80044d2:	4b06      	ldr	r3, [pc, #24]	; (80044ec <HAL_RCC_OscConfig+0x7b4>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	60cb      	str	r3, [r1, #12]
 80044d8:	e001      	b.n	80044de <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3720      	adds	r7, #32
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40021000 	.word	0x40021000
 80044ec:	feeefffc 	.word	0xfeeefffc

080044f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e0e7      	b.n	80046d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004504:	4b75      	ldr	r3, [pc, #468]	; (80046dc <HAL_RCC_ClockConfig+0x1ec>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d910      	bls.n	8004534 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004512:	4b72      	ldr	r3, [pc, #456]	; (80046dc <HAL_RCC_ClockConfig+0x1ec>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f023 0207 	bic.w	r2, r3, #7
 800451a:	4970      	ldr	r1, [pc, #448]	; (80046dc <HAL_RCC_ClockConfig+0x1ec>)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	4313      	orrs	r3, r2
 8004520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004522:	4b6e      	ldr	r3, [pc, #440]	; (80046dc <HAL_RCC_ClockConfig+0x1ec>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d001      	beq.n	8004534 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e0cf      	b.n	80046d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d010      	beq.n	8004562 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	4b66      	ldr	r3, [pc, #408]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800454c:	429a      	cmp	r2, r3
 800454e:	d908      	bls.n	8004562 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004550:	4b63      	ldr	r3, [pc, #396]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	4960      	ldr	r1, [pc, #384]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 800455e:	4313      	orrs	r3, r2
 8004560:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d04c      	beq.n	8004608 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b03      	cmp	r3, #3
 8004574:	d107      	bne.n	8004586 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004576:	4b5a      	ldr	r3, [pc, #360]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d121      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e0a6      	b.n	80046d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d107      	bne.n	800459e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800458e:	4b54      	ldr	r3, [pc, #336]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d115      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e09a      	b.n	80046d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d107      	bne.n	80045b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045a6:	4b4e      	ldr	r3, [pc, #312]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e08e      	b.n	80046d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045b6:	4b4a      	ldr	r3, [pc, #296]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e086      	b.n	80046d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045c6:	4b46      	ldr	r3, [pc, #280]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f023 0203 	bic.w	r2, r3, #3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	4943      	ldr	r1, [pc, #268]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d8:	f7fd ff3c 	bl	8002454 <HAL_GetTick>
 80045dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045de:	e00a      	b.n	80045f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e0:	f7fd ff38 	bl	8002454 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e06e      	b.n	80046d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f6:	4b3a      	ldr	r3, [pc, #232]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 020c 	and.w	r2, r3, #12
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	429a      	cmp	r2, r3
 8004606:	d1eb      	bne.n	80045e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d010      	beq.n	8004636 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	4b31      	ldr	r3, [pc, #196]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004620:	429a      	cmp	r2, r3
 8004622:	d208      	bcs.n	8004636 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004624:	4b2e      	ldr	r3, [pc, #184]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	492b      	ldr	r1, [pc, #172]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004632:	4313      	orrs	r3, r2
 8004634:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004636:	4b29      	ldr	r3, [pc, #164]	; (80046dc <HAL_RCC_ClockConfig+0x1ec>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d210      	bcs.n	8004666 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004644:	4b25      	ldr	r3, [pc, #148]	; (80046dc <HAL_RCC_ClockConfig+0x1ec>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f023 0207 	bic.w	r2, r3, #7
 800464c:	4923      	ldr	r1, [pc, #140]	; (80046dc <HAL_RCC_ClockConfig+0x1ec>)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	4313      	orrs	r3, r2
 8004652:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004654:	4b21      	ldr	r3, [pc, #132]	; (80046dc <HAL_RCC_ClockConfig+0x1ec>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d001      	beq.n	8004666 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e036      	b.n	80046d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	2b00      	cmp	r3, #0
 8004670:	d008      	beq.n	8004684 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004672:	4b1b      	ldr	r3, [pc, #108]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	4918      	ldr	r1, [pc, #96]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004680:	4313      	orrs	r3, r2
 8004682:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b00      	cmp	r3, #0
 800468e:	d009      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004690:	4b13      	ldr	r3, [pc, #76]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	4910      	ldr	r1, [pc, #64]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046a4:	f000 f824 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	091b      	lsrs	r3, r3, #4
 80046b0:	f003 030f 	and.w	r3, r3, #15
 80046b4:	490b      	ldr	r1, [pc, #44]	; (80046e4 <HAL_RCC_ClockConfig+0x1f4>)
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	f003 031f 	and.w	r3, r3, #31
 80046bc:	fa22 f303 	lsr.w	r3, r2, r3
 80046c0:	4a09      	ldr	r2, [pc, #36]	; (80046e8 <HAL_RCC_ClockConfig+0x1f8>)
 80046c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046c4:	4b09      	ldr	r3, [pc, #36]	; (80046ec <HAL_RCC_ClockConfig+0x1fc>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fd fe73 	bl	80023b4 <HAL_InitTick>
 80046ce:	4603      	mov	r3, r0
 80046d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80046d2:	7afb      	ldrb	r3, [r7, #11]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40022000 	.word	0x40022000
 80046e0:	40021000 	.word	0x40021000
 80046e4:	080097d0 	.word	0x080097d0
 80046e8:	20000000 	.word	0x20000000
 80046ec:	20000010 	.word	0x20000010

080046f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b089      	sub	sp, #36	; 0x24
 80046f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61fb      	str	r3, [r7, #28]
 80046fa:	2300      	movs	r3, #0
 80046fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046fe:	4b3e      	ldr	r3, [pc, #248]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 030c 	and.w	r3, r3, #12
 8004706:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004708:	4b3b      	ldr	r3, [pc, #236]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d005      	beq.n	8004724 <HAL_RCC_GetSysClockFreq+0x34>
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	2b0c      	cmp	r3, #12
 800471c:	d121      	bne.n	8004762 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d11e      	bne.n	8004762 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004724:	4b34      	ldr	r3, [pc, #208]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0308 	and.w	r3, r3, #8
 800472c:	2b00      	cmp	r3, #0
 800472e:	d107      	bne.n	8004740 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004730:	4b31      	ldr	r3, [pc, #196]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004736:	0a1b      	lsrs	r3, r3, #8
 8004738:	f003 030f 	and.w	r3, r3, #15
 800473c:	61fb      	str	r3, [r7, #28]
 800473e:	e005      	b.n	800474c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004740:	4b2d      	ldr	r3, [pc, #180]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	091b      	lsrs	r3, r3, #4
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800474c:	4a2b      	ldr	r2, [pc, #172]	; (80047fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004754:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10d      	bne.n	8004778 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004760:	e00a      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	2b04      	cmp	r3, #4
 8004766:	d102      	bne.n	800476e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004768:	4b25      	ldr	r3, [pc, #148]	; (8004800 <HAL_RCC_GetSysClockFreq+0x110>)
 800476a:	61bb      	str	r3, [r7, #24]
 800476c:	e004      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	2b08      	cmp	r3, #8
 8004772:	d101      	bne.n	8004778 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004774:	4b23      	ldr	r3, [pc, #140]	; (8004804 <HAL_RCC_GetSysClockFreq+0x114>)
 8004776:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	2b0c      	cmp	r3, #12
 800477c:	d134      	bne.n	80047e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800477e:	4b1e      	ldr	r3, [pc, #120]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d003      	beq.n	8004796 <HAL_RCC_GetSysClockFreq+0xa6>
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b03      	cmp	r3, #3
 8004792:	d003      	beq.n	800479c <HAL_RCC_GetSysClockFreq+0xac>
 8004794:	e005      	b.n	80047a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004796:	4b1a      	ldr	r3, [pc, #104]	; (8004800 <HAL_RCC_GetSysClockFreq+0x110>)
 8004798:	617b      	str	r3, [r7, #20]
      break;
 800479a:	e005      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800479c:	4b19      	ldr	r3, [pc, #100]	; (8004804 <HAL_RCC_GetSysClockFreq+0x114>)
 800479e:	617b      	str	r3, [r7, #20]
      break;
 80047a0:	e002      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	617b      	str	r3, [r7, #20]
      break;
 80047a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047a8:	4b13      	ldr	r3, [pc, #76]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	091b      	lsrs	r3, r3, #4
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	3301      	adds	r3, #1
 80047b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047b6:	4b10      	ldr	r3, [pc, #64]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	0a1b      	lsrs	r3, r3, #8
 80047bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	fb03 f202 	mul.w	r2, r3, r2
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047ce:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	0e5b      	lsrs	r3, r3, #25
 80047d4:	f003 0303 	and.w	r3, r3, #3
 80047d8:	3301      	adds	r3, #1
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80047e8:	69bb      	ldr	r3, [r7, #24]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3724      	adds	r7, #36	; 0x24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40021000 	.word	0x40021000
 80047fc:	080097e8 	.word	0x080097e8
 8004800:	00f42400 	.word	0x00f42400
 8004804:	007a1200 	.word	0x007a1200

08004808 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800480c:	4b03      	ldr	r3, [pc, #12]	; (800481c <HAL_RCC_GetHCLKFreq+0x14>)
 800480e:	681b      	ldr	r3, [r3, #0]
}
 8004810:	4618      	mov	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	20000000 	.word	0x20000000

08004820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004824:	f7ff fff0 	bl	8004808 <HAL_RCC_GetHCLKFreq>
 8004828:	4602      	mov	r2, r0
 800482a:	4b06      	ldr	r3, [pc, #24]	; (8004844 <HAL_RCC_GetPCLK1Freq+0x24>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	0a1b      	lsrs	r3, r3, #8
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	4904      	ldr	r1, [pc, #16]	; (8004848 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004836:	5ccb      	ldrb	r3, [r1, r3]
 8004838:	f003 031f 	and.w	r3, r3, #31
 800483c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004840:	4618      	mov	r0, r3
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40021000 	.word	0x40021000
 8004848:	080097e0 	.word	0x080097e0

0800484c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004850:	f7ff ffda 	bl	8004808 <HAL_RCC_GetHCLKFreq>
 8004854:	4602      	mov	r2, r0
 8004856:	4b06      	ldr	r3, [pc, #24]	; (8004870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	0adb      	lsrs	r3, r3, #11
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	4904      	ldr	r1, [pc, #16]	; (8004874 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004862:	5ccb      	ldrb	r3, [r1, r3]
 8004864:	f003 031f 	and.w	r3, r3, #31
 8004868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800486c:	4618      	mov	r0, r3
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40021000 	.word	0x40021000
 8004874:	080097e0 	.word	0x080097e0

08004878 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004880:	2300      	movs	r3, #0
 8004882:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004884:	4b2a      	ldr	r3, [pc, #168]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004890:	f7ff f9ee 	bl	8003c70 <HAL_PWREx_GetVoltageRange>
 8004894:	6178      	str	r0, [r7, #20]
 8004896:	e014      	b.n	80048c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004898:	4b25      	ldr	r3, [pc, #148]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800489a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489c:	4a24      	ldr	r2, [pc, #144]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800489e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a2:	6593      	str	r3, [r2, #88]	; 0x58
 80048a4:	4b22      	ldr	r3, [pc, #136]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048b0:	f7ff f9de 	bl	8003c70 <HAL_PWREx_GetVoltageRange>
 80048b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048b6:	4b1e      	ldr	r3, [pc, #120]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ba:	4a1d      	ldr	r2, [pc, #116]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c8:	d10b      	bne.n	80048e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b80      	cmp	r3, #128	; 0x80
 80048ce:	d919      	bls.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2ba0      	cmp	r3, #160	; 0xa0
 80048d4:	d902      	bls.n	80048dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048d6:	2302      	movs	r3, #2
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	e013      	b.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048dc:	2301      	movs	r3, #1
 80048de:	613b      	str	r3, [r7, #16]
 80048e0:	e010      	b.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b80      	cmp	r3, #128	; 0x80
 80048e6:	d902      	bls.n	80048ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80048e8:	2303      	movs	r3, #3
 80048ea:	613b      	str	r3, [r7, #16]
 80048ec:	e00a      	b.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b80      	cmp	r3, #128	; 0x80
 80048f2:	d102      	bne.n	80048fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048f4:	2302      	movs	r3, #2
 80048f6:	613b      	str	r3, [r7, #16]
 80048f8:	e004      	b.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b70      	cmp	r3, #112	; 0x70
 80048fe:	d101      	bne.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004900:	2301      	movs	r3, #1
 8004902:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004904:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f023 0207 	bic.w	r2, r3, #7
 800490c:	4909      	ldr	r1, [pc, #36]	; (8004934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004914:	4b07      	ldr	r3, [pc, #28]	; (8004934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	429a      	cmp	r2, r3
 8004920:	d001      	beq.n	8004926 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40021000 	.word	0x40021000
 8004934:	40022000 	.word	0x40022000

08004938 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004940:	2300      	movs	r3, #0
 8004942:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004944:	2300      	movs	r3, #0
 8004946:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004950:	2b00      	cmp	r3, #0
 8004952:	d041      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004958:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800495c:	d02a      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800495e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004962:	d824      	bhi.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004964:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004968:	d008      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800496a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800496e:	d81e      	bhi.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004978:	d010      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800497a:	e018      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800497c:	4b86      	ldr	r3, [pc, #536]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	4a85      	ldr	r2, [pc, #532]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004986:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004988:	e015      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3304      	adds	r3, #4
 800498e:	2100      	movs	r1, #0
 8004990:	4618      	mov	r0, r3
 8004992:	f000 fabb 	bl	8004f0c <RCCEx_PLLSAI1_Config>
 8004996:	4603      	mov	r3, r0
 8004998:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800499a:	e00c      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3320      	adds	r3, #32
 80049a0:	2100      	movs	r1, #0
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fba6 	bl	80050f4 <RCCEx_PLLSAI2_Config>
 80049a8:	4603      	mov	r3, r0
 80049aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049ac:	e003      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	74fb      	strb	r3, [r7, #19]
      break;
 80049b2:	e000      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80049b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049b6:	7cfb      	ldrb	r3, [r7, #19]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10b      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049bc:	4b76      	ldr	r3, [pc, #472]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049ca:	4973      	ldr	r1, [pc, #460]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049d2:	e001      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d4:	7cfb      	ldrb	r3, [r7, #19]
 80049d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d041      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049ec:	d02a      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80049ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049f2:	d824      	bhi.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80049f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049f8:	d008      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80049fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049fe:	d81e      	bhi.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a08:	d010      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a0a:	e018      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a0c:	4b62      	ldr	r3, [pc, #392]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	4a61      	ldr	r2, [pc, #388]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a18:	e015      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	2100      	movs	r1, #0
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 fa73 	bl	8004f0c <RCCEx_PLLSAI1_Config>
 8004a26:	4603      	mov	r3, r0
 8004a28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a2a:	e00c      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3320      	adds	r3, #32
 8004a30:	2100      	movs	r1, #0
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fb5e 	bl	80050f4 <RCCEx_PLLSAI2_Config>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a3c:	e003      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	74fb      	strb	r3, [r7, #19]
      break;
 8004a42:	e000      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004a44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a46:	7cfb      	ldrb	r3, [r7, #19]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10b      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a4c:	4b52      	ldr	r3, [pc, #328]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a5a:	494f      	ldr	r1, [pc, #316]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a62:	e001      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a64:	7cfb      	ldrb	r3, [r7, #19]
 8004a66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 80a0 	beq.w	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a76:	2300      	movs	r3, #0
 8004a78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a7a:	4b47      	ldr	r3, [pc, #284]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00d      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a90:	4b41      	ldr	r3, [pc, #260]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a94:	4a40      	ldr	r2, [pc, #256]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a9a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a9c:	4b3e      	ldr	r3, [pc, #248]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa4:	60bb      	str	r3, [r7, #8]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004aac:	4b3b      	ldr	r3, [pc, #236]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a3a      	ldr	r2, [pc, #232]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ab8:	f7fd fccc 	bl	8002454 <HAL_GetTick>
 8004abc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004abe:	e009      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac0:	f7fd fcc8 	bl	8002454 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d902      	bls.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	74fb      	strb	r3, [r7, #19]
        break;
 8004ad2:	e005      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ad4:	4b31      	ldr	r3, [pc, #196]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0ef      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004ae0:	7cfb      	ldrb	r3, [r7, #19]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d15c      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ae6:	4b2c      	ldr	r3, [pc, #176]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01f      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d019      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b04:	4b24      	ldr	r3, [pc, #144]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b10:	4b21      	ldr	r3, [pc, #132]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b16:	4a20      	ldr	r2, [pc, #128]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b20:	4b1d      	ldr	r3, [pc, #116]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b26:	4a1c      	ldr	r2, [pc, #112]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b30:	4a19      	ldr	r2, [pc, #100]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d016      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b42:	f7fd fc87 	bl	8002454 <HAL_GetTick>
 8004b46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b48:	e00b      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b4a:	f7fd fc83 	bl	8002454 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d902      	bls.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	74fb      	strb	r3, [r7, #19]
            break;
 8004b60:	e006      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b62:	4b0d      	ldr	r3, [pc, #52]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0ec      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004b70:	7cfb      	ldrb	r3, [r7, #19]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10c      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b76:	4b08      	ldr	r3, [pc, #32]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b86:	4904      	ldr	r1, [pc, #16]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b8e:	e009      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b90:	7cfb      	ldrb	r3, [r7, #19]
 8004b92:	74bb      	strb	r3, [r7, #18]
 8004b94:	e006      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004b96:	bf00      	nop
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba0:	7cfb      	ldrb	r3, [r7, #19]
 8004ba2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ba4:	7c7b      	ldrb	r3, [r7, #17]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d105      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004baa:	4b9e      	ldr	r3, [pc, #632]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bae:	4a9d      	ldr	r2, [pc, #628]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bc2:	4b98      	ldr	r3, [pc, #608]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc8:	f023 0203 	bic.w	r2, r3, #3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	4994      	ldr	r1, [pc, #592]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00a      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004be4:	4b8f      	ldr	r3, [pc, #572]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bea:	f023 020c 	bic.w	r2, r3, #12
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf2:	498c      	ldr	r1, [pc, #560]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0304 	and.w	r3, r3, #4
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c06:	4b87      	ldr	r3, [pc, #540]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c14:	4983      	ldr	r1, [pc, #524]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c28:	4b7e      	ldr	r3, [pc, #504]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c36:	497b      	ldr	r1, [pc, #492]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0310 	and.w	r3, r3, #16
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c4a:	4b76      	ldr	r3, [pc, #472]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c58:	4972      	ldr	r1, [pc, #456]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0320 	and.w	r3, r3, #32
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c6c:	4b6d      	ldr	r3, [pc, #436]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7a:	496a      	ldr	r1, [pc, #424]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c8e:	4b65      	ldr	r3, [pc, #404]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c9c:	4961      	ldr	r1, [pc, #388]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cb0:	4b5c      	ldr	r3, [pc, #368]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cbe:	4959      	ldr	r1, [pc, #356]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cd2:	4b54      	ldr	r3, [pc, #336]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce0:	4950      	ldr	r1, [pc, #320]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cf4:	4b4b      	ldr	r3, [pc, #300]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d02:	4948      	ldr	r1, [pc, #288]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d16:	4b43      	ldr	r3, [pc, #268]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d24:	493f      	ldr	r1, [pc, #252]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d028      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d38:	4b3a      	ldr	r3, [pc, #232]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d46:	4937      	ldr	r1, [pc, #220]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d56:	d106      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d58:	4b32      	ldr	r3, [pc, #200]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	4a31      	ldr	r2, [pc, #196]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d62:	60d3      	str	r3, [r2, #12]
 8004d64:	e011      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d6e:	d10c      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3304      	adds	r3, #4
 8004d74:	2101      	movs	r1, #1
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 f8c8 	bl	8004f0c <RCCEx_PLLSAI1_Config>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004d80:	7cfb      	ldrb	r3, [r7, #19]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004d86:	7cfb      	ldrb	r3, [r7, #19]
 8004d88:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d028      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d96:	4b23      	ldr	r3, [pc, #140]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da4:	491f      	ldr	r1, [pc, #124]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004db4:	d106      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004db6:	4b1b      	ldr	r3, [pc, #108]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	4a1a      	ldr	r2, [pc, #104]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dc0:	60d3      	str	r3, [r2, #12]
 8004dc2:	e011      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dcc:	d10c      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 f899 	bl	8004f0c <RCCEx_PLLSAI1_Config>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dde:	7cfb      	ldrb	r3, [r7, #19]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004de4:	7cfb      	ldrb	r3, [r7, #19]
 8004de6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d02b      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e02:	4908      	ldr	r1, [pc, #32]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e12:	d109      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e14:	4b03      	ldr	r3, [pc, #12]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4a02      	ldr	r2, [pc, #8]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e1e:	60d3      	str	r3, [r2, #12]
 8004e20:	e014      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e22:	bf00      	nop
 8004e24:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e30:	d10c      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3304      	adds	r3, #4
 8004e36:	2101      	movs	r1, #1
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 f867 	bl	8004f0c <RCCEx_PLLSAI1_Config>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e42:	7cfb      	ldrb	r3, [r7, #19]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004e48:	7cfb      	ldrb	r3, [r7, #19]
 8004e4a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d02f      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e58:	4b2b      	ldr	r3, [pc, #172]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e66:	4928      	ldr	r1, [pc, #160]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e76:	d10d      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	2102      	movs	r1, #2
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 f844 	bl	8004f0c <RCCEx_PLLSAI1_Config>
 8004e84:	4603      	mov	r3, r0
 8004e86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e88:	7cfb      	ldrb	r3, [r7, #19]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d014      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004e8e:	7cfb      	ldrb	r3, [r7, #19]
 8004e90:	74bb      	strb	r3, [r7, #18]
 8004e92:	e011      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e9c:	d10c      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3320      	adds	r3, #32
 8004ea2:	2102      	movs	r1, #2
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 f925 	bl	80050f4 <RCCEx_PLLSAI2_Config>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eae:	7cfb      	ldrb	r3, [r7, #19]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004eb4:	7cfb      	ldrb	r3, [r7, #19]
 8004eb6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ec4:	4b10      	ldr	r3, [pc, #64]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ed2:	490d      	ldr	r1, [pc, #52]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00b      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ee6:	4b08      	ldr	r3, [pc, #32]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ef6:	4904      	ldr	r1, [pc, #16]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004efe:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	40021000 	.word	0x40021000

08004f0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f1a:	4b75      	ldr	r3, [pc, #468]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d018      	beq.n	8004f58 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f26:	4b72      	ldr	r3, [pc, #456]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f003 0203 	and.w	r2, r3, #3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d10d      	bne.n	8004f52 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
       ||
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d009      	beq.n	8004f52 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f3e:	4b6c      	ldr	r3, [pc, #432]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	091b      	lsrs	r3, r3, #4
 8004f44:	f003 0307 	and.w	r3, r3, #7
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
       ||
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d047      	beq.n	8004fe2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	73fb      	strb	r3, [r7, #15]
 8004f56:	e044      	b.n	8004fe2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d018      	beq.n	8004f92 <RCCEx_PLLSAI1_Config+0x86>
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d825      	bhi.n	8004fb0 <RCCEx_PLLSAI1_Config+0xa4>
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d002      	beq.n	8004f6e <RCCEx_PLLSAI1_Config+0x62>
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d009      	beq.n	8004f80 <RCCEx_PLLSAI1_Config+0x74>
 8004f6c:	e020      	b.n	8004fb0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f6e:	4b60      	ldr	r3, [pc, #384]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d11d      	bne.n	8004fb6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f7e:	e01a      	b.n	8004fb6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f80:	4b5b      	ldr	r3, [pc, #364]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d116      	bne.n	8004fba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f90:	e013      	b.n	8004fba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f92:	4b57      	ldr	r3, [pc, #348]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10f      	bne.n	8004fbe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f9e:	4b54      	ldr	r3, [pc, #336]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d109      	bne.n	8004fbe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fae:	e006      	b.n	8004fbe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004fb4:	e004      	b.n	8004fc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fb6:	bf00      	nop
 8004fb8:	e002      	b.n	8004fc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fba:	bf00      	nop
 8004fbc:	e000      	b.n	8004fc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10d      	bne.n	8004fe2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fc6:	4b4a      	ldr	r3, [pc, #296]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6819      	ldr	r1, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	011b      	lsls	r3, r3, #4
 8004fda:	430b      	orrs	r3, r1
 8004fdc:	4944      	ldr	r1, [pc, #272]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d17d      	bne.n	80050e4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004fe8:	4b41      	ldr	r3, [pc, #260]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a40      	ldr	r2, [pc, #256]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ff4:	f7fd fa2e 	bl	8002454 <HAL_GetTick>
 8004ff8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ffa:	e009      	b.n	8005010 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ffc:	f7fd fa2a 	bl	8002454 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d902      	bls.n	8005010 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	73fb      	strb	r3, [r7, #15]
        break;
 800500e:	e005      	b.n	800501c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005010:	4b37      	ldr	r3, [pc, #220]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1ef      	bne.n	8004ffc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d160      	bne.n	80050e4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d111      	bne.n	800504c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005028:	4b31      	ldr	r3, [pc, #196]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6892      	ldr	r2, [r2, #8]
 8005038:	0211      	lsls	r1, r2, #8
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	68d2      	ldr	r2, [r2, #12]
 800503e:	0912      	lsrs	r2, r2, #4
 8005040:	0452      	lsls	r2, r2, #17
 8005042:	430a      	orrs	r2, r1
 8005044:	492a      	ldr	r1, [pc, #168]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005046:	4313      	orrs	r3, r2
 8005048:	610b      	str	r3, [r1, #16]
 800504a:	e027      	b.n	800509c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d112      	bne.n	8005078 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005052:	4b27      	ldr	r3, [pc, #156]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800505a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6892      	ldr	r2, [r2, #8]
 8005062:	0211      	lsls	r1, r2, #8
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6912      	ldr	r2, [r2, #16]
 8005068:	0852      	lsrs	r2, r2, #1
 800506a:	3a01      	subs	r2, #1
 800506c:	0552      	lsls	r2, r2, #21
 800506e:	430a      	orrs	r2, r1
 8005070:	491f      	ldr	r1, [pc, #124]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005072:	4313      	orrs	r3, r2
 8005074:	610b      	str	r3, [r1, #16]
 8005076:	e011      	b.n	800509c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005078:	4b1d      	ldr	r3, [pc, #116]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005080:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6892      	ldr	r2, [r2, #8]
 8005088:	0211      	lsls	r1, r2, #8
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6952      	ldr	r2, [r2, #20]
 800508e:	0852      	lsrs	r2, r2, #1
 8005090:	3a01      	subs	r2, #1
 8005092:	0652      	lsls	r2, r2, #25
 8005094:	430a      	orrs	r2, r1
 8005096:	4916      	ldr	r1, [pc, #88]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005098:	4313      	orrs	r3, r2
 800509a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800509c:	4b14      	ldr	r3, [pc, #80]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a13      	ldr	r2, [pc, #76]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a8:	f7fd f9d4 	bl	8002454 <HAL_GetTick>
 80050ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050ae:	e009      	b.n	80050c4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050b0:	f7fd f9d0 	bl	8002454 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d902      	bls.n	80050c4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	73fb      	strb	r3, [r7, #15]
          break;
 80050c2:	e005      	b.n	80050d0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050c4:	4b0a      	ldr	r3, [pc, #40]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0ef      	beq.n	80050b0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80050d6:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d8:	691a      	ldr	r2, [r3, #16]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	4904      	ldr	r1, [pc, #16]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40021000 	.word	0x40021000

080050f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005102:	4b6a      	ldr	r3, [pc, #424]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d018      	beq.n	8005140 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800510e:	4b67      	ldr	r3, [pc, #412]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f003 0203 	and.w	r2, r3, #3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d10d      	bne.n	800513a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
       ||
 8005122:	2b00      	cmp	r3, #0
 8005124:	d009      	beq.n	800513a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005126:	4b61      	ldr	r3, [pc, #388]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	091b      	lsrs	r3, r3, #4
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
       ||
 8005136:	429a      	cmp	r2, r3
 8005138:	d047      	beq.n	80051ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	73fb      	strb	r3, [r7, #15]
 800513e:	e044      	b.n	80051ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b03      	cmp	r3, #3
 8005146:	d018      	beq.n	800517a <RCCEx_PLLSAI2_Config+0x86>
 8005148:	2b03      	cmp	r3, #3
 800514a:	d825      	bhi.n	8005198 <RCCEx_PLLSAI2_Config+0xa4>
 800514c:	2b01      	cmp	r3, #1
 800514e:	d002      	beq.n	8005156 <RCCEx_PLLSAI2_Config+0x62>
 8005150:	2b02      	cmp	r3, #2
 8005152:	d009      	beq.n	8005168 <RCCEx_PLLSAI2_Config+0x74>
 8005154:	e020      	b.n	8005198 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005156:	4b55      	ldr	r3, [pc, #340]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d11d      	bne.n	800519e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005166:	e01a      	b.n	800519e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005168:	4b50      	ldr	r3, [pc, #320]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005170:	2b00      	cmp	r3, #0
 8005172:	d116      	bne.n	80051a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005178:	e013      	b.n	80051a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800517a:	4b4c      	ldr	r3, [pc, #304]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10f      	bne.n	80051a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005186:	4b49      	ldr	r3, [pc, #292]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d109      	bne.n	80051a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005196:	e006      	b.n	80051a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	73fb      	strb	r3, [r7, #15]
      break;
 800519c:	e004      	b.n	80051a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800519e:	bf00      	nop
 80051a0:	e002      	b.n	80051a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051a2:	bf00      	nop
 80051a4:	e000      	b.n	80051a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10d      	bne.n	80051ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051ae:	4b3f      	ldr	r3, [pc, #252]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6819      	ldr	r1, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	3b01      	subs	r3, #1
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	430b      	orrs	r3, r1
 80051c4:	4939      	ldr	r1, [pc, #228]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051ca:	7bfb      	ldrb	r3, [r7, #15]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d167      	bne.n	80052a0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80051d0:	4b36      	ldr	r3, [pc, #216]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a35      	ldr	r2, [pc, #212]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051dc:	f7fd f93a 	bl	8002454 <HAL_GetTick>
 80051e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051e2:	e009      	b.n	80051f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051e4:	f7fd f936 	bl	8002454 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d902      	bls.n	80051f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	73fb      	strb	r3, [r7, #15]
        break;
 80051f6:	e005      	b.n	8005204 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051f8:	4b2c      	ldr	r3, [pc, #176]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1ef      	bne.n	80051e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d14a      	bne.n	80052a0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d111      	bne.n	8005234 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005210:	4b26      	ldr	r3, [pc, #152]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6892      	ldr	r2, [r2, #8]
 8005220:	0211      	lsls	r1, r2, #8
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	68d2      	ldr	r2, [r2, #12]
 8005226:	0912      	lsrs	r2, r2, #4
 8005228:	0452      	lsls	r2, r2, #17
 800522a:	430a      	orrs	r2, r1
 800522c:	491f      	ldr	r1, [pc, #124]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800522e:	4313      	orrs	r3, r2
 8005230:	614b      	str	r3, [r1, #20]
 8005232:	e011      	b.n	8005258 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005234:	4b1d      	ldr	r3, [pc, #116]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800523c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6892      	ldr	r2, [r2, #8]
 8005244:	0211      	lsls	r1, r2, #8
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6912      	ldr	r2, [r2, #16]
 800524a:	0852      	lsrs	r2, r2, #1
 800524c:	3a01      	subs	r2, #1
 800524e:	0652      	lsls	r2, r2, #25
 8005250:	430a      	orrs	r2, r1
 8005252:	4916      	ldr	r1, [pc, #88]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005254:	4313      	orrs	r3, r2
 8005256:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005258:	4b14      	ldr	r3, [pc, #80]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a13      	ldr	r2, [pc, #76]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800525e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005262:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005264:	f7fd f8f6 	bl	8002454 <HAL_GetTick>
 8005268:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800526a:	e009      	b.n	8005280 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800526c:	f7fd f8f2 	bl	8002454 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d902      	bls.n	8005280 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	73fb      	strb	r3, [r7, #15]
          break;
 800527e:	e005      	b.n	800528c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005280:	4b0a      	ldr	r3, [pc, #40]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0ef      	beq.n	800526c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800528c:	7bfb      	ldrb	r3, [r7, #15]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d106      	bne.n	80052a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005292:	4b06      	ldr	r3, [pc, #24]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005294:	695a      	ldr	r2, [r3, #20]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	4904      	ldr	r1, [pc, #16]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800529c:	4313      	orrs	r3, r2
 800529e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	40021000 	.word	0x40021000

080052b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e049      	b.n	8005356 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d106      	bne.n	80052dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7fc f948 	bl	800156c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3304      	adds	r3, #4
 80052ec:	4619      	mov	r1, r3
 80052ee:	4610      	mov	r0, r2
 80052f0:	f000 fab6 	bl	8005860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b01      	cmp	r3, #1
 8005372:	d001      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e04f      	b.n	8005418 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0201 	orr.w	r2, r2, #1
 800538e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a23      	ldr	r2, [pc, #140]	; (8005424 <HAL_TIM_Base_Start_IT+0xc4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d01d      	beq.n	80053d6 <HAL_TIM_Base_Start_IT+0x76>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a2:	d018      	beq.n	80053d6 <HAL_TIM_Base_Start_IT+0x76>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a1f      	ldr	r2, [pc, #124]	; (8005428 <HAL_TIM_Base_Start_IT+0xc8>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d013      	beq.n	80053d6 <HAL_TIM_Base_Start_IT+0x76>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a1e      	ldr	r2, [pc, #120]	; (800542c <HAL_TIM_Base_Start_IT+0xcc>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d00e      	beq.n	80053d6 <HAL_TIM_Base_Start_IT+0x76>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a1c      	ldr	r2, [pc, #112]	; (8005430 <HAL_TIM_Base_Start_IT+0xd0>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d009      	beq.n	80053d6 <HAL_TIM_Base_Start_IT+0x76>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1b      	ldr	r2, [pc, #108]	; (8005434 <HAL_TIM_Base_Start_IT+0xd4>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d004      	beq.n	80053d6 <HAL_TIM_Base_Start_IT+0x76>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a19      	ldr	r2, [pc, #100]	; (8005438 <HAL_TIM_Base_Start_IT+0xd8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d115      	bne.n	8005402 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	4b17      	ldr	r3, [pc, #92]	; (800543c <HAL_TIM_Base_Start_IT+0xdc>)
 80053de:	4013      	ands	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2b06      	cmp	r3, #6
 80053e6:	d015      	beq.n	8005414 <HAL_TIM_Base_Start_IT+0xb4>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ee:	d011      	beq.n	8005414 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0201 	orr.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005400:	e008      	b.n	8005414 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f042 0201 	orr.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	e000      	b.n	8005416 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005414:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	40012c00 	.word	0x40012c00
 8005428:	40000400 	.word	0x40000400
 800542c:	40000800 	.word	0x40000800
 8005430:	40000c00 	.word	0x40000c00
 8005434:	40013400 	.word	0x40013400
 8005438:	40014000 	.word	0x40014000
 800543c:	00010007 	.word	0x00010007

08005440 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b02      	cmp	r3, #2
 8005454:	d122      	bne.n	800549c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b02      	cmp	r3, #2
 8005462:	d11b      	bne.n	800549c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f06f 0202 	mvn.w	r2, #2
 800546c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f9ce 	bl	8005824 <HAL_TIM_IC_CaptureCallback>
 8005488:	e005      	b.n	8005496 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f9c0 	bl	8005810 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f9d1 	bl	8005838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f003 0304 	and.w	r3, r3, #4
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d122      	bne.n	80054f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d11b      	bne.n	80054f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f06f 0204 	mvn.w	r2, #4
 80054c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2202      	movs	r2, #2
 80054c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f9a4 	bl	8005824 <HAL_TIM_IC_CaptureCallback>
 80054dc:	e005      	b.n	80054ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f996 	bl	8005810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f9a7 	bl	8005838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f003 0308 	and.w	r3, r3, #8
 80054fa:	2b08      	cmp	r3, #8
 80054fc:	d122      	bne.n	8005544 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f003 0308 	and.w	r3, r3, #8
 8005508:	2b08      	cmp	r3, #8
 800550a:	d11b      	bne.n	8005544 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f06f 0208 	mvn.w	r2, #8
 8005514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2204      	movs	r2, #4
 800551a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f97a 	bl	8005824 <HAL_TIM_IC_CaptureCallback>
 8005530:	e005      	b.n	800553e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f96c 	bl	8005810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f97d 	bl	8005838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f003 0310 	and.w	r3, r3, #16
 800554e:	2b10      	cmp	r3, #16
 8005550:	d122      	bne.n	8005598 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f003 0310 	and.w	r3, r3, #16
 800555c:	2b10      	cmp	r3, #16
 800555e:	d11b      	bne.n	8005598 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f06f 0210 	mvn.w	r2, #16
 8005568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2208      	movs	r2, #8
 800556e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f950 	bl	8005824 <HAL_TIM_IC_CaptureCallback>
 8005584:	e005      	b.n	8005592 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f942 	bl	8005810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 f953 	bl	8005838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d10e      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d107      	bne.n	80055c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0201 	mvn.w	r2, #1
 80055bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7fb fe98 	bl	80012f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ce:	2b80      	cmp	r3, #128	; 0x80
 80055d0:	d10e      	bne.n	80055f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055dc:	2b80      	cmp	r3, #128	; 0x80
 80055de:	d107      	bne.n	80055f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fafe 	bl	8005bec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055fe:	d10e      	bne.n	800561e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560a:	2b80      	cmp	r3, #128	; 0x80
 800560c:	d107      	bne.n	800561e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 faf1 	bl	8005c00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005628:	2b40      	cmp	r3, #64	; 0x40
 800562a:	d10e      	bne.n	800564a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005636:	2b40      	cmp	r3, #64	; 0x40
 8005638:	d107      	bne.n	800564a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f901 	bl	800584c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	f003 0320 	and.w	r3, r3, #32
 8005654:	2b20      	cmp	r3, #32
 8005656:	d10e      	bne.n	8005676 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f003 0320 	and.w	r3, r3, #32
 8005662:	2b20      	cmp	r3, #32
 8005664:	d107      	bne.n	8005676 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f06f 0220 	mvn.w	r2, #32
 800566e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 fab1 	bl	8005bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005676:	bf00      	nop
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b084      	sub	sp, #16
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005688:	2300      	movs	r3, #0
 800568a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005692:	2b01      	cmp	r3, #1
 8005694:	d101      	bne.n	800569a <HAL_TIM_ConfigClockSource+0x1c>
 8005696:	2302      	movs	r3, #2
 8005698:	e0b6      	b.n	8005808 <HAL_TIM_ConfigClockSource+0x18a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2202      	movs	r2, #2
 80056a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056b8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056bc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056c4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056d6:	d03e      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0xd8>
 80056d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056dc:	f200 8087 	bhi.w	80057ee <HAL_TIM_ConfigClockSource+0x170>
 80056e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e4:	f000 8086 	beq.w	80057f4 <HAL_TIM_ConfigClockSource+0x176>
 80056e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ec:	d87f      	bhi.n	80057ee <HAL_TIM_ConfigClockSource+0x170>
 80056ee:	2b70      	cmp	r3, #112	; 0x70
 80056f0:	d01a      	beq.n	8005728 <HAL_TIM_ConfigClockSource+0xaa>
 80056f2:	2b70      	cmp	r3, #112	; 0x70
 80056f4:	d87b      	bhi.n	80057ee <HAL_TIM_ConfigClockSource+0x170>
 80056f6:	2b60      	cmp	r3, #96	; 0x60
 80056f8:	d050      	beq.n	800579c <HAL_TIM_ConfigClockSource+0x11e>
 80056fa:	2b60      	cmp	r3, #96	; 0x60
 80056fc:	d877      	bhi.n	80057ee <HAL_TIM_ConfigClockSource+0x170>
 80056fe:	2b50      	cmp	r3, #80	; 0x50
 8005700:	d03c      	beq.n	800577c <HAL_TIM_ConfigClockSource+0xfe>
 8005702:	2b50      	cmp	r3, #80	; 0x50
 8005704:	d873      	bhi.n	80057ee <HAL_TIM_ConfigClockSource+0x170>
 8005706:	2b40      	cmp	r3, #64	; 0x40
 8005708:	d058      	beq.n	80057bc <HAL_TIM_ConfigClockSource+0x13e>
 800570a:	2b40      	cmp	r3, #64	; 0x40
 800570c:	d86f      	bhi.n	80057ee <HAL_TIM_ConfigClockSource+0x170>
 800570e:	2b30      	cmp	r3, #48	; 0x30
 8005710:	d064      	beq.n	80057dc <HAL_TIM_ConfigClockSource+0x15e>
 8005712:	2b30      	cmp	r3, #48	; 0x30
 8005714:	d86b      	bhi.n	80057ee <HAL_TIM_ConfigClockSource+0x170>
 8005716:	2b20      	cmp	r3, #32
 8005718:	d060      	beq.n	80057dc <HAL_TIM_ConfigClockSource+0x15e>
 800571a:	2b20      	cmp	r3, #32
 800571c:	d867      	bhi.n	80057ee <HAL_TIM_ConfigClockSource+0x170>
 800571e:	2b00      	cmp	r3, #0
 8005720:	d05c      	beq.n	80057dc <HAL_TIM_ConfigClockSource+0x15e>
 8005722:	2b10      	cmp	r3, #16
 8005724:	d05a      	beq.n	80057dc <HAL_TIM_ConfigClockSource+0x15e>
 8005726:	e062      	b.n	80057ee <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6818      	ldr	r0, [r3, #0]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	6899      	ldr	r1, [r3, #8]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f000 f9a6 	bl	8005a88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800574a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	609a      	str	r2, [r3, #8]
      break;
 8005754:	e04f      	b.n	80057f6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6818      	ldr	r0, [r3, #0]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	6899      	ldr	r1, [r3, #8]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f000 f98f 	bl	8005a88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005778:	609a      	str	r2, [r3, #8]
      break;
 800577a:	e03c      	b.n	80057f6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6818      	ldr	r0, [r3, #0]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	6859      	ldr	r1, [r3, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	461a      	mov	r2, r3
 800578a:	f000 f903 	bl	8005994 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2150      	movs	r1, #80	; 0x50
 8005794:	4618      	mov	r0, r3
 8005796:	f000 f95c 	bl	8005a52 <TIM_ITRx_SetConfig>
      break;
 800579a:	e02c      	b.n	80057f6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6818      	ldr	r0, [r3, #0]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	6859      	ldr	r1, [r3, #4]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	461a      	mov	r2, r3
 80057aa:	f000 f922 	bl	80059f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2160      	movs	r1, #96	; 0x60
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 f94c 	bl	8005a52 <TIM_ITRx_SetConfig>
      break;
 80057ba:	e01c      	b.n	80057f6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6818      	ldr	r0, [r3, #0]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	6859      	ldr	r1, [r3, #4]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	461a      	mov	r2, r3
 80057ca:	f000 f8e3 	bl	8005994 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2140      	movs	r1, #64	; 0x40
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 f93c 	bl	8005a52 <TIM_ITRx_SetConfig>
      break;
 80057da:	e00c      	b.n	80057f6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4619      	mov	r1, r3
 80057e6:	4610      	mov	r0, r2
 80057e8:	f000 f933 	bl	8005a52 <TIM_ITRx_SetConfig>
      break;
 80057ec:	e003      	b.n	80057f6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	73fb      	strb	r3, [r7, #15]
      break;
 80057f2:	e000      	b.n	80057f6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80057f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005806:	7bfb      	ldrb	r3, [r7, #15]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a40      	ldr	r2, [pc, #256]	; (8005974 <TIM_Base_SetConfig+0x114>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d013      	beq.n	80058a0 <TIM_Base_SetConfig+0x40>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800587e:	d00f      	beq.n	80058a0 <TIM_Base_SetConfig+0x40>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a3d      	ldr	r2, [pc, #244]	; (8005978 <TIM_Base_SetConfig+0x118>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00b      	beq.n	80058a0 <TIM_Base_SetConfig+0x40>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a3c      	ldr	r2, [pc, #240]	; (800597c <TIM_Base_SetConfig+0x11c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d007      	beq.n	80058a0 <TIM_Base_SetConfig+0x40>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a3b      	ldr	r2, [pc, #236]	; (8005980 <TIM_Base_SetConfig+0x120>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d003      	beq.n	80058a0 <TIM_Base_SetConfig+0x40>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a3a      	ldr	r2, [pc, #232]	; (8005984 <TIM_Base_SetConfig+0x124>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d108      	bne.n	80058b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a2f      	ldr	r2, [pc, #188]	; (8005974 <TIM_Base_SetConfig+0x114>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d01f      	beq.n	80058fa <TIM_Base_SetConfig+0x9a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c0:	d01b      	beq.n	80058fa <TIM_Base_SetConfig+0x9a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a2c      	ldr	r2, [pc, #176]	; (8005978 <TIM_Base_SetConfig+0x118>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d017      	beq.n	80058fa <TIM_Base_SetConfig+0x9a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a2b      	ldr	r2, [pc, #172]	; (800597c <TIM_Base_SetConfig+0x11c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d013      	beq.n	80058fa <TIM_Base_SetConfig+0x9a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a2a      	ldr	r2, [pc, #168]	; (8005980 <TIM_Base_SetConfig+0x120>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00f      	beq.n	80058fa <TIM_Base_SetConfig+0x9a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a29      	ldr	r2, [pc, #164]	; (8005984 <TIM_Base_SetConfig+0x124>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00b      	beq.n	80058fa <TIM_Base_SetConfig+0x9a>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a28      	ldr	r2, [pc, #160]	; (8005988 <TIM_Base_SetConfig+0x128>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d007      	beq.n	80058fa <TIM_Base_SetConfig+0x9a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a27      	ldr	r2, [pc, #156]	; (800598c <TIM_Base_SetConfig+0x12c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d003      	beq.n	80058fa <TIM_Base_SetConfig+0x9a>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a26      	ldr	r2, [pc, #152]	; (8005990 <TIM_Base_SetConfig+0x130>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d108      	bne.n	800590c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	4313      	orrs	r3, r2
 800590a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a10      	ldr	r2, [pc, #64]	; (8005974 <TIM_Base_SetConfig+0x114>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d00f      	beq.n	8005958 <TIM_Base_SetConfig+0xf8>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a12      	ldr	r2, [pc, #72]	; (8005984 <TIM_Base_SetConfig+0x124>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d00b      	beq.n	8005958 <TIM_Base_SetConfig+0xf8>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a11      	ldr	r2, [pc, #68]	; (8005988 <TIM_Base_SetConfig+0x128>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d007      	beq.n	8005958 <TIM_Base_SetConfig+0xf8>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a10      	ldr	r2, [pc, #64]	; (800598c <TIM_Base_SetConfig+0x12c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d003      	beq.n	8005958 <TIM_Base_SetConfig+0xf8>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a0f      	ldr	r2, [pc, #60]	; (8005990 <TIM_Base_SetConfig+0x130>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d103      	bne.n	8005960 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	691a      	ldr	r2, [r3, #16]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	615a      	str	r2, [r3, #20]
}
 8005966:	bf00      	nop
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40012c00 	.word	0x40012c00
 8005978:	40000400 	.word	0x40000400
 800597c:	40000800 	.word	0x40000800
 8005980:	40000c00 	.word	0x40000c00
 8005984:	40013400 	.word	0x40013400
 8005988:	40014000 	.word	0x40014000
 800598c:	40014400 	.word	0x40014400
 8005990:	40014800 	.word	0x40014800

08005994 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	f023 0201 	bic.w	r2, r3, #1
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	011b      	lsls	r3, r3, #4
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f023 030a 	bic.w	r3, r3, #10
 80059d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	621a      	str	r2, [r3, #32]
}
 80059e6:	bf00      	nop
 80059e8:	371c      	adds	r7, #28
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b087      	sub	sp, #28
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	f023 0210 	bic.w	r2, r3, #16
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	031b      	lsls	r3, r3, #12
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	621a      	str	r2, [r3, #32]
}
 8005a46:	bf00      	nop
 8005a48:	371c      	adds	r7, #28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b085      	sub	sp, #20
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f043 0307 	orr.w	r3, r3, #7
 8005a74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	609a      	str	r2, [r3, #8]
}
 8005a7c:	bf00      	nop
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
 8005a94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	021a      	lsls	r2, r3, #8
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	609a      	str	r2, [r3, #8]
}
 8005abc:	bf00      	nop
 8005abe:	371c      	adds	r7, #28
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005adc:	2302      	movs	r3, #2
 8005ade:	e068      	b.n	8005bb2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a2e      	ldr	r2, [pc, #184]	; (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d004      	beq.n	8005b14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a2d      	ldr	r2, [pc, #180]	; (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d108      	bne.n	8005b26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a1e      	ldr	r2, [pc, #120]	; (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d01d      	beq.n	8005b86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b52:	d018      	beq.n	8005b86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a1b      	ldr	r2, [pc, #108]	; (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d013      	beq.n	8005b86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a1a      	ldr	r2, [pc, #104]	; (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d00e      	beq.n	8005b86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a18      	ldr	r2, [pc, #96]	; (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d009      	beq.n	8005b86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a13      	ldr	r2, [pc, #76]	; (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d004      	beq.n	8005b86 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a14      	ldr	r2, [pc, #80]	; (8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d10c      	bne.n	8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	40012c00 	.word	0x40012c00
 8005bc4:	40013400 	.word	0x40013400
 8005bc8:	40000400 	.word	0x40000400
 8005bcc:	40000800 	.word	0x40000800
 8005bd0:	40000c00 	.word	0x40000c00
 8005bd4:	40014000 	.word	0x40014000

08005bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e040      	b.n	8005ca8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d106      	bne.n	8005c3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7fb fcbc 	bl	80015b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2224      	movs	r2, #36	; 0x24
 8005c40:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 0201 	bic.w	r2, r2, #1
 8005c50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fb2e 	bl	80062b4 <UART_SetConfig>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d101      	bne.n	8005c62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e022      	b.n	8005ca8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fdda 	bl	8006824 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689a      	ldr	r2, [r3, #8]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0201 	orr.w	r2, r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fe61 	bl	8006968 <UART_CheckIdleState>
 8005ca6:	4603      	mov	r3, r0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b0ba      	sub	sp, #232	; 0xe8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005cd6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005cda:	f640 030f 	movw	r3, #2063	; 0x80f
 8005cde:	4013      	ands	r3, r2
 8005ce0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005ce4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d115      	bne.n	8005d18 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cf0:	f003 0320 	and.w	r3, r3, #32
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00f      	beq.n	8005d18 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cfc:	f003 0320 	and.w	r3, r3, #32
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d009      	beq.n	8005d18 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 82a6 	beq.w	800625a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	4798      	blx	r3
      }
      return;
 8005d16:	e2a0      	b.n	800625a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005d18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 8117 	beq.w	8005f50 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005d22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d106      	bne.n	8005d3c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005d2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005d32:	4b85      	ldr	r3, [pc, #532]	; (8005f48 <HAL_UART_IRQHandler+0x298>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 810a 	beq.w	8005f50 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d011      	beq.n	8005d6c <HAL_UART_IRQHandler+0xbc>
 8005d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00b      	beq.n	8005d6c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d62:	f043 0201 	orr.w	r2, r3, #1
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d011      	beq.n	8005d9c <HAL_UART_IRQHandler+0xec>
 8005d78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00b      	beq.n	8005d9c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2202      	movs	r2, #2
 8005d8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d92:	f043 0204 	orr.w	r2, r3, #4
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d011      	beq.n	8005dcc <HAL_UART_IRQHandler+0x11c>
 8005da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00b      	beq.n	8005dcc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2204      	movs	r2, #4
 8005dba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dc2:	f043 0202 	orr.w	r2, r3, #2
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd0:	f003 0308 	and.w	r3, r3, #8
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d017      	beq.n	8005e08 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ddc:	f003 0320 	and.w	r3, r3, #32
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d105      	bne.n	8005df0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005de4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005de8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00b      	beq.n	8005e08 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2208      	movs	r2, #8
 8005df6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dfe:	f043 0208 	orr.w	r2, r3, #8
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d012      	beq.n	8005e3a <HAL_UART_IRQHandler+0x18a>
 8005e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00c      	beq.n	8005e3a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e30:	f043 0220 	orr.w	r2, r3, #32
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 820c 	beq.w	800625e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e4a:	f003 0320 	and.w	r3, r3, #32
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00d      	beq.n	8005e6e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d007      	beq.n	8005e6e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e82:	2b40      	cmp	r3, #64	; 0x40
 8005e84:	d005      	beq.n	8005e92 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d04f      	beq.n	8005f32 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fe75 	bl	8006b82 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea2:	2b40      	cmp	r3, #64	; 0x40
 8005ea4:	d141      	bne.n	8005f2a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3308      	adds	r3, #8
 8005eac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005eb4:	e853 3f00 	ldrex	r3, [r3]
 8005eb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ebc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	3308      	adds	r3, #8
 8005ece:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ed2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ed6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ede:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005eea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1d9      	bne.n	8005ea6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d013      	beq.n	8005f22 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efe:	4a13      	ldr	r2, [pc, #76]	; (8005f4c <HAL_UART_IRQHandler+0x29c>)
 8005f00:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fc fcdc 	bl	80028c4 <HAL_DMA_Abort_IT>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d017      	beq.n	8005f42 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005f1c:	4610      	mov	r0, r2
 8005f1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f20:	e00f      	b.n	8005f42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f9b0 	bl	8006288 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f28:	e00b      	b.n	8005f42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f9ac 	bl	8006288 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f30:	e007      	b.n	8005f42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f9a8 	bl	8006288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005f40:	e18d      	b.n	800625e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f42:	bf00      	nop
    return;
 8005f44:	e18b      	b.n	800625e <HAL_UART_IRQHandler+0x5ae>
 8005f46:	bf00      	nop
 8005f48:	04000120 	.word	0x04000120
 8005f4c:	08006c49 	.word	0x08006c49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	f040 8146 	bne.w	80061e6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f5e:	f003 0310 	and.w	r3, r3, #16
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 813f 	beq.w	80061e6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f6c:	f003 0310 	and.w	r3, r3, #16
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 8138 	beq.w	80061e6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2210      	movs	r2, #16
 8005f7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f88:	2b40      	cmp	r3, #64	; 0x40
 8005f8a:	f040 80b4 	bne.w	80060f6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f9a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 815f 	beq.w	8006262 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005faa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	f080 8157 	bcs.w	8006262 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0320 	and.w	r3, r3, #32
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f040 8085 	bne.w	80060da <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fdc:	e853 3f00 	ldrex	r3, [r3]
 8005fe0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005fe4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ffa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ffe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006002:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006006:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800600a:	e841 2300 	strex	r3, r2, [r1]
 800600e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006012:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1da      	bne.n	8005fd0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3308      	adds	r3, #8
 8006020:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006024:	e853 3f00 	ldrex	r3, [r3]
 8006028:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800602a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800602c:	f023 0301 	bic.w	r3, r3, #1
 8006030:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3308      	adds	r3, #8
 800603a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800603e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006042:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006044:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006046:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800604a:	e841 2300 	strex	r3, r2, [r1]
 800604e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1e1      	bne.n	800601a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3308      	adds	r3, #8
 800605c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006060:	e853 3f00 	ldrex	r3, [r3]
 8006064:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006068:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800606c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3308      	adds	r3, #8
 8006076:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800607a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800607c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006080:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006082:	e841 2300 	strex	r3, r2, [r1]
 8006086:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1e3      	bne.n	8006056 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2220      	movs	r2, #32
 8006092:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060a2:	e853 3f00 	ldrex	r3, [r3]
 80060a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060aa:	f023 0310 	bic.w	r3, r3, #16
 80060ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	461a      	mov	r2, r3
 80060b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80060be:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060c4:	e841 2300 	strex	r3, r2, [r1]
 80060c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1e4      	bne.n	800609a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7fc fbb7 	bl	8002848 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	4619      	mov	r1, r3
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f8d4 	bl	800629c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060f4:	e0b5      	b.n	8006262 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006102:	b29b      	uxth	r3, r3
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006110:	b29b      	uxth	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	f000 80a7 	beq.w	8006266 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006118:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800611c:	2b00      	cmp	r3, #0
 800611e:	f000 80a2 	beq.w	8006266 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612a:	e853 3f00 	ldrex	r3, [r3]
 800612e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006132:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006136:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006144:	647b      	str	r3, [r7, #68]	; 0x44
 8006146:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006148:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800614a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800614c:	e841 2300 	strex	r3, r2, [r1]
 8006150:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1e4      	bne.n	8006122 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3308      	adds	r3, #8
 800615e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	e853 3f00 	ldrex	r3, [r3]
 8006166:	623b      	str	r3, [r7, #32]
   return(result);
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	f023 0301 	bic.w	r3, r3, #1
 800616e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	3308      	adds	r3, #8
 8006178:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800617c:	633a      	str	r2, [r7, #48]	; 0x30
 800617e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006180:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006184:	e841 2300 	strex	r3, r2, [r1]
 8006188:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1e3      	bne.n	8006158 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2220      	movs	r2, #32
 8006194:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	e853 3f00 	ldrex	r3, [r3]
 80061ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 0310 	bic.w	r3, r3, #16
 80061b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	461a      	mov	r2, r3
 80061c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80061c4:	61fb      	str	r3, [r7, #28]
 80061c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c8:	69b9      	ldr	r1, [r7, #24]
 80061ca:	69fa      	ldr	r2, [r7, #28]
 80061cc:	e841 2300 	strex	r3, r2, [r1]
 80061d0:	617b      	str	r3, [r7, #20]
   return(result);
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1e4      	bne.n	80061a2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061dc:	4619      	mov	r1, r3
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f85c 	bl	800629c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061e4:	e03f      	b.n	8006266 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80061e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00e      	beq.n	8006210 <HAL_UART_IRQHandler+0x560>
 80061f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d008      	beq.n	8006210 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006206:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 fd5d 	bl	8006cc8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800620e:	e02d      	b.n	800626c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00e      	beq.n	800623a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800621c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006224:	2b00      	cmp	r3, #0
 8006226:	d008      	beq.n	800623a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800622c:	2b00      	cmp	r3, #0
 800622e:	d01c      	beq.n	800626a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	4798      	blx	r3
    }
    return;
 8006238:	e017      	b.n	800626a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800623a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800623e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006242:	2b00      	cmp	r3, #0
 8006244:	d012      	beq.n	800626c <HAL_UART_IRQHandler+0x5bc>
 8006246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800624a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00c      	beq.n	800626c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fd0e 	bl	8006c74 <UART_EndTransmit_IT>
    return;
 8006258:	e008      	b.n	800626c <HAL_UART_IRQHandler+0x5bc>
      return;
 800625a:	bf00      	nop
 800625c:	e006      	b.n	800626c <HAL_UART_IRQHandler+0x5bc>
    return;
 800625e:	bf00      	nop
 8006260:	e004      	b.n	800626c <HAL_UART_IRQHandler+0x5bc>
      return;
 8006262:	bf00      	nop
 8006264:	e002      	b.n	800626c <HAL_UART_IRQHandler+0x5bc>
      return;
 8006266:	bf00      	nop
 8006268:	e000      	b.n	800626c <HAL_UART_IRQHandler+0x5bc>
    return;
 800626a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800626c:	37e8      	adds	r7, #232	; 0xe8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop

08006274 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	460b      	mov	r3, r1
 80062a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062b8:	b08a      	sub	sp, #40	; 0x28
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	689a      	ldr	r2, [r3, #8]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	431a      	orrs	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	431a      	orrs	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	69db      	ldr	r3, [r3, #28]
 80062d8:	4313      	orrs	r3, r2
 80062da:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	4ba4      	ldr	r3, [pc, #656]	; (8006574 <UART_SetConfig+0x2c0>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	6812      	ldr	r2, [r2, #0]
 80062ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062ec:	430b      	orrs	r3, r1
 80062ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	68da      	ldr	r2, [r3, #12]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	430a      	orrs	r2, r1
 8006304:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a99      	ldr	r2, [pc, #612]	; (8006578 <UART_SetConfig+0x2c4>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d004      	beq.n	8006320 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800631c:	4313      	orrs	r3, r2
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006330:	430a      	orrs	r2, r1
 8006332:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a90      	ldr	r2, [pc, #576]	; (800657c <UART_SetConfig+0x2c8>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d126      	bne.n	800638c <UART_SetConfig+0xd8>
 800633e:	4b90      	ldr	r3, [pc, #576]	; (8006580 <UART_SetConfig+0x2cc>)
 8006340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006344:	f003 0303 	and.w	r3, r3, #3
 8006348:	2b03      	cmp	r3, #3
 800634a:	d81b      	bhi.n	8006384 <UART_SetConfig+0xd0>
 800634c:	a201      	add	r2, pc, #4	; (adr r2, 8006354 <UART_SetConfig+0xa0>)
 800634e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006352:	bf00      	nop
 8006354:	08006365 	.word	0x08006365
 8006358:	08006375 	.word	0x08006375
 800635c:	0800636d 	.word	0x0800636d
 8006360:	0800637d 	.word	0x0800637d
 8006364:	2301      	movs	r3, #1
 8006366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800636a:	e116      	b.n	800659a <UART_SetConfig+0x2e6>
 800636c:	2302      	movs	r3, #2
 800636e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006372:	e112      	b.n	800659a <UART_SetConfig+0x2e6>
 8006374:	2304      	movs	r3, #4
 8006376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800637a:	e10e      	b.n	800659a <UART_SetConfig+0x2e6>
 800637c:	2308      	movs	r3, #8
 800637e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006382:	e10a      	b.n	800659a <UART_SetConfig+0x2e6>
 8006384:	2310      	movs	r3, #16
 8006386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800638a:	e106      	b.n	800659a <UART_SetConfig+0x2e6>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a7c      	ldr	r2, [pc, #496]	; (8006584 <UART_SetConfig+0x2d0>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d138      	bne.n	8006408 <UART_SetConfig+0x154>
 8006396:	4b7a      	ldr	r3, [pc, #488]	; (8006580 <UART_SetConfig+0x2cc>)
 8006398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639c:	f003 030c 	and.w	r3, r3, #12
 80063a0:	2b0c      	cmp	r3, #12
 80063a2:	d82d      	bhi.n	8006400 <UART_SetConfig+0x14c>
 80063a4:	a201      	add	r2, pc, #4	; (adr r2, 80063ac <UART_SetConfig+0xf8>)
 80063a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063aa:	bf00      	nop
 80063ac:	080063e1 	.word	0x080063e1
 80063b0:	08006401 	.word	0x08006401
 80063b4:	08006401 	.word	0x08006401
 80063b8:	08006401 	.word	0x08006401
 80063bc:	080063f1 	.word	0x080063f1
 80063c0:	08006401 	.word	0x08006401
 80063c4:	08006401 	.word	0x08006401
 80063c8:	08006401 	.word	0x08006401
 80063cc:	080063e9 	.word	0x080063e9
 80063d0:	08006401 	.word	0x08006401
 80063d4:	08006401 	.word	0x08006401
 80063d8:	08006401 	.word	0x08006401
 80063dc:	080063f9 	.word	0x080063f9
 80063e0:	2300      	movs	r3, #0
 80063e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063e6:	e0d8      	b.n	800659a <UART_SetConfig+0x2e6>
 80063e8:	2302      	movs	r3, #2
 80063ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063ee:	e0d4      	b.n	800659a <UART_SetConfig+0x2e6>
 80063f0:	2304      	movs	r3, #4
 80063f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063f6:	e0d0      	b.n	800659a <UART_SetConfig+0x2e6>
 80063f8:	2308      	movs	r3, #8
 80063fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063fe:	e0cc      	b.n	800659a <UART_SetConfig+0x2e6>
 8006400:	2310      	movs	r3, #16
 8006402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006406:	e0c8      	b.n	800659a <UART_SetConfig+0x2e6>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a5e      	ldr	r2, [pc, #376]	; (8006588 <UART_SetConfig+0x2d4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d125      	bne.n	800645e <UART_SetConfig+0x1aa>
 8006412:	4b5b      	ldr	r3, [pc, #364]	; (8006580 <UART_SetConfig+0x2cc>)
 8006414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006418:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800641c:	2b30      	cmp	r3, #48	; 0x30
 800641e:	d016      	beq.n	800644e <UART_SetConfig+0x19a>
 8006420:	2b30      	cmp	r3, #48	; 0x30
 8006422:	d818      	bhi.n	8006456 <UART_SetConfig+0x1a2>
 8006424:	2b20      	cmp	r3, #32
 8006426:	d00a      	beq.n	800643e <UART_SetConfig+0x18a>
 8006428:	2b20      	cmp	r3, #32
 800642a:	d814      	bhi.n	8006456 <UART_SetConfig+0x1a2>
 800642c:	2b00      	cmp	r3, #0
 800642e:	d002      	beq.n	8006436 <UART_SetConfig+0x182>
 8006430:	2b10      	cmp	r3, #16
 8006432:	d008      	beq.n	8006446 <UART_SetConfig+0x192>
 8006434:	e00f      	b.n	8006456 <UART_SetConfig+0x1a2>
 8006436:	2300      	movs	r3, #0
 8006438:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800643c:	e0ad      	b.n	800659a <UART_SetConfig+0x2e6>
 800643e:	2302      	movs	r3, #2
 8006440:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006444:	e0a9      	b.n	800659a <UART_SetConfig+0x2e6>
 8006446:	2304      	movs	r3, #4
 8006448:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800644c:	e0a5      	b.n	800659a <UART_SetConfig+0x2e6>
 800644e:	2308      	movs	r3, #8
 8006450:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006454:	e0a1      	b.n	800659a <UART_SetConfig+0x2e6>
 8006456:	2310      	movs	r3, #16
 8006458:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800645c:	e09d      	b.n	800659a <UART_SetConfig+0x2e6>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a4a      	ldr	r2, [pc, #296]	; (800658c <UART_SetConfig+0x2d8>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d125      	bne.n	80064b4 <UART_SetConfig+0x200>
 8006468:	4b45      	ldr	r3, [pc, #276]	; (8006580 <UART_SetConfig+0x2cc>)
 800646a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800646e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006472:	2bc0      	cmp	r3, #192	; 0xc0
 8006474:	d016      	beq.n	80064a4 <UART_SetConfig+0x1f0>
 8006476:	2bc0      	cmp	r3, #192	; 0xc0
 8006478:	d818      	bhi.n	80064ac <UART_SetConfig+0x1f8>
 800647a:	2b80      	cmp	r3, #128	; 0x80
 800647c:	d00a      	beq.n	8006494 <UART_SetConfig+0x1e0>
 800647e:	2b80      	cmp	r3, #128	; 0x80
 8006480:	d814      	bhi.n	80064ac <UART_SetConfig+0x1f8>
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <UART_SetConfig+0x1d8>
 8006486:	2b40      	cmp	r3, #64	; 0x40
 8006488:	d008      	beq.n	800649c <UART_SetConfig+0x1e8>
 800648a:	e00f      	b.n	80064ac <UART_SetConfig+0x1f8>
 800648c:	2300      	movs	r3, #0
 800648e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006492:	e082      	b.n	800659a <UART_SetConfig+0x2e6>
 8006494:	2302      	movs	r3, #2
 8006496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800649a:	e07e      	b.n	800659a <UART_SetConfig+0x2e6>
 800649c:	2304      	movs	r3, #4
 800649e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064a2:	e07a      	b.n	800659a <UART_SetConfig+0x2e6>
 80064a4:	2308      	movs	r3, #8
 80064a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064aa:	e076      	b.n	800659a <UART_SetConfig+0x2e6>
 80064ac:	2310      	movs	r3, #16
 80064ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064b2:	e072      	b.n	800659a <UART_SetConfig+0x2e6>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a35      	ldr	r2, [pc, #212]	; (8006590 <UART_SetConfig+0x2dc>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d12a      	bne.n	8006514 <UART_SetConfig+0x260>
 80064be:	4b30      	ldr	r3, [pc, #192]	; (8006580 <UART_SetConfig+0x2cc>)
 80064c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064cc:	d01a      	beq.n	8006504 <UART_SetConfig+0x250>
 80064ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064d2:	d81b      	bhi.n	800650c <UART_SetConfig+0x258>
 80064d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064d8:	d00c      	beq.n	80064f4 <UART_SetConfig+0x240>
 80064da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064de:	d815      	bhi.n	800650c <UART_SetConfig+0x258>
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d003      	beq.n	80064ec <UART_SetConfig+0x238>
 80064e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064e8:	d008      	beq.n	80064fc <UART_SetConfig+0x248>
 80064ea:	e00f      	b.n	800650c <UART_SetConfig+0x258>
 80064ec:	2300      	movs	r3, #0
 80064ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064f2:	e052      	b.n	800659a <UART_SetConfig+0x2e6>
 80064f4:	2302      	movs	r3, #2
 80064f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064fa:	e04e      	b.n	800659a <UART_SetConfig+0x2e6>
 80064fc:	2304      	movs	r3, #4
 80064fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006502:	e04a      	b.n	800659a <UART_SetConfig+0x2e6>
 8006504:	2308      	movs	r3, #8
 8006506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800650a:	e046      	b.n	800659a <UART_SetConfig+0x2e6>
 800650c:	2310      	movs	r3, #16
 800650e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006512:	e042      	b.n	800659a <UART_SetConfig+0x2e6>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a17      	ldr	r2, [pc, #92]	; (8006578 <UART_SetConfig+0x2c4>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d13a      	bne.n	8006594 <UART_SetConfig+0x2e0>
 800651e:	4b18      	ldr	r3, [pc, #96]	; (8006580 <UART_SetConfig+0x2cc>)
 8006520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006524:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006528:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800652c:	d01a      	beq.n	8006564 <UART_SetConfig+0x2b0>
 800652e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006532:	d81b      	bhi.n	800656c <UART_SetConfig+0x2b8>
 8006534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006538:	d00c      	beq.n	8006554 <UART_SetConfig+0x2a0>
 800653a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800653e:	d815      	bhi.n	800656c <UART_SetConfig+0x2b8>
 8006540:	2b00      	cmp	r3, #0
 8006542:	d003      	beq.n	800654c <UART_SetConfig+0x298>
 8006544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006548:	d008      	beq.n	800655c <UART_SetConfig+0x2a8>
 800654a:	e00f      	b.n	800656c <UART_SetConfig+0x2b8>
 800654c:	2300      	movs	r3, #0
 800654e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006552:	e022      	b.n	800659a <UART_SetConfig+0x2e6>
 8006554:	2302      	movs	r3, #2
 8006556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800655a:	e01e      	b.n	800659a <UART_SetConfig+0x2e6>
 800655c:	2304      	movs	r3, #4
 800655e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006562:	e01a      	b.n	800659a <UART_SetConfig+0x2e6>
 8006564:	2308      	movs	r3, #8
 8006566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800656a:	e016      	b.n	800659a <UART_SetConfig+0x2e6>
 800656c:	2310      	movs	r3, #16
 800656e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006572:	e012      	b.n	800659a <UART_SetConfig+0x2e6>
 8006574:	efff69f3 	.word	0xefff69f3
 8006578:	40008000 	.word	0x40008000
 800657c:	40013800 	.word	0x40013800
 8006580:	40021000 	.word	0x40021000
 8006584:	40004400 	.word	0x40004400
 8006588:	40004800 	.word	0x40004800
 800658c:	40004c00 	.word	0x40004c00
 8006590:	40005000 	.word	0x40005000
 8006594:	2310      	movs	r3, #16
 8006596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a9f      	ldr	r2, [pc, #636]	; (800681c <UART_SetConfig+0x568>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d17a      	bne.n	800669a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80065a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065a8:	2b08      	cmp	r3, #8
 80065aa:	d824      	bhi.n	80065f6 <UART_SetConfig+0x342>
 80065ac:	a201      	add	r2, pc, #4	; (adr r2, 80065b4 <UART_SetConfig+0x300>)
 80065ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b2:	bf00      	nop
 80065b4:	080065d9 	.word	0x080065d9
 80065b8:	080065f7 	.word	0x080065f7
 80065bc:	080065e1 	.word	0x080065e1
 80065c0:	080065f7 	.word	0x080065f7
 80065c4:	080065e7 	.word	0x080065e7
 80065c8:	080065f7 	.word	0x080065f7
 80065cc:	080065f7 	.word	0x080065f7
 80065d0:	080065f7 	.word	0x080065f7
 80065d4:	080065ef 	.word	0x080065ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065d8:	f7fe f922 	bl	8004820 <HAL_RCC_GetPCLK1Freq>
 80065dc:	61f8      	str	r0, [r7, #28]
        break;
 80065de:	e010      	b.n	8006602 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065e0:	4b8f      	ldr	r3, [pc, #572]	; (8006820 <UART_SetConfig+0x56c>)
 80065e2:	61fb      	str	r3, [r7, #28]
        break;
 80065e4:	e00d      	b.n	8006602 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065e6:	f7fe f883 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 80065ea:	61f8      	str	r0, [r7, #28]
        break;
 80065ec:	e009      	b.n	8006602 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065f2:	61fb      	str	r3, [r7, #28]
        break;
 80065f4:	e005      	b.n	8006602 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80065f6:	2300      	movs	r3, #0
 80065f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006600:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 80fb 	beq.w	8006800 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	4613      	mov	r3, r2
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	4413      	add	r3, r2
 8006614:	69fa      	ldr	r2, [r7, #28]
 8006616:	429a      	cmp	r2, r3
 8006618:	d305      	bcc.n	8006626 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006620:	69fa      	ldr	r2, [r7, #28]
 8006622:	429a      	cmp	r2, r3
 8006624:	d903      	bls.n	800662e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800662c:	e0e8      	b.n	8006800 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	2200      	movs	r2, #0
 8006632:	461c      	mov	r4, r3
 8006634:	4615      	mov	r5, r2
 8006636:	f04f 0200 	mov.w	r2, #0
 800663a:	f04f 0300 	mov.w	r3, #0
 800663e:	022b      	lsls	r3, r5, #8
 8006640:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006644:	0222      	lsls	r2, r4, #8
 8006646:	68f9      	ldr	r1, [r7, #12]
 8006648:	6849      	ldr	r1, [r1, #4]
 800664a:	0849      	lsrs	r1, r1, #1
 800664c:	2000      	movs	r0, #0
 800664e:	4688      	mov	r8, r1
 8006650:	4681      	mov	r9, r0
 8006652:	eb12 0a08 	adds.w	sl, r2, r8
 8006656:	eb43 0b09 	adc.w	fp, r3, r9
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	603b      	str	r3, [r7, #0]
 8006662:	607a      	str	r2, [r7, #4]
 8006664:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006668:	4650      	mov	r0, sl
 800666a:	4659      	mov	r1, fp
 800666c:	f7fa fa9c 	bl	8000ba8 <__aeabi_uldivmod>
 8006670:	4602      	mov	r2, r0
 8006672:	460b      	mov	r3, r1
 8006674:	4613      	mov	r3, r2
 8006676:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800667e:	d308      	bcc.n	8006692 <UART_SetConfig+0x3de>
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006686:	d204      	bcs.n	8006692 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	69ba      	ldr	r2, [r7, #24]
 800668e:	60da      	str	r2, [r3, #12]
 8006690:	e0b6      	b.n	8006800 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006698:	e0b2      	b.n	8006800 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066a2:	d15e      	bne.n	8006762 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80066a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066a8:	2b08      	cmp	r3, #8
 80066aa:	d828      	bhi.n	80066fe <UART_SetConfig+0x44a>
 80066ac:	a201      	add	r2, pc, #4	; (adr r2, 80066b4 <UART_SetConfig+0x400>)
 80066ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b2:	bf00      	nop
 80066b4:	080066d9 	.word	0x080066d9
 80066b8:	080066e1 	.word	0x080066e1
 80066bc:	080066e9 	.word	0x080066e9
 80066c0:	080066ff 	.word	0x080066ff
 80066c4:	080066ef 	.word	0x080066ef
 80066c8:	080066ff 	.word	0x080066ff
 80066cc:	080066ff 	.word	0x080066ff
 80066d0:	080066ff 	.word	0x080066ff
 80066d4:	080066f7 	.word	0x080066f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066d8:	f7fe f8a2 	bl	8004820 <HAL_RCC_GetPCLK1Freq>
 80066dc:	61f8      	str	r0, [r7, #28]
        break;
 80066de:	e014      	b.n	800670a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066e0:	f7fe f8b4 	bl	800484c <HAL_RCC_GetPCLK2Freq>
 80066e4:	61f8      	str	r0, [r7, #28]
        break;
 80066e6:	e010      	b.n	800670a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066e8:	4b4d      	ldr	r3, [pc, #308]	; (8006820 <UART_SetConfig+0x56c>)
 80066ea:	61fb      	str	r3, [r7, #28]
        break;
 80066ec:	e00d      	b.n	800670a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066ee:	f7fd ffff 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 80066f2:	61f8      	str	r0, [r7, #28]
        break;
 80066f4:	e009      	b.n	800670a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066fa:	61fb      	str	r3, [r7, #28]
        break;
 80066fc:	e005      	b.n	800670a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80066fe:	2300      	movs	r3, #0
 8006700:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006708:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d077      	beq.n	8006800 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	005a      	lsls	r2, r3, #1
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	085b      	lsrs	r3, r3, #1
 800671a:	441a      	add	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	fbb2 f3f3 	udiv	r3, r2, r3
 8006724:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	2b0f      	cmp	r3, #15
 800672a:	d916      	bls.n	800675a <UART_SetConfig+0x4a6>
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006732:	d212      	bcs.n	800675a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	b29b      	uxth	r3, r3
 8006738:	f023 030f 	bic.w	r3, r3, #15
 800673c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	085b      	lsrs	r3, r3, #1
 8006742:	b29b      	uxth	r3, r3
 8006744:	f003 0307 	and.w	r3, r3, #7
 8006748:	b29a      	uxth	r2, r3
 800674a:	8afb      	ldrh	r3, [r7, #22]
 800674c:	4313      	orrs	r3, r2
 800674e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	8afa      	ldrh	r2, [r7, #22]
 8006756:	60da      	str	r2, [r3, #12]
 8006758:	e052      	b.n	8006800 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006760:	e04e      	b.n	8006800 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006762:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006766:	2b08      	cmp	r3, #8
 8006768:	d827      	bhi.n	80067ba <UART_SetConfig+0x506>
 800676a:	a201      	add	r2, pc, #4	; (adr r2, 8006770 <UART_SetConfig+0x4bc>)
 800676c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006770:	08006795 	.word	0x08006795
 8006774:	0800679d 	.word	0x0800679d
 8006778:	080067a5 	.word	0x080067a5
 800677c:	080067bb 	.word	0x080067bb
 8006780:	080067ab 	.word	0x080067ab
 8006784:	080067bb 	.word	0x080067bb
 8006788:	080067bb 	.word	0x080067bb
 800678c:	080067bb 	.word	0x080067bb
 8006790:	080067b3 	.word	0x080067b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006794:	f7fe f844 	bl	8004820 <HAL_RCC_GetPCLK1Freq>
 8006798:	61f8      	str	r0, [r7, #28]
        break;
 800679a:	e014      	b.n	80067c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800679c:	f7fe f856 	bl	800484c <HAL_RCC_GetPCLK2Freq>
 80067a0:	61f8      	str	r0, [r7, #28]
        break;
 80067a2:	e010      	b.n	80067c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067a4:	4b1e      	ldr	r3, [pc, #120]	; (8006820 <UART_SetConfig+0x56c>)
 80067a6:	61fb      	str	r3, [r7, #28]
        break;
 80067a8:	e00d      	b.n	80067c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067aa:	f7fd ffa1 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 80067ae:	61f8      	str	r0, [r7, #28]
        break;
 80067b0:	e009      	b.n	80067c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067b6:	61fb      	str	r3, [r7, #28]
        break;
 80067b8:	e005      	b.n	80067c6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80067ba:	2300      	movs	r3, #0
 80067bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80067c4:	bf00      	nop
    }

    if (pclk != 0U)
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d019      	beq.n	8006800 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	085a      	lsrs	r2, r3, #1
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	441a      	add	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	fbb2 f3f3 	udiv	r3, r2, r3
 80067de:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	2b0f      	cmp	r3, #15
 80067e4:	d909      	bls.n	80067fa <UART_SetConfig+0x546>
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ec:	d205      	bcs.n	80067fa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	60da      	str	r2, [r3, #12]
 80067f8:	e002      	b.n	8006800 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800680c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006810:	4618      	mov	r0, r3
 8006812:	3728      	adds	r7, #40	; 0x28
 8006814:	46bd      	mov	sp, r7
 8006816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800681a:	bf00      	nop
 800681c:	40008000 	.word	0x40008000
 8006820:	00f42400 	.word	0x00f42400

08006824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00a      	beq.n	800684e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	430a      	orrs	r2, r1
 800684c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00a      	beq.n	8006870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	430a      	orrs	r2, r1
 800686e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00a      	beq.n	8006892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006896:	f003 0308 	and.w	r3, r3, #8
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00a      	beq.n	80068b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b8:	f003 0310 	and.w	r3, r3, #16
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00a      	beq.n	80068d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	430a      	orrs	r2, r1
 80068d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068da:	f003 0320 	and.w	r3, r3, #32
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00a      	beq.n	80068f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006900:	2b00      	cmp	r3, #0
 8006902:	d01a      	beq.n	800693a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006922:	d10a      	bne.n	800693a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00a      	beq.n	800695c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	430a      	orrs	r2, r1
 800695a:	605a      	str	r2, [r3, #4]
  }
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af02      	add	r7, sp, #8
 800696e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006978:	f7fb fd6c 	bl	8002454 <HAL_GetTick>
 800697c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0308 	and.w	r3, r3, #8
 8006988:	2b08      	cmp	r3, #8
 800698a:	d10e      	bne.n	80069aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800698c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f82d 	bl	80069fa <UART_WaitOnFlagUntilTimeout>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e023      	b.n	80069f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0304 	and.w	r3, r3, #4
 80069b4:	2b04      	cmp	r3, #4
 80069b6:	d10e      	bne.n	80069d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f817 	bl	80069fa <UART_WaitOnFlagUntilTimeout>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e00d      	b.n	80069f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2220      	movs	r2, #32
 80069da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2220      	movs	r2, #32
 80069e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b09c      	sub	sp, #112	; 0x70
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	60f8      	str	r0, [r7, #12]
 8006a02:	60b9      	str	r1, [r7, #8]
 8006a04:	603b      	str	r3, [r7, #0]
 8006a06:	4613      	mov	r3, r2
 8006a08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a0a:	e0a5      	b.n	8006b58 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a12:	f000 80a1 	beq.w	8006b58 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a16:	f7fb fd1d 	bl	8002454 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d302      	bcc.n	8006a2c <UART_WaitOnFlagUntilTimeout+0x32>
 8006a26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d13e      	bne.n	8006aaa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a34:	e853 3f00 	ldrex	r3, [r3]
 8006a38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a40:	667b      	str	r3, [r7, #100]	; 0x64
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	461a      	mov	r2, r3
 8006a48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a4c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a52:	e841 2300 	strex	r3, r2, [r1]
 8006a56:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e6      	bne.n	8006a2c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3308      	adds	r3, #8
 8006a64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a68:	e853 3f00 	ldrex	r3, [r3]
 8006a6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a70:	f023 0301 	bic.w	r3, r3, #1
 8006a74:	663b      	str	r3, [r7, #96]	; 0x60
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3308      	adds	r3, #8
 8006a7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a7e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a80:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a86:	e841 2300 	strex	r3, r2, [r1]
 8006a8a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1e5      	bne.n	8006a5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2220      	movs	r2, #32
 8006a96:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e067      	b.n	8006b7a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0304 	and.w	r3, r3, #4
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d04f      	beq.n	8006b58 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ac6:	d147      	bne.n	8006b58 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ad0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ada:	e853 3f00 	ldrex	r3, [r3]
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ae6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	461a      	mov	r2, r3
 8006aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af0:	637b      	str	r3, [r7, #52]	; 0x34
 8006af2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006af8:	e841 2300 	strex	r3, r2, [r1]
 8006afc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1e6      	bne.n	8006ad2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3308      	adds	r3, #8
 8006b0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	e853 3f00 	ldrex	r3, [r3]
 8006b12:	613b      	str	r3, [r7, #16]
   return(result);
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	f023 0301 	bic.w	r3, r3, #1
 8006b1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	3308      	adds	r3, #8
 8006b22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b24:	623a      	str	r2, [r7, #32]
 8006b26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b28:	69f9      	ldr	r1, [r7, #28]
 8006b2a:	6a3a      	ldr	r2, [r7, #32]
 8006b2c:	e841 2300 	strex	r3, r2, [r1]
 8006b30:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1e5      	bne.n	8006b04 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2220      	movs	r2, #32
 8006b42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2220      	movs	r2, #32
 8006b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e010      	b.n	8006b7a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	69da      	ldr	r2, [r3, #28]
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	4013      	ands	r3, r2
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	bf0c      	ite	eq
 8006b68:	2301      	moveq	r3, #1
 8006b6a:	2300      	movne	r3, #0
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	461a      	mov	r2, r3
 8006b70:	79fb      	ldrb	r3, [r7, #7]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	f43f af4a 	beq.w	8006a0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3770      	adds	r7, #112	; 0x70
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b095      	sub	sp, #84	; 0x54
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b92:	e853 3f00 	ldrex	r3, [r3]
 8006b96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ba8:	643b      	str	r3, [r7, #64]	; 0x40
 8006baa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bb0:	e841 2300 	strex	r3, r2, [r1]
 8006bb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1e6      	bne.n	8006b8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3308      	adds	r3, #8
 8006bc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	e853 3f00 	ldrex	r3, [r3]
 8006bca:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	f023 0301 	bic.w	r3, r3, #1
 8006bd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3308      	adds	r3, #8
 8006bda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006be4:	e841 2300 	strex	r3, r2, [r1]
 8006be8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1e5      	bne.n	8006bbc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d118      	bne.n	8006c2a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	e853 3f00 	ldrex	r3, [r3]
 8006c04:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	f023 0310 	bic.w	r3, r3, #16
 8006c0c:	647b      	str	r3, [r7, #68]	; 0x44
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	461a      	mov	r2, r3
 8006c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c16:	61bb      	str	r3, [r7, #24]
 8006c18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1a:	6979      	ldr	r1, [r7, #20]
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	613b      	str	r3, [r7, #16]
   return(result);
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1e6      	bne.n	8006bf8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006c3c:	bf00      	nop
 8006c3e:	3754      	adds	r7, #84	; 0x54
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f7ff fb0e 	bl	8006288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c6c:	bf00      	nop
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b088      	sub	sp, #32
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	e853 3f00 	ldrex	r3, [r3]
 8006c88:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c90:	61fb      	str	r3, [r7, #28]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	461a      	mov	r2, r3
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	61bb      	str	r3, [r7, #24]
 8006c9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9e:	6979      	ldr	r1, [r7, #20]
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	e841 2300 	strex	r3, r2, [r1]
 8006ca6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1e6      	bne.n	8006c7c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2220      	movs	r2, #32
 8006cb2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7ff fada 	bl	8006274 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cc0:	bf00      	nop
 8006cc2:	3720      	adds	r7, #32
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <__errno>:
 8006cdc:	4b01      	ldr	r3, [pc, #4]	; (8006ce4 <__errno+0x8>)
 8006cde:	6818      	ldr	r0, [r3, #0]
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	20000018 	.word	0x20000018

08006ce8 <__libc_init_array>:
 8006ce8:	b570      	push	{r4, r5, r6, lr}
 8006cea:	4d0d      	ldr	r5, [pc, #52]	; (8006d20 <__libc_init_array+0x38>)
 8006cec:	4c0d      	ldr	r4, [pc, #52]	; (8006d24 <__libc_init_array+0x3c>)
 8006cee:	1b64      	subs	r4, r4, r5
 8006cf0:	10a4      	asrs	r4, r4, #2
 8006cf2:	2600      	movs	r6, #0
 8006cf4:	42a6      	cmp	r6, r4
 8006cf6:	d109      	bne.n	8006d0c <__libc_init_array+0x24>
 8006cf8:	4d0b      	ldr	r5, [pc, #44]	; (8006d28 <__libc_init_array+0x40>)
 8006cfa:	4c0c      	ldr	r4, [pc, #48]	; (8006d2c <__libc_init_array+0x44>)
 8006cfc:	f002 fd4e 	bl	800979c <_init>
 8006d00:	1b64      	subs	r4, r4, r5
 8006d02:	10a4      	asrs	r4, r4, #2
 8006d04:	2600      	movs	r6, #0
 8006d06:	42a6      	cmp	r6, r4
 8006d08:	d105      	bne.n	8006d16 <__libc_init_array+0x2e>
 8006d0a:	bd70      	pop	{r4, r5, r6, pc}
 8006d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d10:	4798      	blx	r3
 8006d12:	3601      	adds	r6, #1
 8006d14:	e7ee      	b.n	8006cf4 <__libc_init_array+0xc>
 8006d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d1a:	4798      	blx	r3
 8006d1c:	3601      	adds	r6, #1
 8006d1e:	e7f2      	b.n	8006d06 <__libc_init_array+0x1e>
 8006d20:	0800a364 	.word	0x0800a364
 8006d24:	0800a364 	.word	0x0800a364
 8006d28:	0800a364 	.word	0x0800a364
 8006d2c:	0800a368 	.word	0x0800a368

08006d30 <memcpy>:
 8006d30:	440a      	add	r2, r1
 8006d32:	4291      	cmp	r1, r2
 8006d34:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d38:	d100      	bne.n	8006d3c <memcpy+0xc>
 8006d3a:	4770      	bx	lr
 8006d3c:	b510      	push	{r4, lr}
 8006d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d46:	4291      	cmp	r1, r2
 8006d48:	d1f9      	bne.n	8006d3e <memcpy+0xe>
 8006d4a:	bd10      	pop	{r4, pc}

08006d4c <memset>:
 8006d4c:	4402      	add	r2, r0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d100      	bne.n	8006d56 <memset+0xa>
 8006d54:	4770      	bx	lr
 8006d56:	f803 1b01 	strb.w	r1, [r3], #1
 8006d5a:	e7f9      	b.n	8006d50 <memset+0x4>

08006d5c <__cvt>:
 8006d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d60:	ec55 4b10 	vmov	r4, r5, d0
 8006d64:	2d00      	cmp	r5, #0
 8006d66:	460e      	mov	r6, r1
 8006d68:	4619      	mov	r1, r3
 8006d6a:	462b      	mov	r3, r5
 8006d6c:	bfbb      	ittet	lt
 8006d6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006d72:	461d      	movlt	r5, r3
 8006d74:	2300      	movge	r3, #0
 8006d76:	232d      	movlt	r3, #45	; 0x2d
 8006d78:	700b      	strb	r3, [r1, #0]
 8006d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006d80:	4691      	mov	r9, r2
 8006d82:	f023 0820 	bic.w	r8, r3, #32
 8006d86:	bfbc      	itt	lt
 8006d88:	4622      	movlt	r2, r4
 8006d8a:	4614      	movlt	r4, r2
 8006d8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d90:	d005      	beq.n	8006d9e <__cvt+0x42>
 8006d92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d96:	d100      	bne.n	8006d9a <__cvt+0x3e>
 8006d98:	3601      	adds	r6, #1
 8006d9a:	2102      	movs	r1, #2
 8006d9c:	e000      	b.n	8006da0 <__cvt+0x44>
 8006d9e:	2103      	movs	r1, #3
 8006da0:	ab03      	add	r3, sp, #12
 8006da2:	9301      	str	r3, [sp, #4]
 8006da4:	ab02      	add	r3, sp, #8
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	ec45 4b10 	vmov	d0, r4, r5
 8006dac:	4653      	mov	r3, sl
 8006dae:	4632      	mov	r2, r6
 8006db0:	f000 fce2 	bl	8007778 <_dtoa_r>
 8006db4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006db8:	4607      	mov	r7, r0
 8006dba:	d102      	bne.n	8006dc2 <__cvt+0x66>
 8006dbc:	f019 0f01 	tst.w	r9, #1
 8006dc0:	d022      	beq.n	8006e08 <__cvt+0xac>
 8006dc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006dc6:	eb07 0906 	add.w	r9, r7, r6
 8006dca:	d110      	bne.n	8006dee <__cvt+0x92>
 8006dcc:	783b      	ldrb	r3, [r7, #0]
 8006dce:	2b30      	cmp	r3, #48	; 0x30
 8006dd0:	d10a      	bne.n	8006de8 <__cvt+0x8c>
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	4629      	mov	r1, r5
 8006dda:	f7f9 fe75 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dde:	b918      	cbnz	r0, 8006de8 <__cvt+0x8c>
 8006de0:	f1c6 0601 	rsb	r6, r6, #1
 8006de4:	f8ca 6000 	str.w	r6, [sl]
 8006de8:	f8da 3000 	ldr.w	r3, [sl]
 8006dec:	4499      	add	r9, r3
 8006dee:	2200      	movs	r2, #0
 8006df0:	2300      	movs	r3, #0
 8006df2:	4620      	mov	r0, r4
 8006df4:	4629      	mov	r1, r5
 8006df6:	f7f9 fe67 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dfa:	b108      	cbz	r0, 8006e00 <__cvt+0xa4>
 8006dfc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e00:	2230      	movs	r2, #48	; 0x30
 8006e02:	9b03      	ldr	r3, [sp, #12]
 8006e04:	454b      	cmp	r3, r9
 8006e06:	d307      	bcc.n	8006e18 <__cvt+0xbc>
 8006e08:	9b03      	ldr	r3, [sp, #12]
 8006e0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e0c:	1bdb      	subs	r3, r3, r7
 8006e0e:	4638      	mov	r0, r7
 8006e10:	6013      	str	r3, [r2, #0]
 8006e12:	b004      	add	sp, #16
 8006e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e18:	1c59      	adds	r1, r3, #1
 8006e1a:	9103      	str	r1, [sp, #12]
 8006e1c:	701a      	strb	r2, [r3, #0]
 8006e1e:	e7f0      	b.n	8006e02 <__cvt+0xa6>

08006e20 <__exponent>:
 8006e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e22:	4603      	mov	r3, r0
 8006e24:	2900      	cmp	r1, #0
 8006e26:	bfb8      	it	lt
 8006e28:	4249      	neglt	r1, r1
 8006e2a:	f803 2b02 	strb.w	r2, [r3], #2
 8006e2e:	bfb4      	ite	lt
 8006e30:	222d      	movlt	r2, #45	; 0x2d
 8006e32:	222b      	movge	r2, #43	; 0x2b
 8006e34:	2909      	cmp	r1, #9
 8006e36:	7042      	strb	r2, [r0, #1]
 8006e38:	dd2a      	ble.n	8006e90 <__exponent+0x70>
 8006e3a:	f10d 0407 	add.w	r4, sp, #7
 8006e3e:	46a4      	mov	ip, r4
 8006e40:	270a      	movs	r7, #10
 8006e42:	46a6      	mov	lr, r4
 8006e44:	460a      	mov	r2, r1
 8006e46:	fb91 f6f7 	sdiv	r6, r1, r7
 8006e4a:	fb07 1516 	mls	r5, r7, r6, r1
 8006e4e:	3530      	adds	r5, #48	; 0x30
 8006e50:	2a63      	cmp	r2, #99	; 0x63
 8006e52:	f104 34ff 	add.w	r4, r4, #4294967295
 8006e56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006e5a:	4631      	mov	r1, r6
 8006e5c:	dcf1      	bgt.n	8006e42 <__exponent+0x22>
 8006e5e:	3130      	adds	r1, #48	; 0x30
 8006e60:	f1ae 0502 	sub.w	r5, lr, #2
 8006e64:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006e68:	1c44      	adds	r4, r0, #1
 8006e6a:	4629      	mov	r1, r5
 8006e6c:	4561      	cmp	r1, ip
 8006e6e:	d30a      	bcc.n	8006e86 <__exponent+0x66>
 8006e70:	f10d 0209 	add.w	r2, sp, #9
 8006e74:	eba2 020e 	sub.w	r2, r2, lr
 8006e78:	4565      	cmp	r5, ip
 8006e7a:	bf88      	it	hi
 8006e7c:	2200      	movhi	r2, #0
 8006e7e:	4413      	add	r3, r2
 8006e80:	1a18      	subs	r0, r3, r0
 8006e82:	b003      	add	sp, #12
 8006e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006e8e:	e7ed      	b.n	8006e6c <__exponent+0x4c>
 8006e90:	2330      	movs	r3, #48	; 0x30
 8006e92:	3130      	adds	r1, #48	; 0x30
 8006e94:	7083      	strb	r3, [r0, #2]
 8006e96:	70c1      	strb	r1, [r0, #3]
 8006e98:	1d03      	adds	r3, r0, #4
 8006e9a:	e7f1      	b.n	8006e80 <__exponent+0x60>

08006e9c <_printf_float>:
 8006e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea0:	ed2d 8b02 	vpush	{d8}
 8006ea4:	b08d      	sub	sp, #52	; 0x34
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006eac:	4616      	mov	r6, r2
 8006eae:	461f      	mov	r7, r3
 8006eb0:	4605      	mov	r5, r0
 8006eb2:	f001 fb45 	bl	8008540 <_localeconv_r>
 8006eb6:	f8d0 a000 	ldr.w	sl, [r0]
 8006eba:	4650      	mov	r0, sl
 8006ebc:	f7f9 f988 	bl	80001d0 <strlen>
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	9305      	str	r3, [sp, #20]
 8006ec8:	f8d8 3000 	ldr.w	r3, [r8]
 8006ecc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006ed0:	3307      	adds	r3, #7
 8006ed2:	f023 0307 	bic.w	r3, r3, #7
 8006ed6:	f103 0208 	add.w	r2, r3, #8
 8006eda:	f8c8 2000 	str.w	r2, [r8]
 8006ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ee6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006eea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006eee:	9307      	str	r3, [sp, #28]
 8006ef0:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ef4:	ee08 0a10 	vmov	s16, r0
 8006ef8:	4b9f      	ldr	r3, [pc, #636]	; (8007178 <_printf_float+0x2dc>)
 8006efa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006efe:	f04f 32ff 	mov.w	r2, #4294967295
 8006f02:	f7f9 fe13 	bl	8000b2c <__aeabi_dcmpun>
 8006f06:	bb88      	cbnz	r0, 8006f6c <_printf_float+0xd0>
 8006f08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f0c:	4b9a      	ldr	r3, [pc, #616]	; (8007178 <_printf_float+0x2dc>)
 8006f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f12:	f7f9 fded 	bl	8000af0 <__aeabi_dcmple>
 8006f16:	bb48      	cbnz	r0, 8006f6c <_printf_float+0xd0>
 8006f18:	2200      	movs	r2, #0
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	4640      	mov	r0, r8
 8006f1e:	4649      	mov	r1, r9
 8006f20:	f7f9 fddc 	bl	8000adc <__aeabi_dcmplt>
 8006f24:	b110      	cbz	r0, 8006f2c <_printf_float+0x90>
 8006f26:	232d      	movs	r3, #45	; 0x2d
 8006f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f2c:	4b93      	ldr	r3, [pc, #588]	; (800717c <_printf_float+0x2e0>)
 8006f2e:	4894      	ldr	r0, [pc, #592]	; (8007180 <_printf_float+0x2e4>)
 8006f30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006f34:	bf94      	ite	ls
 8006f36:	4698      	movls	r8, r3
 8006f38:	4680      	movhi	r8, r0
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	6123      	str	r3, [r4, #16]
 8006f3e:	9b05      	ldr	r3, [sp, #20]
 8006f40:	f023 0204 	bic.w	r2, r3, #4
 8006f44:	6022      	str	r2, [r4, #0]
 8006f46:	f04f 0900 	mov.w	r9, #0
 8006f4a:	9700      	str	r7, [sp, #0]
 8006f4c:	4633      	mov	r3, r6
 8006f4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f50:	4621      	mov	r1, r4
 8006f52:	4628      	mov	r0, r5
 8006f54:	f000 f9d8 	bl	8007308 <_printf_common>
 8006f58:	3001      	adds	r0, #1
 8006f5a:	f040 8090 	bne.w	800707e <_printf_float+0x1e2>
 8006f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f62:	b00d      	add	sp, #52	; 0x34
 8006f64:	ecbd 8b02 	vpop	{d8}
 8006f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f6c:	4642      	mov	r2, r8
 8006f6e:	464b      	mov	r3, r9
 8006f70:	4640      	mov	r0, r8
 8006f72:	4649      	mov	r1, r9
 8006f74:	f7f9 fdda 	bl	8000b2c <__aeabi_dcmpun>
 8006f78:	b140      	cbz	r0, 8006f8c <_printf_float+0xf0>
 8006f7a:	464b      	mov	r3, r9
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	bfbc      	itt	lt
 8006f80:	232d      	movlt	r3, #45	; 0x2d
 8006f82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f86:	487f      	ldr	r0, [pc, #508]	; (8007184 <_printf_float+0x2e8>)
 8006f88:	4b7f      	ldr	r3, [pc, #508]	; (8007188 <_printf_float+0x2ec>)
 8006f8a:	e7d1      	b.n	8006f30 <_printf_float+0x94>
 8006f8c:	6863      	ldr	r3, [r4, #4]
 8006f8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006f92:	9206      	str	r2, [sp, #24]
 8006f94:	1c5a      	adds	r2, r3, #1
 8006f96:	d13f      	bne.n	8007018 <_printf_float+0x17c>
 8006f98:	2306      	movs	r3, #6
 8006f9a:	6063      	str	r3, [r4, #4]
 8006f9c:	9b05      	ldr	r3, [sp, #20]
 8006f9e:	6861      	ldr	r1, [r4, #4]
 8006fa0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	9303      	str	r3, [sp, #12]
 8006fa8:	ab0a      	add	r3, sp, #40	; 0x28
 8006faa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006fae:	ab09      	add	r3, sp, #36	; 0x24
 8006fb0:	ec49 8b10 	vmov	d0, r8, r9
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	6022      	str	r2, [r4, #0]
 8006fb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	f7ff fecd 	bl	8006d5c <__cvt>
 8006fc2:	9b06      	ldr	r3, [sp, #24]
 8006fc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fc6:	2b47      	cmp	r3, #71	; 0x47
 8006fc8:	4680      	mov	r8, r0
 8006fca:	d108      	bne.n	8006fde <_printf_float+0x142>
 8006fcc:	1cc8      	adds	r0, r1, #3
 8006fce:	db02      	blt.n	8006fd6 <_printf_float+0x13a>
 8006fd0:	6863      	ldr	r3, [r4, #4]
 8006fd2:	4299      	cmp	r1, r3
 8006fd4:	dd41      	ble.n	800705a <_printf_float+0x1be>
 8006fd6:	f1ab 0b02 	sub.w	fp, fp, #2
 8006fda:	fa5f fb8b 	uxtb.w	fp, fp
 8006fde:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006fe2:	d820      	bhi.n	8007026 <_printf_float+0x18a>
 8006fe4:	3901      	subs	r1, #1
 8006fe6:	465a      	mov	r2, fp
 8006fe8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006fec:	9109      	str	r1, [sp, #36]	; 0x24
 8006fee:	f7ff ff17 	bl	8006e20 <__exponent>
 8006ff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ff4:	1813      	adds	r3, r2, r0
 8006ff6:	2a01      	cmp	r2, #1
 8006ff8:	4681      	mov	r9, r0
 8006ffa:	6123      	str	r3, [r4, #16]
 8006ffc:	dc02      	bgt.n	8007004 <_printf_float+0x168>
 8006ffe:	6822      	ldr	r2, [r4, #0]
 8007000:	07d2      	lsls	r2, r2, #31
 8007002:	d501      	bpl.n	8007008 <_printf_float+0x16c>
 8007004:	3301      	adds	r3, #1
 8007006:	6123      	str	r3, [r4, #16]
 8007008:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800700c:	2b00      	cmp	r3, #0
 800700e:	d09c      	beq.n	8006f4a <_printf_float+0xae>
 8007010:	232d      	movs	r3, #45	; 0x2d
 8007012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007016:	e798      	b.n	8006f4a <_printf_float+0xae>
 8007018:	9a06      	ldr	r2, [sp, #24]
 800701a:	2a47      	cmp	r2, #71	; 0x47
 800701c:	d1be      	bne.n	8006f9c <_printf_float+0x100>
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1bc      	bne.n	8006f9c <_printf_float+0x100>
 8007022:	2301      	movs	r3, #1
 8007024:	e7b9      	b.n	8006f9a <_printf_float+0xfe>
 8007026:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800702a:	d118      	bne.n	800705e <_printf_float+0x1c2>
 800702c:	2900      	cmp	r1, #0
 800702e:	6863      	ldr	r3, [r4, #4]
 8007030:	dd0b      	ble.n	800704a <_printf_float+0x1ae>
 8007032:	6121      	str	r1, [r4, #16]
 8007034:	b913      	cbnz	r3, 800703c <_printf_float+0x1a0>
 8007036:	6822      	ldr	r2, [r4, #0]
 8007038:	07d0      	lsls	r0, r2, #31
 800703a:	d502      	bpl.n	8007042 <_printf_float+0x1a6>
 800703c:	3301      	adds	r3, #1
 800703e:	440b      	add	r3, r1
 8007040:	6123      	str	r3, [r4, #16]
 8007042:	65a1      	str	r1, [r4, #88]	; 0x58
 8007044:	f04f 0900 	mov.w	r9, #0
 8007048:	e7de      	b.n	8007008 <_printf_float+0x16c>
 800704a:	b913      	cbnz	r3, 8007052 <_printf_float+0x1b6>
 800704c:	6822      	ldr	r2, [r4, #0]
 800704e:	07d2      	lsls	r2, r2, #31
 8007050:	d501      	bpl.n	8007056 <_printf_float+0x1ba>
 8007052:	3302      	adds	r3, #2
 8007054:	e7f4      	b.n	8007040 <_printf_float+0x1a4>
 8007056:	2301      	movs	r3, #1
 8007058:	e7f2      	b.n	8007040 <_printf_float+0x1a4>
 800705a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800705e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007060:	4299      	cmp	r1, r3
 8007062:	db05      	blt.n	8007070 <_printf_float+0x1d4>
 8007064:	6823      	ldr	r3, [r4, #0]
 8007066:	6121      	str	r1, [r4, #16]
 8007068:	07d8      	lsls	r0, r3, #31
 800706a:	d5ea      	bpl.n	8007042 <_printf_float+0x1a6>
 800706c:	1c4b      	adds	r3, r1, #1
 800706e:	e7e7      	b.n	8007040 <_printf_float+0x1a4>
 8007070:	2900      	cmp	r1, #0
 8007072:	bfd4      	ite	le
 8007074:	f1c1 0202 	rsble	r2, r1, #2
 8007078:	2201      	movgt	r2, #1
 800707a:	4413      	add	r3, r2
 800707c:	e7e0      	b.n	8007040 <_printf_float+0x1a4>
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	055a      	lsls	r2, r3, #21
 8007082:	d407      	bmi.n	8007094 <_printf_float+0x1f8>
 8007084:	6923      	ldr	r3, [r4, #16]
 8007086:	4642      	mov	r2, r8
 8007088:	4631      	mov	r1, r6
 800708a:	4628      	mov	r0, r5
 800708c:	47b8      	blx	r7
 800708e:	3001      	adds	r0, #1
 8007090:	d12c      	bne.n	80070ec <_printf_float+0x250>
 8007092:	e764      	b.n	8006f5e <_printf_float+0xc2>
 8007094:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007098:	f240 80e0 	bls.w	800725c <_printf_float+0x3c0>
 800709c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070a0:	2200      	movs	r2, #0
 80070a2:	2300      	movs	r3, #0
 80070a4:	f7f9 fd10 	bl	8000ac8 <__aeabi_dcmpeq>
 80070a8:	2800      	cmp	r0, #0
 80070aa:	d034      	beq.n	8007116 <_printf_float+0x27a>
 80070ac:	4a37      	ldr	r2, [pc, #220]	; (800718c <_printf_float+0x2f0>)
 80070ae:	2301      	movs	r3, #1
 80070b0:	4631      	mov	r1, r6
 80070b2:	4628      	mov	r0, r5
 80070b4:	47b8      	blx	r7
 80070b6:	3001      	adds	r0, #1
 80070b8:	f43f af51 	beq.w	8006f5e <_printf_float+0xc2>
 80070bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070c0:	429a      	cmp	r2, r3
 80070c2:	db02      	blt.n	80070ca <_printf_float+0x22e>
 80070c4:	6823      	ldr	r3, [r4, #0]
 80070c6:	07d8      	lsls	r0, r3, #31
 80070c8:	d510      	bpl.n	80070ec <_printf_float+0x250>
 80070ca:	ee18 3a10 	vmov	r3, s16
 80070ce:	4652      	mov	r2, sl
 80070d0:	4631      	mov	r1, r6
 80070d2:	4628      	mov	r0, r5
 80070d4:	47b8      	blx	r7
 80070d6:	3001      	adds	r0, #1
 80070d8:	f43f af41 	beq.w	8006f5e <_printf_float+0xc2>
 80070dc:	f04f 0800 	mov.w	r8, #0
 80070e0:	f104 091a 	add.w	r9, r4, #26
 80070e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070e6:	3b01      	subs	r3, #1
 80070e8:	4543      	cmp	r3, r8
 80070ea:	dc09      	bgt.n	8007100 <_printf_float+0x264>
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	079b      	lsls	r3, r3, #30
 80070f0:	f100 8105 	bmi.w	80072fe <_printf_float+0x462>
 80070f4:	68e0      	ldr	r0, [r4, #12]
 80070f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070f8:	4298      	cmp	r0, r3
 80070fa:	bfb8      	it	lt
 80070fc:	4618      	movlt	r0, r3
 80070fe:	e730      	b.n	8006f62 <_printf_float+0xc6>
 8007100:	2301      	movs	r3, #1
 8007102:	464a      	mov	r2, r9
 8007104:	4631      	mov	r1, r6
 8007106:	4628      	mov	r0, r5
 8007108:	47b8      	blx	r7
 800710a:	3001      	adds	r0, #1
 800710c:	f43f af27 	beq.w	8006f5e <_printf_float+0xc2>
 8007110:	f108 0801 	add.w	r8, r8, #1
 8007114:	e7e6      	b.n	80070e4 <_printf_float+0x248>
 8007116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007118:	2b00      	cmp	r3, #0
 800711a:	dc39      	bgt.n	8007190 <_printf_float+0x2f4>
 800711c:	4a1b      	ldr	r2, [pc, #108]	; (800718c <_printf_float+0x2f0>)
 800711e:	2301      	movs	r3, #1
 8007120:	4631      	mov	r1, r6
 8007122:	4628      	mov	r0, r5
 8007124:	47b8      	blx	r7
 8007126:	3001      	adds	r0, #1
 8007128:	f43f af19 	beq.w	8006f5e <_printf_float+0xc2>
 800712c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007130:	4313      	orrs	r3, r2
 8007132:	d102      	bne.n	800713a <_printf_float+0x29e>
 8007134:	6823      	ldr	r3, [r4, #0]
 8007136:	07d9      	lsls	r1, r3, #31
 8007138:	d5d8      	bpl.n	80070ec <_printf_float+0x250>
 800713a:	ee18 3a10 	vmov	r3, s16
 800713e:	4652      	mov	r2, sl
 8007140:	4631      	mov	r1, r6
 8007142:	4628      	mov	r0, r5
 8007144:	47b8      	blx	r7
 8007146:	3001      	adds	r0, #1
 8007148:	f43f af09 	beq.w	8006f5e <_printf_float+0xc2>
 800714c:	f04f 0900 	mov.w	r9, #0
 8007150:	f104 0a1a 	add.w	sl, r4, #26
 8007154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007156:	425b      	negs	r3, r3
 8007158:	454b      	cmp	r3, r9
 800715a:	dc01      	bgt.n	8007160 <_printf_float+0x2c4>
 800715c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800715e:	e792      	b.n	8007086 <_printf_float+0x1ea>
 8007160:	2301      	movs	r3, #1
 8007162:	4652      	mov	r2, sl
 8007164:	4631      	mov	r1, r6
 8007166:	4628      	mov	r0, r5
 8007168:	47b8      	blx	r7
 800716a:	3001      	adds	r0, #1
 800716c:	f43f aef7 	beq.w	8006f5e <_printf_float+0xc2>
 8007170:	f109 0901 	add.w	r9, r9, #1
 8007174:	e7ee      	b.n	8007154 <_printf_float+0x2b8>
 8007176:	bf00      	nop
 8007178:	7fefffff 	.word	0x7fefffff
 800717c:	08009f88 	.word	0x08009f88
 8007180:	08009f8c 	.word	0x08009f8c
 8007184:	08009f94 	.word	0x08009f94
 8007188:	08009f90 	.word	0x08009f90
 800718c:	08009f98 	.word	0x08009f98
 8007190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007192:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007194:	429a      	cmp	r2, r3
 8007196:	bfa8      	it	ge
 8007198:	461a      	movge	r2, r3
 800719a:	2a00      	cmp	r2, #0
 800719c:	4691      	mov	r9, r2
 800719e:	dc37      	bgt.n	8007210 <_printf_float+0x374>
 80071a0:	f04f 0b00 	mov.w	fp, #0
 80071a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071a8:	f104 021a 	add.w	r2, r4, #26
 80071ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071ae:	9305      	str	r3, [sp, #20]
 80071b0:	eba3 0309 	sub.w	r3, r3, r9
 80071b4:	455b      	cmp	r3, fp
 80071b6:	dc33      	bgt.n	8007220 <_printf_float+0x384>
 80071b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071bc:	429a      	cmp	r2, r3
 80071be:	db3b      	blt.n	8007238 <_printf_float+0x39c>
 80071c0:	6823      	ldr	r3, [r4, #0]
 80071c2:	07da      	lsls	r2, r3, #31
 80071c4:	d438      	bmi.n	8007238 <_printf_float+0x39c>
 80071c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071c8:	9a05      	ldr	r2, [sp, #20]
 80071ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071cc:	1a9a      	subs	r2, r3, r2
 80071ce:	eba3 0901 	sub.w	r9, r3, r1
 80071d2:	4591      	cmp	r9, r2
 80071d4:	bfa8      	it	ge
 80071d6:	4691      	movge	r9, r2
 80071d8:	f1b9 0f00 	cmp.w	r9, #0
 80071dc:	dc35      	bgt.n	800724a <_printf_float+0x3ae>
 80071de:	f04f 0800 	mov.w	r8, #0
 80071e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071e6:	f104 0a1a 	add.w	sl, r4, #26
 80071ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071ee:	1a9b      	subs	r3, r3, r2
 80071f0:	eba3 0309 	sub.w	r3, r3, r9
 80071f4:	4543      	cmp	r3, r8
 80071f6:	f77f af79 	ble.w	80070ec <_printf_float+0x250>
 80071fa:	2301      	movs	r3, #1
 80071fc:	4652      	mov	r2, sl
 80071fe:	4631      	mov	r1, r6
 8007200:	4628      	mov	r0, r5
 8007202:	47b8      	blx	r7
 8007204:	3001      	adds	r0, #1
 8007206:	f43f aeaa 	beq.w	8006f5e <_printf_float+0xc2>
 800720a:	f108 0801 	add.w	r8, r8, #1
 800720e:	e7ec      	b.n	80071ea <_printf_float+0x34e>
 8007210:	4613      	mov	r3, r2
 8007212:	4631      	mov	r1, r6
 8007214:	4642      	mov	r2, r8
 8007216:	4628      	mov	r0, r5
 8007218:	47b8      	blx	r7
 800721a:	3001      	adds	r0, #1
 800721c:	d1c0      	bne.n	80071a0 <_printf_float+0x304>
 800721e:	e69e      	b.n	8006f5e <_printf_float+0xc2>
 8007220:	2301      	movs	r3, #1
 8007222:	4631      	mov	r1, r6
 8007224:	4628      	mov	r0, r5
 8007226:	9205      	str	r2, [sp, #20]
 8007228:	47b8      	blx	r7
 800722a:	3001      	adds	r0, #1
 800722c:	f43f ae97 	beq.w	8006f5e <_printf_float+0xc2>
 8007230:	9a05      	ldr	r2, [sp, #20]
 8007232:	f10b 0b01 	add.w	fp, fp, #1
 8007236:	e7b9      	b.n	80071ac <_printf_float+0x310>
 8007238:	ee18 3a10 	vmov	r3, s16
 800723c:	4652      	mov	r2, sl
 800723e:	4631      	mov	r1, r6
 8007240:	4628      	mov	r0, r5
 8007242:	47b8      	blx	r7
 8007244:	3001      	adds	r0, #1
 8007246:	d1be      	bne.n	80071c6 <_printf_float+0x32a>
 8007248:	e689      	b.n	8006f5e <_printf_float+0xc2>
 800724a:	9a05      	ldr	r2, [sp, #20]
 800724c:	464b      	mov	r3, r9
 800724e:	4442      	add	r2, r8
 8007250:	4631      	mov	r1, r6
 8007252:	4628      	mov	r0, r5
 8007254:	47b8      	blx	r7
 8007256:	3001      	adds	r0, #1
 8007258:	d1c1      	bne.n	80071de <_printf_float+0x342>
 800725a:	e680      	b.n	8006f5e <_printf_float+0xc2>
 800725c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800725e:	2a01      	cmp	r2, #1
 8007260:	dc01      	bgt.n	8007266 <_printf_float+0x3ca>
 8007262:	07db      	lsls	r3, r3, #31
 8007264:	d538      	bpl.n	80072d8 <_printf_float+0x43c>
 8007266:	2301      	movs	r3, #1
 8007268:	4642      	mov	r2, r8
 800726a:	4631      	mov	r1, r6
 800726c:	4628      	mov	r0, r5
 800726e:	47b8      	blx	r7
 8007270:	3001      	adds	r0, #1
 8007272:	f43f ae74 	beq.w	8006f5e <_printf_float+0xc2>
 8007276:	ee18 3a10 	vmov	r3, s16
 800727a:	4652      	mov	r2, sl
 800727c:	4631      	mov	r1, r6
 800727e:	4628      	mov	r0, r5
 8007280:	47b8      	blx	r7
 8007282:	3001      	adds	r0, #1
 8007284:	f43f ae6b 	beq.w	8006f5e <_printf_float+0xc2>
 8007288:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800728c:	2200      	movs	r2, #0
 800728e:	2300      	movs	r3, #0
 8007290:	f7f9 fc1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007294:	b9d8      	cbnz	r0, 80072ce <_printf_float+0x432>
 8007296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007298:	f108 0201 	add.w	r2, r8, #1
 800729c:	3b01      	subs	r3, #1
 800729e:	4631      	mov	r1, r6
 80072a0:	4628      	mov	r0, r5
 80072a2:	47b8      	blx	r7
 80072a4:	3001      	adds	r0, #1
 80072a6:	d10e      	bne.n	80072c6 <_printf_float+0x42a>
 80072a8:	e659      	b.n	8006f5e <_printf_float+0xc2>
 80072aa:	2301      	movs	r3, #1
 80072ac:	4652      	mov	r2, sl
 80072ae:	4631      	mov	r1, r6
 80072b0:	4628      	mov	r0, r5
 80072b2:	47b8      	blx	r7
 80072b4:	3001      	adds	r0, #1
 80072b6:	f43f ae52 	beq.w	8006f5e <_printf_float+0xc2>
 80072ba:	f108 0801 	add.w	r8, r8, #1
 80072be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072c0:	3b01      	subs	r3, #1
 80072c2:	4543      	cmp	r3, r8
 80072c4:	dcf1      	bgt.n	80072aa <_printf_float+0x40e>
 80072c6:	464b      	mov	r3, r9
 80072c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80072cc:	e6dc      	b.n	8007088 <_printf_float+0x1ec>
 80072ce:	f04f 0800 	mov.w	r8, #0
 80072d2:	f104 0a1a 	add.w	sl, r4, #26
 80072d6:	e7f2      	b.n	80072be <_printf_float+0x422>
 80072d8:	2301      	movs	r3, #1
 80072da:	4642      	mov	r2, r8
 80072dc:	e7df      	b.n	800729e <_printf_float+0x402>
 80072de:	2301      	movs	r3, #1
 80072e0:	464a      	mov	r2, r9
 80072e2:	4631      	mov	r1, r6
 80072e4:	4628      	mov	r0, r5
 80072e6:	47b8      	blx	r7
 80072e8:	3001      	adds	r0, #1
 80072ea:	f43f ae38 	beq.w	8006f5e <_printf_float+0xc2>
 80072ee:	f108 0801 	add.w	r8, r8, #1
 80072f2:	68e3      	ldr	r3, [r4, #12]
 80072f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072f6:	1a5b      	subs	r3, r3, r1
 80072f8:	4543      	cmp	r3, r8
 80072fa:	dcf0      	bgt.n	80072de <_printf_float+0x442>
 80072fc:	e6fa      	b.n	80070f4 <_printf_float+0x258>
 80072fe:	f04f 0800 	mov.w	r8, #0
 8007302:	f104 0919 	add.w	r9, r4, #25
 8007306:	e7f4      	b.n	80072f2 <_printf_float+0x456>

08007308 <_printf_common>:
 8007308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800730c:	4616      	mov	r6, r2
 800730e:	4699      	mov	r9, r3
 8007310:	688a      	ldr	r2, [r1, #8]
 8007312:	690b      	ldr	r3, [r1, #16]
 8007314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007318:	4293      	cmp	r3, r2
 800731a:	bfb8      	it	lt
 800731c:	4613      	movlt	r3, r2
 800731e:	6033      	str	r3, [r6, #0]
 8007320:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007324:	4607      	mov	r7, r0
 8007326:	460c      	mov	r4, r1
 8007328:	b10a      	cbz	r2, 800732e <_printf_common+0x26>
 800732a:	3301      	adds	r3, #1
 800732c:	6033      	str	r3, [r6, #0]
 800732e:	6823      	ldr	r3, [r4, #0]
 8007330:	0699      	lsls	r1, r3, #26
 8007332:	bf42      	ittt	mi
 8007334:	6833      	ldrmi	r3, [r6, #0]
 8007336:	3302      	addmi	r3, #2
 8007338:	6033      	strmi	r3, [r6, #0]
 800733a:	6825      	ldr	r5, [r4, #0]
 800733c:	f015 0506 	ands.w	r5, r5, #6
 8007340:	d106      	bne.n	8007350 <_printf_common+0x48>
 8007342:	f104 0a19 	add.w	sl, r4, #25
 8007346:	68e3      	ldr	r3, [r4, #12]
 8007348:	6832      	ldr	r2, [r6, #0]
 800734a:	1a9b      	subs	r3, r3, r2
 800734c:	42ab      	cmp	r3, r5
 800734e:	dc26      	bgt.n	800739e <_printf_common+0x96>
 8007350:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007354:	1e13      	subs	r3, r2, #0
 8007356:	6822      	ldr	r2, [r4, #0]
 8007358:	bf18      	it	ne
 800735a:	2301      	movne	r3, #1
 800735c:	0692      	lsls	r2, r2, #26
 800735e:	d42b      	bmi.n	80073b8 <_printf_common+0xb0>
 8007360:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007364:	4649      	mov	r1, r9
 8007366:	4638      	mov	r0, r7
 8007368:	47c0      	blx	r8
 800736a:	3001      	adds	r0, #1
 800736c:	d01e      	beq.n	80073ac <_printf_common+0xa4>
 800736e:	6823      	ldr	r3, [r4, #0]
 8007370:	68e5      	ldr	r5, [r4, #12]
 8007372:	6832      	ldr	r2, [r6, #0]
 8007374:	f003 0306 	and.w	r3, r3, #6
 8007378:	2b04      	cmp	r3, #4
 800737a:	bf08      	it	eq
 800737c:	1aad      	subeq	r5, r5, r2
 800737e:	68a3      	ldr	r3, [r4, #8]
 8007380:	6922      	ldr	r2, [r4, #16]
 8007382:	bf0c      	ite	eq
 8007384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007388:	2500      	movne	r5, #0
 800738a:	4293      	cmp	r3, r2
 800738c:	bfc4      	itt	gt
 800738e:	1a9b      	subgt	r3, r3, r2
 8007390:	18ed      	addgt	r5, r5, r3
 8007392:	2600      	movs	r6, #0
 8007394:	341a      	adds	r4, #26
 8007396:	42b5      	cmp	r5, r6
 8007398:	d11a      	bne.n	80073d0 <_printf_common+0xc8>
 800739a:	2000      	movs	r0, #0
 800739c:	e008      	b.n	80073b0 <_printf_common+0xa8>
 800739e:	2301      	movs	r3, #1
 80073a0:	4652      	mov	r2, sl
 80073a2:	4649      	mov	r1, r9
 80073a4:	4638      	mov	r0, r7
 80073a6:	47c0      	blx	r8
 80073a8:	3001      	adds	r0, #1
 80073aa:	d103      	bne.n	80073b4 <_printf_common+0xac>
 80073ac:	f04f 30ff 	mov.w	r0, #4294967295
 80073b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073b4:	3501      	adds	r5, #1
 80073b6:	e7c6      	b.n	8007346 <_printf_common+0x3e>
 80073b8:	18e1      	adds	r1, r4, r3
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	2030      	movs	r0, #48	; 0x30
 80073be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073c2:	4422      	add	r2, r4
 80073c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073cc:	3302      	adds	r3, #2
 80073ce:	e7c7      	b.n	8007360 <_printf_common+0x58>
 80073d0:	2301      	movs	r3, #1
 80073d2:	4622      	mov	r2, r4
 80073d4:	4649      	mov	r1, r9
 80073d6:	4638      	mov	r0, r7
 80073d8:	47c0      	blx	r8
 80073da:	3001      	adds	r0, #1
 80073dc:	d0e6      	beq.n	80073ac <_printf_common+0xa4>
 80073de:	3601      	adds	r6, #1
 80073e0:	e7d9      	b.n	8007396 <_printf_common+0x8e>
	...

080073e4 <_printf_i>:
 80073e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073e8:	7e0f      	ldrb	r7, [r1, #24]
 80073ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073ec:	2f78      	cmp	r7, #120	; 0x78
 80073ee:	4691      	mov	r9, r2
 80073f0:	4680      	mov	r8, r0
 80073f2:	460c      	mov	r4, r1
 80073f4:	469a      	mov	sl, r3
 80073f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073fa:	d807      	bhi.n	800740c <_printf_i+0x28>
 80073fc:	2f62      	cmp	r7, #98	; 0x62
 80073fe:	d80a      	bhi.n	8007416 <_printf_i+0x32>
 8007400:	2f00      	cmp	r7, #0
 8007402:	f000 80d8 	beq.w	80075b6 <_printf_i+0x1d2>
 8007406:	2f58      	cmp	r7, #88	; 0x58
 8007408:	f000 80a3 	beq.w	8007552 <_printf_i+0x16e>
 800740c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007414:	e03a      	b.n	800748c <_printf_i+0xa8>
 8007416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800741a:	2b15      	cmp	r3, #21
 800741c:	d8f6      	bhi.n	800740c <_printf_i+0x28>
 800741e:	a101      	add	r1, pc, #4	; (adr r1, 8007424 <_printf_i+0x40>)
 8007420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007424:	0800747d 	.word	0x0800747d
 8007428:	08007491 	.word	0x08007491
 800742c:	0800740d 	.word	0x0800740d
 8007430:	0800740d 	.word	0x0800740d
 8007434:	0800740d 	.word	0x0800740d
 8007438:	0800740d 	.word	0x0800740d
 800743c:	08007491 	.word	0x08007491
 8007440:	0800740d 	.word	0x0800740d
 8007444:	0800740d 	.word	0x0800740d
 8007448:	0800740d 	.word	0x0800740d
 800744c:	0800740d 	.word	0x0800740d
 8007450:	0800759d 	.word	0x0800759d
 8007454:	080074c1 	.word	0x080074c1
 8007458:	0800757f 	.word	0x0800757f
 800745c:	0800740d 	.word	0x0800740d
 8007460:	0800740d 	.word	0x0800740d
 8007464:	080075bf 	.word	0x080075bf
 8007468:	0800740d 	.word	0x0800740d
 800746c:	080074c1 	.word	0x080074c1
 8007470:	0800740d 	.word	0x0800740d
 8007474:	0800740d 	.word	0x0800740d
 8007478:	08007587 	.word	0x08007587
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	1d1a      	adds	r2, r3, #4
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	602a      	str	r2, [r5, #0]
 8007484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800748c:	2301      	movs	r3, #1
 800748e:	e0a3      	b.n	80075d8 <_printf_i+0x1f4>
 8007490:	6820      	ldr	r0, [r4, #0]
 8007492:	6829      	ldr	r1, [r5, #0]
 8007494:	0606      	lsls	r6, r0, #24
 8007496:	f101 0304 	add.w	r3, r1, #4
 800749a:	d50a      	bpl.n	80074b2 <_printf_i+0xce>
 800749c:	680e      	ldr	r6, [r1, #0]
 800749e:	602b      	str	r3, [r5, #0]
 80074a0:	2e00      	cmp	r6, #0
 80074a2:	da03      	bge.n	80074ac <_printf_i+0xc8>
 80074a4:	232d      	movs	r3, #45	; 0x2d
 80074a6:	4276      	negs	r6, r6
 80074a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074ac:	485e      	ldr	r0, [pc, #376]	; (8007628 <_printf_i+0x244>)
 80074ae:	230a      	movs	r3, #10
 80074b0:	e019      	b.n	80074e6 <_printf_i+0x102>
 80074b2:	680e      	ldr	r6, [r1, #0]
 80074b4:	602b      	str	r3, [r5, #0]
 80074b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074ba:	bf18      	it	ne
 80074bc:	b236      	sxthne	r6, r6
 80074be:	e7ef      	b.n	80074a0 <_printf_i+0xbc>
 80074c0:	682b      	ldr	r3, [r5, #0]
 80074c2:	6820      	ldr	r0, [r4, #0]
 80074c4:	1d19      	adds	r1, r3, #4
 80074c6:	6029      	str	r1, [r5, #0]
 80074c8:	0601      	lsls	r1, r0, #24
 80074ca:	d501      	bpl.n	80074d0 <_printf_i+0xec>
 80074cc:	681e      	ldr	r6, [r3, #0]
 80074ce:	e002      	b.n	80074d6 <_printf_i+0xf2>
 80074d0:	0646      	lsls	r6, r0, #25
 80074d2:	d5fb      	bpl.n	80074cc <_printf_i+0xe8>
 80074d4:	881e      	ldrh	r6, [r3, #0]
 80074d6:	4854      	ldr	r0, [pc, #336]	; (8007628 <_printf_i+0x244>)
 80074d8:	2f6f      	cmp	r7, #111	; 0x6f
 80074da:	bf0c      	ite	eq
 80074dc:	2308      	moveq	r3, #8
 80074de:	230a      	movne	r3, #10
 80074e0:	2100      	movs	r1, #0
 80074e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074e6:	6865      	ldr	r5, [r4, #4]
 80074e8:	60a5      	str	r5, [r4, #8]
 80074ea:	2d00      	cmp	r5, #0
 80074ec:	bfa2      	ittt	ge
 80074ee:	6821      	ldrge	r1, [r4, #0]
 80074f0:	f021 0104 	bicge.w	r1, r1, #4
 80074f4:	6021      	strge	r1, [r4, #0]
 80074f6:	b90e      	cbnz	r6, 80074fc <_printf_i+0x118>
 80074f8:	2d00      	cmp	r5, #0
 80074fa:	d04d      	beq.n	8007598 <_printf_i+0x1b4>
 80074fc:	4615      	mov	r5, r2
 80074fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8007502:	fb03 6711 	mls	r7, r3, r1, r6
 8007506:	5dc7      	ldrb	r7, [r0, r7]
 8007508:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800750c:	4637      	mov	r7, r6
 800750e:	42bb      	cmp	r3, r7
 8007510:	460e      	mov	r6, r1
 8007512:	d9f4      	bls.n	80074fe <_printf_i+0x11a>
 8007514:	2b08      	cmp	r3, #8
 8007516:	d10b      	bne.n	8007530 <_printf_i+0x14c>
 8007518:	6823      	ldr	r3, [r4, #0]
 800751a:	07de      	lsls	r6, r3, #31
 800751c:	d508      	bpl.n	8007530 <_printf_i+0x14c>
 800751e:	6923      	ldr	r3, [r4, #16]
 8007520:	6861      	ldr	r1, [r4, #4]
 8007522:	4299      	cmp	r1, r3
 8007524:	bfde      	ittt	le
 8007526:	2330      	movle	r3, #48	; 0x30
 8007528:	f805 3c01 	strble.w	r3, [r5, #-1]
 800752c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007530:	1b52      	subs	r2, r2, r5
 8007532:	6122      	str	r2, [r4, #16]
 8007534:	f8cd a000 	str.w	sl, [sp]
 8007538:	464b      	mov	r3, r9
 800753a:	aa03      	add	r2, sp, #12
 800753c:	4621      	mov	r1, r4
 800753e:	4640      	mov	r0, r8
 8007540:	f7ff fee2 	bl	8007308 <_printf_common>
 8007544:	3001      	adds	r0, #1
 8007546:	d14c      	bne.n	80075e2 <_printf_i+0x1fe>
 8007548:	f04f 30ff 	mov.w	r0, #4294967295
 800754c:	b004      	add	sp, #16
 800754e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007552:	4835      	ldr	r0, [pc, #212]	; (8007628 <_printf_i+0x244>)
 8007554:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007558:	6829      	ldr	r1, [r5, #0]
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007560:	6029      	str	r1, [r5, #0]
 8007562:	061d      	lsls	r5, r3, #24
 8007564:	d514      	bpl.n	8007590 <_printf_i+0x1ac>
 8007566:	07df      	lsls	r7, r3, #31
 8007568:	bf44      	itt	mi
 800756a:	f043 0320 	orrmi.w	r3, r3, #32
 800756e:	6023      	strmi	r3, [r4, #0]
 8007570:	b91e      	cbnz	r6, 800757a <_printf_i+0x196>
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	f023 0320 	bic.w	r3, r3, #32
 8007578:	6023      	str	r3, [r4, #0]
 800757a:	2310      	movs	r3, #16
 800757c:	e7b0      	b.n	80074e0 <_printf_i+0xfc>
 800757e:	6823      	ldr	r3, [r4, #0]
 8007580:	f043 0320 	orr.w	r3, r3, #32
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	2378      	movs	r3, #120	; 0x78
 8007588:	4828      	ldr	r0, [pc, #160]	; (800762c <_printf_i+0x248>)
 800758a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800758e:	e7e3      	b.n	8007558 <_printf_i+0x174>
 8007590:	0659      	lsls	r1, r3, #25
 8007592:	bf48      	it	mi
 8007594:	b2b6      	uxthmi	r6, r6
 8007596:	e7e6      	b.n	8007566 <_printf_i+0x182>
 8007598:	4615      	mov	r5, r2
 800759a:	e7bb      	b.n	8007514 <_printf_i+0x130>
 800759c:	682b      	ldr	r3, [r5, #0]
 800759e:	6826      	ldr	r6, [r4, #0]
 80075a0:	6961      	ldr	r1, [r4, #20]
 80075a2:	1d18      	adds	r0, r3, #4
 80075a4:	6028      	str	r0, [r5, #0]
 80075a6:	0635      	lsls	r5, r6, #24
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	d501      	bpl.n	80075b0 <_printf_i+0x1cc>
 80075ac:	6019      	str	r1, [r3, #0]
 80075ae:	e002      	b.n	80075b6 <_printf_i+0x1d2>
 80075b0:	0670      	lsls	r0, r6, #25
 80075b2:	d5fb      	bpl.n	80075ac <_printf_i+0x1c8>
 80075b4:	8019      	strh	r1, [r3, #0]
 80075b6:	2300      	movs	r3, #0
 80075b8:	6123      	str	r3, [r4, #16]
 80075ba:	4615      	mov	r5, r2
 80075bc:	e7ba      	b.n	8007534 <_printf_i+0x150>
 80075be:	682b      	ldr	r3, [r5, #0]
 80075c0:	1d1a      	adds	r2, r3, #4
 80075c2:	602a      	str	r2, [r5, #0]
 80075c4:	681d      	ldr	r5, [r3, #0]
 80075c6:	6862      	ldr	r2, [r4, #4]
 80075c8:	2100      	movs	r1, #0
 80075ca:	4628      	mov	r0, r5
 80075cc:	f7f8 fe08 	bl	80001e0 <memchr>
 80075d0:	b108      	cbz	r0, 80075d6 <_printf_i+0x1f2>
 80075d2:	1b40      	subs	r0, r0, r5
 80075d4:	6060      	str	r0, [r4, #4]
 80075d6:	6863      	ldr	r3, [r4, #4]
 80075d8:	6123      	str	r3, [r4, #16]
 80075da:	2300      	movs	r3, #0
 80075dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075e0:	e7a8      	b.n	8007534 <_printf_i+0x150>
 80075e2:	6923      	ldr	r3, [r4, #16]
 80075e4:	462a      	mov	r2, r5
 80075e6:	4649      	mov	r1, r9
 80075e8:	4640      	mov	r0, r8
 80075ea:	47d0      	blx	sl
 80075ec:	3001      	adds	r0, #1
 80075ee:	d0ab      	beq.n	8007548 <_printf_i+0x164>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	079b      	lsls	r3, r3, #30
 80075f4:	d413      	bmi.n	800761e <_printf_i+0x23a>
 80075f6:	68e0      	ldr	r0, [r4, #12]
 80075f8:	9b03      	ldr	r3, [sp, #12]
 80075fa:	4298      	cmp	r0, r3
 80075fc:	bfb8      	it	lt
 80075fe:	4618      	movlt	r0, r3
 8007600:	e7a4      	b.n	800754c <_printf_i+0x168>
 8007602:	2301      	movs	r3, #1
 8007604:	4632      	mov	r2, r6
 8007606:	4649      	mov	r1, r9
 8007608:	4640      	mov	r0, r8
 800760a:	47d0      	blx	sl
 800760c:	3001      	adds	r0, #1
 800760e:	d09b      	beq.n	8007548 <_printf_i+0x164>
 8007610:	3501      	adds	r5, #1
 8007612:	68e3      	ldr	r3, [r4, #12]
 8007614:	9903      	ldr	r1, [sp, #12]
 8007616:	1a5b      	subs	r3, r3, r1
 8007618:	42ab      	cmp	r3, r5
 800761a:	dcf2      	bgt.n	8007602 <_printf_i+0x21e>
 800761c:	e7eb      	b.n	80075f6 <_printf_i+0x212>
 800761e:	2500      	movs	r5, #0
 8007620:	f104 0619 	add.w	r6, r4, #25
 8007624:	e7f5      	b.n	8007612 <_printf_i+0x22e>
 8007626:	bf00      	nop
 8007628:	08009f9a 	.word	0x08009f9a
 800762c:	08009fab 	.word	0x08009fab

08007630 <iprintf>:
 8007630:	b40f      	push	{r0, r1, r2, r3}
 8007632:	4b0a      	ldr	r3, [pc, #40]	; (800765c <iprintf+0x2c>)
 8007634:	b513      	push	{r0, r1, r4, lr}
 8007636:	681c      	ldr	r4, [r3, #0]
 8007638:	b124      	cbz	r4, 8007644 <iprintf+0x14>
 800763a:	69a3      	ldr	r3, [r4, #24]
 800763c:	b913      	cbnz	r3, 8007644 <iprintf+0x14>
 800763e:	4620      	mov	r0, r4
 8007640:	f000 fee0 	bl	8008404 <__sinit>
 8007644:	ab05      	add	r3, sp, #20
 8007646:	9a04      	ldr	r2, [sp, #16]
 8007648:	68a1      	ldr	r1, [r4, #8]
 800764a:	9301      	str	r3, [sp, #4]
 800764c:	4620      	mov	r0, r4
 800764e:	f001 fc2b 	bl	8008ea8 <_vfiprintf_r>
 8007652:	b002      	add	sp, #8
 8007654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007658:	b004      	add	sp, #16
 800765a:	4770      	bx	lr
 800765c:	20000018 	.word	0x20000018

08007660 <quorem>:
 8007660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007664:	6903      	ldr	r3, [r0, #16]
 8007666:	690c      	ldr	r4, [r1, #16]
 8007668:	42a3      	cmp	r3, r4
 800766a:	4607      	mov	r7, r0
 800766c:	f2c0 8081 	blt.w	8007772 <quorem+0x112>
 8007670:	3c01      	subs	r4, #1
 8007672:	f101 0814 	add.w	r8, r1, #20
 8007676:	f100 0514 	add.w	r5, r0, #20
 800767a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800767e:	9301      	str	r3, [sp, #4]
 8007680:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007684:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007688:	3301      	adds	r3, #1
 800768a:	429a      	cmp	r2, r3
 800768c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007690:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007694:	fbb2 f6f3 	udiv	r6, r2, r3
 8007698:	d331      	bcc.n	80076fe <quorem+0x9e>
 800769a:	f04f 0e00 	mov.w	lr, #0
 800769e:	4640      	mov	r0, r8
 80076a0:	46ac      	mov	ip, r5
 80076a2:	46f2      	mov	sl, lr
 80076a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80076a8:	b293      	uxth	r3, r2
 80076aa:	fb06 e303 	mla	r3, r6, r3, lr
 80076ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	ebaa 0303 	sub.w	r3, sl, r3
 80076b8:	f8dc a000 	ldr.w	sl, [ip]
 80076bc:	0c12      	lsrs	r2, r2, #16
 80076be:	fa13 f38a 	uxtah	r3, r3, sl
 80076c2:	fb06 e202 	mla	r2, r6, r2, lr
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	9b00      	ldr	r3, [sp, #0]
 80076ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076ce:	b292      	uxth	r2, r2
 80076d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80076d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076d8:	f8bd 3000 	ldrh.w	r3, [sp]
 80076dc:	4581      	cmp	r9, r0
 80076de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076e2:	f84c 3b04 	str.w	r3, [ip], #4
 80076e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076ea:	d2db      	bcs.n	80076a4 <quorem+0x44>
 80076ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80076f0:	b92b      	cbnz	r3, 80076fe <quorem+0x9e>
 80076f2:	9b01      	ldr	r3, [sp, #4]
 80076f4:	3b04      	subs	r3, #4
 80076f6:	429d      	cmp	r5, r3
 80076f8:	461a      	mov	r2, r3
 80076fa:	d32e      	bcc.n	800775a <quorem+0xfa>
 80076fc:	613c      	str	r4, [r7, #16]
 80076fe:	4638      	mov	r0, r7
 8007700:	f001 f9b0 	bl	8008a64 <__mcmp>
 8007704:	2800      	cmp	r0, #0
 8007706:	db24      	blt.n	8007752 <quorem+0xf2>
 8007708:	3601      	adds	r6, #1
 800770a:	4628      	mov	r0, r5
 800770c:	f04f 0c00 	mov.w	ip, #0
 8007710:	f858 2b04 	ldr.w	r2, [r8], #4
 8007714:	f8d0 e000 	ldr.w	lr, [r0]
 8007718:	b293      	uxth	r3, r2
 800771a:	ebac 0303 	sub.w	r3, ip, r3
 800771e:	0c12      	lsrs	r2, r2, #16
 8007720:	fa13 f38e 	uxtah	r3, r3, lr
 8007724:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007728:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800772c:	b29b      	uxth	r3, r3
 800772e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007732:	45c1      	cmp	r9, r8
 8007734:	f840 3b04 	str.w	r3, [r0], #4
 8007738:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800773c:	d2e8      	bcs.n	8007710 <quorem+0xb0>
 800773e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007742:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007746:	b922      	cbnz	r2, 8007752 <quorem+0xf2>
 8007748:	3b04      	subs	r3, #4
 800774a:	429d      	cmp	r5, r3
 800774c:	461a      	mov	r2, r3
 800774e:	d30a      	bcc.n	8007766 <quorem+0x106>
 8007750:	613c      	str	r4, [r7, #16]
 8007752:	4630      	mov	r0, r6
 8007754:	b003      	add	sp, #12
 8007756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800775a:	6812      	ldr	r2, [r2, #0]
 800775c:	3b04      	subs	r3, #4
 800775e:	2a00      	cmp	r2, #0
 8007760:	d1cc      	bne.n	80076fc <quorem+0x9c>
 8007762:	3c01      	subs	r4, #1
 8007764:	e7c7      	b.n	80076f6 <quorem+0x96>
 8007766:	6812      	ldr	r2, [r2, #0]
 8007768:	3b04      	subs	r3, #4
 800776a:	2a00      	cmp	r2, #0
 800776c:	d1f0      	bne.n	8007750 <quorem+0xf0>
 800776e:	3c01      	subs	r4, #1
 8007770:	e7eb      	b.n	800774a <quorem+0xea>
 8007772:	2000      	movs	r0, #0
 8007774:	e7ee      	b.n	8007754 <quorem+0xf4>
	...

08007778 <_dtoa_r>:
 8007778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777c:	ed2d 8b04 	vpush	{d8-d9}
 8007780:	ec57 6b10 	vmov	r6, r7, d0
 8007784:	b093      	sub	sp, #76	; 0x4c
 8007786:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007788:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800778c:	9106      	str	r1, [sp, #24]
 800778e:	ee10 aa10 	vmov	sl, s0
 8007792:	4604      	mov	r4, r0
 8007794:	9209      	str	r2, [sp, #36]	; 0x24
 8007796:	930c      	str	r3, [sp, #48]	; 0x30
 8007798:	46bb      	mov	fp, r7
 800779a:	b975      	cbnz	r5, 80077ba <_dtoa_r+0x42>
 800779c:	2010      	movs	r0, #16
 800779e:	f000 fed7 	bl	8008550 <malloc>
 80077a2:	4602      	mov	r2, r0
 80077a4:	6260      	str	r0, [r4, #36]	; 0x24
 80077a6:	b920      	cbnz	r0, 80077b2 <_dtoa_r+0x3a>
 80077a8:	4ba7      	ldr	r3, [pc, #668]	; (8007a48 <_dtoa_r+0x2d0>)
 80077aa:	21ea      	movs	r1, #234	; 0xea
 80077ac:	48a7      	ldr	r0, [pc, #668]	; (8007a4c <_dtoa_r+0x2d4>)
 80077ae:	f001 fdd1 	bl	8009354 <__assert_func>
 80077b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80077b6:	6005      	str	r5, [r0, #0]
 80077b8:	60c5      	str	r5, [r0, #12]
 80077ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077bc:	6819      	ldr	r1, [r3, #0]
 80077be:	b151      	cbz	r1, 80077d6 <_dtoa_r+0x5e>
 80077c0:	685a      	ldr	r2, [r3, #4]
 80077c2:	604a      	str	r2, [r1, #4]
 80077c4:	2301      	movs	r3, #1
 80077c6:	4093      	lsls	r3, r2
 80077c8:	608b      	str	r3, [r1, #8]
 80077ca:	4620      	mov	r0, r4
 80077cc:	f000 ff08 	bl	80085e0 <_Bfree>
 80077d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077d2:	2200      	movs	r2, #0
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	1e3b      	subs	r3, r7, #0
 80077d8:	bfaa      	itet	ge
 80077da:	2300      	movge	r3, #0
 80077dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80077e0:	f8c8 3000 	strge.w	r3, [r8]
 80077e4:	4b9a      	ldr	r3, [pc, #616]	; (8007a50 <_dtoa_r+0x2d8>)
 80077e6:	bfbc      	itt	lt
 80077e8:	2201      	movlt	r2, #1
 80077ea:	f8c8 2000 	strlt.w	r2, [r8]
 80077ee:	ea33 030b 	bics.w	r3, r3, fp
 80077f2:	d11b      	bne.n	800782c <_dtoa_r+0xb4>
 80077f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007800:	4333      	orrs	r3, r6
 8007802:	f000 8592 	beq.w	800832a <_dtoa_r+0xbb2>
 8007806:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007808:	b963      	cbnz	r3, 8007824 <_dtoa_r+0xac>
 800780a:	4b92      	ldr	r3, [pc, #584]	; (8007a54 <_dtoa_r+0x2dc>)
 800780c:	e022      	b.n	8007854 <_dtoa_r+0xdc>
 800780e:	4b92      	ldr	r3, [pc, #584]	; (8007a58 <_dtoa_r+0x2e0>)
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	3308      	adds	r3, #8
 8007814:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007816:	6013      	str	r3, [r2, #0]
 8007818:	9801      	ldr	r0, [sp, #4]
 800781a:	b013      	add	sp, #76	; 0x4c
 800781c:	ecbd 8b04 	vpop	{d8-d9}
 8007820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007824:	4b8b      	ldr	r3, [pc, #556]	; (8007a54 <_dtoa_r+0x2dc>)
 8007826:	9301      	str	r3, [sp, #4]
 8007828:	3303      	adds	r3, #3
 800782a:	e7f3      	b.n	8007814 <_dtoa_r+0x9c>
 800782c:	2200      	movs	r2, #0
 800782e:	2300      	movs	r3, #0
 8007830:	4650      	mov	r0, sl
 8007832:	4659      	mov	r1, fp
 8007834:	f7f9 f948 	bl	8000ac8 <__aeabi_dcmpeq>
 8007838:	ec4b ab19 	vmov	d9, sl, fp
 800783c:	4680      	mov	r8, r0
 800783e:	b158      	cbz	r0, 8007858 <_dtoa_r+0xe0>
 8007840:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007842:	2301      	movs	r3, #1
 8007844:	6013      	str	r3, [r2, #0]
 8007846:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007848:	2b00      	cmp	r3, #0
 800784a:	f000 856b 	beq.w	8008324 <_dtoa_r+0xbac>
 800784e:	4883      	ldr	r0, [pc, #524]	; (8007a5c <_dtoa_r+0x2e4>)
 8007850:	6018      	str	r0, [r3, #0]
 8007852:	1e43      	subs	r3, r0, #1
 8007854:	9301      	str	r3, [sp, #4]
 8007856:	e7df      	b.n	8007818 <_dtoa_r+0xa0>
 8007858:	ec4b ab10 	vmov	d0, sl, fp
 800785c:	aa10      	add	r2, sp, #64	; 0x40
 800785e:	a911      	add	r1, sp, #68	; 0x44
 8007860:	4620      	mov	r0, r4
 8007862:	f001 f9a5 	bl	8008bb0 <__d2b>
 8007866:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800786a:	ee08 0a10 	vmov	s16, r0
 800786e:	2d00      	cmp	r5, #0
 8007870:	f000 8084 	beq.w	800797c <_dtoa_r+0x204>
 8007874:	ee19 3a90 	vmov	r3, s19
 8007878:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800787c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007880:	4656      	mov	r6, sl
 8007882:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007886:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800788a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800788e:	4b74      	ldr	r3, [pc, #464]	; (8007a60 <_dtoa_r+0x2e8>)
 8007890:	2200      	movs	r2, #0
 8007892:	4630      	mov	r0, r6
 8007894:	4639      	mov	r1, r7
 8007896:	f7f8 fcf7 	bl	8000288 <__aeabi_dsub>
 800789a:	a365      	add	r3, pc, #404	; (adr r3, 8007a30 <_dtoa_r+0x2b8>)
 800789c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a0:	f7f8 feaa 	bl	80005f8 <__aeabi_dmul>
 80078a4:	a364      	add	r3, pc, #400	; (adr r3, 8007a38 <_dtoa_r+0x2c0>)
 80078a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078aa:	f7f8 fcef 	bl	800028c <__adddf3>
 80078ae:	4606      	mov	r6, r0
 80078b0:	4628      	mov	r0, r5
 80078b2:	460f      	mov	r7, r1
 80078b4:	f7f8 fe36 	bl	8000524 <__aeabi_i2d>
 80078b8:	a361      	add	r3, pc, #388	; (adr r3, 8007a40 <_dtoa_r+0x2c8>)
 80078ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078be:	f7f8 fe9b 	bl	80005f8 <__aeabi_dmul>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4630      	mov	r0, r6
 80078c8:	4639      	mov	r1, r7
 80078ca:	f7f8 fcdf 	bl	800028c <__adddf3>
 80078ce:	4606      	mov	r6, r0
 80078d0:	460f      	mov	r7, r1
 80078d2:	f7f9 f941 	bl	8000b58 <__aeabi_d2iz>
 80078d6:	2200      	movs	r2, #0
 80078d8:	9000      	str	r0, [sp, #0]
 80078da:	2300      	movs	r3, #0
 80078dc:	4630      	mov	r0, r6
 80078de:	4639      	mov	r1, r7
 80078e0:	f7f9 f8fc 	bl	8000adc <__aeabi_dcmplt>
 80078e4:	b150      	cbz	r0, 80078fc <_dtoa_r+0x184>
 80078e6:	9800      	ldr	r0, [sp, #0]
 80078e8:	f7f8 fe1c 	bl	8000524 <__aeabi_i2d>
 80078ec:	4632      	mov	r2, r6
 80078ee:	463b      	mov	r3, r7
 80078f0:	f7f9 f8ea 	bl	8000ac8 <__aeabi_dcmpeq>
 80078f4:	b910      	cbnz	r0, 80078fc <_dtoa_r+0x184>
 80078f6:	9b00      	ldr	r3, [sp, #0]
 80078f8:	3b01      	subs	r3, #1
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	9b00      	ldr	r3, [sp, #0]
 80078fe:	2b16      	cmp	r3, #22
 8007900:	d85a      	bhi.n	80079b8 <_dtoa_r+0x240>
 8007902:	9a00      	ldr	r2, [sp, #0]
 8007904:	4b57      	ldr	r3, [pc, #348]	; (8007a64 <_dtoa_r+0x2ec>)
 8007906:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800790a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790e:	ec51 0b19 	vmov	r0, r1, d9
 8007912:	f7f9 f8e3 	bl	8000adc <__aeabi_dcmplt>
 8007916:	2800      	cmp	r0, #0
 8007918:	d050      	beq.n	80079bc <_dtoa_r+0x244>
 800791a:	9b00      	ldr	r3, [sp, #0]
 800791c:	3b01      	subs	r3, #1
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	2300      	movs	r3, #0
 8007922:	930b      	str	r3, [sp, #44]	; 0x2c
 8007924:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007926:	1b5d      	subs	r5, r3, r5
 8007928:	1e6b      	subs	r3, r5, #1
 800792a:	9305      	str	r3, [sp, #20]
 800792c:	bf45      	ittet	mi
 800792e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007932:	9304      	strmi	r3, [sp, #16]
 8007934:	2300      	movpl	r3, #0
 8007936:	2300      	movmi	r3, #0
 8007938:	bf4c      	ite	mi
 800793a:	9305      	strmi	r3, [sp, #20]
 800793c:	9304      	strpl	r3, [sp, #16]
 800793e:	9b00      	ldr	r3, [sp, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	db3d      	blt.n	80079c0 <_dtoa_r+0x248>
 8007944:	9b05      	ldr	r3, [sp, #20]
 8007946:	9a00      	ldr	r2, [sp, #0]
 8007948:	920a      	str	r2, [sp, #40]	; 0x28
 800794a:	4413      	add	r3, r2
 800794c:	9305      	str	r3, [sp, #20]
 800794e:	2300      	movs	r3, #0
 8007950:	9307      	str	r3, [sp, #28]
 8007952:	9b06      	ldr	r3, [sp, #24]
 8007954:	2b09      	cmp	r3, #9
 8007956:	f200 8089 	bhi.w	8007a6c <_dtoa_r+0x2f4>
 800795a:	2b05      	cmp	r3, #5
 800795c:	bfc4      	itt	gt
 800795e:	3b04      	subgt	r3, #4
 8007960:	9306      	strgt	r3, [sp, #24]
 8007962:	9b06      	ldr	r3, [sp, #24]
 8007964:	f1a3 0302 	sub.w	r3, r3, #2
 8007968:	bfcc      	ite	gt
 800796a:	2500      	movgt	r5, #0
 800796c:	2501      	movle	r5, #1
 800796e:	2b03      	cmp	r3, #3
 8007970:	f200 8087 	bhi.w	8007a82 <_dtoa_r+0x30a>
 8007974:	e8df f003 	tbb	[pc, r3]
 8007978:	59383a2d 	.word	0x59383a2d
 800797c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007980:	441d      	add	r5, r3
 8007982:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007986:	2b20      	cmp	r3, #32
 8007988:	bfc1      	itttt	gt
 800798a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800798e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007992:	fa0b f303 	lslgt.w	r3, fp, r3
 8007996:	fa26 f000 	lsrgt.w	r0, r6, r0
 800799a:	bfda      	itte	le
 800799c:	f1c3 0320 	rsble	r3, r3, #32
 80079a0:	fa06 f003 	lslle.w	r0, r6, r3
 80079a4:	4318      	orrgt	r0, r3
 80079a6:	f7f8 fdad 	bl	8000504 <__aeabi_ui2d>
 80079aa:	2301      	movs	r3, #1
 80079ac:	4606      	mov	r6, r0
 80079ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80079b2:	3d01      	subs	r5, #1
 80079b4:	930e      	str	r3, [sp, #56]	; 0x38
 80079b6:	e76a      	b.n	800788e <_dtoa_r+0x116>
 80079b8:	2301      	movs	r3, #1
 80079ba:	e7b2      	b.n	8007922 <_dtoa_r+0x1aa>
 80079bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80079be:	e7b1      	b.n	8007924 <_dtoa_r+0x1ac>
 80079c0:	9b04      	ldr	r3, [sp, #16]
 80079c2:	9a00      	ldr	r2, [sp, #0]
 80079c4:	1a9b      	subs	r3, r3, r2
 80079c6:	9304      	str	r3, [sp, #16]
 80079c8:	4253      	negs	r3, r2
 80079ca:	9307      	str	r3, [sp, #28]
 80079cc:	2300      	movs	r3, #0
 80079ce:	930a      	str	r3, [sp, #40]	; 0x28
 80079d0:	e7bf      	b.n	8007952 <_dtoa_r+0x1da>
 80079d2:	2300      	movs	r3, #0
 80079d4:	9308      	str	r3, [sp, #32]
 80079d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079d8:	2b00      	cmp	r3, #0
 80079da:	dc55      	bgt.n	8007a88 <_dtoa_r+0x310>
 80079dc:	2301      	movs	r3, #1
 80079de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079e2:	461a      	mov	r2, r3
 80079e4:	9209      	str	r2, [sp, #36]	; 0x24
 80079e6:	e00c      	b.n	8007a02 <_dtoa_r+0x28a>
 80079e8:	2301      	movs	r3, #1
 80079ea:	e7f3      	b.n	80079d4 <_dtoa_r+0x25c>
 80079ec:	2300      	movs	r3, #0
 80079ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079f0:	9308      	str	r3, [sp, #32]
 80079f2:	9b00      	ldr	r3, [sp, #0]
 80079f4:	4413      	add	r3, r2
 80079f6:	9302      	str	r3, [sp, #8]
 80079f8:	3301      	adds	r3, #1
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	9303      	str	r3, [sp, #12]
 80079fe:	bfb8      	it	lt
 8007a00:	2301      	movlt	r3, #1
 8007a02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007a04:	2200      	movs	r2, #0
 8007a06:	6042      	str	r2, [r0, #4]
 8007a08:	2204      	movs	r2, #4
 8007a0a:	f102 0614 	add.w	r6, r2, #20
 8007a0e:	429e      	cmp	r6, r3
 8007a10:	6841      	ldr	r1, [r0, #4]
 8007a12:	d93d      	bls.n	8007a90 <_dtoa_r+0x318>
 8007a14:	4620      	mov	r0, r4
 8007a16:	f000 fda3 	bl	8008560 <_Balloc>
 8007a1a:	9001      	str	r0, [sp, #4]
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	d13b      	bne.n	8007a98 <_dtoa_r+0x320>
 8007a20:	4b11      	ldr	r3, [pc, #68]	; (8007a68 <_dtoa_r+0x2f0>)
 8007a22:	4602      	mov	r2, r0
 8007a24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007a28:	e6c0      	b.n	80077ac <_dtoa_r+0x34>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e7df      	b.n	80079ee <_dtoa_r+0x276>
 8007a2e:	bf00      	nop
 8007a30:	636f4361 	.word	0x636f4361
 8007a34:	3fd287a7 	.word	0x3fd287a7
 8007a38:	8b60c8b3 	.word	0x8b60c8b3
 8007a3c:	3fc68a28 	.word	0x3fc68a28
 8007a40:	509f79fb 	.word	0x509f79fb
 8007a44:	3fd34413 	.word	0x3fd34413
 8007a48:	08009fc9 	.word	0x08009fc9
 8007a4c:	08009fe0 	.word	0x08009fe0
 8007a50:	7ff00000 	.word	0x7ff00000
 8007a54:	08009fc5 	.word	0x08009fc5
 8007a58:	08009fbc 	.word	0x08009fbc
 8007a5c:	08009f99 	.word	0x08009f99
 8007a60:	3ff80000 	.word	0x3ff80000
 8007a64:	0800a130 	.word	0x0800a130
 8007a68:	0800a03b 	.word	0x0800a03b
 8007a6c:	2501      	movs	r5, #1
 8007a6e:	2300      	movs	r3, #0
 8007a70:	9306      	str	r3, [sp, #24]
 8007a72:	9508      	str	r5, [sp, #32]
 8007a74:	f04f 33ff 	mov.w	r3, #4294967295
 8007a78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	2312      	movs	r3, #18
 8007a80:	e7b0      	b.n	80079e4 <_dtoa_r+0x26c>
 8007a82:	2301      	movs	r3, #1
 8007a84:	9308      	str	r3, [sp, #32]
 8007a86:	e7f5      	b.n	8007a74 <_dtoa_r+0x2fc>
 8007a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a8e:	e7b8      	b.n	8007a02 <_dtoa_r+0x28a>
 8007a90:	3101      	adds	r1, #1
 8007a92:	6041      	str	r1, [r0, #4]
 8007a94:	0052      	lsls	r2, r2, #1
 8007a96:	e7b8      	b.n	8007a0a <_dtoa_r+0x292>
 8007a98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a9a:	9a01      	ldr	r2, [sp, #4]
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	9b03      	ldr	r3, [sp, #12]
 8007aa0:	2b0e      	cmp	r3, #14
 8007aa2:	f200 809d 	bhi.w	8007be0 <_dtoa_r+0x468>
 8007aa6:	2d00      	cmp	r5, #0
 8007aa8:	f000 809a 	beq.w	8007be0 <_dtoa_r+0x468>
 8007aac:	9b00      	ldr	r3, [sp, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	dd32      	ble.n	8007b18 <_dtoa_r+0x3a0>
 8007ab2:	4ab7      	ldr	r2, [pc, #732]	; (8007d90 <_dtoa_r+0x618>)
 8007ab4:	f003 030f 	and.w	r3, r3, #15
 8007ab8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007abc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ac0:	9b00      	ldr	r3, [sp, #0]
 8007ac2:	05d8      	lsls	r0, r3, #23
 8007ac4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007ac8:	d516      	bpl.n	8007af8 <_dtoa_r+0x380>
 8007aca:	4bb2      	ldr	r3, [pc, #712]	; (8007d94 <_dtoa_r+0x61c>)
 8007acc:	ec51 0b19 	vmov	r0, r1, d9
 8007ad0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ad4:	f7f8 feba 	bl	800084c <__aeabi_ddiv>
 8007ad8:	f007 070f 	and.w	r7, r7, #15
 8007adc:	4682      	mov	sl, r0
 8007ade:	468b      	mov	fp, r1
 8007ae0:	2503      	movs	r5, #3
 8007ae2:	4eac      	ldr	r6, [pc, #688]	; (8007d94 <_dtoa_r+0x61c>)
 8007ae4:	b957      	cbnz	r7, 8007afc <_dtoa_r+0x384>
 8007ae6:	4642      	mov	r2, r8
 8007ae8:	464b      	mov	r3, r9
 8007aea:	4650      	mov	r0, sl
 8007aec:	4659      	mov	r1, fp
 8007aee:	f7f8 fead 	bl	800084c <__aeabi_ddiv>
 8007af2:	4682      	mov	sl, r0
 8007af4:	468b      	mov	fp, r1
 8007af6:	e028      	b.n	8007b4a <_dtoa_r+0x3d2>
 8007af8:	2502      	movs	r5, #2
 8007afa:	e7f2      	b.n	8007ae2 <_dtoa_r+0x36a>
 8007afc:	07f9      	lsls	r1, r7, #31
 8007afe:	d508      	bpl.n	8007b12 <_dtoa_r+0x39a>
 8007b00:	4640      	mov	r0, r8
 8007b02:	4649      	mov	r1, r9
 8007b04:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b08:	f7f8 fd76 	bl	80005f8 <__aeabi_dmul>
 8007b0c:	3501      	adds	r5, #1
 8007b0e:	4680      	mov	r8, r0
 8007b10:	4689      	mov	r9, r1
 8007b12:	107f      	asrs	r7, r7, #1
 8007b14:	3608      	adds	r6, #8
 8007b16:	e7e5      	b.n	8007ae4 <_dtoa_r+0x36c>
 8007b18:	f000 809b 	beq.w	8007c52 <_dtoa_r+0x4da>
 8007b1c:	9b00      	ldr	r3, [sp, #0]
 8007b1e:	4f9d      	ldr	r7, [pc, #628]	; (8007d94 <_dtoa_r+0x61c>)
 8007b20:	425e      	negs	r6, r3
 8007b22:	4b9b      	ldr	r3, [pc, #620]	; (8007d90 <_dtoa_r+0x618>)
 8007b24:	f006 020f 	and.w	r2, r6, #15
 8007b28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b30:	ec51 0b19 	vmov	r0, r1, d9
 8007b34:	f7f8 fd60 	bl	80005f8 <__aeabi_dmul>
 8007b38:	1136      	asrs	r6, r6, #4
 8007b3a:	4682      	mov	sl, r0
 8007b3c:	468b      	mov	fp, r1
 8007b3e:	2300      	movs	r3, #0
 8007b40:	2502      	movs	r5, #2
 8007b42:	2e00      	cmp	r6, #0
 8007b44:	d17a      	bne.n	8007c3c <_dtoa_r+0x4c4>
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1d3      	bne.n	8007af2 <_dtoa_r+0x37a>
 8007b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f000 8082 	beq.w	8007c56 <_dtoa_r+0x4de>
 8007b52:	4b91      	ldr	r3, [pc, #580]	; (8007d98 <_dtoa_r+0x620>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	4650      	mov	r0, sl
 8007b58:	4659      	mov	r1, fp
 8007b5a:	f7f8 ffbf 	bl	8000adc <__aeabi_dcmplt>
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d079      	beq.n	8007c56 <_dtoa_r+0x4de>
 8007b62:	9b03      	ldr	r3, [sp, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d076      	beq.n	8007c56 <_dtoa_r+0x4de>
 8007b68:	9b02      	ldr	r3, [sp, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	dd36      	ble.n	8007bdc <_dtoa_r+0x464>
 8007b6e:	9b00      	ldr	r3, [sp, #0]
 8007b70:	4650      	mov	r0, sl
 8007b72:	4659      	mov	r1, fp
 8007b74:	1e5f      	subs	r7, r3, #1
 8007b76:	2200      	movs	r2, #0
 8007b78:	4b88      	ldr	r3, [pc, #544]	; (8007d9c <_dtoa_r+0x624>)
 8007b7a:	f7f8 fd3d 	bl	80005f8 <__aeabi_dmul>
 8007b7e:	9e02      	ldr	r6, [sp, #8]
 8007b80:	4682      	mov	sl, r0
 8007b82:	468b      	mov	fp, r1
 8007b84:	3501      	adds	r5, #1
 8007b86:	4628      	mov	r0, r5
 8007b88:	f7f8 fccc 	bl	8000524 <__aeabi_i2d>
 8007b8c:	4652      	mov	r2, sl
 8007b8e:	465b      	mov	r3, fp
 8007b90:	f7f8 fd32 	bl	80005f8 <__aeabi_dmul>
 8007b94:	4b82      	ldr	r3, [pc, #520]	; (8007da0 <_dtoa_r+0x628>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	f7f8 fb78 	bl	800028c <__adddf3>
 8007b9c:	46d0      	mov	r8, sl
 8007b9e:	46d9      	mov	r9, fp
 8007ba0:	4682      	mov	sl, r0
 8007ba2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007ba6:	2e00      	cmp	r6, #0
 8007ba8:	d158      	bne.n	8007c5c <_dtoa_r+0x4e4>
 8007baa:	4b7e      	ldr	r3, [pc, #504]	; (8007da4 <_dtoa_r+0x62c>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	4640      	mov	r0, r8
 8007bb0:	4649      	mov	r1, r9
 8007bb2:	f7f8 fb69 	bl	8000288 <__aeabi_dsub>
 8007bb6:	4652      	mov	r2, sl
 8007bb8:	465b      	mov	r3, fp
 8007bba:	4680      	mov	r8, r0
 8007bbc:	4689      	mov	r9, r1
 8007bbe:	f7f8 ffab 	bl	8000b18 <__aeabi_dcmpgt>
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	f040 8295 	bne.w	80080f2 <_dtoa_r+0x97a>
 8007bc8:	4652      	mov	r2, sl
 8007bca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007bce:	4640      	mov	r0, r8
 8007bd0:	4649      	mov	r1, r9
 8007bd2:	f7f8 ff83 	bl	8000adc <__aeabi_dcmplt>
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	f040 8289 	bne.w	80080ee <_dtoa_r+0x976>
 8007bdc:	ec5b ab19 	vmov	sl, fp, d9
 8007be0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f2c0 8148 	blt.w	8007e78 <_dtoa_r+0x700>
 8007be8:	9a00      	ldr	r2, [sp, #0]
 8007bea:	2a0e      	cmp	r2, #14
 8007bec:	f300 8144 	bgt.w	8007e78 <_dtoa_r+0x700>
 8007bf0:	4b67      	ldr	r3, [pc, #412]	; (8007d90 <_dtoa_r+0x618>)
 8007bf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bf6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f280 80d5 	bge.w	8007dac <_dtoa_r+0x634>
 8007c02:	9b03      	ldr	r3, [sp, #12]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f300 80d1 	bgt.w	8007dac <_dtoa_r+0x634>
 8007c0a:	f040 826f 	bne.w	80080ec <_dtoa_r+0x974>
 8007c0e:	4b65      	ldr	r3, [pc, #404]	; (8007da4 <_dtoa_r+0x62c>)
 8007c10:	2200      	movs	r2, #0
 8007c12:	4640      	mov	r0, r8
 8007c14:	4649      	mov	r1, r9
 8007c16:	f7f8 fcef 	bl	80005f8 <__aeabi_dmul>
 8007c1a:	4652      	mov	r2, sl
 8007c1c:	465b      	mov	r3, fp
 8007c1e:	f7f8 ff71 	bl	8000b04 <__aeabi_dcmpge>
 8007c22:	9e03      	ldr	r6, [sp, #12]
 8007c24:	4637      	mov	r7, r6
 8007c26:	2800      	cmp	r0, #0
 8007c28:	f040 8245 	bne.w	80080b6 <_dtoa_r+0x93e>
 8007c2c:	9d01      	ldr	r5, [sp, #4]
 8007c2e:	2331      	movs	r3, #49	; 0x31
 8007c30:	f805 3b01 	strb.w	r3, [r5], #1
 8007c34:	9b00      	ldr	r3, [sp, #0]
 8007c36:	3301      	adds	r3, #1
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	e240      	b.n	80080be <_dtoa_r+0x946>
 8007c3c:	07f2      	lsls	r2, r6, #31
 8007c3e:	d505      	bpl.n	8007c4c <_dtoa_r+0x4d4>
 8007c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c44:	f7f8 fcd8 	bl	80005f8 <__aeabi_dmul>
 8007c48:	3501      	adds	r5, #1
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	1076      	asrs	r6, r6, #1
 8007c4e:	3708      	adds	r7, #8
 8007c50:	e777      	b.n	8007b42 <_dtoa_r+0x3ca>
 8007c52:	2502      	movs	r5, #2
 8007c54:	e779      	b.n	8007b4a <_dtoa_r+0x3d2>
 8007c56:	9f00      	ldr	r7, [sp, #0]
 8007c58:	9e03      	ldr	r6, [sp, #12]
 8007c5a:	e794      	b.n	8007b86 <_dtoa_r+0x40e>
 8007c5c:	9901      	ldr	r1, [sp, #4]
 8007c5e:	4b4c      	ldr	r3, [pc, #304]	; (8007d90 <_dtoa_r+0x618>)
 8007c60:	4431      	add	r1, r6
 8007c62:	910d      	str	r1, [sp, #52]	; 0x34
 8007c64:	9908      	ldr	r1, [sp, #32]
 8007c66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c6e:	2900      	cmp	r1, #0
 8007c70:	d043      	beq.n	8007cfa <_dtoa_r+0x582>
 8007c72:	494d      	ldr	r1, [pc, #308]	; (8007da8 <_dtoa_r+0x630>)
 8007c74:	2000      	movs	r0, #0
 8007c76:	f7f8 fde9 	bl	800084c <__aeabi_ddiv>
 8007c7a:	4652      	mov	r2, sl
 8007c7c:	465b      	mov	r3, fp
 8007c7e:	f7f8 fb03 	bl	8000288 <__aeabi_dsub>
 8007c82:	9d01      	ldr	r5, [sp, #4]
 8007c84:	4682      	mov	sl, r0
 8007c86:	468b      	mov	fp, r1
 8007c88:	4649      	mov	r1, r9
 8007c8a:	4640      	mov	r0, r8
 8007c8c:	f7f8 ff64 	bl	8000b58 <__aeabi_d2iz>
 8007c90:	4606      	mov	r6, r0
 8007c92:	f7f8 fc47 	bl	8000524 <__aeabi_i2d>
 8007c96:	4602      	mov	r2, r0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	4640      	mov	r0, r8
 8007c9c:	4649      	mov	r1, r9
 8007c9e:	f7f8 faf3 	bl	8000288 <__aeabi_dsub>
 8007ca2:	3630      	adds	r6, #48	; 0x30
 8007ca4:	f805 6b01 	strb.w	r6, [r5], #1
 8007ca8:	4652      	mov	r2, sl
 8007caa:	465b      	mov	r3, fp
 8007cac:	4680      	mov	r8, r0
 8007cae:	4689      	mov	r9, r1
 8007cb0:	f7f8 ff14 	bl	8000adc <__aeabi_dcmplt>
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	d163      	bne.n	8007d80 <_dtoa_r+0x608>
 8007cb8:	4642      	mov	r2, r8
 8007cba:	464b      	mov	r3, r9
 8007cbc:	4936      	ldr	r1, [pc, #216]	; (8007d98 <_dtoa_r+0x620>)
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	f7f8 fae2 	bl	8000288 <__aeabi_dsub>
 8007cc4:	4652      	mov	r2, sl
 8007cc6:	465b      	mov	r3, fp
 8007cc8:	f7f8 ff08 	bl	8000adc <__aeabi_dcmplt>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	f040 80b5 	bne.w	8007e3c <_dtoa_r+0x6c4>
 8007cd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cd4:	429d      	cmp	r5, r3
 8007cd6:	d081      	beq.n	8007bdc <_dtoa_r+0x464>
 8007cd8:	4b30      	ldr	r3, [pc, #192]	; (8007d9c <_dtoa_r+0x624>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	4650      	mov	r0, sl
 8007cde:	4659      	mov	r1, fp
 8007ce0:	f7f8 fc8a 	bl	80005f8 <__aeabi_dmul>
 8007ce4:	4b2d      	ldr	r3, [pc, #180]	; (8007d9c <_dtoa_r+0x624>)
 8007ce6:	4682      	mov	sl, r0
 8007ce8:	468b      	mov	fp, r1
 8007cea:	4640      	mov	r0, r8
 8007cec:	4649      	mov	r1, r9
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f7f8 fc82 	bl	80005f8 <__aeabi_dmul>
 8007cf4:	4680      	mov	r8, r0
 8007cf6:	4689      	mov	r9, r1
 8007cf8:	e7c6      	b.n	8007c88 <_dtoa_r+0x510>
 8007cfa:	4650      	mov	r0, sl
 8007cfc:	4659      	mov	r1, fp
 8007cfe:	f7f8 fc7b 	bl	80005f8 <__aeabi_dmul>
 8007d02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d04:	9d01      	ldr	r5, [sp, #4]
 8007d06:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d08:	4682      	mov	sl, r0
 8007d0a:	468b      	mov	fp, r1
 8007d0c:	4649      	mov	r1, r9
 8007d0e:	4640      	mov	r0, r8
 8007d10:	f7f8 ff22 	bl	8000b58 <__aeabi_d2iz>
 8007d14:	4606      	mov	r6, r0
 8007d16:	f7f8 fc05 	bl	8000524 <__aeabi_i2d>
 8007d1a:	3630      	adds	r6, #48	; 0x30
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	460b      	mov	r3, r1
 8007d20:	4640      	mov	r0, r8
 8007d22:	4649      	mov	r1, r9
 8007d24:	f7f8 fab0 	bl	8000288 <__aeabi_dsub>
 8007d28:	f805 6b01 	strb.w	r6, [r5], #1
 8007d2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d2e:	429d      	cmp	r5, r3
 8007d30:	4680      	mov	r8, r0
 8007d32:	4689      	mov	r9, r1
 8007d34:	f04f 0200 	mov.w	r2, #0
 8007d38:	d124      	bne.n	8007d84 <_dtoa_r+0x60c>
 8007d3a:	4b1b      	ldr	r3, [pc, #108]	; (8007da8 <_dtoa_r+0x630>)
 8007d3c:	4650      	mov	r0, sl
 8007d3e:	4659      	mov	r1, fp
 8007d40:	f7f8 faa4 	bl	800028c <__adddf3>
 8007d44:	4602      	mov	r2, r0
 8007d46:	460b      	mov	r3, r1
 8007d48:	4640      	mov	r0, r8
 8007d4a:	4649      	mov	r1, r9
 8007d4c:	f7f8 fee4 	bl	8000b18 <__aeabi_dcmpgt>
 8007d50:	2800      	cmp	r0, #0
 8007d52:	d173      	bne.n	8007e3c <_dtoa_r+0x6c4>
 8007d54:	4652      	mov	r2, sl
 8007d56:	465b      	mov	r3, fp
 8007d58:	4913      	ldr	r1, [pc, #76]	; (8007da8 <_dtoa_r+0x630>)
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	f7f8 fa94 	bl	8000288 <__aeabi_dsub>
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	4640      	mov	r0, r8
 8007d66:	4649      	mov	r1, r9
 8007d68:	f7f8 feb8 	bl	8000adc <__aeabi_dcmplt>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	f43f af35 	beq.w	8007bdc <_dtoa_r+0x464>
 8007d72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d74:	1e6b      	subs	r3, r5, #1
 8007d76:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d7c:	2b30      	cmp	r3, #48	; 0x30
 8007d7e:	d0f8      	beq.n	8007d72 <_dtoa_r+0x5fa>
 8007d80:	9700      	str	r7, [sp, #0]
 8007d82:	e049      	b.n	8007e18 <_dtoa_r+0x6a0>
 8007d84:	4b05      	ldr	r3, [pc, #20]	; (8007d9c <_dtoa_r+0x624>)
 8007d86:	f7f8 fc37 	bl	80005f8 <__aeabi_dmul>
 8007d8a:	4680      	mov	r8, r0
 8007d8c:	4689      	mov	r9, r1
 8007d8e:	e7bd      	b.n	8007d0c <_dtoa_r+0x594>
 8007d90:	0800a130 	.word	0x0800a130
 8007d94:	0800a108 	.word	0x0800a108
 8007d98:	3ff00000 	.word	0x3ff00000
 8007d9c:	40240000 	.word	0x40240000
 8007da0:	401c0000 	.word	0x401c0000
 8007da4:	40140000 	.word	0x40140000
 8007da8:	3fe00000 	.word	0x3fe00000
 8007dac:	9d01      	ldr	r5, [sp, #4]
 8007dae:	4656      	mov	r6, sl
 8007db0:	465f      	mov	r7, fp
 8007db2:	4642      	mov	r2, r8
 8007db4:	464b      	mov	r3, r9
 8007db6:	4630      	mov	r0, r6
 8007db8:	4639      	mov	r1, r7
 8007dba:	f7f8 fd47 	bl	800084c <__aeabi_ddiv>
 8007dbe:	f7f8 fecb 	bl	8000b58 <__aeabi_d2iz>
 8007dc2:	4682      	mov	sl, r0
 8007dc4:	f7f8 fbae 	bl	8000524 <__aeabi_i2d>
 8007dc8:	4642      	mov	r2, r8
 8007dca:	464b      	mov	r3, r9
 8007dcc:	f7f8 fc14 	bl	80005f8 <__aeabi_dmul>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	4639      	mov	r1, r7
 8007dd8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007ddc:	f7f8 fa54 	bl	8000288 <__aeabi_dsub>
 8007de0:	f805 6b01 	strb.w	r6, [r5], #1
 8007de4:	9e01      	ldr	r6, [sp, #4]
 8007de6:	9f03      	ldr	r7, [sp, #12]
 8007de8:	1bae      	subs	r6, r5, r6
 8007dea:	42b7      	cmp	r7, r6
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	d135      	bne.n	8007e5e <_dtoa_r+0x6e6>
 8007df2:	f7f8 fa4b 	bl	800028c <__adddf3>
 8007df6:	4642      	mov	r2, r8
 8007df8:	464b      	mov	r3, r9
 8007dfa:	4606      	mov	r6, r0
 8007dfc:	460f      	mov	r7, r1
 8007dfe:	f7f8 fe8b 	bl	8000b18 <__aeabi_dcmpgt>
 8007e02:	b9d0      	cbnz	r0, 8007e3a <_dtoa_r+0x6c2>
 8007e04:	4642      	mov	r2, r8
 8007e06:	464b      	mov	r3, r9
 8007e08:	4630      	mov	r0, r6
 8007e0a:	4639      	mov	r1, r7
 8007e0c:	f7f8 fe5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e10:	b110      	cbz	r0, 8007e18 <_dtoa_r+0x6a0>
 8007e12:	f01a 0f01 	tst.w	sl, #1
 8007e16:	d110      	bne.n	8007e3a <_dtoa_r+0x6c2>
 8007e18:	4620      	mov	r0, r4
 8007e1a:	ee18 1a10 	vmov	r1, s16
 8007e1e:	f000 fbdf 	bl	80085e0 <_Bfree>
 8007e22:	2300      	movs	r3, #0
 8007e24:	9800      	ldr	r0, [sp, #0]
 8007e26:	702b      	strb	r3, [r5, #0]
 8007e28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	6018      	str	r0, [r3, #0]
 8007e2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f43f acf1 	beq.w	8007818 <_dtoa_r+0xa0>
 8007e36:	601d      	str	r5, [r3, #0]
 8007e38:	e4ee      	b.n	8007818 <_dtoa_r+0xa0>
 8007e3a:	9f00      	ldr	r7, [sp, #0]
 8007e3c:	462b      	mov	r3, r5
 8007e3e:	461d      	mov	r5, r3
 8007e40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e44:	2a39      	cmp	r2, #57	; 0x39
 8007e46:	d106      	bne.n	8007e56 <_dtoa_r+0x6de>
 8007e48:	9a01      	ldr	r2, [sp, #4]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d1f7      	bne.n	8007e3e <_dtoa_r+0x6c6>
 8007e4e:	9901      	ldr	r1, [sp, #4]
 8007e50:	2230      	movs	r2, #48	; 0x30
 8007e52:	3701      	adds	r7, #1
 8007e54:	700a      	strb	r2, [r1, #0]
 8007e56:	781a      	ldrb	r2, [r3, #0]
 8007e58:	3201      	adds	r2, #1
 8007e5a:	701a      	strb	r2, [r3, #0]
 8007e5c:	e790      	b.n	8007d80 <_dtoa_r+0x608>
 8007e5e:	4ba6      	ldr	r3, [pc, #664]	; (80080f8 <_dtoa_r+0x980>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	f7f8 fbc9 	bl	80005f8 <__aeabi_dmul>
 8007e66:	2200      	movs	r2, #0
 8007e68:	2300      	movs	r3, #0
 8007e6a:	4606      	mov	r6, r0
 8007e6c:	460f      	mov	r7, r1
 8007e6e:	f7f8 fe2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e72:	2800      	cmp	r0, #0
 8007e74:	d09d      	beq.n	8007db2 <_dtoa_r+0x63a>
 8007e76:	e7cf      	b.n	8007e18 <_dtoa_r+0x6a0>
 8007e78:	9a08      	ldr	r2, [sp, #32]
 8007e7a:	2a00      	cmp	r2, #0
 8007e7c:	f000 80d7 	beq.w	800802e <_dtoa_r+0x8b6>
 8007e80:	9a06      	ldr	r2, [sp, #24]
 8007e82:	2a01      	cmp	r2, #1
 8007e84:	f300 80ba 	bgt.w	8007ffc <_dtoa_r+0x884>
 8007e88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e8a:	2a00      	cmp	r2, #0
 8007e8c:	f000 80b2 	beq.w	8007ff4 <_dtoa_r+0x87c>
 8007e90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e94:	9e07      	ldr	r6, [sp, #28]
 8007e96:	9d04      	ldr	r5, [sp, #16]
 8007e98:	9a04      	ldr	r2, [sp, #16]
 8007e9a:	441a      	add	r2, r3
 8007e9c:	9204      	str	r2, [sp, #16]
 8007e9e:	9a05      	ldr	r2, [sp, #20]
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	441a      	add	r2, r3
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	9205      	str	r2, [sp, #20]
 8007ea8:	f000 fc52 	bl	8008750 <__i2b>
 8007eac:	4607      	mov	r7, r0
 8007eae:	2d00      	cmp	r5, #0
 8007eb0:	dd0c      	ble.n	8007ecc <_dtoa_r+0x754>
 8007eb2:	9b05      	ldr	r3, [sp, #20]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	dd09      	ble.n	8007ecc <_dtoa_r+0x754>
 8007eb8:	42ab      	cmp	r3, r5
 8007eba:	9a04      	ldr	r2, [sp, #16]
 8007ebc:	bfa8      	it	ge
 8007ebe:	462b      	movge	r3, r5
 8007ec0:	1ad2      	subs	r2, r2, r3
 8007ec2:	9204      	str	r2, [sp, #16]
 8007ec4:	9a05      	ldr	r2, [sp, #20]
 8007ec6:	1aed      	subs	r5, r5, r3
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	9305      	str	r3, [sp, #20]
 8007ecc:	9b07      	ldr	r3, [sp, #28]
 8007ece:	b31b      	cbz	r3, 8007f18 <_dtoa_r+0x7a0>
 8007ed0:	9b08      	ldr	r3, [sp, #32]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 80af 	beq.w	8008036 <_dtoa_r+0x8be>
 8007ed8:	2e00      	cmp	r6, #0
 8007eda:	dd13      	ble.n	8007f04 <_dtoa_r+0x78c>
 8007edc:	4639      	mov	r1, r7
 8007ede:	4632      	mov	r2, r6
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	f000 fcf5 	bl	80088d0 <__pow5mult>
 8007ee6:	ee18 2a10 	vmov	r2, s16
 8007eea:	4601      	mov	r1, r0
 8007eec:	4607      	mov	r7, r0
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f000 fc44 	bl	800877c <__multiply>
 8007ef4:	ee18 1a10 	vmov	r1, s16
 8007ef8:	4680      	mov	r8, r0
 8007efa:	4620      	mov	r0, r4
 8007efc:	f000 fb70 	bl	80085e0 <_Bfree>
 8007f00:	ee08 8a10 	vmov	s16, r8
 8007f04:	9b07      	ldr	r3, [sp, #28]
 8007f06:	1b9a      	subs	r2, r3, r6
 8007f08:	d006      	beq.n	8007f18 <_dtoa_r+0x7a0>
 8007f0a:	ee18 1a10 	vmov	r1, s16
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f000 fcde 	bl	80088d0 <__pow5mult>
 8007f14:	ee08 0a10 	vmov	s16, r0
 8007f18:	2101      	movs	r1, #1
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f000 fc18 	bl	8008750 <__i2b>
 8007f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	4606      	mov	r6, r0
 8007f26:	f340 8088 	ble.w	800803a <_dtoa_r+0x8c2>
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	4601      	mov	r1, r0
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f000 fcce 	bl	80088d0 <__pow5mult>
 8007f34:	9b06      	ldr	r3, [sp, #24]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	4606      	mov	r6, r0
 8007f3a:	f340 8081 	ble.w	8008040 <_dtoa_r+0x8c8>
 8007f3e:	f04f 0800 	mov.w	r8, #0
 8007f42:	6933      	ldr	r3, [r6, #16]
 8007f44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f48:	6918      	ldr	r0, [r3, #16]
 8007f4a:	f000 fbb1 	bl	80086b0 <__hi0bits>
 8007f4e:	f1c0 0020 	rsb	r0, r0, #32
 8007f52:	9b05      	ldr	r3, [sp, #20]
 8007f54:	4418      	add	r0, r3
 8007f56:	f010 001f 	ands.w	r0, r0, #31
 8007f5a:	f000 8092 	beq.w	8008082 <_dtoa_r+0x90a>
 8007f5e:	f1c0 0320 	rsb	r3, r0, #32
 8007f62:	2b04      	cmp	r3, #4
 8007f64:	f340 808a 	ble.w	800807c <_dtoa_r+0x904>
 8007f68:	f1c0 001c 	rsb	r0, r0, #28
 8007f6c:	9b04      	ldr	r3, [sp, #16]
 8007f6e:	4403      	add	r3, r0
 8007f70:	9304      	str	r3, [sp, #16]
 8007f72:	9b05      	ldr	r3, [sp, #20]
 8007f74:	4403      	add	r3, r0
 8007f76:	4405      	add	r5, r0
 8007f78:	9305      	str	r3, [sp, #20]
 8007f7a:	9b04      	ldr	r3, [sp, #16]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	dd07      	ble.n	8007f90 <_dtoa_r+0x818>
 8007f80:	ee18 1a10 	vmov	r1, s16
 8007f84:	461a      	mov	r2, r3
 8007f86:	4620      	mov	r0, r4
 8007f88:	f000 fcfc 	bl	8008984 <__lshift>
 8007f8c:	ee08 0a10 	vmov	s16, r0
 8007f90:	9b05      	ldr	r3, [sp, #20]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	dd05      	ble.n	8007fa2 <_dtoa_r+0x82a>
 8007f96:	4631      	mov	r1, r6
 8007f98:	461a      	mov	r2, r3
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f000 fcf2 	bl	8008984 <__lshift>
 8007fa0:	4606      	mov	r6, r0
 8007fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d06e      	beq.n	8008086 <_dtoa_r+0x90e>
 8007fa8:	ee18 0a10 	vmov	r0, s16
 8007fac:	4631      	mov	r1, r6
 8007fae:	f000 fd59 	bl	8008a64 <__mcmp>
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	da67      	bge.n	8008086 <_dtoa_r+0x90e>
 8007fb6:	9b00      	ldr	r3, [sp, #0]
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	ee18 1a10 	vmov	r1, s16
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	220a      	movs	r2, #10
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	f000 fb2d 	bl	8008624 <__multadd>
 8007fca:	9b08      	ldr	r3, [sp, #32]
 8007fcc:	ee08 0a10 	vmov	s16, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f000 81b1 	beq.w	8008338 <_dtoa_r+0xbc0>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	4639      	mov	r1, r7
 8007fda:	220a      	movs	r2, #10
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f000 fb21 	bl	8008624 <__multadd>
 8007fe2:	9b02      	ldr	r3, [sp, #8]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	4607      	mov	r7, r0
 8007fe8:	f300 808e 	bgt.w	8008108 <_dtoa_r+0x990>
 8007fec:	9b06      	ldr	r3, [sp, #24]
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	dc51      	bgt.n	8008096 <_dtoa_r+0x91e>
 8007ff2:	e089      	b.n	8008108 <_dtoa_r+0x990>
 8007ff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ff6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ffa:	e74b      	b.n	8007e94 <_dtoa_r+0x71c>
 8007ffc:	9b03      	ldr	r3, [sp, #12]
 8007ffe:	1e5e      	subs	r6, r3, #1
 8008000:	9b07      	ldr	r3, [sp, #28]
 8008002:	42b3      	cmp	r3, r6
 8008004:	bfbf      	itttt	lt
 8008006:	9b07      	ldrlt	r3, [sp, #28]
 8008008:	9607      	strlt	r6, [sp, #28]
 800800a:	1af2      	sublt	r2, r6, r3
 800800c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800800e:	bfb6      	itet	lt
 8008010:	189b      	addlt	r3, r3, r2
 8008012:	1b9e      	subge	r6, r3, r6
 8008014:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008016:	9b03      	ldr	r3, [sp, #12]
 8008018:	bfb8      	it	lt
 800801a:	2600      	movlt	r6, #0
 800801c:	2b00      	cmp	r3, #0
 800801e:	bfb7      	itett	lt
 8008020:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008024:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008028:	1a9d      	sublt	r5, r3, r2
 800802a:	2300      	movlt	r3, #0
 800802c:	e734      	b.n	8007e98 <_dtoa_r+0x720>
 800802e:	9e07      	ldr	r6, [sp, #28]
 8008030:	9d04      	ldr	r5, [sp, #16]
 8008032:	9f08      	ldr	r7, [sp, #32]
 8008034:	e73b      	b.n	8007eae <_dtoa_r+0x736>
 8008036:	9a07      	ldr	r2, [sp, #28]
 8008038:	e767      	b.n	8007f0a <_dtoa_r+0x792>
 800803a:	9b06      	ldr	r3, [sp, #24]
 800803c:	2b01      	cmp	r3, #1
 800803e:	dc18      	bgt.n	8008072 <_dtoa_r+0x8fa>
 8008040:	f1ba 0f00 	cmp.w	sl, #0
 8008044:	d115      	bne.n	8008072 <_dtoa_r+0x8fa>
 8008046:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800804a:	b993      	cbnz	r3, 8008072 <_dtoa_r+0x8fa>
 800804c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008050:	0d1b      	lsrs	r3, r3, #20
 8008052:	051b      	lsls	r3, r3, #20
 8008054:	b183      	cbz	r3, 8008078 <_dtoa_r+0x900>
 8008056:	9b04      	ldr	r3, [sp, #16]
 8008058:	3301      	adds	r3, #1
 800805a:	9304      	str	r3, [sp, #16]
 800805c:	9b05      	ldr	r3, [sp, #20]
 800805e:	3301      	adds	r3, #1
 8008060:	9305      	str	r3, [sp, #20]
 8008062:	f04f 0801 	mov.w	r8, #1
 8008066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008068:	2b00      	cmp	r3, #0
 800806a:	f47f af6a 	bne.w	8007f42 <_dtoa_r+0x7ca>
 800806e:	2001      	movs	r0, #1
 8008070:	e76f      	b.n	8007f52 <_dtoa_r+0x7da>
 8008072:	f04f 0800 	mov.w	r8, #0
 8008076:	e7f6      	b.n	8008066 <_dtoa_r+0x8ee>
 8008078:	4698      	mov	r8, r3
 800807a:	e7f4      	b.n	8008066 <_dtoa_r+0x8ee>
 800807c:	f43f af7d 	beq.w	8007f7a <_dtoa_r+0x802>
 8008080:	4618      	mov	r0, r3
 8008082:	301c      	adds	r0, #28
 8008084:	e772      	b.n	8007f6c <_dtoa_r+0x7f4>
 8008086:	9b03      	ldr	r3, [sp, #12]
 8008088:	2b00      	cmp	r3, #0
 800808a:	dc37      	bgt.n	80080fc <_dtoa_r+0x984>
 800808c:	9b06      	ldr	r3, [sp, #24]
 800808e:	2b02      	cmp	r3, #2
 8008090:	dd34      	ble.n	80080fc <_dtoa_r+0x984>
 8008092:	9b03      	ldr	r3, [sp, #12]
 8008094:	9302      	str	r3, [sp, #8]
 8008096:	9b02      	ldr	r3, [sp, #8]
 8008098:	b96b      	cbnz	r3, 80080b6 <_dtoa_r+0x93e>
 800809a:	4631      	mov	r1, r6
 800809c:	2205      	movs	r2, #5
 800809e:	4620      	mov	r0, r4
 80080a0:	f000 fac0 	bl	8008624 <__multadd>
 80080a4:	4601      	mov	r1, r0
 80080a6:	4606      	mov	r6, r0
 80080a8:	ee18 0a10 	vmov	r0, s16
 80080ac:	f000 fcda 	bl	8008a64 <__mcmp>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	f73f adbb 	bgt.w	8007c2c <_dtoa_r+0x4b4>
 80080b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b8:	9d01      	ldr	r5, [sp, #4]
 80080ba:	43db      	mvns	r3, r3
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	f04f 0800 	mov.w	r8, #0
 80080c2:	4631      	mov	r1, r6
 80080c4:	4620      	mov	r0, r4
 80080c6:	f000 fa8b 	bl	80085e0 <_Bfree>
 80080ca:	2f00      	cmp	r7, #0
 80080cc:	f43f aea4 	beq.w	8007e18 <_dtoa_r+0x6a0>
 80080d0:	f1b8 0f00 	cmp.w	r8, #0
 80080d4:	d005      	beq.n	80080e2 <_dtoa_r+0x96a>
 80080d6:	45b8      	cmp	r8, r7
 80080d8:	d003      	beq.n	80080e2 <_dtoa_r+0x96a>
 80080da:	4641      	mov	r1, r8
 80080dc:	4620      	mov	r0, r4
 80080de:	f000 fa7f 	bl	80085e0 <_Bfree>
 80080e2:	4639      	mov	r1, r7
 80080e4:	4620      	mov	r0, r4
 80080e6:	f000 fa7b 	bl	80085e0 <_Bfree>
 80080ea:	e695      	b.n	8007e18 <_dtoa_r+0x6a0>
 80080ec:	2600      	movs	r6, #0
 80080ee:	4637      	mov	r7, r6
 80080f0:	e7e1      	b.n	80080b6 <_dtoa_r+0x93e>
 80080f2:	9700      	str	r7, [sp, #0]
 80080f4:	4637      	mov	r7, r6
 80080f6:	e599      	b.n	8007c2c <_dtoa_r+0x4b4>
 80080f8:	40240000 	.word	0x40240000
 80080fc:	9b08      	ldr	r3, [sp, #32]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f000 80ca 	beq.w	8008298 <_dtoa_r+0xb20>
 8008104:	9b03      	ldr	r3, [sp, #12]
 8008106:	9302      	str	r3, [sp, #8]
 8008108:	2d00      	cmp	r5, #0
 800810a:	dd05      	ble.n	8008118 <_dtoa_r+0x9a0>
 800810c:	4639      	mov	r1, r7
 800810e:	462a      	mov	r2, r5
 8008110:	4620      	mov	r0, r4
 8008112:	f000 fc37 	bl	8008984 <__lshift>
 8008116:	4607      	mov	r7, r0
 8008118:	f1b8 0f00 	cmp.w	r8, #0
 800811c:	d05b      	beq.n	80081d6 <_dtoa_r+0xa5e>
 800811e:	6879      	ldr	r1, [r7, #4]
 8008120:	4620      	mov	r0, r4
 8008122:	f000 fa1d 	bl	8008560 <_Balloc>
 8008126:	4605      	mov	r5, r0
 8008128:	b928      	cbnz	r0, 8008136 <_dtoa_r+0x9be>
 800812a:	4b87      	ldr	r3, [pc, #540]	; (8008348 <_dtoa_r+0xbd0>)
 800812c:	4602      	mov	r2, r0
 800812e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008132:	f7ff bb3b 	b.w	80077ac <_dtoa_r+0x34>
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	3202      	adds	r2, #2
 800813a:	0092      	lsls	r2, r2, #2
 800813c:	f107 010c 	add.w	r1, r7, #12
 8008140:	300c      	adds	r0, #12
 8008142:	f7fe fdf5 	bl	8006d30 <memcpy>
 8008146:	2201      	movs	r2, #1
 8008148:	4629      	mov	r1, r5
 800814a:	4620      	mov	r0, r4
 800814c:	f000 fc1a 	bl	8008984 <__lshift>
 8008150:	9b01      	ldr	r3, [sp, #4]
 8008152:	f103 0901 	add.w	r9, r3, #1
 8008156:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800815a:	4413      	add	r3, r2
 800815c:	9305      	str	r3, [sp, #20]
 800815e:	f00a 0301 	and.w	r3, sl, #1
 8008162:	46b8      	mov	r8, r7
 8008164:	9304      	str	r3, [sp, #16]
 8008166:	4607      	mov	r7, r0
 8008168:	4631      	mov	r1, r6
 800816a:	ee18 0a10 	vmov	r0, s16
 800816e:	f7ff fa77 	bl	8007660 <quorem>
 8008172:	4641      	mov	r1, r8
 8008174:	9002      	str	r0, [sp, #8]
 8008176:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800817a:	ee18 0a10 	vmov	r0, s16
 800817e:	f000 fc71 	bl	8008a64 <__mcmp>
 8008182:	463a      	mov	r2, r7
 8008184:	9003      	str	r0, [sp, #12]
 8008186:	4631      	mov	r1, r6
 8008188:	4620      	mov	r0, r4
 800818a:	f000 fc87 	bl	8008a9c <__mdiff>
 800818e:	68c2      	ldr	r2, [r0, #12]
 8008190:	f109 3bff 	add.w	fp, r9, #4294967295
 8008194:	4605      	mov	r5, r0
 8008196:	bb02      	cbnz	r2, 80081da <_dtoa_r+0xa62>
 8008198:	4601      	mov	r1, r0
 800819a:	ee18 0a10 	vmov	r0, s16
 800819e:	f000 fc61 	bl	8008a64 <__mcmp>
 80081a2:	4602      	mov	r2, r0
 80081a4:	4629      	mov	r1, r5
 80081a6:	4620      	mov	r0, r4
 80081a8:	9207      	str	r2, [sp, #28]
 80081aa:	f000 fa19 	bl	80085e0 <_Bfree>
 80081ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80081b2:	ea43 0102 	orr.w	r1, r3, r2
 80081b6:	9b04      	ldr	r3, [sp, #16]
 80081b8:	430b      	orrs	r3, r1
 80081ba:	464d      	mov	r5, r9
 80081bc:	d10f      	bne.n	80081de <_dtoa_r+0xa66>
 80081be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80081c2:	d02a      	beq.n	800821a <_dtoa_r+0xaa2>
 80081c4:	9b03      	ldr	r3, [sp, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	dd02      	ble.n	80081d0 <_dtoa_r+0xa58>
 80081ca:	9b02      	ldr	r3, [sp, #8]
 80081cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80081d0:	f88b a000 	strb.w	sl, [fp]
 80081d4:	e775      	b.n	80080c2 <_dtoa_r+0x94a>
 80081d6:	4638      	mov	r0, r7
 80081d8:	e7ba      	b.n	8008150 <_dtoa_r+0x9d8>
 80081da:	2201      	movs	r2, #1
 80081dc:	e7e2      	b.n	80081a4 <_dtoa_r+0xa2c>
 80081de:	9b03      	ldr	r3, [sp, #12]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	db04      	blt.n	80081ee <_dtoa_r+0xa76>
 80081e4:	9906      	ldr	r1, [sp, #24]
 80081e6:	430b      	orrs	r3, r1
 80081e8:	9904      	ldr	r1, [sp, #16]
 80081ea:	430b      	orrs	r3, r1
 80081ec:	d122      	bne.n	8008234 <_dtoa_r+0xabc>
 80081ee:	2a00      	cmp	r2, #0
 80081f0:	ddee      	ble.n	80081d0 <_dtoa_r+0xa58>
 80081f2:	ee18 1a10 	vmov	r1, s16
 80081f6:	2201      	movs	r2, #1
 80081f8:	4620      	mov	r0, r4
 80081fa:	f000 fbc3 	bl	8008984 <__lshift>
 80081fe:	4631      	mov	r1, r6
 8008200:	ee08 0a10 	vmov	s16, r0
 8008204:	f000 fc2e 	bl	8008a64 <__mcmp>
 8008208:	2800      	cmp	r0, #0
 800820a:	dc03      	bgt.n	8008214 <_dtoa_r+0xa9c>
 800820c:	d1e0      	bne.n	80081d0 <_dtoa_r+0xa58>
 800820e:	f01a 0f01 	tst.w	sl, #1
 8008212:	d0dd      	beq.n	80081d0 <_dtoa_r+0xa58>
 8008214:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008218:	d1d7      	bne.n	80081ca <_dtoa_r+0xa52>
 800821a:	2339      	movs	r3, #57	; 0x39
 800821c:	f88b 3000 	strb.w	r3, [fp]
 8008220:	462b      	mov	r3, r5
 8008222:	461d      	mov	r5, r3
 8008224:	3b01      	subs	r3, #1
 8008226:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800822a:	2a39      	cmp	r2, #57	; 0x39
 800822c:	d071      	beq.n	8008312 <_dtoa_r+0xb9a>
 800822e:	3201      	adds	r2, #1
 8008230:	701a      	strb	r2, [r3, #0]
 8008232:	e746      	b.n	80080c2 <_dtoa_r+0x94a>
 8008234:	2a00      	cmp	r2, #0
 8008236:	dd07      	ble.n	8008248 <_dtoa_r+0xad0>
 8008238:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800823c:	d0ed      	beq.n	800821a <_dtoa_r+0xaa2>
 800823e:	f10a 0301 	add.w	r3, sl, #1
 8008242:	f88b 3000 	strb.w	r3, [fp]
 8008246:	e73c      	b.n	80080c2 <_dtoa_r+0x94a>
 8008248:	9b05      	ldr	r3, [sp, #20]
 800824a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800824e:	4599      	cmp	r9, r3
 8008250:	d047      	beq.n	80082e2 <_dtoa_r+0xb6a>
 8008252:	ee18 1a10 	vmov	r1, s16
 8008256:	2300      	movs	r3, #0
 8008258:	220a      	movs	r2, #10
 800825a:	4620      	mov	r0, r4
 800825c:	f000 f9e2 	bl	8008624 <__multadd>
 8008260:	45b8      	cmp	r8, r7
 8008262:	ee08 0a10 	vmov	s16, r0
 8008266:	f04f 0300 	mov.w	r3, #0
 800826a:	f04f 020a 	mov.w	r2, #10
 800826e:	4641      	mov	r1, r8
 8008270:	4620      	mov	r0, r4
 8008272:	d106      	bne.n	8008282 <_dtoa_r+0xb0a>
 8008274:	f000 f9d6 	bl	8008624 <__multadd>
 8008278:	4680      	mov	r8, r0
 800827a:	4607      	mov	r7, r0
 800827c:	f109 0901 	add.w	r9, r9, #1
 8008280:	e772      	b.n	8008168 <_dtoa_r+0x9f0>
 8008282:	f000 f9cf 	bl	8008624 <__multadd>
 8008286:	4639      	mov	r1, r7
 8008288:	4680      	mov	r8, r0
 800828a:	2300      	movs	r3, #0
 800828c:	220a      	movs	r2, #10
 800828e:	4620      	mov	r0, r4
 8008290:	f000 f9c8 	bl	8008624 <__multadd>
 8008294:	4607      	mov	r7, r0
 8008296:	e7f1      	b.n	800827c <_dtoa_r+0xb04>
 8008298:	9b03      	ldr	r3, [sp, #12]
 800829a:	9302      	str	r3, [sp, #8]
 800829c:	9d01      	ldr	r5, [sp, #4]
 800829e:	ee18 0a10 	vmov	r0, s16
 80082a2:	4631      	mov	r1, r6
 80082a4:	f7ff f9dc 	bl	8007660 <quorem>
 80082a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80082ac:	9b01      	ldr	r3, [sp, #4]
 80082ae:	f805 ab01 	strb.w	sl, [r5], #1
 80082b2:	1aea      	subs	r2, r5, r3
 80082b4:	9b02      	ldr	r3, [sp, #8]
 80082b6:	4293      	cmp	r3, r2
 80082b8:	dd09      	ble.n	80082ce <_dtoa_r+0xb56>
 80082ba:	ee18 1a10 	vmov	r1, s16
 80082be:	2300      	movs	r3, #0
 80082c0:	220a      	movs	r2, #10
 80082c2:	4620      	mov	r0, r4
 80082c4:	f000 f9ae 	bl	8008624 <__multadd>
 80082c8:	ee08 0a10 	vmov	s16, r0
 80082cc:	e7e7      	b.n	800829e <_dtoa_r+0xb26>
 80082ce:	9b02      	ldr	r3, [sp, #8]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	bfc8      	it	gt
 80082d4:	461d      	movgt	r5, r3
 80082d6:	9b01      	ldr	r3, [sp, #4]
 80082d8:	bfd8      	it	le
 80082da:	2501      	movle	r5, #1
 80082dc:	441d      	add	r5, r3
 80082de:	f04f 0800 	mov.w	r8, #0
 80082e2:	ee18 1a10 	vmov	r1, s16
 80082e6:	2201      	movs	r2, #1
 80082e8:	4620      	mov	r0, r4
 80082ea:	f000 fb4b 	bl	8008984 <__lshift>
 80082ee:	4631      	mov	r1, r6
 80082f0:	ee08 0a10 	vmov	s16, r0
 80082f4:	f000 fbb6 	bl	8008a64 <__mcmp>
 80082f8:	2800      	cmp	r0, #0
 80082fa:	dc91      	bgt.n	8008220 <_dtoa_r+0xaa8>
 80082fc:	d102      	bne.n	8008304 <_dtoa_r+0xb8c>
 80082fe:	f01a 0f01 	tst.w	sl, #1
 8008302:	d18d      	bne.n	8008220 <_dtoa_r+0xaa8>
 8008304:	462b      	mov	r3, r5
 8008306:	461d      	mov	r5, r3
 8008308:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800830c:	2a30      	cmp	r2, #48	; 0x30
 800830e:	d0fa      	beq.n	8008306 <_dtoa_r+0xb8e>
 8008310:	e6d7      	b.n	80080c2 <_dtoa_r+0x94a>
 8008312:	9a01      	ldr	r2, [sp, #4]
 8008314:	429a      	cmp	r2, r3
 8008316:	d184      	bne.n	8008222 <_dtoa_r+0xaaa>
 8008318:	9b00      	ldr	r3, [sp, #0]
 800831a:	3301      	adds	r3, #1
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	2331      	movs	r3, #49	; 0x31
 8008320:	7013      	strb	r3, [r2, #0]
 8008322:	e6ce      	b.n	80080c2 <_dtoa_r+0x94a>
 8008324:	4b09      	ldr	r3, [pc, #36]	; (800834c <_dtoa_r+0xbd4>)
 8008326:	f7ff ba95 	b.w	8007854 <_dtoa_r+0xdc>
 800832a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800832c:	2b00      	cmp	r3, #0
 800832e:	f47f aa6e 	bne.w	800780e <_dtoa_r+0x96>
 8008332:	4b07      	ldr	r3, [pc, #28]	; (8008350 <_dtoa_r+0xbd8>)
 8008334:	f7ff ba8e 	b.w	8007854 <_dtoa_r+0xdc>
 8008338:	9b02      	ldr	r3, [sp, #8]
 800833a:	2b00      	cmp	r3, #0
 800833c:	dcae      	bgt.n	800829c <_dtoa_r+0xb24>
 800833e:	9b06      	ldr	r3, [sp, #24]
 8008340:	2b02      	cmp	r3, #2
 8008342:	f73f aea8 	bgt.w	8008096 <_dtoa_r+0x91e>
 8008346:	e7a9      	b.n	800829c <_dtoa_r+0xb24>
 8008348:	0800a03b 	.word	0x0800a03b
 800834c:	08009f98 	.word	0x08009f98
 8008350:	08009fbc 	.word	0x08009fbc

08008354 <std>:
 8008354:	2300      	movs	r3, #0
 8008356:	b510      	push	{r4, lr}
 8008358:	4604      	mov	r4, r0
 800835a:	e9c0 3300 	strd	r3, r3, [r0]
 800835e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008362:	6083      	str	r3, [r0, #8]
 8008364:	8181      	strh	r1, [r0, #12]
 8008366:	6643      	str	r3, [r0, #100]	; 0x64
 8008368:	81c2      	strh	r2, [r0, #14]
 800836a:	6183      	str	r3, [r0, #24]
 800836c:	4619      	mov	r1, r3
 800836e:	2208      	movs	r2, #8
 8008370:	305c      	adds	r0, #92	; 0x5c
 8008372:	f7fe fceb 	bl	8006d4c <memset>
 8008376:	4b05      	ldr	r3, [pc, #20]	; (800838c <std+0x38>)
 8008378:	6263      	str	r3, [r4, #36]	; 0x24
 800837a:	4b05      	ldr	r3, [pc, #20]	; (8008390 <std+0x3c>)
 800837c:	62a3      	str	r3, [r4, #40]	; 0x28
 800837e:	4b05      	ldr	r3, [pc, #20]	; (8008394 <std+0x40>)
 8008380:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008382:	4b05      	ldr	r3, [pc, #20]	; (8008398 <std+0x44>)
 8008384:	6224      	str	r4, [r4, #32]
 8008386:	6323      	str	r3, [r4, #48]	; 0x30
 8008388:	bd10      	pop	{r4, pc}
 800838a:	bf00      	nop
 800838c:	08009129 	.word	0x08009129
 8008390:	0800914b 	.word	0x0800914b
 8008394:	08009183 	.word	0x08009183
 8008398:	080091a7 	.word	0x080091a7

0800839c <_cleanup_r>:
 800839c:	4901      	ldr	r1, [pc, #4]	; (80083a4 <_cleanup_r+0x8>)
 800839e:	f000 b8af 	b.w	8008500 <_fwalk_reent>
 80083a2:	bf00      	nop
 80083a4:	080094bd 	.word	0x080094bd

080083a8 <__sfmoreglue>:
 80083a8:	b570      	push	{r4, r5, r6, lr}
 80083aa:	2268      	movs	r2, #104	; 0x68
 80083ac:	1e4d      	subs	r5, r1, #1
 80083ae:	4355      	muls	r5, r2
 80083b0:	460e      	mov	r6, r1
 80083b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80083b6:	f000 fcd9 	bl	8008d6c <_malloc_r>
 80083ba:	4604      	mov	r4, r0
 80083bc:	b140      	cbz	r0, 80083d0 <__sfmoreglue+0x28>
 80083be:	2100      	movs	r1, #0
 80083c0:	e9c0 1600 	strd	r1, r6, [r0]
 80083c4:	300c      	adds	r0, #12
 80083c6:	60a0      	str	r0, [r4, #8]
 80083c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80083cc:	f7fe fcbe 	bl	8006d4c <memset>
 80083d0:	4620      	mov	r0, r4
 80083d2:	bd70      	pop	{r4, r5, r6, pc}

080083d4 <__sfp_lock_acquire>:
 80083d4:	4801      	ldr	r0, [pc, #4]	; (80083dc <__sfp_lock_acquire+0x8>)
 80083d6:	f000 b8b8 	b.w	800854a <__retarget_lock_acquire_recursive>
 80083da:	bf00      	nop
 80083dc:	20000821 	.word	0x20000821

080083e0 <__sfp_lock_release>:
 80083e0:	4801      	ldr	r0, [pc, #4]	; (80083e8 <__sfp_lock_release+0x8>)
 80083e2:	f000 b8b3 	b.w	800854c <__retarget_lock_release_recursive>
 80083e6:	bf00      	nop
 80083e8:	20000821 	.word	0x20000821

080083ec <__sinit_lock_acquire>:
 80083ec:	4801      	ldr	r0, [pc, #4]	; (80083f4 <__sinit_lock_acquire+0x8>)
 80083ee:	f000 b8ac 	b.w	800854a <__retarget_lock_acquire_recursive>
 80083f2:	bf00      	nop
 80083f4:	20000822 	.word	0x20000822

080083f8 <__sinit_lock_release>:
 80083f8:	4801      	ldr	r0, [pc, #4]	; (8008400 <__sinit_lock_release+0x8>)
 80083fa:	f000 b8a7 	b.w	800854c <__retarget_lock_release_recursive>
 80083fe:	bf00      	nop
 8008400:	20000822 	.word	0x20000822

08008404 <__sinit>:
 8008404:	b510      	push	{r4, lr}
 8008406:	4604      	mov	r4, r0
 8008408:	f7ff fff0 	bl	80083ec <__sinit_lock_acquire>
 800840c:	69a3      	ldr	r3, [r4, #24]
 800840e:	b11b      	cbz	r3, 8008418 <__sinit+0x14>
 8008410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008414:	f7ff bff0 	b.w	80083f8 <__sinit_lock_release>
 8008418:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800841c:	6523      	str	r3, [r4, #80]	; 0x50
 800841e:	4b13      	ldr	r3, [pc, #76]	; (800846c <__sinit+0x68>)
 8008420:	4a13      	ldr	r2, [pc, #76]	; (8008470 <__sinit+0x6c>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	62a2      	str	r2, [r4, #40]	; 0x28
 8008426:	42a3      	cmp	r3, r4
 8008428:	bf04      	itt	eq
 800842a:	2301      	moveq	r3, #1
 800842c:	61a3      	streq	r3, [r4, #24]
 800842e:	4620      	mov	r0, r4
 8008430:	f000 f820 	bl	8008474 <__sfp>
 8008434:	6060      	str	r0, [r4, #4]
 8008436:	4620      	mov	r0, r4
 8008438:	f000 f81c 	bl	8008474 <__sfp>
 800843c:	60a0      	str	r0, [r4, #8]
 800843e:	4620      	mov	r0, r4
 8008440:	f000 f818 	bl	8008474 <__sfp>
 8008444:	2200      	movs	r2, #0
 8008446:	60e0      	str	r0, [r4, #12]
 8008448:	2104      	movs	r1, #4
 800844a:	6860      	ldr	r0, [r4, #4]
 800844c:	f7ff ff82 	bl	8008354 <std>
 8008450:	68a0      	ldr	r0, [r4, #8]
 8008452:	2201      	movs	r2, #1
 8008454:	2109      	movs	r1, #9
 8008456:	f7ff ff7d 	bl	8008354 <std>
 800845a:	68e0      	ldr	r0, [r4, #12]
 800845c:	2202      	movs	r2, #2
 800845e:	2112      	movs	r1, #18
 8008460:	f7ff ff78 	bl	8008354 <std>
 8008464:	2301      	movs	r3, #1
 8008466:	61a3      	str	r3, [r4, #24]
 8008468:	e7d2      	b.n	8008410 <__sinit+0xc>
 800846a:	bf00      	nop
 800846c:	08009f84 	.word	0x08009f84
 8008470:	0800839d 	.word	0x0800839d

08008474 <__sfp>:
 8008474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008476:	4607      	mov	r7, r0
 8008478:	f7ff ffac 	bl	80083d4 <__sfp_lock_acquire>
 800847c:	4b1e      	ldr	r3, [pc, #120]	; (80084f8 <__sfp+0x84>)
 800847e:	681e      	ldr	r6, [r3, #0]
 8008480:	69b3      	ldr	r3, [r6, #24]
 8008482:	b913      	cbnz	r3, 800848a <__sfp+0x16>
 8008484:	4630      	mov	r0, r6
 8008486:	f7ff ffbd 	bl	8008404 <__sinit>
 800848a:	3648      	adds	r6, #72	; 0x48
 800848c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008490:	3b01      	subs	r3, #1
 8008492:	d503      	bpl.n	800849c <__sfp+0x28>
 8008494:	6833      	ldr	r3, [r6, #0]
 8008496:	b30b      	cbz	r3, 80084dc <__sfp+0x68>
 8008498:	6836      	ldr	r6, [r6, #0]
 800849a:	e7f7      	b.n	800848c <__sfp+0x18>
 800849c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80084a0:	b9d5      	cbnz	r5, 80084d8 <__sfp+0x64>
 80084a2:	4b16      	ldr	r3, [pc, #88]	; (80084fc <__sfp+0x88>)
 80084a4:	60e3      	str	r3, [r4, #12]
 80084a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80084aa:	6665      	str	r5, [r4, #100]	; 0x64
 80084ac:	f000 f84c 	bl	8008548 <__retarget_lock_init_recursive>
 80084b0:	f7ff ff96 	bl	80083e0 <__sfp_lock_release>
 80084b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80084b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80084bc:	6025      	str	r5, [r4, #0]
 80084be:	61a5      	str	r5, [r4, #24]
 80084c0:	2208      	movs	r2, #8
 80084c2:	4629      	mov	r1, r5
 80084c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80084c8:	f7fe fc40 	bl	8006d4c <memset>
 80084cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80084d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80084d4:	4620      	mov	r0, r4
 80084d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084d8:	3468      	adds	r4, #104	; 0x68
 80084da:	e7d9      	b.n	8008490 <__sfp+0x1c>
 80084dc:	2104      	movs	r1, #4
 80084de:	4638      	mov	r0, r7
 80084e0:	f7ff ff62 	bl	80083a8 <__sfmoreglue>
 80084e4:	4604      	mov	r4, r0
 80084e6:	6030      	str	r0, [r6, #0]
 80084e8:	2800      	cmp	r0, #0
 80084ea:	d1d5      	bne.n	8008498 <__sfp+0x24>
 80084ec:	f7ff ff78 	bl	80083e0 <__sfp_lock_release>
 80084f0:	230c      	movs	r3, #12
 80084f2:	603b      	str	r3, [r7, #0]
 80084f4:	e7ee      	b.n	80084d4 <__sfp+0x60>
 80084f6:	bf00      	nop
 80084f8:	08009f84 	.word	0x08009f84
 80084fc:	ffff0001 	.word	0xffff0001

08008500 <_fwalk_reent>:
 8008500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008504:	4606      	mov	r6, r0
 8008506:	4688      	mov	r8, r1
 8008508:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800850c:	2700      	movs	r7, #0
 800850e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008512:	f1b9 0901 	subs.w	r9, r9, #1
 8008516:	d505      	bpl.n	8008524 <_fwalk_reent+0x24>
 8008518:	6824      	ldr	r4, [r4, #0]
 800851a:	2c00      	cmp	r4, #0
 800851c:	d1f7      	bne.n	800850e <_fwalk_reent+0xe>
 800851e:	4638      	mov	r0, r7
 8008520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008524:	89ab      	ldrh	r3, [r5, #12]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d907      	bls.n	800853a <_fwalk_reent+0x3a>
 800852a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800852e:	3301      	adds	r3, #1
 8008530:	d003      	beq.n	800853a <_fwalk_reent+0x3a>
 8008532:	4629      	mov	r1, r5
 8008534:	4630      	mov	r0, r6
 8008536:	47c0      	blx	r8
 8008538:	4307      	orrs	r7, r0
 800853a:	3568      	adds	r5, #104	; 0x68
 800853c:	e7e9      	b.n	8008512 <_fwalk_reent+0x12>
	...

08008540 <_localeconv_r>:
 8008540:	4800      	ldr	r0, [pc, #0]	; (8008544 <_localeconv_r+0x4>)
 8008542:	4770      	bx	lr
 8008544:	2000016c 	.word	0x2000016c

08008548 <__retarget_lock_init_recursive>:
 8008548:	4770      	bx	lr

0800854a <__retarget_lock_acquire_recursive>:
 800854a:	4770      	bx	lr

0800854c <__retarget_lock_release_recursive>:
 800854c:	4770      	bx	lr
	...

08008550 <malloc>:
 8008550:	4b02      	ldr	r3, [pc, #8]	; (800855c <malloc+0xc>)
 8008552:	4601      	mov	r1, r0
 8008554:	6818      	ldr	r0, [r3, #0]
 8008556:	f000 bc09 	b.w	8008d6c <_malloc_r>
 800855a:	bf00      	nop
 800855c:	20000018 	.word	0x20000018

08008560 <_Balloc>:
 8008560:	b570      	push	{r4, r5, r6, lr}
 8008562:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008564:	4604      	mov	r4, r0
 8008566:	460d      	mov	r5, r1
 8008568:	b976      	cbnz	r6, 8008588 <_Balloc+0x28>
 800856a:	2010      	movs	r0, #16
 800856c:	f7ff fff0 	bl	8008550 <malloc>
 8008570:	4602      	mov	r2, r0
 8008572:	6260      	str	r0, [r4, #36]	; 0x24
 8008574:	b920      	cbnz	r0, 8008580 <_Balloc+0x20>
 8008576:	4b18      	ldr	r3, [pc, #96]	; (80085d8 <_Balloc+0x78>)
 8008578:	4818      	ldr	r0, [pc, #96]	; (80085dc <_Balloc+0x7c>)
 800857a:	2166      	movs	r1, #102	; 0x66
 800857c:	f000 feea 	bl	8009354 <__assert_func>
 8008580:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008584:	6006      	str	r6, [r0, #0]
 8008586:	60c6      	str	r6, [r0, #12]
 8008588:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800858a:	68f3      	ldr	r3, [r6, #12]
 800858c:	b183      	cbz	r3, 80085b0 <_Balloc+0x50>
 800858e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008596:	b9b8      	cbnz	r0, 80085c8 <_Balloc+0x68>
 8008598:	2101      	movs	r1, #1
 800859a:	fa01 f605 	lsl.w	r6, r1, r5
 800859e:	1d72      	adds	r2, r6, #5
 80085a0:	0092      	lsls	r2, r2, #2
 80085a2:	4620      	mov	r0, r4
 80085a4:	f000 fb60 	bl	8008c68 <_calloc_r>
 80085a8:	b160      	cbz	r0, 80085c4 <_Balloc+0x64>
 80085aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085ae:	e00e      	b.n	80085ce <_Balloc+0x6e>
 80085b0:	2221      	movs	r2, #33	; 0x21
 80085b2:	2104      	movs	r1, #4
 80085b4:	4620      	mov	r0, r4
 80085b6:	f000 fb57 	bl	8008c68 <_calloc_r>
 80085ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085bc:	60f0      	str	r0, [r6, #12]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1e4      	bne.n	800858e <_Balloc+0x2e>
 80085c4:	2000      	movs	r0, #0
 80085c6:	bd70      	pop	{r4, r5, r6, pc}
 80085c8:	6802      	ldr	r2, [r0, #0]
 80085ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085ce:	2300      	movs	r3, #0
 80085d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085d4:	e7f7      	b.n	80085c6 <_Balloc+0x66>
 80085d6:	bf00      	nop
 80085d8:	08009fc9 	.word	0x08009fc9
 80085dc:	0800a0ac 	.word	0x0800a0ac

080085e0 <_Bfree>:
 80085e0:	b570      	push	{r4, r5, r6, lr}
 80085e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80085e4:	4605      	mov	r5, r0
 80085e6:	460c      	mov	r4, r1
 80085e8:	b976      	cbnz	r6, 8008608 <_Bfree+0x28>
 80085ea:	2010      	movs	r0, #16
 80085ec:	f7ff ffb0 	bl	8008550 <malloc>
 80085f0:	4602      	mov	r2, r0
 80085f2:	6268      	str	r0, [r5, #36]	; 0x24
 80085f4:	b920      	cbnz	r0, 8008600 <_Bfree+0x20>
 80085f6:	4b09      	ldr	r3, [pc, #36]	; (800861c <_Bfree+0x3c>)
 80085f8:	4809      	ldr	r0, [pc, #36]	; (8008620 <_Bfree+0x40>)
 80085fa:	218a      	movs	r1, #138	; 0x8a
 80085fc:	f000 feaa 	bl	8009354 <__assert_func>
 8008600:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008604:	6006      	str	r6, [r0, #0]
 8008606:	60c6      	str	r6, [r0, #12]
 8008608:	b13c      	cbz	r4, 800861a <_Bfree+0x3a>
 800860a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800860c:	6862      	ldr	r2, [r4, #4]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008614:	6021      	str	r1, [r4, #0]
 8008616:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800861a:	bd70      	pop	{r4, r5, r6, pc}
 800861c:	08009fc9 	.word	0x08009fc9
 8008620:	0800a0ac 	.word	0x0800a0ac

08008624 <__multadd>:
 8008624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008628:	690d      	ldr	r5, [r1, #16]
 800862a:	4607      	mov	r7, r0
 800862c:	460c      	mov	r4, r1
 800862e:	461e      	mov	r6, r3
 8008630:	f101 0c14 	add.w	ip, r1, #20
 8008634:	2000      	movs	r0, #0
 8008636:	f8dc 3000 	ldr.w	r3, [ip]
 800863a:	b299      	uxth	r1, r3
 800863c:	fb02 6101 	mla	r1, r2, r1, r6
 8008640:	0c1e      	lsrs	r6, r3, #16
 8008642:	0c0b      	lsrs	r3, r1, #16
 8008644:	fb02 3306 	mla	r3, r2, r6, r3
 8008648:	b289      	uxth	r1, r1
 800864a:	3001      	adds	r0, #1
 800864c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008650:	4285      	cmp	r5, r0
 8008652:	f84c 1b04 	str.w	r1, [ip], #4
 8008656:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800865a:	dcec      	bgt.n	8008636 <__multadd+0x12>
 800865c:	b30e      	cbz	r6, 80086a2 <__multadd+0x7e>
 800865e:	68a3      	ldr	r3, [r4, #8]
 8008660:	42ab      	cmp	r3, r5
 8008662:	dc19      	bgt.n	8008698 <__multadd+0x74>
 8008664:	6861      	ldr	r1, [r4, #4]
 8008666:	4638      	mov	r0, r7
 8008668:	3101      	adds	r1, #1
 800866a:	f7ff ff79 	bl	8008560 <_Balloc>
 800866e:	4680      	mov	r8, r0
 8008670:	b928      	cbnz	r0, 800867e <__multadd+0x5a>
 8008672:	4602      	mov	r2, r0
 8008674:	4b0c      	ldr	r3, [pc, #48]	; (80086a8 <__multadd+0x84>)
 8008676:	480d      	ldr	r0, [pc, #52]	; (80086ac <__multadd+0x88>)
 8008678:	21b5      	movs	r1, #181	; 0xb5
 800867a:	f000 fe6b 	bl	8009354 <__assert_func>
 800867e:	6922      	ldr	r2, [r4, #16]
 8008680:	3202      	adds	r2, #2
 8008682:	f104 010c 	add.w	r1, r4, #12
 8008686:	0092      	lsls	r2, r2, #2
 8008688:	300c      	adds	r0, #12
 800868a:	f7fe fb51 	bl	8006d30 <memcpy>
 800868e:	4621      	mov	r1, r4
 8008690:	4638      	mov	r0, r7
 8008692:	f7ff ffa5 	bl	80085e0 <_Bfree>
 8008696:	4644      	mov	r4, r8
 8008698:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800869c:	3501      	adds	r5, #1
 800869e:	615e      	str	r6, [r3, #20]
 80086a0:	6125      	str	r5, [r4, #16]
 80086a2:	4620      	mov	r0, r4
 80086a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086a8:	0800a03b 	.word	0x0800a03b
 80086ac:	0800a0ac 	.word	0x0800a0ac

080086b0 <__hi0bits>:
 80086b0:	0c03      	lsrs	r3, r0, #16
 80086b2:	041b      	lsls	r3, r3, #16
 80086b4:	b9d3      	cbnz	r3, 80086ec <__hi0bits+0x3c>
 80086b6:	0400      	lsls	r0, r0, #16
 80086b8:	2310      	movs	r3, #16
 80086ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80086be:	bf04      	itt	eq
 80086c0:	0200      	lsleq	r0, r0, #8
 80086c2:	3308      	addeq	r3, #8
 80086c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80086c8:	bf04      	itt	eq
 80086ca:	0100      	lsleq	r0, r0, #4
 80086cc:	3304      	addeq	r3, #4
 80086ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80086d2:	bf04      	itt	eq
 80086d4:	0080      	lsleq	r0, r0, #2
 80086d6:	3302      	addeq	r3, #2
 80086d8:	2800      	cmp	r0, #0
 80086da:	db05      	blt.n	80086e8 <__hi0bits+0x38>
 80086dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80086e0:	f103 0301 	add.w	r3, r3, #1
 80086e4:	bf08      	it	eq
 80086e6:	2320      	moveq	r3, #32
 80086e8:	4618      	mov	r0, r3
 80086ea:	4770      	bx	lr
 80086ec:	2300      	movs	r3, #0
 80086ee:	e7e4      	b.n	80086ba <__hi0bits+0xa>

080086f0 <__lo0bits>:
 80086f0:	6803      	ldr	r3, [r0, #0]
 80086f2:	f013 0207 	ands.w	r2, r3, #7
 80086f6:	4601      	mov	r1, r0
 80086f8:	d00b      	beq.n	8008712 <__lo0bits+0x22>
 80086fa:	07da      	lsls	r2, r3, #31
 80086fc:	d423      	bmi.n	8008746 <__lo0bits+0x56>
 80086fe:	0798      	lsls	r0, r3, #30
 8008700:	bf49      	itett	mi
 8008702:	085b      	lsrmi	r3, r3, #1
 8008704:	089b      	lsrpl	r3, r3, #2
 8008706:	2001      	movmi	r0, #1
 8008708:	600b      	strmi	r3, [r1, #0]
 800870a:	bf5c      	itt	pl
 800870c:	600b      	strpl	r3, [r1, #0]
 800870e:	2002      	movpl	r0, #2
 8008710:	4770      	bx	lr
 8008712:	b298      	uxth	r0, r3
 8008714:	b9a8      	cbnz	r0, 8008742 <__lo0bits+0x52>
 8008716:	0c1b      	lsrs	r3, r3, #16
 8008718:	2010      	movs	r0, #16
 800871a:	b2da      	uxtb	r2, r3
 800871c:	b90a      	cbnz	r2, 8008722 <__lo0bits+0x32>
 800871e:	3008      	adds	r0, #8
 8008720:	0a1b      	lsrs	r3, r3, #8
 8008722:	071a      	lsls	r2, r3, #28
 8008724:	bf04      	itt	eq
 8008726:	091b      	lsreq	r3, r3, #4
 8008728:	3004      	addeq	r0, #4
 800872a:	079a      	lsls	r2, r3, #30
 800872c:	bf04      	itt	eq
 800872e:	089b      	lsreq	r3, r3, #2
 8008730:	3002      	addeq	r0, #2
 8008732:	07da      	lsls	r2, r3, #31
 8008734:	d403      	bmi.n	800873e <__lo0bits+0x4e>
 8008736:	085b      	lsrs	r3, r3, #1
 8008738:	f100 0001 	add.w	r0, r0, #1
 800873c:	d005      	beq.n	800874a <__lo0bits+0x5a>
 800873e:	600b      	str	r3, [r1, #0]
 8008740:	4770      	bx	lr
 8008742:	4610      	mov	r0, r2
 8008744:	e7e9      	b.n	800871a <__lo0bits+0x2a>
 8008746:	2000      	movs	r0, #0
 8008748:	4770      	bx	lr
 800874a:	2020      	movs	r0, #32
 800874c:	4770      	bx	lr
	...

08008750 <__i2b>:
 8008750:	b510      	push	{r4, lr}
 8008752:	460c      	mov	r4, r1
 8008754:	2101      	movs	r1, #1
 8008756:	f7ff ff03 	bl	8008560 <_Balloc>
 800875a:	4602      	mov	r2, r0
 800875c:	b928      	cbnz	r0, 800876a <__i2b+0x1a>
 800875e:	4b05      	ldr	r3, [pc, #20]	; (8008774 <__i2b+0x24>)
 8008760:	4805      	ldr	r0, [pc, #20]	; (8008778 <__i2b+0x28>)
 8008762:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008766:	f000 fdf5 	bl	8009354 <__assert_func>
 800876a:	2301      	movs	r3, #1
 800876c:	6144      	str	r4, [r0, #20]
 800876e:	6103      	str	r3, [r0, #16]
 8008770:	bd10      	pop	{r4, pc}
 8008772:	bf00      	nop
 8008774:	0800a03b 	.word	0x0800a03b
 8008778:	0800a0ac 	.word	0x0800a0ac

0800877c <__multiply>:
 800877c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008780:	4691      	mov	r9, r2
 8008782:	690a      	ldr	r2, [r1, #16]
 8008784:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008788:	429a      	cmp	r2, r3
 800878a:	bfb8      	it	lt
 800878c:	460b      	movlt	r3, r1
 800878e:	460c      	mov	r4, r1
 8008790:	bfbc      	itt	lt
 8008792:	464c      	movlt	r4, r9
 8008794:	4699      	movlt	r9, r3
 8008796:	6927      	ldr	r7, [r4, #16]
 8008798:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800879c:	68a3      	ldr	r3, [r4, #8]
 800879e:	6861      	ldr	r1, [r4, #4]
 80087a0:	eb07 060a 	add.w	r6, r7, sl
 80087a4:	42b3      	cmp	r3, r6
 80087a6:	b085      	sub	sp, #20
 80087a8:	bfb8      	it	lt
 80087aa:	3101      	addlt	r1, #1
 80087ac:	f7ff fed8 	bl	8008560 <_Balloc>
 80087b0:	b930      	cbnz	r0, 80087c0 <__multiply+0x44>
 80087b2:	4602      	mov	r2, r0
 80087b4:	4b44      	ldr	r3, [pc, #272]	; (80088c8 <__multiply+0x14c>)
 80087b6:	4845      	ldr	r0, [pc, #276]	; (80088cc <__multiply+0x150>)
 80087b8:	f240 115d 	movw	r1, #349	; 0x15d
 80087bc:	f000 fdca 	bl	8009354 <__assert_func>
 80087c0:	f100 0514 	add.w	r5, r0, #20
 80087c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087c8:	462b      	mov	r3, r5
 80087ca:	2200      	movs	r2, #0
 80087cc:	4543      	cmp	r3, r8
 80087ce:	d321      	bcc.n	8008814 <__multiply+0x98>
 80087d0:	f104 0314 	add.w	r3, r4, #20
 80087d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80087d8:	f109 0314 	add.w	r3, r9, #20
 80087dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80087e0:	9202      	str	r2, [sp, #8]
 80087e2:	1b3a      	subs	r2, r7, r4
 80087e4:	3a15      	subs	r2, #21
 80087e6:	f022 0203 	bic.w	r2, r2, #3
 80087ea:	3204      	adds	r2, #4
 80087ec:	f104 0115 	add.w	r1, r4, #21
 80087f0:	428f      	cmp	r7, r1
 80087f2:	bf38      	it	cc
 80087f4:	2204      	movcc	r2, #4
 80087f6:	9201      	str	r2, [sp, #4]
 80087f8:	9a02      	ldr	r2, [sp, #8]
 80087fa:	9303      	str	r3, [sp, #12]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d80c      	bhi.n	800881a <__multiply+0x9e>
 8008800:	2e00      	cmp	r6, #0
 8008802:	dd03      	ble.n	800880c <__multiply+0x90>
 8008804:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008808:	2b00      	cmp	r3, #0
 800880a:	d05a      	beq.n	80088c2 <__multiply+0x146>
 800880c:	6106      	str	r6, [r0, #16]
 800880e:	b005      	add	sp, #20
 8008810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008814:	f843 2b04 	str.w	r2, [r3], #4
 8008818:	e7d8      	b.n	80087cc <__multiply+0x50>
 800881a:	f8b3 a000 	ldrh.w	sl, [r3]
 800881e:	f1ba 0f00 	cmp.w	sl, #0
 8008822:	d024      	beq.n	800886e <__multiply+0xf2>
 8008824:	f104 0e14 	add.w	lr, r4, #20
 8008828:	46a9      	mov	r9, r5
 800882a:	f04f 0c00 	mov.w	ip, #0
 800882e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008832:	f8d9 1000 	ldr.w	r1, [r9]
 8008836:	fa1f fb82 	uxth.w	fp, r2
 800883a:	b289      	uxth	r1, r1
 800883c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008840:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008844:	f8d9 2000 	ldr.w	r2, [r9]
 8008848:	4461      	add	r1, ip
 800884a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800884e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008852:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008856:	b289      	uxth	r1, r1
 8008858:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800885c:	4577      	cmp	r7, lr
 800885e:	f849 1b04 	str.w	r1, [r9], #4
 8008862:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008866:	d8e2      	bhi.n	800882e <__multiply+0xb2>
 8008868:	9a01      	ldr	r2, [sp, #4]
 800886a:	f845 c002 	str.w	ip, [r5, r2]
 800886e:	9a03      	ldr	r2, [sp, #12]
 8008870:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008874:	3304      	adds	r3, #4
 8008876:	f1b9 0f00 	cmp.w	r9, #0
 800887a:	d020      	beq.n	80088be <__multiply+0x142>
 800887c:	6829      	ldr	r1, [r5, #0]
 800887e:	f104 0c14 	add.w	ip, r4, #20
 8008882:	46ae      	mov	lr, r5
 8008884:	f04f 0a00 	mov.w	sl, #0
 8008888:	f8bc b000 	ldrh.w	fp, [ip]
 800888c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008890:	fb09 220b 	mla	r2, r9, fp, r2
 8008894:	4492      	add	sl, r2
 8008896:	b289      	uxth	r1, r1
 8008898:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800889c:	f84e 1b04 	str.w	r1, [lr], #4
 80088a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80088a4:	f8be 1000 	ldrh.w	r1, [lr]
 80088a8:	0c12      	lsrs	r2, r2, #16
 80088aa:	fb09 1102 	mla	r1, r9, r2, r1
 80088ae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80088b2:	4567      	cmp	r7, ip
 80088b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80088b8:	d8e6      	bhi.n	8008888 <__multiply+0x10c>
 80088ba:	9a01      	ldr	r2, [sp, #4]
 80088bc:	50a9      	str	r1, [r5, r2]
 80088be:	3504      	adds	r5, #4
 80088c0:	e79a      	b.n	80087f8 <__multiply+0x7c>
 80088c2:	3e01      	subs	r6, #1
 80088c4:	e79c      	b.n	8008800 <__multiply+0x84>
 80088c6:	bf00      	nop
 80088c8:	0800a03b 	.word	0x0800a03b
 80088cc:	0800a0ac 	.word	0x0800a0ac

080088d0 <__pow5mult>:
 80088d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088d4:	4615      	mov	r5, r2
 80088d6:	f012 0203 	ands.w	r2, r2, #3
 80088da:	4606      	mov	r6, r0
 80088dc:	460f      	mov	r7, r1
 80088de:	d007      	beq.n	80088f0 <__pow5mult+0x20>
 80088e0:	4c25      	ldr	r4, [pc, #148]	; (8008978 <__pow5mult+0xa8>)
 80088e2:	3a01      	subs	r2, #1
 80088e4:	2300      	movs	r3, #0
 80088e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088ea:	f7ff fe9b 	bl	8008624 <__multadd>
 80088ee:	4607      	mov	r7, r0
 80088f0:	10ad      	asrs	r5, r5, #2
 80088f2:	d03d      	beq.n	8008970 <__pow5mult+0xa0>
 80088f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80088f6:	b97c      	cbnz	r4, 8008918 <__pow5mult+0x48>
 80088f8:	2010      	movs	r0, #16
 80088fa:	f7ff fe29 	bl	8008550 <malloc>
 80088fe:	4602      	mov	r2, r0
 8008900:	6270      	str	r0, [r6, #36]	; 0x24
 8008902:	b928      	cbnz	r0, 8008910 <__pow5mult+0x40>
 8008904:	4b1d      	ldr	r3, [pc, #116]	; (800897c <__pow5mult+0xac>)
 8008906:	481e      	ldr	r0, [pc, #120]	; (8008980 <__pow5mult+0xb0>)
 8008908:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800890c:	f000 fd22 	bl	8009354 <__assert_func>
 8008910:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008914:	6004      	str	r4, [r0, #0]
 8008916:	60c4      	str	r4, [r0, #12]
 8008918:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800891c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008920:	b94c      	cbnz	r4, 8008936 <__pow5mult+0x66>
 8008922:	f240 2171 	movw	r1, #625	; 0x271
 8008926:	4630      	mov	r0, r6
 8008928:	f7ff ff12 	bl	8008750 <__i2b>
 800892c:	2300      	movs	r3, #0
 800892e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008932:	4604      	mov	r4, r0
 8008934:	6003      	str	r3, [r0, #0]
 8008936:	f04f 0900 	mov.w	r9, #0
 800893a:	07eb      	lsls	r3, r5, #31
 800893c:	d50a      	bpl.n	8008954 <__pow5mult+0x84>
 800893e:	4639      	mov	r1, r7
 8008940:	4622      	mov	r2, r4
 8008942:	4630      	mov	r0, r6
 8008944:	f7ff ff1a 	bl	800877c <__multiply>
 8008948:	4639      	mov	r1, r7
 800894a:	4680      	mov	r8, r0
 800894c:	4630      	mov	r0, r6
 800894e:	f7ff fe47 	bl	80085e0 <_Bfree>
 8008952:	4647      	mov	r7, r8
 8008954:	106d      	asrs	r5, r5, #1
 8008956:	d00b      	beq.n	8008970 <__pow5mult+0xa0>
 8008958:	6820      	ldr	r0, [r4, #0]
 800895a:	b938      	cbnz	r0, 800896c <__pow5mult+0x9c>
 800895c:	4622      	mov	r2, r4
 800895e:	4621      	mov	r1, r4
 8008960:	4630      	mov	r0, r6
 8008962:	f7ff ff0b 	bl	800877c <__multiply>
 8008966:	6020      	str	r0, [r4, #0]
 8008968:	f8c0 9000 	str.w	r9, [r0]
 800896c:	4604      	mov	r4, r0
 800896e:	e7e4      	b.n	800893a <__pow5mult+0x6a>
 8008970:	4638      	mov	r0, r7
 8008972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008976:	bf00      	nop
 8008978:	0800a1f8 	.word	0x0800a1f8
 800897c:	08009fc9 	.word	0x08009fc9
 8008980:	0800a0ac 	.word	0x0800a0ac

08008984 <__lshift>:
 8008984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008988:	460c      	mov	r4, r1
 800898a:	6849      	ldr	r1, [r1, #4]
 800898c:	6923      	ldr	r3, [r4, #16]
 800898e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008992:	68a3      	ldr	r3, [r4, #8]
 8008994:	4607      	mov	r7, r0
 8008996:	4691      	mov	r9, r2
 8008998:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800899c:	f108 0601 	add.w	r6, r8, #1
 80089a0:	42b3      	cmp	r3, r6
 80089a2:	db0b      	blt.n	80089bc <__lshift+0x38>
 80089a4:	4638      	mov	r0, r7
 80089a6:	f7ff fddb 	bl	8008560 <_Balloc>
 80089aa:	4605      	mov	r5, r0
 80089ac:	b948      	cbnz	r0, 80089c2 <__lshift+0x3e>
 80089ae:	4602      	mov	r2, r0
 80089b0:	4b2a      	ldr	r3, [pc, #168]	; (8008a5c <__lshift+0xd8>)
 80089b2:	482b      	ldr	r0, [pc, #172]	; (8008a60 <__lshift+0xdc>)
 80089b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80089b8:	f000 fccc 	bl	8009354 <__assert_func>
 80089bc:	3101      	adds	r1, #1
 80089be:	005b      	lsls	r3, r3, #1
 80089c0:	e7ee      	b.n	80089a0 <__lshift+0x1c>
 80089c2:	2300      	movs	r3, #0
 80089c4:	f100 0114 	add.w	r1, r0, #20
 80089c8:	f100 0210 	add.w	r2, r0, #16
 80089cc:	4618      	mov	r0, r3
 80089ce:	4553      	cmp	r3, sl
 80089d0:	db37      	blt.n	8008a42 <__lshift+0xbe>
 80089d2:	6920      	ldr	r0, [r4, #16]
 80089d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089d8:	f104 0314 	add.w	r3, r4, #20
 80089dc:	f019 091f 	ands.w	r9, r9, #31
 80089e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80089e8:	d02f      	beq.n	8008a4a <__lshift+0xc6>
 80089ea:	f1c9 0e20 	rsb	lr, r9, #32
 80089ee:	468a      	mov	sl, r1
 80089f0:	f04f 0c00 	mov.w	ip, #0
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	fa02 f209 	lsl.w	r2, r2, r9
 80089fa:	ea42 020c 	orr.w	r2, r2, ip
 80089fe:	f84a 2b04 	str.w	r2, [sl], #4
 8008a02:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a06:	4298      	cmp	r0, r3
 8008a08:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008a0c:	d8f2      	bhi.n	80089f4 <__lshift+0x70>
 8008a0e:	1b03      	subs	r3, r0, r4
 8008a10:	3b15      	subs	r3, #21
 8008a12:	f023 0303 	bic.w	r3, r3, #3
 8008a16:	3304      	adds	r3, #4
 8008a18:	f104 0215 	add.w	r2, r4, #21
 8008a1c:	4290      	cmp	r0, r2
 8008a1e:	bf38      	it	cc
 8008a20:	2304      	movcc	r3, #4
 8008a22:	f841 c003 	str.w	ip, [r1, r3]
 8008a26:	f1bc 0f00 	cmp.w	ip, #0
 8008a2a:	d001      	beq.n	8008a30 <__lshift+0xac>
 8008a2c:	f108 0602 	add.w	r6, r8, #2
 8008a30:	3e01      	subs	r6, #1
 8008a32:	4638      	mov	r0, r7
 8008a34:	612e      	str	r6, [r5, #16]
 8008a36:	4621      	mov	r1, r4
 8008a38:	f7ff fdd2 	bl	80085e0 <_Bfree>
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a42:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a46:	3301      	adds	r3, #1
 8008a48:	e7c1      	b.n	80089ce <__lshift+0x4a>
 8008a4a:	3904      	subs	r1, #4
 8008a4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a50:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a54:	4298      	cmp	r0, r3
 8008a56:	d8f9      	bhi.n	8008a4c <__lshift+0xc8>
 8008a58:	e7ea      	b.n	8008a30 <__lshift+0xac>
 8008a5a:	bf00      	nop
 8008a5c:	0800a03b 	.word	0x0800a03b
 8008a60:	0800a0ac 	.word	0x0800a0ac

08008a64 <__mcmp>:
 8008a64:	b530      	push	{r4, r5, lr}
 8008a66:	6902      	ldr	r2, [r0, #16]
 8008a68:	690c      	ldr	r4, [r1, #16]
 8008a6a:	1b12      	subs	r2, r2, r4
 8008a6c:	d10e      	bne.n	8008a8c <__mcmp+0x28>
 8008a6e:	f100 0314 	add.w	r3, r0, #20
 8008a72:	3114      	adds	r1, #20
 8008a74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008a78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008a7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008a80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008a84:	42a5      	cmp	r5, r4
 8008a86:	d003      	beq.n	8008a90 <__mcmp+0x2c>
 8008a88:	d305      	bcc.n	8008a96 <__mcmp+0x32>
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	4610      	mov	r0, r2
 8008a8e:	bd30      	pop	{r4, r5, pc}
 8008a90:	4283      	cmp	r3, r0
 8008a92:	d3f3      	bcc.n	8008a7c <__mcmp+0x18>
 8008a94:	e7fa      	b.n	8008a8c <__mcmp+0x28>
 8008a96:	f04f 32ff 	mov.w	r2, #4294967295
 8008a9a:	e7f7      	b.n	8008a8c <__mcmp+0x28>

08008a9c <__mdiff>:
 8008a9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa0:	460c      	mov	r4, r1
 8008aa2:	4606      	mov	r6, r0
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	4690      	mov	r8, r2
 8008aaa:	f7ff ffdb 	bl	8008a64 <__mcmp>
 8008aae:	1e05      	subs	r5, r0, #0
 8008ab0:	d110      	bne.n	8008ad4 <__mdiff+0x38>
 8008ab2:	4629      	mov	r1, r5
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	f7ff fd53 	bl	8008560 <_Balloc>
 8008aba:	b930      	cbnz	r0, 8008aca <__mdiff+0x2e>
 8008abc:	4b3a      	ldr	r3, [pc, #232]	; (8008ba8 <__mdiff+0x10c>)
 8008abe:	4602      	mov	r2, r0
 8008ac0:	f240 2132 	movw	r1, #562	; 0x232
 8008ac4:	4839      	ldr	r0, [pc, #228]	; (8008bac <__mdiff+0x110>)
 8008ac6:	f000 fc45 	bl	8009354 <__assert_func>
 8008aca:	2301      	movs	r3, #1
 8008acc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ad0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad4:	bfa4      	itt	ge
 8008ad6:	4643      	movge	r3, r8
 8008ad8:	46a0      	movge	r8, r4
 8008ada:	4630      	mov	r0, r6
 8008adc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008ae0:	bfa6      	itte	ge
 8008ae2:	461c      	movge	r4, r3
 8008ae4:	2500      	movge	r5, #0
 8008ae6:	2501      	movlt	r5, #1
 8008ae8:	f7ff fd3a 	bl	8008560 <_Balloc>
 8008aec:	b920      	cbnz	r0, 8008af8 <__mdiff+0x5c>
 8008aee:	4b2e      	ldr	r3, [pc, #184]	; (8008ba8 <__mdiff+0x10c>)
 8008af0:	4602      	mov	r2, r0
 8008af2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008af6:	e7e5      	b.n	8008ac4 <__mdiff+0x28>
 8008af8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008afc:	6926      	ldr	r6, [r4, #16]
 8008afe:	60c5      	str	r5, [r0, #12]
 8008b00:	f104 0914 	add.w	r9, r4, #20
 8008b04:	f108 0514 	add.w	r5, r8, #20
 8008b08:	f100 0e14 	add.w	lr, r0, #20
 8008b0c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008b10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008b14:	f108 0210 	add.w	r2, r8, #16
 8008b18:	46f2      	mov	sl, lr
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008b24:	fa1f f883 	uxth.w	r8, r3
 8008b28:	fa11 f18b 	uxtah	r1, r1, fp
 8008b2c:	0c1b      	lsrs	r3, r3, #16
 8008b2e:	eba1 0808 	sub.w	r8, r1, r8
 8008b32:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b36:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008b3a:	fa1f f888 	uxth.w	r8, r8
 8008b3e:	1419      	asrs	r1, r3, #16
 8008b40:	454e      	cmp	r6, r9
 8008b42:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008b46:	f84a 3b04 	str.w	r3, [sl], #4
 8008b4a:	d8e7      	bhi.n	8008b1c <__mdiff+0x80>
 8008b4c:	1b33      	subs	r3, r6, r4
 8008b4e:	3b15      	subs	r3, #21
 8008b50:	f023 0303 	bic.w	r3, r3, #3
 8008b54:	3304      	adds	r3, #4
 8008b56:	3415      	adds	r4, #21
 8008b58:	42a6      	cmp	r6, r4
 8008b5a:	bf38      	it	cc
 8008b5c:	2304      	movcc	r3, #4
 8008b5e:	441d      	add	r5, r3
 8008b60:	4473      	add	r3, lr
 8008b62:	469e      	mov	lr, r3
 8008b64:	462e      	mov	r6, r5
 8008b66:	4566      	cmp	r6, ip
 8008b68:	d30e      	bcc.n	8008b88 <__mdiff+0xec>
 8008b6a:	f10c 0203 	add.w	r2, ip, #3
 8008b6e:	1b52      	subs	r2, r2, r5
 8008b70:	f022 0203 	bic.w	r2, r2, #3
 8008b74:	3d03      	subs	r5, #3
 8008b76:	45ac      	cmp	ip, r5
 8008b78:	bf38      	it	cc
 8008b7a:	2200      	movcc	r2, #0
 8008b7c:	441a      	add	r2, r3
 8008b7e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008b82:	b17b      	cbz	r3, 8008ba4 <__mdiff+0x108>
 8008b84:	6107      	str	r7, [r0, #16]
 8008b86:	e7a3      	b.n	8008ad0 <__mdiff+0x34>
 8008b88:	f856 8b04 	ldr.w	r8, [r6], #4
 8008b8c:	fa11 f288 	uxtah	r2, r1, r8
 8008b90:	1414      	asrs	r4, r2, #16
 8008b92:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b96:	b292      	uxth	r2, r2
 8008b98:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008b9c:	f84e 2b04 	str.w	r2, [lr], #4
 8008ba0:	1421      	asrs	r1, r4, #16
 8008ba2:	e7e0      	b.n	8008b66 <__mdiff+0xca>
 8008ba4:	3f01      	subs	r7, #1
 8008ba6:	e7ea      	b.n	8008b7e <__mdiff+0xe2>
 8008ba8:	0800a03b 	.word	0x0800a03b
 8008bac:	0800a0ac 	.word	0x0800a0ac

08008bb0 <__d2b>:
 8008bb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bb4:	4689      	mov	r9, r1
 8008bb6:	2101      	movs	r1, #1
 8008bb8:	ec57 6b10 	vmov	r6, r7, d0
 8008bbc:	4690      	mov	r8, r2
 8008bbe:	f7ff fccf 	bl	8008560 <_Balloc>
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	b930      	cbnz	r0, 8008bd4 <__d2b+0x24>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	4b25      	ldr	r3, [pc, #148]	; (8008c60 <__d2b+0xb0>)
 8008bca:	4826      	ldr	r0, [pc, #152]	; (8008c64 <__d2b+0xb4>)
 8008bcc:	f240 310a 	movw	r1, #778	; 0x30a
 8008bd0:	f000 fbc0 	bl	8009354 <__assert_func>
 8008bd4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008bd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008bdc:	bb35      	cbnz	r5, 8008c2c <__d2b+0x7c>
 8008bde:	2e00      	cmp	r6, #0
 8008be0:	9301      	str	r3, [sp, #4]
 8008be2:	d028      	beq.n	8008c36 <__d2b+0x86>
 8008be4:	4668      	mov	r0, sp
 8008be6:	9600      	str	r6, [sp, #0]
 8008be8:	f7ff fd82 	bl	80086f0 <__lo0bits>
 8008bec:	9900      	ldr	r1, [sp, #0]
 8008bee:	b300      	cbz	r0, 8008c32 <__d2b+0x82>
 8008bf0:	9a01      	ldr	r2, [sp, #4]
 8008bf2:	f1c0 0320 	rsb	r3, r0, #32
 8008bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bfa:	430b      	orrs	r3, r1
 8008bfc:	40c2      	lsrs	r2, r0
 8008bfe:	6163      	str	r3, [r4, #20]
 8008c00:	9201      	str	r2, [sp, #4]
 8008c02:	9b01      	ldr	r3, [sp, #4]
 8008c04:	61a3      	str	r3, [r4, #24]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	bf14      	ite	ne
 8008c0a:	2202      	movne	r2, #2
 8008c0c:	2201      	moveq	r2, #1
 8008c0e:	6122      	str	r2, [r4, #16]
 8008c10:	b1d5      	cbz	r5, 8008c48 <__d2b+0x98>
 8008c12:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c16:	4405      	add	r5, r0
 8008c18:	f8c9 5000 	str.w	r5, [r9]
 8008c1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c20:	f8c8 0000 	str.w	r0, [r8]
 8008c24:	4620      	mov	r0, r4
 8008c26:	b003      	add	sp, #12
 8008c28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c30:	e7d5      	b.n	8008bde <__d2b+0x2e>
 8008c32:	6161      	str	r1, [r4, #20]
 8008c34:	e7e5      	b.n	8008c02 <__d2b+0x52>
 8008c36:	a801      	add	r0, sp, #4
 8008c38:	f7ff fd5a 	bl	80086f0 <__lo0bits>
 8008c3c:	9b01      	ldr	r3, [sp, #4]
 8008c3e:	6163      	str	r3, [r4, #20]
 8008c40:	2201      	movs	r2, #1
 8008c42:	6122      	str	r2, [r4, #16]
 8008c44:	3020      	adds	r0, #32
 8008c46:	e7e3      	b.n	8008c10 <__d2b+0x60>
 8008c48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c50:	f8c9 0000 	str.w	r0, [r9]
 8008c54:	6918      	ldr	r0, [r3, #16]
 8008c56:	f7ff fd2b 	bl	80086b0 <__hi0bits>
 8008c5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c5e:	e7df      	b.n	8008c20 <__d2b+0x70>
 8008c60:	0800a03b 	.word	0x0800a03b
 8008c64:	0800a0ac 	.word	0x0800a0ac

08008c68 <_calloc_r>:
 8008c68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c6a:	fba1 2402 	umull	r2, r4, r1, r2
 8008c6e:	b94c      	cbnz	r4, 8008c84 <_calloc_r+0x1c>
 8008c70:	4611      	mov	r1, r2
 8008c72:	9201      	str	r2, [sp, #4]
 8008c74:	f000 f87a 	bl	8008d6c <_malloc_r>
 8008c78:	9a01      	ldr	r2, [sp, #4]
 8008c7a:	4605      	mov	r5, r0
 8008c7c:	b930      	cbnz	r0, 8008c8c <_calloc_r+0x24>
 8008c7e:	4628      	mov	r0, r5
 8008c80:	b003      	add	sp, #12
 8008c82:	bd30      	pop	{r4, r5, pc}
 8008c84:	220c      	movs	r2, #12
 8008c86:	6002      	str	r2, [r0, #0]
 8008c88:	2500      	movs	r5, #0
 8008c8a:	e7f8      	b.n	8008c7e <_calloc_r+0x16>
 8008c8c:	4621      	mov	r1, r4
 8008c8e:	f7fe f85d 	bl	8006d4c <memset>
 8008c92:	e7f4      	b.n	8008c7e <_calloc_r+0x16>

08008c94 <_free_r>:
 8008c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c96:	2900      	cmp	r1, #0
 8008c98:	d044      	beq.n	8008d24 <_free_r+0x90>
 8008c9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c9e:	9001      	str	r0, [sp, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f1a1 0404 	sub.w	r4, r1, #4
 8008ca6:	bfb8      	it	lt
 8008ca8:	18e4      	addlt	r4, r4, r3
 8008caa:	f000 fcdf 	bl	800966c <__malloc_lock>
 8008cae:	4a1e      	ldr	r2, [pc, #120]	; (8008d28 <_free_r+0x94>)
 8008cb0:	9801      	ldr	r0, [sp, #4]
 8008cb2:	6813      	ldr	r3, [r2, #0]
 8008cb4:	b933      	cbnz	r3, 8008cc4 <_free_r+0x30>
 8008cb6:	6063      	str	r3, [r4, #4]
 8008cb8:	6014      	str	r4, [r2, #0]
 8008cba:	b003      	add	sp, #12
 8008cbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cc0:	f000 bcda 	b.w	8009678 <__malloc_unlock>
 8008cc4:	42a3      	cmp	r3, r4
 8008cc6:	d908      	bls.n	8008cda <_free_r+0x46>
 8008cc8:	6825      	ldr	r5, [r4, #0]
 8008cca:	1961      	adds	r1, r4, r5
 8008ccc:	428b      	cmp	r3, r1
 8008cce:	bf01      	itttt	eq
 8008cd0:	6819      	ldreq	r1, [r3, #0]
 8008cd2:	685b      	ldreq	r3, [r3, #4]
 8008cd4:	1949      	addeq	r1, r1, r5
 8008cd6:	6021      	streq	r1, [r4, #0]
 8008cd8:	e7ed      	b.n	8008cb6 <_free_r+0x22>
 8008cda:	461a      	mov	r2, r3
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	b10b      	cbz	r3, 8008ce4 <_free_r+0x50>
 8008ce0:	42a3      	cmp	r3, r4
 8008ce2:	d9fa      	bls.n	8008cda <_free_r+0x46>
 8008ce4:	6811      	ldr	r1, [r2, #0]
 8008ce6:	1855      	adds	r5, r2, r1
 8008ce8:	42a5      	cmp	r5, r4
 8008cea:	d10b      	bne.n	8008d04 <_free_r+0x70>
 8008cec:	6824      	ldr	r4, [r4, #0]
 8008cee:	4421      	add	r1, r4
 8008cf0:	1854      	adds	r4, r2, r1
 8008cf2:	42a3      	cmp	r3, r4
 8008cf4:	6011      	str	r1, [r2, #0]
 8008cf6:	d1e0      	bne.n	8008cba <_free_r+0x26>
 8008cf8:	681c      	ldr	r4, [r3, #0]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	6053      	str	r3, [r2, #4]
 8008cfe:	4421      	add	r1, r4
 8008d00:	6011      	str	r1, [r2, #0]
 8008d02:	e7da      	b.n	8008cba <_free_r+0x26>
 8008d04:	d902      	bls.n	8008d0c <_free_r+0x78>
 8008d06:	230c      	movs	r3, #12
 8008d08:	6003      	str	r3, [r0, #0]
 8008d0a:	e7d6      	b.n	8008cba <_free_r+0x26>
 8008d0c:	6825      	ldr	r5, [r4, #0]
 8008d0e:	1961      	adds	r1, r4, r5
 8008d10:	428b      	cmp	r3, r1
 8008d12:	bf04      	itt	eq
 8008d14:	6819      	ldreq	r1, [r3, #0]
 8008d16:	685b      	ldreq	r3, [r3, #4]
 8008d18:	6063      	str	r3, [r4, #4]
 8008d1a:	bf04      	itt	eq
 8008d1c:	1949      	addeq	r1, r1, r5
 8008d1e:	6021      	streq	r1, [r4, #0]
 8008d20:	6054      	str	r4, [r2, #4]
 8008d22:	e7ca      	b.n	8008cba <_free_r+0x26>
 8008d24:	b003      	add	sp, #12
 8008d26:	bd30      	pop	{r4, r5, pc}
 8008d28:	20000824 	.word	0x20000824

08008d2c <sbrk_aligned>:
 8008d2c:	b570      	push	{r4, r5, r6, lr}
 8008d2e:	4e0e      	ldr	r6, [pc, #56]	; (8008d68 <sbrk_aligned+0x3c>)
 8008d30:	460c      	mov	r4, r1
 8008d32:	6831      	ldr	r1, [r6, #0]
 8008d34:	4605      	mov	r5, r0
 8008d36:	b911      	cbnz	r1, 8008d3e <sbrk_aligned+0x12>
 8008d38:	f000 f9e6 	bl	8009108 <_sbrk_r>
 8008d3c:	6030      	str	r0, [r6, #0]
 8008d3e:	4621      	mov	r1, r4
 8008d40:	4628      	mov	r0, r5
 8008d42:	f000 f9e1 	bl	8009108 <_sbrk_r>
 8008d46:	1c43      	adds	r3, r0, #1
 8008d48:	d00a      	beq.n	8008d60 <sbrk_aligned+0x34>
 8008d4a:	1cc4      	adds	r4, r0, #3
 8008d4c:	f024 0403 	bic.w	r4, r4, #3
 8008d50:	42a0      	cmp	r0, r4
 8008d52:	d007      	beq.n	8008d64 <sbrk_aligned+0x38>
 8008d54:	1a21      	subs	r1, r4, r0
 8008d56:	4628      	mov	r0, r5
 8008d58:	f000 f9d6 	bl	8009108 <_sbrk_r>
 8008d5c:	3001      	adds	r0, #1
 8008d5e:	d101      	bne.n	8008d64 <sbrk_aligned+0x38>
 8008d60:	f04f 34ff 	mov.w	r4, #4294967295
 8008d64:	4620      	mov	r0, r4
 8008d66:	bd70      	pop	{r4, r5, r6, pc}
 8008d68:	20000828 	.word	0x20000828

08008d6c <_malloc_r>:
 8008d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d70:	1ccd      	adds	r5, r1, #3
 8008d72:	f025 0503 	bic.w	r5, r5, #3
 8008d76:	3508      	adds	r5, #8
 8008d78:	2d0c      	cmp	r5, #12
 8008d7a:	bf38      	it	cc
 8008d7c:	250c      	movcc	r5, #12
 8008d7e:	2d00      	cmp	r5, #0
 8008d80:	4607      	mov	r7, r0
 8008d82:	db01      	blt.n	8008d88 <_malloc_r+0x1c>
 8008d84:	42a9      	cmp	r1, r5
 8008d86:	d905      	bls.n	8008d94 <_malloc_r+0x28>
 8008d88:	230c      	movs	r3, #12
 8008d8a:	603b      	str	r3, [r7, #0]
 8008d8c:	2600      	movs	r6, #0
 8008d8e:	4630      	mov	r0, r6
 8008d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d94:	4e2e      	ldr	r6, [pc, #184]	; (8008e50 <_malloc_r+0xe4>)
 8008d96:	f000 fc69 	bl	800966c <__malloc_lock>
 8008d9a:	6833      	ldr	r3, [r6, #0]
 8008d9c:	461c      	mov	r4, r3
 8008d9e:	bb34      	cbnz	r4, 8008dee <_malloc_r+0x82>
 8008da0:	4629      	mov	r1, r5
 8008da2:	4638      	mov	r0, r7
 8008da4:	f7ff ffc2 	bl	8008d2c <sbrk_aligned>
 8008da8:	1c43      	adds	r3, r0, #1
 8008daa:	4604      	mov	r4, r0
 8008dac:	d14d      	bne.n	8008e4a <_malloc_r+0xde>
 8008dae:	6834      	ldr	r4, [r6, #0]
 8008db0:	4626      	mov	r6, r4
 8008db2:	2e00      	cmp	r6, #0
 8008db4:	d140      	bne.n	8008e38 <_malloc_r+0xcc>
 8008db6:	6823      	ldr	r3, [r4, #0]
 8008db8:	4631      	mov	r1, r6
 8008dba:	4638      	mov	r0, r7
 8008dbc:	eb04 0803 	add.w	r8, r4, r3
 8008dc0:	f000 f9a2 	bl	8009108 <_sbrk_r>
 8008dc4:	4580      	cmp	r8, r0
 8008dc6:	d13a      	bne.n	8008e3e <_malloc_r+0xd2>
 8008dc8:	6821      	ldr	r1, [r4, #0]
 8008dca:	3503      	adds	r5, #3
 8008dcc:	1a6d      	subs	r5, r5, r1
 8008dce:	f025 0503 	bic.w	r5, r5, #3
 8008dd2:	3508      	adds	r5, #8
 8008dd4:	2d0c      	cmp	r5, #12
 8008dd6:	bf38      	it	cc
 8008dd8:	250c      	movcc	r5, #12
 8008dda:	4629      	mov	r1, r5
 8008ddc:	4638      	mov	r0, r7
 8008dde:	f7ff ffa5 	bl	8008d2c <sbrk_aligned>
 8008de2:	3001      	adds	r0, #1
 8008de4:	d02b      	beq.n	8008e3e <_malloc_r+0xd2>
 8008de6:	6823      	ldr	r3, [r4, #0]
 8008de8:	442b      	add	r3, r5
 8008dea:	6023      	str	r3, [r4, #0]
 8008dec:	e00e      	b.n	8008e0c <_malloc_r+0xa0>
 8008dee:	6822      	ldr	r2, [r4, #0]
 8008df0:	1b52      	subs	r2, r2, r5
 8008df2:	d41e      	bmi.n	8008e32 <_malloc_r+0xc6>
 8008df4:	2a0b      	cmp	r2, #11
 8008df6:	d916      	bls.n	8008e26 <_malloc_r+0xba>
 8008df8:	1961      	adds	r1, r4, r5
 8008dfa:	42a3      	cmp	r3, r4
 8008dfc:	6025      	str	r5, [r4, #0]
 8008dfe:	bf18      	it	ne
 8008e00:	6059      	strne	r1, [r3, #4]
 8008e02:	6863      	ldr	r3, [r4, #4]
 8008e04:	bf08      	it	eq
 8008e06:	6031      	streq	r1, [r6, #0]
 8008e08:	5162      	str	r2, [r4, r5]
 8008e0a:	604b      	str	r3, [r1, #4]
 8008e0c:	4638      	mov	r0, r7
 8008e0e:	f104 060b 	add.w	r6, r4, #11
 8008e12:	f000 fc31 	bl	8009678 <__malloc_unlock>
 8008e16:	f026 0607 	bic.w	r6, r6, #7
 8008e1a:	1d23      	adds	r3, r4, #4
 8008e1c:	1af2      	subs	r2, r6, r3
 8008e1e:	d0b6      	beq.n	8008d8e <_malloc_r+0x22>
 8008e20:	1b9b      	subs	r3, r3, r6
 8008e22:	50a3      	str	r3, [r4, r2]
 8008e24:	e7b3      	b.n	8008d8e <_malloc_r+0x22>
 8008e26:	6862      	ldr	r2, [r4, #4]
 8008e28:	42a3      	cmp	r3, r4
 8008e2a:	bf0c      	ite	eq
 8008e2c:	6032      	streq	r2, [r6, #0]
 8008e2e:	605a      	strne	r2, [r3, #4]
 8008e30:	e7ec      	b.n	8008e0c <_malloc_r+0xa0>
 8008e32:	4623      	mov	r3, r4
 8008e34:	6864      	ldr	r4, [r4, #4]
 8008e36:	e7b2      	b.n	8008d9e <_malloc_r+0x32>
 8008e38:	4634      	mov	r4, r6
 8008e3a:	6876      	ldr	r6, [r6, #4]
 8008e3c:	e7b9      	b.n	8008db2 <_malloc_r+0x46>
 8008e3e:	230c      	movs	r3, #12
 8008e40:	603b      	str	r3, [r7, #0]
 8008e42:	4638      	mov	r0, r7
 8008e44:	f000 fc18 	bl	8009678 <__malloc_unlock>
 8008e48:	e7a1      	b.n	8008d8e <_malloc_r+0x22>
 8008e4a:	6025      	str	r5, [r4, #0]
 8008e4c:	e7de      	b.n	8008e0c <_malloc_r+0xa0>
 8008e4e:	bf00      	nop
 8008e50:	20000824 	.word	0x20000824

08008e54 <__sfputc_r>:
 8008e54:	6893      	ldr	r3, [r2, #8]
 8008e56:	3b01      	subs	r3, #1
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	b410      	push	{r4}
 8008e5c:	6093      	str	r3, [r2, #8]
 8008e5e:	da08      	bge.n	8008e72 <__sfputc_r+0x1e>
 8008e60:	6994      	ldr	r4, [r2, #24]
 8008e62:	42a3      	cmp	r3, r4
 8008e64:	db01      	blt.n	8008e6a <__sfputc_r+0x16>
 8008e66:	290a      	cmp	r1, #10
 8008e68:	d103      	bne.n	8008e72 <__sfputc_r+0x1e>
 8008e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e6e:	f000 b99f 	b.w	80091b0 <__swbuf_r>
 8008e72:	6813      	ldr	r3, [r2, #0]
 8008e74:	1c58      	adds	r0, r3, #1
 8008e76:	6010      	str	r0, [r2, #0]
 8008e78:	7019      	strb	r1, [r3, #0]
 8008e7a:	4608      	mov	r0, r1
 8008e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <__sfputs_r>:
 8008e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e84:	4606      	mov	r6, r0
 8008e86:	460f      	mov	r7, r1
 8008e88:	4614      	mov	r4, r2
 8008e8a:	18d5      	adds	r5, r2, r3
 8008e8c:	42ac      	cmp	r4, r5
 8008e8e:	d101      	bne.n	8008e94 <__sfputs_r+0x12>
 8008e90:	2000      	movs	r0, #0
 8008e92:	e007      	b.n	8008ea4 <__sfputs_r+0x22>
 8008e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e98:	463a      	mov	r2, r7
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	f7ff ffda 	bl	8008e54 <__sfputc_r>
 8008ea0:	1c43      	adds	r3, r0, #1
 8008ea2:	d1f3      	bne.n	8008e8c <__sfputs_r+0xa>
 8008ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ea8 <_vfiprintf_r>:
 8008ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eac:	460d      	mov	r5, r1
 8008eae:	b09d      	sub	sp, #116	; 0x74
 8008eb0:	4614      	mov	r4, r2
 8008eb2:	4698      	mov	r8, r3
 8008eb4:	4606      	mov	r6, r0
 8008eb6:	b118      	cbz	r0, 8008ec0 <_vfiprintf_r+0x18>
 8008eb8:	6983      	ldr	r3, [r0, #24]
 8008eba:	b90b      	cbnz	r3, 8008ec0 <_vfiprintf_r+0x18>
 8008ebc:	f7ff faa2 	bl	8008404 <__sinit>
 8008ec0:	4b89      	ldr	r3, [pc, #548]	; (80090e8 <_vfiprintf_r+0x240>)
 8008ec2:	429d      	cmp	r5, r3
 8008ec4:	d11b      	bne.n	8008efe <_vfiprintf_r+0x56>
 8008ec6:	6875      	ldr	r5, [r6, #4]
 8008ec8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008eca:	07d9      	lsls	r1, r3, #31
 8008ecc:	d405      	bmi.n	8008eda <_vfiprintf_r+0x32>
 8008ece:	89ab      	ldrh	r3, [r5, #12]
 8008ed0:	059a      	lsls	r2, r3, #22
 8008ed2:	d402      	bmi.n	8008eda <_vfiprintf_r+0x32>
 8008ed4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ed6:	f7ff fb38 	bl	800854a <__retarget_lock_acquire_recursive>
 8008eda:	89ab      	ldrh	r3, [r5, #12]
 8008edc:	071b      	lsls	r3, r3, #28
 8008ede:	d501      	bpl.n	8008ee4 <_vfiprintf_r+0x3c>
 8008ee0:	692b      	ldr	r3, [r5, #16]
 8008ee2:	b9eb      	cbnz	r3, 8008f20 <_vfiprintf_r+0x78>
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	f000 f9c6 	bl	8009278 <__swsetup_r>
 8008eec:	b1c0      	cbz	r0, 8008f20 <_vfiprintf_r+0x78>
 8008eee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ef0:	07dc      	lsls	r4, r3, #31
 8008ef2:	d50e      	bpl.n	8008f12 <_vfiprintf_r+0x6a>
 8008ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef8:	b01d      	add	sp, #116	; 0x74
 8008efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efe:	4b7b      	ldr	r3, [pc, #492]	; (80090ec <_vfiprintf_r+0x244>)
 8008f00:	429d      	cmp	r5, r3
 8008f02:	d101      	bne.n	8008f08 <_vfiprintf_r+0x60>
 8008f04:	68b5      	ldr	r5, [r6, #8]
 8008f06:	e7df      	b.n	8008ec8 <_vfiprintf_r+0x20>
 8008f08:	4b79      	ldr	r3, [pc, #484]	; (80090f0 <_vfiprintf_r+0x248>)
 8008f0a:	429d      	cmp	r5, r3
 8008f0c:	bf08      	it	eq
 8008f0e:	68f5      	ldreq	r5, [r6, #12]
 8008f10:	e7da      	b.n	8008ec8 <_vfiprintf_r+0x20>
 8008f12:	89ab      	ldrh	r3, [r5, #12]
 8008f14:	0598      	lsls	r0, r3, #22
 8008f16:	d4ed      	bmi.n	8008ef4 <_vfiprintf_r+0x4c>
 8008f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f1a:	f7ff fb17 	bl	800854c <__retarget_lock_release_recursive>
 8008f1e:	e7e9      	b.n	8008ef4 <_vfiprintf_r+0x4c>
 8008f20:	2300      	movs	r3, #0
 8008f22:	9309      	str	r3, [sp, #36]	; 0x24
 8008f24:	2320      	movs	r3, #32
 8008f26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f2e:	2330      	movs	r3, #48	; 0x30
 8008f30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80090f4 <_vfiprintf_r+0x24c>
 8008f34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f38:	f04f 0901 	mov.w	r9, #1
 8008f3c:	4623      	mov	r3, r4
 8008f3e:	469a      	mov	sl, r3
 8008f40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f44:	b10a      	cbz	r2, 8008f4a <_vfiprintf_r+0xa2>
 8008f46:	2a25      	cmp	r2, #37	; 0x25
 8008f48:	d1f9      	bne.n	8008f3e <_vfiprintf_r+0x96>
 8008f4a:	ebba 0b04 	subs.w	fp, sl, r4
 8008f4e:	d00b      	beq.n	8008f68 <_vfiprintf_r+0xc0>
 8008f50:	465b      	mov	r3, fp
 8008f52:	4622      	mov	r2, r4
 8008f54:	4629      	mov	r1, r5
 8008f56:	4630      	mov	r0, r6
 8008f58:	f7ff ff93 	bl	8008e82 <__sfputs_r>
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	f000 80aa 	beq.w	80090b6 <_vfiprintf_r+0x20e>
 8008f62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f64:	445a      	add	r2, fp
 8008f66:	9209      	str	r2, [sp, #36]	; 0x24
 8008f68:	f89a 3000 	ldrb.w	r3, [sl]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f000 80a2 	beq.w	80090b6 <_vfiprintf_r+0x20e>
 8008f72:	2300      	movs	r3, #0
 8008f74:	f04f 32ff 	mov.w	r2, #4294967295
 8008f78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f7c:	f10a 0a01 	add.w	sl, sl, #1
 8008f80:	9304      	str	r3, [sp, #16]
 8008f82:	9307      	str	r3, [sp, #28]
 8008f84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f88:	931a      	str	r3, [sp, #104]	; 0x68
 8008f8a:	4654      	mov	r4, sl
 8008f8c:	2205      	movs	r2, #5
 8008f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f92:	4858      	ldr	r0, [pc, #352]	; (80090f4 <_vfiprintf_r+0x24c>)
 8008f94:	f7f7 f924 	bl	80001e0 <memchr>
 8008f98:	9a04      	ldr	r2, [sp, #16]
 8008f9a:	b9d8      	cbnz	r0, 8008fd4 <_vfiprintf_r+0x12c>
 8008f9c:	06d1      	lsls	r1, r2, #27
 8008f9e:	bf44      	itt	mi
 8008fa0:	2320      	movmi	r3, #32
 8008fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fa6:	0713      	lsls	r3, r2, #28
 8008fa8:	bf44      	itt	mi
 8008faa:	232b      	movmi	r3, #43	; 0x2b
 8008fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8008fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8008fb6:	d015      	beq.n	8008fe4 <_vfiprintf_r+0x13c>
 8008fb8:	9a07      	ldr	r2, [sp, #28]
 8008fba:	4654      	mov	r4, sl
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	f04f 0c0a 	mov.w	ip, #10
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fc8:	3b30      	subs	r3, #48	; 0x30
 8008fca:	2b09      	cmp	r3, #9
 8008fcc:	d94e      	bls.n	800906c <_vfiprintf_r+0x1c4>
 8008fce:	b1b0      	cbz	r0, 8008ffe <_vfiprintf_r+0x156>
 8008fd0:	9207      	str	r2, [sp, #28]
 8008fd2:	e014      	b.n	8008ffe <_vfiprintf_r+0x156>
 8008fd4:	eba0 0308 	sub.w	r3, r0, r8
 8008fd8:	fa09 f303 	lsl.w	r3, r9, r3
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	9304      	str	r3, [sp, #16]
 8008fe0:	46a2      	mov	sl, r4
 8008fe2:	e7d2      	b.n	8008f8a <_vfiprintf_r+0xe2>
 8008fe4:	9b03      	ldr	r3, [sp, #12]
 8008fe6:	1d19      	adds	r1, r3, #4
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	9103      	str	r1, [sp, #12]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	bfbb      	ittet	lt
 8008ff0:	425b      	neglt	r3, r3
 8008ff2:	f042 0202 	orrlt.w	r2, r2, #2
 8008ff6:	9307      	strge	r3, [sp, #28]
 8008ff8:	9307      	strlt	r3, [sp, #28]
 8008ffa:	bfb8      	it	lt
 8008ffc:	9204      	strlt	r2, [sp, #16]
 8008ffe:	7823      	ldrb	r3, [r4, #0]
 8009000:	2b2e      	cmp	r3, #46	; 0x2e
 8009002:	d10c      	bne.n	800901e <_vfiprintf_r+0x176>
 8009004:	7863      	ldrb	r3, [r4, #1]
 8009006:	2b2a      	cmp	r3, #42	; 0x2a
 8009008:	d135      	bne.n	8009076 <_vfiprintf_r+0x1ce>
 800900a:	9b03      	ldr	r3, [sp, #12]
 800900c:	1d1a      	adds	r2, r3, #4
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	9203      	str	r2, [sp, #12]
 8009012:	2b00      	cmp	r3, #0
 8009014:	bfb8      	it	lt
 8009016:	f04f 33ff 	movlt.w	r3, #4294967295
 800901a:	3402      	adds	r4, #2
 800901c:	9305      	str	r3, [sp, #20]
 800901e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009104 <_vfiprintf_r+0x25c>
 8009022:	7821      	ldrb	r1, [r4, #0]
 8009024:	2203      	movs	r2, #3
 8009026:	4650      	mov	r0, sl
 8009028:	f7f7 f8da 	bl	80001e0 <memchr>
 800902c:	b140      	cbz	r0, 8009040 <_vfiprintf_r+0x198>
 800902e:	2340      	movs	r3, #64	; 0x40
 8009030:	eba0 000a 	sub.w	r0, r0, sl
 8009034:	fa03 f000 	lsl.w	r0, r3, r0
 8009038:	9b04      	ldr	r3, [sp, #16]
 800903a:	4303      	orrs	r3, r0
 800903c:	3401      	adds	r4, #1
 800903e:	9304      	str	r3, [sp, #16]
 8009040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009044:	482c      	ldr	r0, [pc, #176]	; (80090f8 <_vfiprintf_r+0x250>)
 8009046:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800904a:	2206      	movs	r2, #6
 800904c:	f7f7 f8c8 	bl	80001e0 <memchr>
 8009050:	2800      	cmp	r0, #0
 8009052:	d03f      	beq.n	80090d4 <_vfiprintf_r+0x22c>
 8009054:	4b29      	ldr	r3, [pc, #164]	; (80090fc <_vfiprintf_r+0x254>)
 8009056:	bb1b      	cbnz	r3, 80090a0 <_vfiprintf_r+0x1f8>
 8009058:	9b03      	ldr	r3, [sp, #12]
 800905a:	3307      	adds	r3, #7
 800905c:	f023 0307 	bic.w	r3, r3, #7
 8009060:	3308      	adds	r3, #8
 8009062:	9303      	str	r3, [sp, #12]
 8009064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009066:	443b      	add	r3, r7
 8009068:	9309      	str	r3, [sp, #36]	; 0x24
 800906a:	e767      	b.n	8008f3c <_vfiprintf_r+0x94>
 800906c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009070:	460c      	mov	r4, r1
 8009072:	2001      	movs	r0, #1
 8009074:	e7a5      	b.n	8008fc2 <_vfiprintf_r+0x11a>
 8009076:	2300      	movs	r3, #0
 8009078:	3401      	adds	r4, #1
 800907a:	9305      	str	r3, [sp, #20]
 800907c:	4619      	mov	r1, r3
 800907e:	f04f 0c0a 	mov.w	ip, #10
 8009082:	4620      	mov	r0, r4
 8009084:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009088:	3a30      	subs	r2, #48	; 0x30
 800908a:	2a09      	cmp	r2, #9
 800908c:	d903      	bls.n	8009096 <_vfiprintf_r+0x1ee>
 800908e:	2b00      	cmp	r3, #0
 8009090:	d0c5      	beq.n	800901e <_vfiprintf_r+0x176>
 8009092:	9105      	str	r1, [sp, #20]
 8009094:	e7c3      	b.n	800901e <_vfiprintf_r+0x176>
 8009096:	fb0c 2101 	mla	r1, ip, r1, r2
 800909a:	4604      	mov	r4, r0
 800909c:	2301      	movs	r3, #1
 800909e:	e7f0      	b.n	8009082 <_vfiprintf_r+0x1da>
 80090a0:	ab03      	add	r3, sp, #12
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	462a      	mov	r2, r5
 80090a6:	4b16      	ldr	r3, [pc, #88]	; (8009100 <_vfiprintf_r+0x258>)
 80090a8:	a904      	add	r1, sp, #16
 80090aa:	4630      	mov	r0, r6
 80090ac:	f7fd fef6 	bl	8006e9c <_printf_float>
 80090b0:	4607      	mov	r7, r0
 80090b2:	1c78      	adds	r0, r7, #1
 80090b4:	d1d6      	bne.n	8009064 <_vfiprintf_r+0x1bc>
 80090b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090b8:	07d9      	lsls	r1, r3, #31
 80090ba:	d405      	bmi.n	80090c8 <_vfiprintf_r+0x220>
 80090bc:	89ab      	ldrh	r3, [r5, #12]
 80090be:	059a      	lsls	r2, r3, #22
 80090c0:	d402      	bmi.n	80090c8 <_vfiprintf_r+0x220>
 80090c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090c4:	f7ff fa42 	bl	800854c <__retarget_lock_release_recursive>
 80090c8:	89ab      	ldrh	r3, [r5, #12]
 80090ca:	065b      	lsls	r3, r3, #25
 80090cc:	f53f af12 	bmi.w	8008ef4 <_vfiprintf_r+0x4c>
 80090d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090d2:	e711      	b.n	8008ef8 <_vfiprintf_r+0x50>
 80090d4:	ab03      	add	r3, sp, #12
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	462a      	mov	r2, r5
 80090da:	4b09      	ldr	r3, [pc, #36]	; (8009100 <_vfiprintf_r+0x258>)
 80090dc:	a904      	add	r1, sp, #16
 80090de:	4630      	mov	r0, r6
 80090e0:	f7fe f980 	bl	80073e4 <_printf_i>
 80090e4:	e7e4      	b.n	80090b0 <_vfiprintf_r+0x208>
 80090e6:	bf00      	nop
 80090e8:	0800a06c 	.word	0x0800a06c
 80090ec:	0800a08c 	.word	0x0800a08c
 80090f0:	0800a04c 	.word	0x0800a04c
 80090f4:	0800a204 	.word	0x0800a204
 80090f8:	0800a20e 	.word	0x0800a20e
 80090fc:	08006e9d 	.word	0x08006e9d
 8009100:	08008e83 	.word	0x08008e83
 8009104:	0800a20a 	.word	0x0800a20a

08009108 <_sbrk_r>:
 8009108:	b538      	push	{r3, r4, r5, lr}
 800910a:	4d06      	ldr	r5, [pc, #24]	; (8009124 <_sbrk_r+0x1c>)
 800910c:	2300      	movs	r3, #0
 800910e:	4604      	mov	r4, r0
 8009110:	4608      	mov	r0, r1
 8009112:	602b      	str	r3, [r5, #0]
 8009114:	f7f8 fbf8 	bl	8001908 <_sbrk>
 8009118:	1c43      	adds	r3, r0, #1
 800911a:	d102      	bne.n	8009122 <_sbrk_r+0x1a>
 800911c:	682b      	ldr	r3, [r5, #0]
 800911e:	b103      	cbz	r3, 8009122 <_sbrk_r+0x1a>
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	bd38      	pop	{r3, r4, r5, pc}
 8009124:	2000082c 	.word	0x2000082c

08009128 <__sread>:
 8009128:	b510      	push	{r4, lr}
 800912a:	460c      	mov	r4, r1
 800912c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009130:	f000 faa8 	bl	8009684 <_read_r>
 8009134:	2800      	cmp	r0, #0
 8009136:	bfab      	itete	ge
 8009138:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800913a:	89a3      	ldrhlt	r3, [r4, #12]
 800913c:	181b      	addge	r3, r3, r0
 800913e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009142:	bfac      	ite	ge
 8009144:	6563      	strge	r3, [r4, #84]	; 0x54
 8009146:	81a3      	strhlt	r3, [r4, #12]
 8009148:	bd10      	pop	{r4, pc}

0800914a <__swrite>:
 800914a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800914e:	461f      	mov	r7, r3
 8009150:	898b      	ldrh	r3, [r1, #12]
 8009152:	05db      	lsls	r3, r3, #23
 8009154:	4605      	mov	r5, r0
 8009156:	460c      	mov	r4, r1
 8009158:	4616      	mov	r6, r2
 800915a:	d505      	bpl.n	8009168 <__swrite+0x1e>
 800915c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009160:	2302      	movs	r3, #2
 8009162:	2200      	movs	r2, #0
 8009164:	f000 f9f8 	bl	8009558 <_lseek_r>
 8009168:	89a3      	ldrh	r3, [r4, #12]
 800916a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800916e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009172:	81a3      	strh	r3, [r4, #12]
 8009174:	4632      	mov	r2, r6
 8009176:	463b      	mov	r3, r7
 8009178:	4628      	mov	r0, r5
 800917a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800917e:	f000 b869 	b.w	8009254 <_write_r>

08009182 <__sseek>:
 8009182:	b510      	push	{r4, lr}
 8009184:	460c      	mov	r4, r1
 8009186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800918a:	f000 f9e5 	bl	8009558 <_lseek_r>
 800918e:	1c43      	adds	r3, r0, #1
 8009190:	89a3      	ldrh	r3, [r4, #12]
 8009192:	bf15      	itete	ne
 8009194:	6560      	strne	r0, [r4, #84]	; 0x54
 8009196:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800919a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800919e:	81a3      	strheq	r3, [r4, #12]
 80091a0:	bf18      	it	ne
 80091a2:	81a3      	strhne	r3, [r4, #12]
 80091a4:	bd10      	pop	{r4, pc}

080091a6 <__sclose>:
 80091a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091aa:	f000 b8f1 	b.w	8009390 <_close_r>
	...

080091b0 <__swbuf_r>:
 80091b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b2:	460e      	mov	r6, r1
 80091b4:	4614      	mov	r4, r2
 80091b6:	4605      	mov	r5, r0
 80091b8:	b118      	cbz	r0, 80091c2 <__swbuf_r+0x12>
 80091ba:	6983      	ldr	r3, [r0, #24]
 80091bc:	b90b      	cbnz	r3, 80091c2 <__swbuf_r+0x12>
 80091be:	f7ff f921 	bl	8008404 <__sinit>
 80091c2:	4b21      	ldr	r3, [pc, #132]	; (8009248 <__swbuf_r+0x98>)
 80091c4:	429c      	cmp	r4, r3
 80091c6:	d12b      	bne.n	8009220 <__swbuf_r+0x70>
 80091c8:	686c      	ldr	r4, [r5, #4]
 80091ca:	69a3      	ldr	r3, [r4, #24]
 80091cc:	60a3      	str	r3, [r4, #8]
 80091ce:	89a3      	ldrh	r3, [r4, #12]
 80091d0:	071a      	lsls	r2, r3, #28
 80091d2:	d52f      	bpl.n	8009234 <__swbuf_r+0x84>
 80091d4:	6923      	ldr	r3, [r4, #16]
 80091d6:	b36b      	cbz	r3, 8009234 <__swbuf_r+0x84>
 80091d8:	6923      	ldr	r3, [r4, #16]
 80091da:	6820      	ldr	r0, [r4, #0]
 80091dc:	1ac0      	subs	r0, r0, r3
 80091de:	6963      	ldr	r3, [r4, #20]
 80091e0:	b2f6      	uxtb	r6, r6
 80091e2:	4283      	cmp	r3, r0
 80091e4:	4637      	mov	r7, r6
 80091e6:	dc04      	bgt.n	80091f2 <__swbuf_r+0x42>
 80091e8:	4621      	mov	r1, r4
 80091ea:	4628      	mov	r0, r5
 80091ec:	f000 f966 	bl	80094bc <_fflush_r>
 80091f0:	bb30      	cbnz	r0, 8009240 <__swbuf_r+0x90>
 80091f2:	68a3      	ldr	r3, [r4, #8]
 80091f4:	3b01      	subs	r3, #1
 80091f6:	60a3      	str	r3, [r4, #8]
 80091f8:	6823      	ldr	r3, [r4, #0]
 80091fa:	1c5a      	adds	r2, r3, #1
 80091fc:	6022      	str	r2, [r4, #0]
 80091fe:	701e      	strb	r6, [r3, #0]
 8009200:	6963      	ldr	r3, [r4, #20]
 8009202:	3001      	adds	r0, #1
 8009204:	4283      	cmp	r3, r0
 8009206:	d004      	beq.n	8009212 <__swbuf_r+0x62>
 8009208:	89a3      	ldrh	r3, [r4, #12]
 800920a:	07db      	lsls	r3, r3, #31
 800920c:	d506      	bpl.n	800921c <__swbuf_r+0x6c>
 800920e:	2e0a      	cmp	r6, #10
 8009210:	d104      	bne.n	800921c <__swbuf_r+0x6c>
 8009212:	4621      	mov	r1, r4
 8009214:	4628      	mov	r0, r5
 8009216:	f000 f951 	bl	80094bc <_fflush_r>
 800921a:	b988      	cbnz	r0, 8009240 <__swbuf_r+0x90>
 800921c:	4638      	mov	r0, r7
 800921e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009220:	4b0a      	ldr	r3, [pc, #40]	; (800924c <__swbuf_r+0x9c>)
 8009222:	429c      	cmp	r4, r3
 8009224:	d101      	bne.n	800922a <__swbuf_r+0x7a>
 8009226:	68ac      	ldr	r4, [r5, #8]
 8009228:	e7cf      	b.n	80091ca <__swbuf_r+0x1a>
 800922a:	4b09      	ldr	r3, [pc, #36]	; (8009250 <__swbuf_r+0xa0>)
 800922c:	429c      	cmp	r4, r3
 800922e:	bf08      	it	eq
 8009230:	68ec      	ldreq	r4, [r5, #12]
 8009232:	e7ca      	b.n	80091ca <__swbuf_r+0x1a>
 8009234:	4621      	mov	r1, r4
 8009236:	4628      	mov	r0, r5
 8009238:	f000 f81e 	bl	8009278 <__swsetup_r>
 800923c:	2800      	cmp	r0, #0
 800923e:	d0cb      	beq.n	80091d8 <__swbuf_r+0x28>
 8009240:	f04f 37ff 	mov.w	r7, #4294967295
 8009244:	e7ea      	b.n	800921c <__swbuf_r+0x6c>
 8009246:	bf00      	nop
 8009248:	0800a06c 	.word	0x0800a06c
 800924c:	0800a08c 	.word	0x0800a08c
 8009250:	0800a04c 	.word	0x0800a04c

08009254 <_write_r>:
 8009254:	b538      	push	{r3, r4, r5, lr}
 8009256:	4d07      	ldr	r5, [pc, #28]	; (8009274 <_write_r+0x20>)
 8009258:	4604      	mov	r4, r0
 800925a:	4608      	mov	r0, r1
 800925c:	4611      	mov	r1, r2
 800925e:	2200      	movs	r2, #0
 8009260:	602a      	str	r2, [r5, #0]
 8009262:	461a      	mov	r2, r3
 8009264:	f7f8 faff 	bl	8001866 <_write>
 8009268:	1c43      	adds	r3, r0, #1
 800926a:	d102      	bne.n	8009272 <_write_r+0x1e>
 800926c:	682b      	ldr	r3, [r5, #0]
 800926e:	b103      	cbz	r3, 8009272 <_write_r+0x1e>
 8009270:	6023      	str	r3, [r4, #0]
 8009272:	bd38      	pop	{r3, r4, r5, pc}
 8009274:	2000082c 	.word	0x2000082c

08009278 <__swsetup_r>:
 8009278:	4b32      	ldr	r3, [pc, #200]	; (8009344 <__swsetup_r+0xcc>)
 800927a:	b570      	push	{r4, r5, r6, lr}
 800927c:	681d      	ldr	r5, [r3, #0]
 800927e:	4606      	mov	r6, r0
 8009280:	460c      	mov	r4, r1
 8009282:	b125      	cbz	r5, 800928e <__swsetup_r+0x16>
 8009284:	69ab      	ldr	r3, [r5, #24]
 8009286:	b913      	cbnz	r3, 800928e <__swsetup_r+0x16>
 8009288:	4628      	mov	r0, r5
 800928a:	f7ff f8bb 	bl	8008404 <__sinit>
 800928e:	4b2e      	ldr	r3, [pc, #184]	; (8009348 <__swsetup_r+0xd0>)
 8009290:	429c      	cmp	r4, r3
 8009292:	d10f      	bne.n	80092b4 <__swsetup_r+0x3c>
 8009294:	686c      	ldr	r4, [r5, #4]
 8009296:	89a3      	ldrh	r3, [r4, #12]
 8009298:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800929c:	0719      	lsls	r1, r3, #28
 800929e:	d42c      	bmi.n	80092fa <__swsetup_r+0x82>
 80092a0:	06dd      	lsls	r5, r3, #27
 80092a2:	d411      	bmi.n	80092c8 <__swsetup_r+0x50>
 80092a4:	2309      	movs	r3, #9
 80092a6:	6033      	str	r3, [r6, #0]
 80092a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80092ac:	81a3      	strh	r3, [r4, #12]
 80092ae:	f04f 30ff 	mov.w	r0, #4294967295
 80092b2:	e03e      	b.n	8009332 <__swsetup_r+0xba>
 80092b4:	4b25      	ldr	r3, [pc, #148]	; (800934c <__swsetup_r+0xd4>)
 80092b6:	429c      	cmp	r4, r3
 80092b8:	d101      	bne.n	80092be <__swsetup_r+0x46>
 80092ba:	68ac      	ldr	r4, [r5, #8]
 80092bc:	e7eb      	b.n	8009296 <__swsetup_r+0x1e>
 80092be:	4b24      	ldr	r3, [pc, #144]	; (8009350 <__swsetup_r+0xd8>)
 80092c0:	429c      	cmp	r4, r3
 80092c2:	bf08      	it	eq
 80092c4:	68ec      	ldreq	r4, [r5, #12]
 80092c6:	e7e6      	b.n	8009296 <__swsetup_r+0x1e>
 80092c8:	0758      	lsls	r0, r3, #29
 80092ca:	d512      	bpl.n	80092f2 <__swsetup_r+0x7a>
 80092cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092ce:	b141      	cbz	r1, 80092e2 <__swsetup_r+0x6a>
 80092d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092d4:	4299      	cmp	r1, r3
 80092d6:	d002      	beq.n	80092de <__swsetup_r+0x66>
 80092d8:	4630      	mov	r0, r6
 80092da:	f7ff fcdb 	bl	8008c94 <_free_r>
 80092de:	2300      	movs	r3, #0
 80092e0:	6363      	str	r3, [r4, #52]	; 0x34
 80092e2:	89a3      	ldrh	r3, [r4, #12]
 80092e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80092e8:	81a3      	strh	r3, [r4, #12]
 80092ea:	2300      	movs	r3, #0
 80092ec:	6063      	str	r3, [r4, #4]
 80092ee:	6923      	ldr	r3, [r4, #16]
 80092f0:	6023      	str	r3, [r4, #0]
 80092f2:	89a3      	ldrh	r3, [r4, #12]
 80092f4:	f043 0308 	orr.w	r3, r3, #8
 80092f8:	81a3      	strh	r3, [r4, #12]
 80092fa:	6923      	ldr	r3, [r4, #16]
 80092fc:	b94b      	cbnz	r3, 8009312 <__swsetup_r+0x9a>
 80092fe:	89a3      	ldrh	r3, [r4, #12]
 8009300:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009308:	d003      	beq.n	8009312 <__swsetup_r+0x9a>
 800930a:	4621      	mov	r1, r4
 800930c:	4630      	mov	r0, r6
 800930e:	f000 f95b 	bl	80095c8 <__smakebuf_r>
 8009312:	89a0      	ldrh	r0, [r4, #12]
 8009314:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009318:	f010 0301 	ands.w	r3, r0, #1
 800931c:	d00a      	beq.n	8009334 <__swsetup_r+0xbc>
 800931e:	2300      	movs	r3, #0
 8009320:	60a3      	str	r3, [r4, #8]
 8009322:	6963      	ldr	r3, [r4, #20]
 8009324:	425b      	negs	r3, r3
 8009326:	61a3      	str	r3, [r4, #24]
 8009328:	6923      	ldr	r3, [r4, #16]
 800932a:	b943      	cbnz	r3, 800933e <__swsetup_r+0xc6>
 800932c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009330:	d1ba      	bne.n	80092a8 <__swsetup_r+0x30>
 8009332:	bd70      	pop	{r4, r5, r6, pc}
 8009334:	0781      	lsls	r1, r0, #30
 8009336:	bf58      	it	pl
 8009338:	6963      	ldrpl	r3, [r4, #20]
 800933a:	60a3      	str	r3, [r4, #8]
 800933c:	e7f4      	b.n	8009328 <__swsetup_r+0xb0>
 800933e:	2000      	movs	r0, #0
 8009340:	e7f7      	b.n	8009332 <__swsetup_r+0xba>
 8009342:	bf00      	nop
 8009344:	20000018 	.word	0x20000018
 8009348:	0800a06c 	.word	0x0800a06c
 800934c:	0800a08c 	.word	0x0800a08c
 8009350:	0800a04c 	.word	0x0800a04c

08009354 <__assert_func>:
 8009354:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009356:	4614      	mov	r4, r2
 8009358:	461a      	mov	r2, r3
 800935a:	4b09      	ldr	r3, [pc, #36]	; (8009380 <__assert_func+0x2c>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4605      	mov	r5, r0
 8009360:	68d8      	ldr	r0, [r3, #12]
 8009362:	b14c      	cbz	r4, 8009378 <__assert_func+0x24>
 8009364:	4b07      	ldr	r3, [pc, #28]	; (8009384 <__assert_func+0x30>)
 8009366:	9100      	str	r1, [sp, #0]
 8009368:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800936c:	4906      	ldr	r1, [pc, #24]	; (8009388 <__assert_func+0x34>)
 800936e:	462b      	mov	r3, r5
 8009370:	f000 f8e0 	bl	8009534 <fiprintf>
 8009374:	f000 f9a5 	bl	80096c2 <abort>
 8009378:	4b04      	ldr	r3, [pc, #16]	; (800938c <__assert_func+0x38>)
 800937a:	461c      	mov	r4, r3
 800937c:	e7f3      	b.n	8009366 <__assert_func+0x12>
 800937e:	bf00      	nop
 8009380:	20000018 	.word	0x20000018
 8009384:	0800a215 	.word	0x0800a215
 8009388:	0800a222 	.word	0x0800a222
 800938c:	0800a250 	.word	0x0800a250

08009390 <_close_r>:
 8009390:	b538      	push	{r3, r4, r5, lr}
 8009392:	4d06      	ldr	r5, [pc, #24]	; (80093ac <_close_r+0x1c>)
 8009394:	2300      	movs	r3, #0
 8009396:	4604      	mov	r4, r0
 8009398:	4608      	mov	r0, r1
 800939a:	602b      	str	r3, [r5, #0]
 800939c:	f7f8 fa7f 	bl	800189e <_close>
 80093a0:	1c43      	adds	r3, r0, #1
 80093a2:	d102      	bne.n	80093aa <_close_r+0x1a>
 80093a4:	682b      	ldr	r3, [r5, #0]
 80093a6:	b103      	cbz	r3, 80093aa <_close_r+0x1a>
 80093a8:	6023      	str	r3, [r4, #0]
 80093aa:	bd38      	pop	{r3, r4, r5, pc}
 80093ac:	2000082c 	.word	0x2000082c

080093b0 <__sflush_r>:
 80093b0:	898a      	ldrh	r2, [r1, #12]
 80093b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093b6:	4605      	mov	r5, r0
 80093b8:	0710      	lsls	r0, r2, #28
 80093ba:	460c      	mov	r4, r1
 80093bc:	d458      	bmi.n	8009470 <__sflush_r+0xc0>
 80093be:	684b      	ldr	r3, [r1, #4]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	dc05      	bgt.n	80093d0 <__sflush_r+0x20>
 80093c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	dc02      	bgt.n	80093d0 <__sflush_r+0x20>
 80093ca:	2000      	movs	r0, #0
 80093cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093d2:	2e00      	cmp	r6, #0
 80093d4:	d0f9      	beq.n	80093ca <__sflush_r+0x1a>
 80093d6:	2300      	movs	r3, #0
 80093d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80093dc:	682f      	ldr	r7, [r5, #0]
 80093de:	602b      	str	r3, [r5, #0]
 80093e0:	d032      	beq.n	8009448 <__sflush_r+0x98>
 80093e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80093e4:	89a3      	ldrh	r3, [r4, #12]
 80093e6:	075a      	lsls	r2, r3, #29
 80093e8:	d505      	bpl.n	80093f6 <__sflush_r+0x46>
 80093ea:	6863      	ldr	r3, [r4, #4]
 80093ec:	1ac0      	subs	r0, r0, r3
 80093ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80093f0:	b10b      	cbz	r3, 80093f6 <__sflush_r+0x46>
 80093f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80093f4:	1ac0      	subs	r0, r0, r3
 80093f6:	2300      	movs	r3, #0
 80093f8:	4602      	mov	r2, r0
 80093fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093fc:	6a21      	ldr	r1, [r4, #32]
 80093fe:	4628      	mov	r0, r5
 8009400:	47b0      	blx	r6
 8009402:	1c43      	adds	r3, r0, #1
 8009404:	89a3      	ldrh	r3, [r4, #12]
 8009406:	d106      	bne.n	8009416 <__sflush_r+0x66>
 8009408:	6829      	ldr	r1, [r5, #0]
 800940a:	291d      	cmp	r1, #29
 800940c:	d82c      	bhi.n	8009468 <__sflush_r+0xb8>
 800940e:	4a2a      	ldr	r2, [pc, #168]	; (80094b8 <__sflush_r+0x108>)
 8009410:	40ca      	lsrs	r2, r1
 8009412:	07d6      	lsls	r6, r2, #31
 8009414:	d528      	bpl.n	8009468 <__sflush_r+0xb8>
 8009416:	2200      	movs	r2, #0
 8009418:	6062      	str	r2, [r4, #4]
 800941a:	04d9      	lsls	r1, r3, #19
 800941c:	6922      	ldr	r2, [r4, #16]
 800941e:	6022      	str	r2, [r4, #0]
 8009420:	d504      	bpl.n	800942c <__sflush_r+0x7c>
 8009422:	1c42      	adds	r2, r0, #1
 8009424:	d101      	bne.n	800942a <__sflush_r+0x7a>
 8009426:	682b      	ldr	r3, [r5, #0]
 8009428:	b903      	cbnz	r3, 800942c <__sflush_r+0x7c>
 800942a:	6560      	str	r0, [r4, #84]	; 0x54
 800942c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800942e:	602f      	str	r7, [r5, #0]
 8009430:	2900      	cmp	r1, #0
 8009432:	d0ca      	beq.n	80093ca <__sflush_r+0x1a>
 8009434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009438:	4299      	cmp	r1, r3
 800943a:	d002      	beq.n	8009442 <__sflush_r+0x92>
 800943c:	4628      	mov	r0, r5
 800943e:	f7ff fc29 	bl	8008c94 <_free_r>
 8009442:	2000      	movs	r0, #0
 8009444:	6360      	str	r0, [r4, #52]	; 0x34
 8009446:	e7c1      	b.n	80093cc <__sflush_r+0x1c>
 8009448:	6a21      	ldr	r1, [r4, #32]
 800944a:	2301      	movs	r3, #1
 800944c:	4628      	mov	r0, r5
 800944e:	47b0      	blx	r6
 8009450:	1c41      	adds	r1, r0, #1
 8009452:	d1c7      	bne.n	80093e4 <__sflush_r+0x34>
 8009454:	682b      	ldr	r3, [r5, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d0c4      	beq.n	80093e4 <__sflush_r+0x34>
 800945a:	2b1d      	cmp	r3, #29
 800945c:	d001      	beq.n	8009462 <__sflush_r+0xb2>
 800945e:	2b16      	cmp	r3, #22
 8009460:	d101      	bne.n	8009466 <__sflush_r+0xb6>
 8009462:	602f      	str	r7, [r5, #0]
 8009464:	e7b1      	b.n	80093ca <__sflush_r+0x1a>
 8009466:	89a3      	ldrh	r3, [r4, #12]
 8009468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800946c:	81a3      	strh	r3, [r4, #12]
 800946e:	e7ad      	b.n	80093cc <__sflush_r+0x1c>
 8009470:	690f      	ldr	r7, [r1, #16]
 8009472:	2f00      	cmp	r7, #0
 8009474:	d0a9      	beq.n	80093ca <__sflush_r+0x1a>
 8009476:	0793      	lsls	r3, r2, #30
 8009478:	680e      	ldr	r6, [r1, #0]
 800947a:	bf08      	it	eq
 800947c:	694b      	ldreq	r3, [r1, #20]
 800947e:	600f      	str	r7, [r1, #0]
 8009480:	bf18      	it	ne
 8009482:	2300      	movne	r3, #0
 8009484:	eba6 0807 	sub.w	r8, r6, r7
 8009488:	608b      	str	r3, [r1, #8]
 800948a:	f1b8 0f00 	cmp.w	r8, #0
 800948e:	dd9c      	ble.n	80093ca <__sflush_r+0x1a>
 8009490:	6a21      	ldr	r1, [r4, #32]
 8009492:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009494:	4643      	mov	r3, r8
 8009496:	463a      	mov	r2, r7
 8009498:	4628      	mov	r0, r5
 800949a:	47b0      	blx	r6
 800949c:	2800      	cmp	r0, #0
 800949e:	dc06      	bgt.n	80094ae <__sflush_r+0xfe>
 80094a0:	89a3      	ldrh	r3, [r4, #12]
 80094a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094a6:	81a3      	strh	r3, [r4, #12]
 80094a8:	f04f 30ff 	mov.w	r0, #4294967295
 80094ac:	e78e      	b.n	80093cc <__sflush_r+0x1c>
 80094ae:	4407      	add	r7, r0
 80094b0:	eba8 0800 	sub.w	r8, r8, r0
 80094b4:	e7e9      	b.n	800948a <__sflush_r+0xda>
 80094b6:	bf00      	nop
 80094b8:	20400001 	.word	0x20400001

080094bc <_fflush_r>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	690b      	ldr	r3, [r1, #16]
 80094c0:	4605      	mov	r5, r0
 80094c2:	460c      	mov	r4, r1
 80094c4:	b913      	cbnz	r3, 80094cc <_fflush_r+0x10>
 80094c6:	2500      	movs	r5, #0
 80094c8:	4628      	mov	r0, r5
 80094ca:	bd38      	pop	{r3, r4, r5, pc}
 80094cc:	b118      	cbz	r0, 80094d6 <_fflush_r+0x1a>
 80094ce:	6983      	ldr	r3, [r0, #24]
 80094d0:	b90b      	cbnz	r3, 80094d6 <_fflush_r+0x1a>
 80094d2:	f7fe ff97 	bl	8008404 <__sinit>
 80094d6:	4b14      	ldr	r3, [pc, #80]	; (8009528 <_fflush_r+0x6c>)
 80094d8:	429c      	cmp	r4, r3
 80094da:	d11b      	bne.n	8009514 <_fflush_r+0x58>
 80094dc:	686c      	ldr	r4, [r5, #4]
 80094de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d0ef      	beq.n	80094c6 <_fflush_r+0xa>
 80094e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80094e8:	07d0      	lsls	r0, r2, #31
 80094ea:	d404      	bmi.n	80094f6 <_fflush_r+0x3a>
 80094ec:	0599      	lsls	r1, r3, #22
 80094ee:	d402      	bmi.n	80094f6 <_fflush_r+0x3a>
 80094f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094f2:	f7ff f82a 	bl	800854a <__retarget_lock_acquire_recursive>
 80094f6:	4628      	mov	r0, r5
 80094f8:	4621      	mov	r1, r4
 80094fa:	f7ff ff59 	bl	80093b0 <__sflush_r>
 80094fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009500:	07da      	lsls	r2, r3, #31
 8009502:	4605      	mov	r5, r0
 8009504:	d4e0      	bmi.n	80094c8 <_fflush_r+0xc>
 8009506:	89a3      	ldrh	r3, [r4, #12]
 8009508:	059b      	lsls	r3, r3, #22
 800950a:	d4dd      	bmi.n	80094c8 <_fflush_r+0xc>
 800950c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800950e:	f7ff f81d 	bl	800854c <__retarget_lock_release_recursive>
 8009512:	e7d9      	b.n	80094c8 <_fflush_r+0xc>
 8009514:	4b05      	ldr	r3, [pc, #20]	; (800952c <_fflush_r+0x70>)
 8009516:	429c      	cmp	r4, r3
 8009518:	d101      	bne.n	800951e <_fflush_r+0x62>
 800951a:	68ac      	ldr	r4, [r5, #8]
 800951c:	e7df      	b.n	80094de <_fflush_r+0x22>
 800951e:	4b04      	ldr	r3, [pc, #16]	; (8009530 <_fflush_r+0x74>)
 8009520:	429c      	cmp	r4, r3
 8009522:	bf08      	it	eq
 8009524:	68ec      	ldreq	r4, [r5, #12]
 8009526:	e7da      	b.n	80094de <_fflush_r+0x22>
 8009528:	0800a06c 	.word	0x0800a06c
 800952c:	0800a08c 	.word	0x0800a08c
 8009530:	0800a04c 	.word	0x0800a04c

08009534 <fiprintf>:
 8009534:	b40e      	push	{r1, r2, r3}
 8009536:	b503      	push	{r0, r1, lr}
 8009538:	4601      	mov	r1, r0
 800953a:	ab03      	add	r3, sp, #12
 800953c:	4805      	ldr	r0, [pc, #20]	; (8009554 <fiprintf+0x20>)
 800953e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009542:	6800      	ldr	r0, [r0, #0]
 8009544:	9301      	str	r3, [sp, #4]
 8009546:	f7ff fcaf 	bl	8008ea8 <_vfiprintf_r>
 800954a:	b002      	add	sp, #8
 800954c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009550:	b003      	add	sp, #12
 8009552:	4770      	bx	lr
 8009554:	20000018 	.word	0x20000018

08009558 <_lseek_r>:
 8009558:	b538      	push	{r3, r4, r5, lr}
 800955a:	4d07      	ldr	r5, [pc, #28]	; (8009578 <_lseek_r+0x20>)
 800955c:	4604      	mov	r4, r0
 800955e:	4608      	mov	r0, r1
 8009560:	4611      	mov	r1, r2
 8009562:	2200      	movs	r2, #0
 8009564:	602a      	str	r2, [r5, #0]
 8009566:	461a      	mov	r2, r3
 8009568:	f7f8 f9c0 	bl	80018ec <_lseek>
 800956c:	1c43      	adds	r3, r0, #1
 800956e:	d102      	bne.n	8009576 <_lseek_r+0x1e>
 8009570:	682b      	ldr	r3, [r5, #0]
 8009572:	b103      	cbz	r3, 8009576 <_lseek_r+0x1e>
 8009574:	6023      	str	r3, [r4, #0]
 8009576:	bd38      	pop	{r3, r4, r5, pc}
 8009578:	2000082c 	.word	0x2000082c

0800957c <__swhatbuf_r>:
 800957c:	b570      	push	{r4, r5, r6, lr}
 800957e:	460e      	mov	r6, r1
 8009580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009584:	2900      	cmp	r1, #0
 8009586:	b096      	sub	sp, #88	; 0x58
 8009588:	4614      	mov	r4, r2
 800958a:	461d      	mov	r5, r3
 800958c:	da08      	bge.n	80095a0 <__swhatbuf_r+0x24>
 800958e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	602a      	str	r2, [r5, #0]
 8009596:	061a      	lsls	r2, r3, #24
 8009598:	d410      	bmi.n	80095bc <__swhatbuf_r+0x40>
 800959a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800959e:	e00e      	b.n	80095be <__swhatbuf_r+0x42>
 80095a0:	466a      	mov	r2, sp
 80095a2:	f000 f895 	bl	80096d0 <_fstat_r>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	dbf1      	blt.n	800958e <__swhatbuf_r+0x12>
 80095aa:	9a01      	ldr	r2, [sp, #4]
 80095ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80095b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80095b4:	425a      	negs	r2, r3
 80095b6:	415a      	adcs	r2, r3
 80095b8:	602a      	str	r2, [r5, #0]
 80095ba:	e7ee      	b.n	800959a <__swhatbuf_r+0x1e>
 80095bc:	2340      	movs	r3, #64	; 0x40
 80095be:	2000      	movs	r0, #0
 80095c0:	6023      	str	r3, [r4, #0]
 80095c2:	b016      	add	sp, #88	; 0x58
 80095c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080095c8 <__smakebuf_r>:
 80095c8:	898b      	ldrh	r3, [r1, #12]
 80095ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095cc:	079d      	lsls	r5, r3, #30
 80095ce:	4606      	mov	r6, r0
 80095d0:	460c      	mov	r4, r1
 80095d2:	d507      	bpl.n	80095e4 <__smakebuf_r+0x1c>
 80095d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80095d8:	6023      	str	r3, [r4, #0]
 80095da:	6123      	str	r3, [r4, #16]
 80095dc:	2301      	movs	r3, #1
 80095de:	6163      	str	r3, [r4, #20]
 80095e0:	b002      	add	sp, #8
 80095e2:	bd70      	pop	{r4, r5, r6, pc}
 80095e4:	ab01      	add	r3, sp, #4
 80095e6:	466a      	mov	r2, sp
 80095e8:	f7ff ffc8 	bl	800957c <__swhatbuf_r>
 80095ec:	9900      	ldr	r1, [sp, #0]
 80095ee:	4605      	mov	r5, r0
 80095f0:	4630      	mov	r0, r6
 80095f2:	f7ff fbbb 	bl	8008d6c <_malloc_r>
 80095f6:	b948      	cbnz	r0, 800960c <__smakebuf_r+0x44>
 80095f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095fc:	059a      	lsls	r2, r3, #22
 80095fe:	d4ef      	bmi.n	80095e0 <__smakebuf_r+0x18>
 8009600:	f023 0303 	bic.w	r3, r3, #3
 8009604:	f043 0302 	orr.w	r3, r3, #2
 8009608:	81a3      	strh	r3, [r4, #12]
 800960a:	e7e3      	b.n	80095d4 <__smakebuf_r+0xc>
 800960c:	4b0d      	ldr	r3, [pc, #52]	; (8009644 <__smakebuf_r+0x7c>)
 800960e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009610:	89a3      	ldrh	r3, [r4, #12]
 8009612:	6020      	str	r0, [r4, #0]
 8009614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009618:	81a3      	strh	r3, [r4, #12]
 800961a:	9b00      	ldr	r3, [sp, #0]
 800961c:	6163      	str	r3, [r4, #20]
 800961e:	9b01      	ldr	r3, [sp, #4]
 8009620:	6120      	str	r0, [r4, #16]
 8009622:	b15b      	cbz	r3, 800963c <__smakebuf_r+0x74>
 8009624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009628:	4630      	mov	r0, r6
 800962a:	f000 f863 	bl	80096f4 <_isatty_r>
 800962e:	b128      	cbz	r0, 800963c <__smakebuf_r+0x74>
 8009630:	89a3      	ldrh	r3, [r4, #12]
 8009632:	f023 0303 	bic.w	r3, r3, #3
 8009636:	f043 0301 	orr.w	r3, r3, #1
 800963a:	81a3      	strh	r3, [r4, #12]
 800963c:	89a0      	ldrh	r0, [r4, #12]
 800963e:	4305      	orrs	r5, r0
 8009640:	81a5      	strh	r5, [r4, #12]
 8009642:	e7cd      	b.n	80095e0 <__smakebuf_r+0x18>
 8009644:	0800839d 	.word	0x0800839d

08009648 <__ascii_mbtowc>:
 8009648:	b082      	sub	sp, #8
 800964a:	b901      	cbnz	r1, 800964e <__ascii_mbtowc+0x6>
 800964c:	a901      	add	r1, sp, #4
 800964e:	b142      	cbz	r2, 8009662 <__ascii_mbtowc+0x1a>
 8009650:	b14b      	cbz	r3, 8009666 <__ascii_mbtowc+0x1e>
 8009652:	7813      	ldrb	r3, [r2, #0]
 8009654:	600b      	str	r3, [r1, #0]
 8009656:	7812      	ldrb	r2, [r2, #0]
 8009658:	1e10      	subs	r0, r2, #0
 800965a:	bf18      	it	ne
 800965c:	2001      	movne	r0, #1
 800965e:	b002      	add	sp, #8
 8009660:	4770      	bx	lr
 8009662:	4610      	mov	r0, r2
 8009664:	e7fb      	b.n	800965e <__ascii_mbtowc+0x16>
 8009666:	f06f 0001 	mvn.w	r0, #1
 800966a:	e7f8      	b.n	800965e <__ascii_mbtowc+0x16>

0800966c <__malloc_lock>:
 800966c:	4801      	ldr	r0, [pc, #4]	; (8009674 <__malloc_lock+0x8>)
 800966e:	f7fe bf6c 	b.w	800854a <__retarget_lock_acquire_recursive>
 8009672:	bf00      	nop
 8009674:	20000820 	.word	0x20000820

08009678 <__malloc_unlock>:
 8009678:	4801      	ldr	r0, [pc, #4]	; (8009680 <__malloc_unlock+0x8>)
 800967a:	f7fe bf67 	b.w	800854c <__retarget_lock_release_recursive>
 800967e:	bf00      	nop
 8009680:	20000820 	.word	0x20000820

08009684 <_read_r>:
 8009684:	b538      	push	{r3, r4, r5, lr}
 8009686:	4d07      	ldr	r5, [pc, #28]	; (80096a4 <_read_r+0x20>)
 8009688:	4604      	mov	r4, r0
 800968a:	4608      	mov	r0, r1
 800968c:	4611      	mov	r1, r2
 800968e:	2200      	movs	r2, #0
 8009690:	602a      	str	r2, [r5, #0]
 8009692:	461a      	mov	r2, r3
 8009694:	f7f8 f8ca 	bl	800182c <_read>
 8009698:	1c43      	adds	r3, r0, #1
 800969a:	d102      	bne.n	80096a2 <_read_r+0x1e>
 800969c:	682b      	ldr	r3, [r5, #0]
 800969e:	b103      	cbz	r3, 80096a2 <_read_r+0x1e>
 80096a0:	6023      	str	r3, [r4, #0]
 80096a2:	bd38      	pop	{r3, r4, r5, pc}
 80096a4:	2000082c 	.word	0x2000082c

080096a8 <__ascii_wctomb>:
 80096a8:	b149      	cbz	r1, 80096be <__ascii_wctomb+0x16>
 80096aa:	2aff      	cmp	r2, #255	; 0xff
 80096ac:	bf85      	ittet	hi
 80096ae:	238a      	movhi	r3, #138	; 0x8a
 80096b0:	6003      	strhi	r3, [r0, #0]
 80096b2:	700a      	strbls	r2, [r1, #0]
 80096b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80096b8:	bf98      	it	ls
 80096ba:	2001      	movls	r0, #1
 80096bc:	4770      	bx	lr
 80096be:	4608      	mov	r0, r1
 80096c0:	4770      	bx	lr

080096c2 <abort>:
 80096c2:	b508      	push	{r3, lr}
 80096c4:	2006      	movs	r0, #6
 80096c6:	f000 f84d 	bl	8009764 <raise>
 80096ca:	2001      	movs	r0, #1
 80096cc:	f7f8 f8a4 	bl	8001818 <_exit>

080096d0 <_fstat_r>:
 80096d0:	b538      	push	{r3, r4, r5, lr}
 80096d2:	4d07      	ldr	r5, [pc, #28]	; (80096f0 <_fstat_r+0x20>)
 80096d4:	2300      	movs	r3, #0
 80096d6:	4604      	mov	r4, r0
 80096d8:	4608      	mov	r0, r1
 80096da:	4611      	mov	r1, r2
 80096dc:	602b      	str	r3, [r5, #0]
 80096de:	f7f8 f8ea 	bl	80018b6 <_fstat>
 80096e2:	1c43      	adds	r3, r0, #1
 80096e4:	d102      	bne.n	80096ec <_fstat_r+0x1c>
 80096e6:	682b      	ldr	r3, [r5, #0]
 80096e8:	b103      	cbz	r3, 80096ec <_fstat_r+0x1c>
 80096ea:	6023      	str	r3, [r4, #0]
 80096ec:	bd38      	pop	{r3, r4, r5, pc}
 80096ee:	bf00      	nop
 80096f0:	2000082c 	.word	0x2000082c

080096f4 <_isatty_r>:
 80096f4:	b538      	push	{r3, r4, r5, lr}
 80096f6:	4d06      	ldr	r5, [pc, #24]	; (8009710 <_isatty_r+0x1c>)
 80096f8:	2300      	movs	r3, #0
 80096fa:	4604      	mov	r4, r0
 80096fc:	4608      	mov	r0, r1
 80096fe:	602b      	str	r3, [r5, #0]
 8009700:	f7f8 f8e9 	bl	80018d6 <_isatty>
 8009704:	1c43      	adds	r3, r0, #1
 8009706:	d102      	bne.n	800970e <_isatty_r+0x1a>
 8009708:	682b      	ldr	r3, [r5, #0]
 800970a:	b103      	cbz	r3, 800970e <_isatty_r+0x1a>
 800970c:	6023      	str	r3, [r4, #0]
 800970e:	bd38      	pop	{r3, r4, r5, pc}
 8009710:	2000082c 	.word	0x2000082c

08009714 <_raise_r>:
 8009714:	291f      	cmp	r1, #31
 8009716:	b538      	push	{r3, r4, r5, lr}
 8009718:	4604      	mov	r4, r0
 800971a:	460d      	mov	r5, r1
 800971c:	d904      	bls.n	8009728 <_raise_r+0x14>
 800971e:	2316      	movs	r3, #22
 8009720:	6003      	str	r3, [r0, #0]
 8009722:	f04f 30ff 	mov.w	r0, #4294967295
 8009726:	bd38      	pop	{r3, r4, r5, pc}
 8009728:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800972a:	b112      	cbz	r2, 8009732 <_raise_r+0x1e>
 800972c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009730:	b94b      	cbnz	r3, 8009746 <_raise_r+0x32>
 8009732:	4620      	mov	r0, r4
 8009734:	f000 f830 	bl	8009798 <_getpid_r>
 8009738:	462a      	mov	r2, r5
 800973a:	4601      	mov	r1, r0
 800973c:	4620      	mov	r0, r4
 800973e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009742:	f000 b817 	b.w	8009774 <_kill_r>
 8009746:	2b01      	cmp	r3, #1
 8009748:	d00a      	beq.n	8009760 <_raise_r+0x4c>
 800974a:	1c59      	adds	r1, r3, #1
 800974c:	d103      	bne.n	8009756 <_raise_r+0x42>
 800974e:	2316      	movs	r3, #22
 8009750:	6003      	str	r3, [r0, #0]
 8009752:	2001      	movs	r0, #1
 8009754:	e7e7      	b.n	8009726 <_raise_r+0x12>
 8009756:	2400      	movs	r4, #0
 8009758:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800975c:	4628      	mov	r0, r5
 800975e:	4798      	blx	r3
 8009760:	2000      	movs	r0, #0
 8009762:	e7e0      	b.n	8009726 <_raise_r+0x12>

08009764 <raise>:
 8009764:	4b02      	ldr	r3, [pc, #8]	; (8009770 <raise+0xc>)
 8009766:	4601      	mov	r1, r0
 8009768:	6818      	ldr	r0, [r3, #0]
 800976a:	f7ff bfd3 	b.w	8009714 <_raise_r>
 800976e:	bf00      	nop
 8009770:	20000018 	.word	0x20000018

08009774 <_kill_r>:
 8009774:	b538      	push	{r3, r4, r5, lr}
 8009776:	4d07      	ldr	r5, [pc, #28]	; (8009794 <_kill_r+0x20>)
 8009778:	2300      	movs	r3, #0
 800977a:	4604      	mov	r4, r0
 800977c:	4608      	mov	r0, r1
 800977e:	4611      	mov	r1, r2
 8009780:	602b      	str	r3, [r5, #0]
 8009782:	f7f8 f839 	bl	80017f8 <_kill>
 8009786:	1c43      	adds	r3, r0, #1
 8009788:	d102      	bne.n	8009790 <_kill_r+0x1c>
 800978a:	682b      	ldr	r3, [r5, #0]
 800978c:	b103      	cbz	r3, 8009790 <_kill_r+0x1c>
 800978e:	6023      	str	r3, [r4, #0]
 8009790:	bd38      	pop	{r3, r4, r5, pc}
 8009792:	bf00      	nop
 8009794:	2000082c 	.word	0x2000082c

08009798 <_getpid_r>:
 8009798:	f7f8 b826 	b.w	80017e8 <_getpid>

0800979c <_init>:
 800979c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979e:	bf00      	nop
 80097a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097a2:	bc08      	pop	{r3}
 80097a4:	469e      	mov	lr, r3
 80097a6:	4770      	bx	lr

080097a8 <_fini>:
 80097a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097aa:	bf00      	nop
 80097ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ae:	bc08      	pop	{r3}
 80097b0:	469e      	mov	lr, r3
 80097b2:	4770      	bx	lr
